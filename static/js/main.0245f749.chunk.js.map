{"version":3,"sources":["utils/createRandomId.js","App.js","SwarmPlayer.js","ppspp/injector.js","wrtc.js","compat/ws/index.js","ppspp/constants.js","ppspp/address.js","compat/crypto/index.js","compat/crypto/node.js","compat/crypto/browser.js","hexToUint8Array.js","compat/ws/node.js","compat/ws/browser.js","compat/wrtc/node.js","compat/wrtc/browser.js","ppspp/integrity.js","binSearch.js","Test.js","DhtGraph.js","Router.js","index.js","chunkedStream.js","loopback.js","ppspp/swarmid.js","DiagnosticMenu/index.js","client.js","ema.js","RingBuffer.js","ledbat.js","ppspp/encoding.js","bitarray.js","wfq.js","ppspp/scheduler.js","ppspp/index.js","dht.js","ppspp/uri.js","PlayButton.js","compat/wrtc/index.js"],"names":["crypto__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","crypto__WEBPACK_IMPORTED_MODULE_0___default","n","createRandomId","id","Uint8Array","crypto","randomFillSync","App","_ref2","_client$bootstrap","location","_ref2$clientTimeoutMs","clientTimeoutMs","clientTimeout","useTimeout","_useAsync","useAsync","Client","create","ConnManager","proto","window","protocol","host","concat","getBootstrapAddress","clientLoading","loading","_useAsync$value","value","client","console","log","queryString","_useSwarm","_ref","ppsppClient","_ref$bootstrap","bootstrap","swarmUri","_useState","useState","_useState2","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","swarm","setSwarm","joinSwarm","URI","parse","useSwarm","_useSwarm2","query","search","useMemo","qs","ignoreQueryPrefix","noiseInjector","injectorType","autoPlay","useEffect","setImmediate","ChunkedReadStream","on","d","length","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_DiagnosticMenu__WEBPACK_IMPORTED_MODULE_3__","_SwarmPlayer__WEBPACK_IMPORTED_MODULE_4__","Fragment","className","_PlayButton__WEBPACK_IMPORTED_MODULE_8__","disabled","onClick","pulse","flicker","error","blur","SwarmPlayer","_useVideo","ref","useRef","_useState3","_useState4","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","loaded","setLoaded","_useState5","_useState6","playing","setPlaying","_useState7","_useState8","paused","setPaused","_useState9","_useState10","ended","setEnded","_useState11","_useState12","waiting","setWaiting","_useState13","_useState14","muted","setMuted","_useState15","_useState16","volume","setVolume","current","addEventListener","e","Date","toUTCString","play","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","wrap","_context","prev","next","t0","t1","warn","stop","apply","this","arguments","onEnded","onPause","onPlaying","onCanPlay","onVolumeChange","onWaiting","useVideo","_useVideo2","videoState","videoProps","videoControls","mediaSource","MediaSource","handleSourceOpen","sourceBuffer","addSourceBuffer","videoSegments","appendBuffer","newSegment","undefined","updating","segment","shift","unshift","push","transmuxer","muxjs","mp4","Transmuxer","initSet","event","type","buf","data","Buffer","from","initSegment","stream","ChunkedFragmentedReadStream","flush","useSwarmMediaSource","src","URL","createObjectURL","playButton","react__WEBPACK_IMPORTED_MODULE_3___default","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_9__","icon","faSyncAlt","visible","spin","_DiagnosticMenu__WEBPACK_IMPORTED_MODULE_6__","assign","preventDefault","Injector","chunkSize","chunksPerSignature","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","inputBuffer","alloc","chunkBuffer","_this","dataOffset","slice","i","Math","min","_loop","subtreeChunks","splice","contentIntegrity","appendSubtree","then","subtree","setRange","rootAddress","scheduler","markChunksLoaded","options","_options$chunkSize","_options$chunksPerSig","_options$liveDiscardW","liveDiscardWindow","ceil","_options$chunkAddress","chunkAddressingMethod","ChunkAddressingMethod","Bin32","_options$contentInteg","contentIntegrityProtectionMethod","ContentIntegrityProtectionMethod","UnifiedMerkleTree","_options$merkleHashTr","merkleHashTreeFunction","MerkleHashTreeFunction","SHA256","_options$liveSignatur","liveSignatureAlgorithm","LiveSignatureAlgorithm","ECDSAP256SHA256","generateKeyPair","swarmId","privateKey","uri","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__","ProtocolOptions","ChunkSize","toString","clientOptions","uploadRateLimit","Swarm","EventEmitter","bootstrapAddress","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__","key","Promise","resolve","reject","conn","WebSocket","onmessage","JSON","Error","mediator","Mediator","once","close","_EventEmitter","_this2","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","handleMessage","bind","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","emit","RTCSessionDescription","sdp","candidate","RTCIceCandidate","send","readyState","stringify","_EventEmitter2","_this3","initialized","waitingChannels","peerConn","RTCPeerConnection","iceServers","urls","sendIceCandidate","handleDataChannel","handleIceConnectionStateChange","addIceCandidate","_ready","description","setRemoteDescription","createAnswer","catch","_this4","setLocalDescription","sendAnswer","_this5","channel","binaryType","resolveWaitingChannel","label","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","ordered","maxRetransmits","createDataChannel","iceConnectionState","_this6","createOffer","offer","sendOffer","module","exports","require","__webpack_exports__","MaxChannelId","Version","MessageTypes","lodash_invert__WEBPACK_IMPORTED_MODULE_0__","lodash_invert__WEBPACK_IMPORTED_MODULE_0___default","MinimumVersion","SwarmIdentifier","LiveDiscardWindow","SupportedMessages","EndOption","RFC7574","None","MerkleHashTree","SignAll","SHA1","SHA224","SHA384","SHA512","RSASHA1","RSASHA256","ECDSAP384SHA384","ByteRange64","ChunkRange32","Bin64","ChunkRange64","HANDSHAKE","DATA","ACK","HAVE","INTEGRITY","PEX_RESv4","PEX_REQ","SIGNED_INTEGRITY","REQUEST","CANCEL","CHOKE","UNCHOKE","PEX_RESv6","PEX_REScert","forEach","enumType","names","invert","name","Address","bin","treeBounds","binBounds","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_treeBounds","start","end","address","r","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0__","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0___default","WebCrypto","hexToUint8Array","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0__","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0___default","v","hexToArrayBuffer","ws__WEBPACK_IMPORTED_MODULE_0__","ws__WEBPACK_IMPORTED_MODULE_0___default","ws","wrtc__WEBPACK_IMPORTED_MODULE_0__","toUint8Array","MerkleHashTreeFunctionAlgorithms","_MerkleHashTreeFuncti","defineProperty","MerkleHashTreeFunctionByteLengths","_MerkleHashTreeFuncti2","createMerkleHashTreeFunction","algorithm","nullHash","_len","values","Array","_key","map","every","arrayEqual","subtle","digest","LiveSignatureAlgorithms","_LiveSignatureAlgorit","modulusLength","publicExponent","hash","namedCurve","createLiveSignatureSignFunction","objectSpread","importResult","importKey","sign","createLiveSignatureVerifyFunction","getKeyParams","publicKey","signature","verify","generateKey","keyPair","all","exportKey","slicedToArray","SwarmId","unavailableLiveSignatureSignFunction","createContentIntegrityVerifierFactory","liveSignatureVerifyFunction","liveSignatureSignFunction","Infinity","Signature","verified","classCallCheck","createClass","SignedSignature","verificationResult","getHash","markVerified","verifyHash","compare","signatures","getChunkCount","MerkleHashTreeVerifier","hashTree","regenerator_default","getConstituentHashBins","_ref3","bins","bfsIndex","stride","parent","branch","containsBin","isRoot","siblingBin","siblingBfsIndex","floor","abrupt","_ref4","minSize","size","hashes","siblings","toConsumableArray","rootHashSignature","pow","log2","_ref5","_ref6","hashResult","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","siblingSignature","index","verifiedSignature","siblingHash","_iterator","Symbol","iterator","done","err","return","_ref7","UnifiedMerkleHashTree","subtrees","nextStart","chunkCount","_ref8","max","comparator","left","right","mid","order","binSearch","_this5$subtrees$i$roo","storedSubtree","findSubtree","copy","sort","b","pruneSubtrees","removedTree","treeSize","nextAddress","insertSubtree","MerkleHashSubtreeVerifier","getConstituentSignatures","_MerkleHashTreeVerifi","unifiedHashTree","_this7","possibleConstructorReturn","getPrototypeOf","inherits","get","prototype","NoneVerifier","NoneVerifierFactory","Server","server","swarms","setSwarms","setSwarmUri","injector","ChunkedWriteStreamInjector","publishSwarm","unpublishSwarm","diagnosticMenus","react_default","DiagnosticMenu","containerClass","color","scaleOrdinal","schemeCategory10","reduceGraph","graph","objectWithoutProperties","nodes","links","filter","node","source","target","activity","link","_useGraph","servers","setServers","gen","setGen","_useReducer","useReducer","_useReducer2","dispatchGraphAction","arrayBufferToHex","dhtClient","addNodes","clients","newServers","props","clientsResult","fill","firstIndex","serverIndex","random","allChannels","toArray","isOpen","oldChannel","newChannel","deleteNodes","keys","useGraph","_useGraph2","_useGraph2$","handleNodeClick","setSource","sendPing","useNodePinger","react_force_graph_3d_module","graphData","nodeAutoColorBy","onNodeClick","linkColor","linkWidth","nodeRelSize","nodeVal","count","Router","HashRouter","Switch","Route","exact","path","component","Test","DhtGraph","ReactDOM","render","src_Router","document","getElementById","DELIMITER","DELIMITER_LENGTH","ChunkedWriteStream","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","buffer","writeUInt32BE","appendData","HEADER_INSTANCE_LENGTH","writer","intervalId","setInterval","write","clearInterval","setTimeout","AbstractChunkedReadStream","handleWarmupSwarmData","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","handleSwarmData","chunkBufferLength","nextDataOffset","nextDataLength","delimiterIndex","indexOf","removeListener","readHeader","offset","instance","readUInt8","readUInt32BE","lastChunkOffset","nextDataEnd","handleData","lastChunkEnd","handleEndData","_AbstractChunkedReadS","firstEmitted","_AbstractChunkedReadS2","chunkSlice","firstChunkStart","chunks","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","queue","dht","ppspp","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__","bootstrapId","Conn","open","createClient","createChannel","remote","ReadyStates","CONNECTING","OPEN","CLOSING","CLOSED","removeAllListeners","handleConnection","datachannels","entries","nextId","_EventEmitter3","conns","handleOpen","ClientDataChannel","sendConnection","closed","_Conn","_this8","isRsaAlgorithm","includes","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","metadataLength","byteLength","writeUInt8","ArrayBuffer","isView","read","ToggleButton","buttonClasses","classNames","diagnostic_menu__toggle_button","diagnostic_menu__toggle_button--expanded","expanded","react__WEBPACK_IMPORTED_MODULE_6___default","Component","defaultProps","formatNumber","isFinite","approx","String","SwarmState","rows","totalSends","totalRequests","totalRequestsReceived","totalDroppedRequests","totalReceived","totalAdded","totalCancelled","ackUnknownSend","lastCompletedBin","loadedChunks","requestedChunks","chunkRate","PeerStateTable","peerState","chunkIntervalMean","wasteRate","ledbat","baseDelay","getMin","currentDelay","rttMean","rttVar","cwnd","cto","flightSize","validChunks","requestQueue","_this$props","startBin","endBin","colSpan","AvailabilityMapChart","availableChunks","sentChunks","receivedChunks","canvas","React","createRef","scratchCanvas","isNaN","height","width","ctx","getContext","scale","scaleLinear","domain","range","fillStyle","fillRect","lastStart","drawImage","PeerState","handleButtonClick","setState","state","table","peer","localId","remoteId","scheduleUpdate","handleUpdate","forceUpdate","requestAnimationFrame","swarmState","peerStates","containerClasses","diagnostic_menu__container","diagnostic_menu__container--expanded","_this$props$swarm$sch","connManager","dhtClientId","handlePeersDiscover","handleReceiveConnectRequest","init","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","sub","dhtChannel","ppsppChannel","timeout","channelId","clearTimeout","_ref$data","callback","EMA","alpha","mean","weight","RingBuffer","capacity","setCapacity","lastIndex","createEmptyValue","firstEmptyIndex","advanceLastIndex","set","DelayBuffer","delay","now","TARGET","CURRENT_HISTORY","CURRENT_HISTORY_INTERVAL","BASE_HISTORY","BASE_HISTORY_INTERVAL","INIT_CWND","MSS","COEF_ALPHA","COEF_BETA","LEDBAT","mss","lastDataLoss","lastAckTime","ackSize","bytes","delaySample","update","checkCTO","queuingDelay","abs","offTarget","maxAllowedCwnd","rtt","isEmpty","retransmitting","timestamp","createChunkAddressFieldType","addressingMethod","Bin32ChunkAddress","_Address$binBounds","_Address$binBounds2","ChunkRange32ChunkAddress","createBufferFieldType","BufferField","createLiveSignatureFieldType","getLiveSignatureByteLength","_createBufferFieldTyp","LiveSignatureField","createIntegrityHashFieldType","_createBufferFieldTyp2","IntegrityHashField","createEncoding","ChunkAddress","IntegrityHash","LiveSignature","_protocolOptionRecord","_messageRecordTypes","Uint8ProtocolOption","Uint32ProtocolOption","VersionProtocolOption","_Uint8ProtocolOption","version","MinimumVersionProtocolOption","_Uint8ProtocolOption2","SwarmIdentifierProtocolOption","readUInt16BE","writeUInt16BE","ContentIntegrityProtectionMethodProtocolOption","_Uint8ProtocolOption3","method","MerkleHashTreeFunctionProtocolOption","_Uint8ProtocolOption4","LiveSignatureAlgorithmProtocolOption","_Uint8ProtocolOption5","ChunkAddressingMethodProtocolOption","_Uint8ProtocolOption6","LiveDiscardWindowProtocolOption","_Uint32ProtocolOption","_this9","SupportedMessagesProtocolOption","_this10","messageTypes","byte","j","Boolean","bitmapByteLength","bitmap","toBitmap","ChunkSizeProtocolOption","_Uint32ProtocolOption2","_this11","protocolOptionRecordTypes","HandshakeMessage","code","option","RecordType","reduce","Timestamp","seconds","readInt32BE","nanoseconds","writeInt32BE","DataMessage","dataLength","rangeByteLength","AddressMessage","AckMessage","HaveMessage","_AddressMessage","_this12","IntegrityMessage","SignedIntegrityMessage","RequestMessage","_AddressMessage2","_this13","CancelMessage","_AddressMessage3","_this14","EmptyMessage","ChokeMessage","_EmptyMessage","_this15","UnchokeMessage","_EmptyMessage2","_this16","messageRecordTypes","Messages","messageType","message","isArray","Datagram","messages","datagram","createMask","bits","mask","applyMask","BitArray","resize","distance","unsafelySetRange","byteIndex","bitIndex","byteOffset","adjustOffset","startByteIndex","getByteIndex","endByteIndex","startBitIndex","getBitIndex","endBitIndex","unsafelySetIndexRange","startMask","endMask","firstBit","lastBit","Flow","lastVirtualFinish","nextVirtualFinish","wfq","Queue","rate","totalQueueSize","flows","flow","computeWeight","virtualFinish","minVirtualFinish","getNextScheduledFlow","task","AvailabilityMap","_ref$end","BinRingBuffer","_RingBuffer","esm_get","RateMeter","windowMs","sampleWindowMs","firstSampleWindow","lastSampleWindow","sum","sampleWindow","adjustSampleWindow","accumulatedMs","ChunkRateMeter","_RateMeter","lastEndBin","lastHeadBin","RequestFlow","_wfq$Flow","queueSize","RequestQueue","_wfq$Queue","remove","result","SchedulerChunkState","reset","availableCopies","requestTime","requestPeerId","requested","received","SchedulerChunkRequestMap","valueByBin","head","tail","createdAt","SchedulerChunkMap","_BinRingBuffer","SchedulerPeerState","requestFlow","lastChunkTime","requestTimes","sentRequests","timeouts","invalidChunks","Scheduler","chunkStates","peerCount","timers","lastExportedBin","sendDelay","nextSendTime","nextSendTimeout","isReady","firstLoadedChunk","firstRequestedChunk","lastAvailableBin","planFor","dip","peer_remoteId","peer_localId","swift_rtt","swift_rttvar","swift_chunkIntervalMean","swift_cwnd","ledbat_cwnd","ledbat_cto","ledbat_currentDelay","ledbat_baseDelay","ledbat_rttMean","ledbat_rttVar","ledbat_rtt","ledbat_flightSize","picker_startBin","picker_lastAvailableBin","minIncompleteBin","picker_firstLoadedChunk","picker_firstRequestedChunk","timeoutThreshold","cancelledRequests","peek","pop","onDataLoss","digestDelaySamples","_peerState$peer","requestAddresses","insert","firstRequestedBin","_ref9","sendCancel","sendRequest","requestedAddress","requestedChunk","sentAt","addSent","sendChunk","sendInterval","addFlow","_ref10","removeFlow","_ref11","getPeerState","chunkInterval","addRttSample","_ref12","sendHave","nextExportedBin","advanceLastBin","_ref13","addDelaySample","sentChunk","genericEncoding","_uri$protocolOptions","protocolOptions","encoding","toBuffer","protocolOption","protocolOptionName","newBins","getNewCompleteBins","_newBins","minNewBin","maxNewBin","chunk","AWAITING_HANDSHAKE","READY","CHOKED","DISCONNECTING","PeerDataHandlerContext","integrityVerifier","createVerifier","Peer","_this$handlers","createChannelId","handlers","handleHandshakeMessage","handleDataMessage","handleHaveMessage","handleAckMessage","handleIntegrityMessage","handleSignedIntegrityMessage","handleRequestMessage","handleCancelMessage","handleChokeMessage","handleUnchokeMessage","sendBuffer","addPeer","sendHandshake","removePeer","context","handler","handshake","setLiveDiscardWindow","verifyProtocolOptions","getRecentChunks","computeOneWayDelay","markChunkReceived","getContentIntegrityVerifier","verifyChunk","markChunkVerified","emitNewData","markChunkRejected","markChunkAvailable","markSendAcked","setHash","setHashSignature","enqueueRequest","cancelRequest","addresses","_len2","_key2","constituentSignatures","reverse","getSignatureHash","round","SwarmSet","setMaxListeners","swarmIdToKey","channels","Channel","peers","handleSwarmInsert","getOrCreatePeer","assertThisInitialized","liveSwarms","handleClose","find","p","createPeer","destroyPeer","handleRemove","isInitialized","removedSwarm","NUMBER_OF_NODES_PER_BUCKET","KBucket","numberOfNodesPerKBucket","localNodeId","handlePing","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleRemoved","handleUpdated","handleAdded","knownPeerIds","channelMap","seenIds","LRU","knownRoutes","maxAge","callbacks","handlePeersRequest","handlePingRequest","handleTraceRequest","handleCallbackResponse","startPeerRequests","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","stopPeerRequests","peerRequestIvl","ids","retry","sendPeerRequest","addChannel","getChannel","removeChannel","add","idHex","bufferMessages","removeEventListener","req","lastActive","_req","trace","to","res","re","forwardMessage","hops","sendRaw","reqCallback","handlePeersResponse","_ref5$data","_ref5$data$count","fromId","closest","randomBytes","knownRoute","vectorClock","lastPing","idx","_","SubChannel","peerId","_ref11$data","protocolOptionToKey","_protocolOptionToKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","URLSafeBase64","encode","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","join","uriString","startsWith","args","substring","split","_query$split","_query$split2","decodeURIComponent","arg","parseFloat","xt","decode","PlayButton","_ref$spin","_ref$flicker","_ref$pulse","_ref$disabled","_ref$visible","_ref$blur","_ref$error","_ref$onClick","_ref$idleTimeout","idleTimeout","currentVisibility","setCurrentVisibility","_useHover","useHover","_useHover2","hovering","hoverEventHandlers","mouseIdle","setMouseIdle","useDebounce","hoverClasses","play_button_wrap","play_button","clickable","exiting","hidden","xmlns","viewBox","cx","cy","points","transform"],"mappings":"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","file":"static/js/main.0245f749.chunk.js","sourcesContent":["import crypto from 'crypto';\n\nconst createRandomId = () => {\n  const id = new Uint8Array(16);\n  crypto.randomFillSync(id);\n  return id;\n};\n\nexport default createRandomId;\n","import React, {useEffect, useState, useMemo} from 'react';\nimport URI from './ppspp/uri';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport SwarmPlayer from './SwarmPlayer';\nimport {Client} from './client';\nimport {ConnManager} from './wrtc';\nimport {ChunkedReadStream} from './chunkedStream';\nimport PlayButton from './PlayButton';\nimport qs from 'qs';\nimport {useTimeout, useAsync} from 'react-use';\n\nimport './App.css';\n\nconst getBootstrapAddress = () => {\n  const proto = window.location.protocol === 'https:' ? 'wss' : 'ws';\n  const host = process.env.NODE_ENV === 'development'\n    ? window.location.hostname + ':8080'\n    : window.location.host;\n  return `${proto}://${host}`;\n};\n\nconst useSwarm = ({ppsppClient, bootstrap: {swarmUri} = {}}) => {\n  const [swarm, setSwarm] = useState(null);\n  const join = () => setSwarm(ppsppClient.joinSwarm(URI.parse(swarmUri)));\n  return [swarm, join];\n};\n\nconst useQuery = queryString => useMemo(() => {\n  return qs.parse(queryString, {ignoreQueryPrefix: true}) || {};\n}, [queryString]);\n\nconst App = ({\n  location,\n  clientTimeoutMs = 5000,\n}) => {\n  const clientTimeout = useTimeout(clientTimeoutMs);\n  const {\n    loading: clientLoading,\n    value: client = {},\n  } = useAsync(() => Client.create(new ConnManager(getBootstrapAddress())), []);\n  console.log({client});\n  const [swarm, joinSwarm] = useSwarm(client);\n\n  const query = useQuery(location.search);\n\n  const noiseInjector = client?.bootstrap?.injectorType === 'noise';\n  const autoPlay = 'autoplay' in query;\n  const loading = clientLoading || !client.ppsppClient;\n\n  useEffect(() => {\n    if (autoPlay && !loading) {\n      setImmediate(joinSwarm);\n    }\n  }, [autoPlay && loading]);\n\n  useEffect(() => {\n    if (noiseInjector && swarm) {\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', d => console.log(`received ${d.length} bytes`));\n    }\n  }, [noiseInjector, swarm]);\n\n  if (swarm) {\n    return noiseInjector\n      ? <DiagnosticMenu swarm={swarm} />\n      : <SwarmPlayer swarm={swarm} />;\n  }\n\n  return (\n    <>\n      <div className=\"idle\">\n        <div className=\"noise\"></div>\n      </div>\n      <PlayButton\n        disabled={loading}\n        onClick={joinSwarm}\n        pulse={!autoPlay}\n        flicker={loading || autoPlay}\n        error={loading && clientTimeout}\n        blur\n      />\n    </>\n  );\n};\n\nexport default App;\n","import React, {useRef, useEffect, useState} from 'react';\nimport muxjs from 'mux.js';\nimport {ChunkedFragmentedReadStream} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport {Buffer} from 'buffer';\nimport PlayButton from './PlayButton';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faSyncAlt} from '@fortawesome/free-solid-svg-icons';\n\nimport './SwarmPlayer.scss';\n\nconst useSwarmMediaSource = swarm => {\n  const [mediaSource] = useState(() => {\n    const mediaSource = new MediaSource();\n    mediaSource.addEventListener('sourceopen', handleSourceOpen);\n    return mediaSource;\n  }, []);\n\n  function handleSourceOpen() {\n    const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"mp4a.40.5,avc1.64001F\"');\n    // sourceBuffer.addEventListener('updatestart', e => console.log(e));\n    // sourceBuffer.addEventListener('updateend', e => console.log(e));\n    sourceBuffer.addEventListener('error', e => console.log(e));\n\n    const videoSegments = [];\n    const appendBuffer = newSegment => {\n      if (newSegment !== undefined && (videoSegments.length !== 0 || sourceBuffer.updating)) {\n        videoSegments.push(newSegment);\n        return;\n      }\n\n      if (sourceBuffer.updating) {\n        return;\n      }\n\n      const segment = newSegment || videoSegments.shift();\n      if (segment === undefined) {\n        return;\n      }\n\n      try {\n        sourceBuffer.appendBuffer(segment);\n      } catch (e) {\n        videoSegments.unshift(segment);\n        setImmediate(appendBuffer);\n      }\n    };\n\n    sourceBuffer.addEventListener('updateend', () => appendBuffer());\n\n    const transmuxer = new muxjs.mp4.Transmuxer();\n    let initSet = false;\n    transmuxer.on('data', event => {\n      if (event.type === 'combined') {\n        const buf = initSet\n          ? event.data\n          : Buffer.concat([Buffer.from(event.initSegment), Buffer.from(event.data)]);\n        initSet = true;\n\n        appendBuffer(buf);\n      } else {\n        console.log('unhandled event', event.type);\n      }\n    });\n\n    const stream = new ChunkedFragmentedReadStream(swarm);\n    stream.on('start', data => transmuxer.push(data));\n    stream.on('data', data => transmuxer.push(data));\n    stream.on('end', data => {\n      transmuxer.push(data);\n      transmuxer.flush();\n    });\n  }\n\n  return mediaSource;\n};\n\nconst useVideo = () => {\n  const ref = useRef();\n  const [loaded, setLoaded] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [paused, setPaused] = useState(false);\n  const [ended, setEnded] = useState(true);\n  const [waiting, setWaiting] = useState(true);\n  const [muted, setMuted] = useState(null);\n  const [volume, setVolume] = useState(null);\n\n  useEffect(() => {\n    if (ref.current == null) {\n      return;\n    }\n\n    setMuted(ref.current.muted);\n    setVolume(ref.current.volume);\n    setPaused(ref.current.paused);\n\n    ref.current.addEventListener('audioprocess', e => console.log(new Date().toUTCString(), 'audioprocess', e));\n    ref.current.addEventListener('canplay', e => console.log(new Date().toUTCString(), 'canplay', e));\n    ref.current.addEventListener('canplaythrough', e => console.log(new Date().toUTCString(), 'canplaythrough', e));\n    ref.current.addEventListener('complete', e => console.log(new Date().toUTCString(), 'complete', e));\n    ref.current.addEventListener('durationchange', e => console.log(new Date().toUTCString(), 'durationchange', e));\n    ref.current.addEventListener('emptied', e => console.log(new Date().toUTCString(), 'emptied', e));\n    ref.current.addEventListener('ended', e => console.log(new Date().toUTCString(), 'ended', e));\n    ref.current.addEventListener('loadeddata', e => console.log(new Date().toUTCString(), 'loadeddata', e));\n    ref.current.addEventListener('loadedmetadata', e => console.log(new Date().toUTCString(), 'loadedmetadata', e));\n    ref.current.addEventListener('pause', e => console.log(new Date().toUTCString(), 'pause', e));\n    ref.current.addEventListener('play', e => console.log(new Date().toUTCString(), 'play', e));\n    ref.current.addEventListener('playing', e => console.log(new Date().toUTCString(), 'playing', e));\n    ref.current.addEventListener('ratechange', e => console.log(new Date().toUTCString(), 'ratechange', e));\n    ref.current.addEventListener('seeked', e => console.log(new Date().toUTCString(), 'seeked', e));\n    ref.current.addEventListener('seeking', e => console.log(new Date().toUTCString(), 'seeking', e));\n    ref.current.addEventListener('stalled', e => console.log(new Date().toUTCString(), 'stalled', e));\n    ref.current.addEventListener('suspend', e => console.log(new Date().toUTCString(), 'suspend', e));\n    // ref.current.addEventListener('timeupdate', e => console.log(new Date().toUTCString(), 'timeupdate', e));\n    ref.current.addEventListener('volumechange', e => console.log(new Date().toUTCString(), 'volumechange', e));\n    ref.current.addEventListener('waiting', e => console.log(new Date().toUTCString(), 'waiting', e));\n  }, [ref]);\n\n  const onEnded = () => {\n    setPlaying(false);\n    setEnded(false);\n    setWaiting(false);\n  };\n\n  const onPause = () => {\n    setPlaying(false);\n    setPaused(true);\n  };\n\n  const onPlaying = () => {\n    setPaused(false);\n    setPlaying(true);\n  };\n\n  const onCanPlay = () => {\n    setWaiting(false);\n    setLoaded(true);\n  };\n\n  const onVolumeChange = () => {\n    setVolume(ref.current.volume);\n  };\n\n  const onWaiting = () => {\n    setPlaying(false);\n    setWaiting(true);\n  };\n\n  const play = async () => {\n    try {\n      await ref.current.play();\n    } catch (e) {\n      ref.current.muted = true;\n      try {\n        await ref.current.play();\n      } catch (e) {\n        console.warn('error playing video', e);\n      }\n    }\n  };\n\n  return [\n    {\n      loaded,\n      playing,\n      paused,\n      ended,\n      waiting,\n      muted,\n      volume,\n    },\n    {\n      ref,\n      onEnded,\n      onPause,\n      onPlaying,\n      onCanPlay,\n      onVolumeChange,\n      onWaiting,\n    },\n    {\n      play,\n    },\n  ];\n};\n\nconst SwarmPlayer = ({swarm}) =>{\n  const [videoState, videoProps, videoControls] = useVideo();\n  const mediaSource = useSwarmMediaSource(swarm);\n\n  useEffect(() => {\n    if (videoProps.ref.current != null && mediaSource != null) {\n      videoProps.ref.current.src = URL.createObjectURL(mediaSource);\n      videoControls.play();\n    }\n  }, [videoProps.ref, mediaSource]);\n\n  console.log(videoState);\n\n  const playButton = (videoState.waiting && videoState.loaded) ? (\n    <div className=\"swarm_player__waiting_spinner\">\n      <FontAwesomeIcon icon={faSyncAlt} />\n    </div>\n  ) : (\n    <PlayButton\n      visible={!videoState.playing}\n      onClick={videoControls.play}\n      flicker={videoState.ended && !videoState.loaded}\n      spin={videoState.waiting && videoState.loaded}\n      disabled={videoState.waiting || !videoState.loaded}\n      blur={true}\n    />\n  );\n\n  return (\n    <React.Fragment>\n      <DiagnosticMenu swarm={swarm} />\n      <video\n        onClick={e => e.preventDefault()}\n        className=\"swarm_player__video\"\n        {...videoProps}\n      />\n      {playButton}\n    </React.Fragment>\n  );\n};\n\nexport default SwarmPlayer;\n","import {EventEmitter} from 'events';\nimport crypto from 'crypto';\nimport {generateKeyPair} from './integrity';\nimport URI from './uri';\nimport {\n  ChunkAddressingMethod,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ProtocolOptions,\n} from './constants';\nimport {Swarm} from '../ppspp';\n\nexport default class Injector {\n  constructor(swarm, chunkSize, chunksPerSignature) {\n    this.swarm = swarm;\n    this.chunkSize = chunkSize;\n    this.chunksPerSignature = chunksPerSignature;\n    this.inputBuffer = Buffer.alloc(0);\n    this.chunkBuffer = [];\n  }\n\n  appendData(data) {\n    if (this.inputBuffer.length + data.length < this.chunkSize) {\n      this.inputBuffer = Buffer.concat([this.inputBuffer, data]);\n      return;\n    }\n\n    let dataOffset = 0;\n    if (this.inputBuffer.length > 0) {\n      dataOffset = this.chunkSize - this.inputBuffer.length;\n      this.chunkBuffer.push(Buffer.concat([this.inputBuffer, data.slice(0, dataOffset)], this.chunkSize));\n    }\n\n    for (let i = dataOffset; i + this.chunkSize < data.length; i += this.chunkSize) {\n      this.chunkBuffer.push(data.slice(i, Math.min(data.length, i + this.chunkSize)));\n      dataOffset = i + this.chunkSize;\n    }\n\n    if (dataOffset < data.length) {\n      this.inputBuffer = data.slice(dataOffset);\n    }\n\n    while (this.chunkBuffer.length > this.chunksPerSignature) {\n      const subtreeChunks = this.chunkBuffer.splice(0, this.chunksPerSignature);\n      this.swarm.contentIntegrity.appendSubtree(subtreeChunks).then(subtree => {\n        this.swarm.chunkBuffer.setRange(subtree.rootAddress, subtreeChunks);\n        this.swarm.scheduler.markChunksLoaded(subtree.rootAddress);\n      });\n    }\n  }\n\n  static create(options = {}) {\n    const {\n      chunkSize = 8 * 1024,\n      chunksPerSignature = 64,\n      liveDiscardWindow = Math.ceil(15 * 3500 * 1024 / chunkSize),\n      chunkAddressingMethod = ChunkAddressingMethod.Bin32,\n      contentIntegrityProtectionMethod = ContentIntegrityProtectionMethod.UnifiedMerkleTree,\n      merkleHashTreeFunction = MerkleHashTreeFunction.SHA256,\n      liveSignatureAlgorithm = LiveSignatureAlgorithm.ECDSAP256SHA256,\n    } = options;\n\n    return generateKeyPair(liveSignatureAlgorithm).then(({swarmId, privateKey}) => {\n      const uri = new URI(\n        swarmId,\n        {\n          [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n          [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n          [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n          [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n          [ProtocolOptions.ChunkSize]: chunkSize,\n        }\n      );\n\n      console.log('swarm uri:', uri.toString());\n\n      const clientOptions = {\n        liveDiscardWindow,\n        privateKey,\n        uploadRateLimit: 10e6,\n      };\n\n      return new Swarm(uri, clientOptions);\n    }).then(swarm => new Injector(swarm, chunkSize, chunksPerSignature));\n  }\n}\n\nexport class NoiseInjector extends EventEmitter {\n  constructor(dataRate = 3.5e6 / 8, interval = 250) {\n    super();\n    this.dataRate = dataRate * (interval / 1000);\n    this.interval = interval;\n  }\n\n  start() {\n    const data = Buffer.alloc(this.dataRate);\n    crypto.randomFillSync(data);\n\n    Injector.create().then(injector => {\n      this.intervalId = setInterval(() => injector.appendChunk(data), this.interval);\n      this.injector = injector;\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n","import {EventEmitter} from 'events';\nimport WebSocket from './compat/ws';\nimport {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from './compat/wrtc';\n\nexport class ConnManager {\n  constructor(bootstrapAddress) {\n    this.bootstrapAddress = bootstrapAddress;\n  }\n\n  bootstrap() {\n    return new Promise((resolve, reject) => {\n      const conn = new WebSocket(this.bootstrapAddress);\n      conn.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'bootstrap') {\n          resolve({data, conn});\n        } else {\n          reject(new Error(`expected bootstrap, received: ${event.data}`));\n        }\n      };\n    });\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    // firefox seems to continue generating ice messages after the datachannel\n    // has opened...\n    mediator.once('error', () => conn.close());\n    client.once('open', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    // console.log('mediator message', data);\n\n    switch (data.type) {\n      case 'offer':\n      case 'answer':\n        this.emit('remotedescription', new RTCSessionDescription(data));\n        break;\n      case 'icecandidate':\n        if (data.sdp && data.sdp.candidate) {\n          this.emit('icecandidate', new RTCIceCandidate(data.sdp));\n        }\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  sendOffer(event) {\n    this.send(event);\n  }\n\n  sendAnswer(event) {\n    this.send(event);\n  }\n\n  sendIceCandidate(event) {\n    if (event.candidate) {\n      this.send({\n        type: 'icecandidate',\n        sdp: event.candidate,\n      });\n    }\n  }\n\n  send(event) {\n    if (this.conn.readyState !== 1) {\n      console.log('mediator tried to send after closing its connection');\n      // console.log('send error', this.conn);\n      // console.trace();\n      // this.emit('error', new Error('connection in invalid state'));\n      return;\n    }\n\n    this.conn.send(JSON.stringify(event));\n  }\n}\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.initialized = false;\n    this.waitingChannels = 0;\n\n    this.peerConn = new RTCPeerConnection({\n      iceServers: [{urls: 'stun:stun.l.google.com:19302'}],\n    });\n\n    this.peerConn.addEventListener('icecandidate', candidate => this.mediator.sendIceCandidate(candidate));\n    this.peerConn.addEventListener('datachannel', this.handleDataChannel.bind(this));\n    this.peerConn.addEventListener('iceconnectionstatechange', this.handleIceConnectionStateChange.bind(this));\n\n    mediator.once('error', () => this.peerConn.close());\n    mediator.on('icecandidate', candidate => this.addIceCandidate(candidate));\n\n    this._ready = new Promise((resolve, reject) => {\n      mediator.on('remotedescription', description => {\n        this.peerConn.setRemoteDescription(description)\n          .then(() => {\n            resolve();\n            this.createAnswer();\n          })\n          .catch(reject);\n      });\n    });\n  }\n\n  createAnswer() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n\n    this.peerConn.createAnswer()\n      .then((description) => {\n        this.peerConn.setLocalDescription(description);\n        this.mediator.sendAnswer(description);\n      })\n      .catch(error => console.error(error));\n  }\n\n  addIceCandidate(candidate) {\n    this._ready.then(() => this.peerConn.addIceCandidate(candidate));\n  }\n\n  handleDataChannel(event) {\n    // event.channel.addEventListener('close', e => console.log('< begin close event handlers'));\n    event.channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    event.channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('< received data channel', event);\n    // event.channel.addEventListener('error', e => console.log('< data channel emitted error', e));\n    // event.channel.addEventListener('open', e => console.log('< data channel opened', e));\n    // event.channel.addEventListener('bufferedamountlow', e => console.log('< data channel bufferamountlow', e));\n    // event.channel.addEventListener('close', e => console.log('< data channel closed', e));\n\n    this.emit('datachannel', event);\n  }\n\n  createDataChannel(label, options = {}) {\n    options = {\n      ordered: true,\n      maxRetransmits: 10,\n      ...options,\n    };\n\n    const channel = this.peerConn.createDataChannel(label, options);\n    // channel.addEventListener('close', e => console.log('> begin close event handlers'));\n    channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('> received data channel', {channel});\n    // channel.addEventListener('error', e => console.log('> data channel emitted error', e));\n    // channel.addEventListener('open', e => console.log('> data channel opened', e));\n    // channel.addEventListener('bufferedamountlow', e => console.log('> data channel bufferedamountlow', e));\n    // channel.addEventListener('close', e => console.log('> data channel closed', e));\n\n    return channel;\n  }\n\n  resolveWaitingChannel() {\n    if (-- this.waitingChannels === 0) {\n      this.emit('open');\n    }\n  }\n\n  handleIceConnectionStateChange() {\n    // this seems to be the most reliable way to get connection state in chrome\n    if (this.peerConn.iceConnectionState === 'failed') {\n      this.peerConn.close();\n    }\n  }\n\n  init() {\n    this.peerConn.createOffer()\n      .then(offer => {\n        this.initialized = true;\n        // console.log('initial offer', offer);\n        this.peerConn.setLocalDescription(offer);\n        this.mediator.sendOffer(offer);\n      });\n  }\n\n  close() {\n    // console.log('wrtc client closed');\n    // console.trace();\n    this.peerConn.close();\n    this.emit('close');\n  }\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","import invert from 'lodash.invert';\n\nexport const MaxChannelId = 0xffffffff;\n\nexport const ProtocolOptions = {\n  Version: 0,\n  MinimumVersion: 1,\n  SwarmIdentifier: 2,\n  ContentIntegrityProtectionMethod: 3,\n  MerkleHashTreeFunction: 4,\n  LiveSignatureAlgorithm: 5,\n  ChunkAddressingMethod: 6,\n  LiveDiscardWindow: 7,\n  SupportedMessages: 8,\n  ChunkSize: 9,\n  EndOption: 255,\n};\n\nexport const Version = {\n  RFC7574: 1,\n};\n\nexport const ContentIntegrityProtectionMethod = {\n  None: 0,\n  MerkleHashTree: 1,\n  SignAll: 2,\n  UnifiedMerkleTree: 3,\n};\n\nexport const MerkleHashTreeFunction = {\n  SHA1: 0,\n  SHA224: 1,\n  SHA256: 2,\n  SHA384: 3,\n  SHA512: 4,\n};\n\nexport const LiveSignatureAlgorithm = {\n  RSASHA1: 5,\n  RSASHA256: 8,\n  ECDSAP256SHA256: 13,\n  ECDSAP384SHA384: 14,\n};\n\nexport const ChunkAddressingMethod = {\n  Bin32: 0,\n  ByteRange64: 1,\n  ChunkRange32: 2,\n  Bin64: 3,\n  ChunkRange64: 4,\n};\n\nexport const VariableChunkSize = 0xffffffff;\n\nexport const MessageTypes = {\n  HANDSHAKE: 0,\n  DATA: 1,\n  ACK: 2,\n  HAVE: 3,\n  INTEGRITY: 4,\n  PEX_RESv4: 5,\n  PEX_REQ: 6,\n  SIGNED_INTEGRITY: 7,\n  REQUEST: 8,\n  CANCEL: 9,\n  CHOKE: 10,\n  UNCHOKE: 11,\n  PEX_RESv6: 12,\n  PEX_REScert: 13,\n};\n\n[\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n].forEach(enumType => {\n  const names = invert(enumType);\n  enumType.name = value => names[value] || 'UNDEFINED';\n});\n","import {ChunkAddressingMethod} from './constants';\n\nexport default class Address {\n  constructor(bin = 0, treeBounds = Address.binBounds(bin)) {\n    this.bin = bin;\n    [this.start, this.end] = treeBounds;\n  }\n\n  containsBin(bin) {\n    return this.start <= bin && bin <= this.end;\n  }\n\n  getChunkCount() {\n    return (this.end - this.start) / 2 + 1;\n  }\n\n  static from(address) {\n    if (address instanceof Address) {\n      return address;\n    }\n\n    switch (address.type) {\n      case ChunkAddressingMethod.Bin32:\n        return new Address(address.value);\n      case ChunkAddressingMethod.ChunkRange32: {\n        const {start, end} = address;\n        return new Address((end - start) / 2, [start, end]);\n      }\n      default:\n        throw new Error('unsupported address type');\n    }\n  }\n\n  static binBounds(bin) {\n    return [\n      bin & (bin + 1),\n      (bin | (bin + 1)) - 1,\n    ];\n  }\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","import WebCrypto from 'node-webcrypto-ossl';\n\nmodule.exports = new WebCrypto();\n","module.exports = crypto;\n","import hexToArrayBuffer from 'hex-to-array-buffer';\n\nexport default function hexToUint8Array(v) {\n  return new Uint8Array(hexToArrayBuffer(v));\n}\n","import ws from 'ws';\n\nexport default ws;\n","module.exports = WebSocket;\n","import {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from 'wrtc';\n\nmodule.exports = {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n};\n","module.exports = {\n  RTCPeerConnection: window.RTCPeerConnection,\n  RTCSessionDescription: window.RTCSessionDescription,\n  RTCIceCandidate: window.RTCIceCandidate,\n};\n","import {Buffer} from 'buffer';\nimport arrayEqual from 'array-equal';\nimport binSearch from '../binSearch';\nimport Address from './address';\nimport SwarmId from './swarmid';\n\nimport {\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n} from './constants';\n\nconst crypto = require('../compat/crypto');\n\nconst toUint8Array = data => new Uint8Array(data);\n\nexport const MerkleHashTreeFunctionAlgorithms = {\n  [MerkleHashTreeFunction.SHA1]: 'SHA-1',\n  [MerkleHashTreeFunction.SHA224]: 'SHA-224',\n  [MerkleHashTreeFunction.SHA256]: 'SHA-256',\n  [MerkleHashTreeFunction.SHA384]: 'SHA-384',\n  [MerkleHashTreeFunction.SHA512]: 'SHA-512',\n};\n\nexport const MerkleHashTreeFunctionByteLengths = {\n  [MerkleHashTreeFunction.SHA1]: 20,\n  [MerkleHashTreeFunction.SHA224]: 28,\n  [MerkleHashTreeFunction.SHA256]: 32,\n  [MerkleHashTreeFunction.SHA384]: 48,\n  [MerkleHashTreeFunction.SHA512]: 64,\n};\n\nexport const createMerkleHashTreeFunction = (merkleHashTreeFunction) => {\n  const algorithm = MerkleHashTreeFunctionAlgorithms[merkleHashTreeFunction];\n  if (algorithm === undefined) {\n    throw new Error('invalid merkle hash tree function');\n  }\n\n  const nullHash = new Uint8Array(MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction]);\n\n  return (...values) => {\n    values = values.map(value => value === undefined ? nullHash : value);\n\n    if (values.every(value => arrayEqual(value, nullHash))) {\n      return Promise.resolve(nullHash);\n    }\n\n    if (values.length > 1) {\n      values = new Uint8Array(Buffer.concat(values.map(value => Buffer.from(value))));\n    } else {\n      values = values[0];\n    }\n\n    return crypto.subtle.digest(algorithm, values).then(toUint8Array);\n  };\n};\n\nexport const LiveSignatureAlgorithms = {\n  [LiveSignatureAlgorithm.RSASHA1]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-1'},\n  },\n  [LiveSignatureAlgorithm.RSASHA256]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP256SHA256]: {\n    name: 'ECDSA',\n    namedCurve: 'P-256',\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP384SHA384]: {\n    name: 'ECDSA',\n    namedCurve: 'P-384',\n    hash: {name: 'SHA-384'},\n  },\n};\n\nexport const createLiveSignatureSignFunction = (liveSignatureAlgorithm, privateKey, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  const importResult = crypto.subtle.importKey('pkcs8', privateKey, algorithm, false, ['sign']);\n\n  return data => importResult\n    .then(privateKey => crypto.subtle.sign(algorithm, privateKey, data))\n    .then(toUint8Array);\n};\n\nexport const createLiveSignatureVerifyFunction = (liveSignatureAlgorithm, swarmId, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...swarmId.getKeyParams(),\n    ...algorithm,\n  };\n\n  const publicKey = new Uint8Array(swarmId.publicKey);\n  const importResult = crypto.subtle.importKey('spki', publicKey, algorithm, false, ['verify']);\n\n  return (signature, data) => importResult\n    .then(publicKey => crypto.subtle.verify(algorithm, publicKey, signature, data))\n    .then(toUint8Array);\n};\n\nexport const generateKeyPair = (liveSignatureAlgorithm, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  return crypto.subtle.generateKey(algorithm, true, ['sign', 'verify'])\n    .then(keyPair => Promise.all([\n      crypto.subtle.exportKey('pkcs8', keyPair.privateKey),\n      crypto.subtle.exportKey('spki', keyPair.publicKey),\n    ]))\n    .then(([privateKey, publicKey]) => ({\n      privateKey,\n      publicKey,\n      swarmId: SwarmId.from({\n        ...algorithm,\n        liveSignatureAlgorithm,\n        publicKey,\n      }),\n    }));\n};\n\nconst unavailableLiveSignatureSignFunction = () => Promise.reject('live signature function not available');\n\nexport const createContentIntegrityVerifierFactory = (\n  contentIntegrityProtectionMethod,\n  merkleHashTreeFunction,\n  liveSignatureVerifyFunction,\n  liveSignatureSignFunction = unavailableLiveSignatureSignFunction,\n  liveDiscardWindow = Infinity,\n) => {\n  class Signature {\n    constructor(hash, verified = false) {\n      this.hash = hash;\n      this.verified = verified;\n    }\n\n    markVerified() {\n      this.verified = true;\n    }\n\n    getHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return !this.verified\n        ? Promise.reject('cannot use unverified signature')\n        : Promise.resolve(arrayEqual(this.hash, value));\n    }\n  }\n\n  // TODO: timestamp in hash?\n  class SignedSignature {\n    constructor(signature, hash) {\n      this.signature = signature;\n      this.hash = hash;\n      this.verificationResult = undefined;\n    }\n\n    verifyHash() {\n      if (this.verificationResult === undefined) {\n        this.verificationResult = liveSignatureVerifyFunction(this.hash, this.getHash())\n          .then(() => this.markVerified());\n      }\n      return this.verificationResult;\n    }\n\n    markVerified() {\n      this.signature.markVerified();\n    }\n\n    getHash() {\n      return this.signature.getHash();\n    }\n\n    getSignatureHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return this.verifyHash().then(() => this.signature.compare(value));\n    }\n  }\n\n  class MerkleHashTree {\n    constructor(rootAddress, signatures = new Array(rootAddress.getChunkCount() * 2 - 1)) {\n      this.rootAddress = rootAddress;\n      this.signatures = signatures;\n    }\n\n    createVerifier() {\n      return new MerkleHashTreeVerifier(this);\n    }\n\n    copy(hashTree) {\n      for (let i = 0; i < this.signatures.length; i ++) {\n        if (hashTree.signatures[i] === undefined) {\n          hashTree.signatures[i] = this.signatures[i];\n        }\n      }\n    }\n\n    getChunkCount() {\n      return this.rootAddress.getChunkCount();\n    }\n\n    *getConstituentHashBins({bin}) {\n      if (!this.rootAddress.containsBin(bin)) {\n        throw new Error('bin out of range');\n      }\n\n      const {start} = this.rootAddress;\n      bin -= start;\n\n      const bins = [];\n      let bfsIndex = this.rootAddress.getChunkCount() + bin / 2 - 1;\n      let stride = 2;\n      let parent = bin;\n\n      while (bfsIndex !== 0) {\n        const branch = (bfsIndex & 1) === 1 ? 1 : -1;\n\n        yield {\n          isRoot: false,\n          branch,\n          bin: parent + start,\n          bfsIndex,\n          siblingBin: parent + branch * stride + start,\n          siblingBfsIndex: bfsIndex + branch,\n        };\n\n        bfsIndex = Math.floor((bfsIndex - 1) / 2);\n        parent += branch * stride / 2;\n        stride *= 2;\n      }\n\n      yield {\n        isRoot: true,\n        branch: 0,\n        bin: parent + start,\n        bfsIndex: 0,\n        siblingBin: parent + start,\n        siblingBfsIndex: 0,\n      };\n\n      return bins;\n    }\n\n    getConstituentSignatures(address) {\n      return Array.from(this.getConstituentHashBins(address)).map(({\n        siblingBin,\n        siblingBfsIndex,\n      }) => ({\n        bin: siblingBin,\n        signature: this.signatures[siblingBfsIndex],\n      }));\n    }\n\n    static from(values, rootAddress = new Address(MerkleHashTree.minSize(values.length) - 1)) {\n      const size = rootAddress.getChunkCount();\n      const hashes = new Array(size * 2 - 1);\n      for (let i = 0; i < size; i ++) {\n        hashes[i + size - 1] = merkleHashTreeFunction(values[i]);\n      }\n      for (let i = (size - 1) * 2; i > 0; i -= 2) {\n        hashes[Math.floor(i / 2) - 1] = Promise.all([hashes[i - 1], hashes[i]])\n          .then(siblings => merkleHashTreeFunction(...siblings));\n      }\n\n      return Promise.all(hashes).then(hashes => {\n        const signatures = hashes.map(hash => new Signature(hash, true));\n\n        return liveSignatureSignFunction(hashes[0]).then(rootHashSignature => {\n          signatures[0] = new SignedSignature(\n            signatures[0],\n            rootHashSignature,\n          );\n\n          return new MerkleHashTree(rootAddress, signatures);\n        });\n      });\n    }\n\n    static minSize(size) {\n      return Math.pow(2, Math.ceil(Math.log2(size)));\n    }\n  }\n\n  class MerkleHashTreeVerifier {\n    constructor(hashTree) {\n      this.hashTree = hashTree;\n      this.signatures = {};\n    }\n\n    setHash({bin}, hash) {\n      this.signatures[bin] = new Signature(hash);\n    }\n\n    setHashSignature({bin}, hash) {\n      this.signatures[bin] = new SignedSignature(this.signatures[bin], hash);\n    }\n\n    verifyChunk(address, value) {\n      const signatures = [];\n      let hashResult = merkleHashTreeFunction(value);\n\n      for (let bin of this.hashTree.getConstituentHashBins(address)) {\n        let siblingSignature = this.hashTree.signatures[bin.siblingBfsIndex];\n        if (siblingSignature === undefined) {\n          siblingSignature = this.signatures[bin.siblingBin];\n          signatures.push({\n            index: bin.siblingBfsIndex,\n            signature: siblingSignature,\n          });\n        }\n\n        // if the current branch has already been verified short circuit\n        const verifiedSignature = this.hashTree.signatures[bin.bfsIndex];\n        if (verifiedSignature !== undefined) {\n          hashResult = hashResult.then(hash => verifiedSignature.compare(hash));\n          break;\n        }\n\n        // verify the generated root hash using the one supplied to the verifier\n        if (bin.isRoot) {\n          hashResult = hashResult.then(hash => siblingSignature.compare(hash));\n          break;\n        }\n\n        // chain generating the next parent hash\n        hashResult = hashResult.then(hash => {\n          signatures.push({\n            index: bin.bfsIndex,\n            signature: new Signature(hash),\n          });\n\n          const siblingHash = siblingSignature.getHash();\n          const siblings = bin.branch === 1 ? [hash, siblingHash] : [siblingHash, hash];\n          return merkleHashTreeFunction(...siblings);\n        });\n      }\n\n      return hashResult.then(() => {\n        signatures.forEach(({index, signature}) => {\n          signature.markVerified();\n          this.hashTree.signatures[index] = signature;\n        });\n      });\n    }\n  }\n\n  class UnifiedMerkleHashTree {\n    constructor() {\n      this.subtrees = [];\n      this.nextStart = 0;\n      this.chunkCount = 0;\n    }\n\n    findSubtree({bin}) {\n      const index = binSearch(\n        this.subtrees.length - 1,\n        i => {\n          const {start, end} = this.subtrees[i].rootAddress;\n          return start <= bin && bin <= end ? 0 : start - bin;\n        },\n      );\n\n      return index < 0 ? undefined : this.subtrees[index];\n    }\n\n    insertSubtree(subtree) {\n      const storedSubtree = this.findSubtree(subtree.rootAddress);\n      if (storedSubtree !== undefined) {\n        if (storedSubtree !== subtree) {\n          subtree.copy(storedSubtree);\n        }\n\n        return storedSubtree;\n      }\n\n      this.subtrees.push(subtree);\n      this.subtrees.sort((a, b) => a.rootAddress.start - b.rootAddress.start);\n\n      this.chunkCount += subtree.getChunkCount();\n      this.pruneSubtrees();\n\n      return subtree;\n    }\n\n    pruneSubtrees() {\n      while (this.subtrees.length > 0 && this.chunkCount - this.subtrees[0].getChunkCount() > liveDiscardWindow) {\n        const removedTree = this.subtrees.shift();\n        this.chunkCount -= removedTree.getChunkCount();\n      }\n    }\n\n    appendSubtree(values) {\n      const treeSize = MerkleHashTree.minSize(values.length);\n      const nextAddress = new Address(\n        this.nextStart + treeSize - 1,\n        [this.nextStart, this.nextStart + (treeSize - 1) * 2],\n      );\n\n      this.nextStart += treeSize * 2;\n\n      return MerkleHashTree.from(values, nextAddress)\n        .then(subtree => this.insertSubtree(subtree));\n    }\n\n    createVerifier(address) {\n      let subtree = this.findSubtree(address) || new MerkleHashTree(address);\n      return new MerkleHashSubtreeVerifier(this, subtree);\n    }\n\n    getConstituentSignatures(address) {\n      const subtree = this.findSubtree(address);\n      if (subtree === undefined) {\n        return;\n      }\n\n      return subtree.getConstituentSignatures(address);\n    }\n  }\n\n  class MerkleHashSubtreeVerifier extends MerkleHashTreeVerifier {\n    constructor(unifiedHashTree, subtree) {\n      super(subtree);\n      this.unifiedHashTree = unifiedHashTree;\n    }\n\n    verifyChunk(address, value) {\n      return super.verifyChunk(address, value)\n        .then(this.unifiedHashTree.insertSubtree(this.hashTree));\n    }\n  }\n\n  class NoneVerifier {\n    setHash() {}\n\n    setHashSignature() {}\n\n    verifyChunk() {\n      return Promise.resolve();\n    }\n  }\n\n  class NoneVerifierFactory {\n    createVerifier() {\n      return new NoneVerifier();\n    }\n\n    getConstituentSignatures() {\n      return [];\n    }\n  }\n\n  // TODO: sign all method\n  switch (contentIntegrityProtectionMethod) {\n    case ContentIntegrityProtectionMethod.None:\n      return new NoneVerifierFactory();\n    case ContentIntegrityProtectionMethod.MerkleHashTree:\n      return new MerkleHashTree();\n    case ContentIntegrityProtectionMethod.UnifiedMerkleTree:\n      return new UnifiedMerkleHashTree();\n    default:\n      throw new Error('unsupported content integrity protection method');\n  }\n};\n","export default function binSearch(max, comparator) {\n  let left = 0;\n  let right = max;\n\n  while (left <= right) {\n    const mid = left + Math.floor((right - left) / 2);\n    const order = comparator(mid);\n\n    if (order < 0) {\n      left = mid + 1;\n    } else if (order > 0) {\n      right = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(left + 1);\n}\n","import React, {useEffect, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport {ChunkedReadStream, ChunkedWriteStreamInjector} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\n\nimport './App.css';\n\nconst App = () => {\n  const [server] = useState(new Server());\n  const [swarms, setSwarms] = useState([]);\n  const [swarmUri, setSwarmUri] = useState('');\n\n  useEffect(() => {\n    const injector = new ChunkedWriteStreamInjector();\n\n    injector.on('publish', ({swarm}) => {\n      setSwarmUri(swarm.uri);\n      server.ppsppClient.publishSwarm(swarm);\n    });\n\n    injector.on('unpublish', ({swarm}) => {\n      server.ppsppClient.unpublishSwarm(swarm);\n    });\n\n    injector.start();\n\n    return () => injector.stop();\n  }, []);\n\n  const handleAddPeerClick = () => {\n    Client.create(new ConnManager(server)).then(({ppsppClient}) => {\n      const swarm = ppsppClient.joinSwarm(swarmUri);\n      // console.log(ppsppClient);\n\n      setSwarms([...swarms, swarm]);\n\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', d => console.log(`received ${d.length} bytes`));\n    });\n  };\n\n  const diagnosticMenus = swarms.map((swarm, i) => (\n    <DiagnosticMenu\n      key={i}\n      swarm={swarm}\n      containerClass={`diagnostic-menu--indent-${i}`}\n    />\n  ));\n\n  return (\n    <div>\n      {diagnosticMenus}\n      <button onClick={handleAddPeerClick}>add peer</button>\n    </div>\n  );\n};\n\nexport default App;\n","import React, {useEffect, useReducer, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport {schemeCategory10} from 'd3-scale-chromatic';\nimport {scaleOrdinal} from 'd3-scale';\n// import SpriteText from 'three-spritetext';\n// import {Mesh, SphereBufferGeometry, MeshLambertMaterial} from 'three';\n\nimport './App.css';\n\nconst color = scaleOrdinal(schemeCategory10);\n\nconst reduceGraph = (graph, {type, ...data}) => {\n  switch (type) {\n    case 'ADD_NODE':\n      return {\n        nodes: [...graph.nodes, data],\n        links: graph.links,\n      };\n    case 'REMOVE_NODE':\n      return {\n        nodes: graph.nodes.filter(node => node.id !== data.id),\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.id && target.id !== data.id;\n        }),\n      };\n    case 'ADD_LINK':\n      return {\n        nodes: graph.nodes,\n        links: [...graph.links, {...data, activity: 0}],\n      };\n    case 'UPDATE_LINK':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            ...data,\n          };\n        }),\n      };\n    case 'INCR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity + 1,\n          };\n        }),\n      };\n    case 'DECR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity - 1,\n          };\n        }),\n      };\n    case 'REMOVE_LINK':\n      console.log(data);\n      return {\n        nodes: graph.nodes,\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.source || target.id !== data.target;\n        }),\n      };\n    default:\n      return graph;\n  }\n};\n\nconst useGraph = () => {\n  const [servers, setServers] = useState([new Server()]);\n  const [gen, setGen] = useState(1);\n  const [graph, dispatchGraphAction] = useReducer(reduceGraph, {nodes: [], links: []});\n\n  useEffect(() => {\n    const source = arrayBufferToHex(servers[0].dhtClient.id);\n    dispatchGraphAction({\n      type: 'ADD_NODE',\n      id: source,\n      color: '#fff',\n      dhtClient: servers[0].dhtClient,\n    });\n\n    addNodes(3)\n      .then(clients => clients.map(({dhtClient, ppsppClient}) => {\n        return new Server({dhtClient, ppsppClient});\n      }))\n      .then(newServers => setServers([...servers, ...newServers]));\n  }, []);\n\n  const addNodes = (n = 1, props = {}) => {\n    setGen(gen + 1);\n\n    const clientsResult = Promise.all(new Array(n).fill(0).map(() => {\n      const firstIndex = servers.length - 1;\n      const serverIndex = Math.min(firstIndex, 1 + Math.floor(Math.random() * firstIndex));\n      const server = servers[serverIndex];\n      return Client.create(new ConnManager(server));\n    }));\n\n    clientsResult.then(clients => clients.forEach(({dhtClient}) => {\n      // if (Math.random() > 0.5) {\n      //   setTimeout(() => dhtClient.close(), Math.random() * 30000);\n      // }\n\n      const {id, allChannels} = dhtClient;\n      console.log(allChannels);\n\n      const source = arrayBufferToHex(id);\n      dispatchGraphAction({\n        type: 'ADD_NODE',\n        id: source,\n        color: color(gen),\n        dhtClient,\n        ...props,\n      });\n      dhtClient.on('close', () => dispatchGraphAction({\n        type: 'REMOVE_NODE',\n        id: source,\n      }));\n\n      allChannels.toArray().forEach(channel => {\n        if (channel.isOpen()) {\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target: arrayBufferToHex(channel.id),\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n        }\n      });\n\n      // const registerConnObservers = (target, conn) => {\n      //   const handleMessage = () => {\n      //     dispatchGraphAction({type: 'INCR_LINK_ACTIVITY', source, target});\n      //     setTimeout(() => dispatchGraphAction({type: 'DECR_LINK_ACTIVITY', source, target}), 10000);\n      //   };\n\n      //   conn.on('message', handleMessage);\n      //   conn.remote.on('message', handleMessage);\n      // };\n\n      allChannels.on('added',  channel => {\n        if (channel.isOpen()) {\n          const target = arrayBufferToHex(channel.id);\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('updated', (oldChannel, newChannel) => {\n        if (oldChannel.isOpen() !== newChannel.isOpen()) {\n          const target = arrayBufferToHex(newChannel.id);\n          // dispatchGraphAction({\n          //   type: 'UPDATE_LINK',\n          //   source,\n          //   target,\n          //   color: conn ? '#fff' : '#66f',\n          // });\n\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: newChannel.isOpen() ? '#fff' : '#66f',\n          });\n\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('removed', ({id}) => dispatchGraphAction({\n        type: 'REMOVE_LINK',\n        source,\n        target: arrayBufferToHex(id),\n      }));\n    }));\n\n    return clientsResult;\n  };\n\n  const deleteNodes = (n = 1) => {\n    for (let i = 0; i < n; i ++) {\n      const firstIndex = servers.length;\n      const node = graph.nodes[firstIndex + Math.floor(Math.random() * (Object.keys(graph.nodes).length - firstIndex))];\n      if (node) {\n        node.dhtClient.close();\n      }\n    }\n  };\n\n  return [graph, {addNodes, deleteNodes}];\n};\n\nconst useNodePinger = () => {\n  const [source, setSource] = useState(null);\n\n  const handleNodeClick = node => {\n    console.log(node);\n    if (source === null) {\n      setSource(node);\n      console.log('set source', arrayBufferToHex(node.dhtClient.id));\n      return;\n    }\n\n    console.log('pinging %s > %s', arrayBufferToHex(source.dhtClient.id), arrayBufferToHex(node.dhtClient.id));\n    source.dhtClient.sendPing(node.dhtClient.id, (data) => {\n      console.log('received ping response', data);\n    });\n    setSource(null);\n  };\n\n  return handleNodeClick;\n};\n\nconst App = () => {\n  const [graph, {addNodes, deleteNodes}] = useGraph();\n  const handleNodeClick = useNodePinger();\n\n  console.log(graph);\n\n  // useEffect(() => {\n  //   let n = 1;\n  //   const ivl = setInterval(() => {\n  //     addNodes(1, {color: color(n)});\n  //     if (++ n == 50) {\n  //       clearInterval(ivl);\n  //     }\n  //   }, 1000);\n  //   return () => clearInterval(ivl);\n  // }, []);\n\n  return (\n    <div>\n      <div className=\"graph-buttons\">\n        <button onClick={() => addNodes(1)}>add 1 peer</button>\n        <button onClick={() => addNodes(5)}>add 5 peers</button>\n        <button onClick={() => addNodes(10)}>add 10 peers</button>\n        <button onClick={() => deleteNodes(1)}>delete 1 peer</button>\n        <button onClick={() => deleteNodes(5)}>delete 5 peers</button>\n      </div>\n      <ForceGraph3D\n        graphData={graph}\n        nodeAutoColorBy=\"gen\"\n        onNodeClick={handleNodeClick}\n        linkColor={link => link.color}\n        linkWidth={1.5}\n        nodeRelSize={2}\n        nodeVal={node => node.dhtClient.allChannels.count()}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport App from './App';\nimport Test from './Test';\nimport DhtGraph from './DhtGraph';\n\nconst Router = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/test\" component={Test} />\n      <Route exact path=\"/dht-graph\" component={DhtGraph} />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './Router';\n\nimport './index.css';\n\n// if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {\n//   window.addEventListener('load', function() {\n//     navigator.serviceWorker.register('/service-worker.js');\n//   });\n// }\n\nReactDOM.render(<Router />, document.getElementById('root'));\n","import {EventEmitter} from 'events';\nimport Injector from './ppspp/injector';\n\nconst DELIMITER = Buffer.from('4c93bf00ae13c37e5df3b7a9cea0413521fe1b08a627d065d7180b9d0738c666', 'hex');\nconst DELIMITER_LENGTH = DELIMITER.length;\nconst HEADER_INSTANCE_LENGTH = 37;\n\nexport class ChunkedWriteStream extends EventEmitter {\n  constructor(injector) {\n    super();\n    this.injector = injector;\n  }\n\n  write(buffer) {\n    const length = Buffer.alloc(4);\n    length.writeUInt32BE(buffer.length);\n    this.injector.appendData(Buffer.concat(\n      [\n        DELIMITER,\n        Buffer.from([0]),\n        length,\n        DELIMITER,\n        Buffer.from([1]),\n        length,\n      ],\n      HEADER_INSTANCE_LENGTH * 2,\n    ));\n\n    this.injector.appendData(buffer);\n  }\n}\n\nexport class ChunkedWriteStreamInjector extends EventEmitter {\n  start() {\n    const data = Buffer.alloc(3500000 / 8);\n    data.fill(255);\n\n    Injector.create().then(injector => {\n      this.injector = injector;\n\n      const writer = new ChunkedWriteStream(injector);\n      this.intervalId = setInterval(() => writer.write(data), 1000);\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n\nclass AbstractChunkedReadStream extends EventEmitter {\n  constructor(swarm) {\n    super();\n\n    this.swarm = swarm;\n\n    this.handleWarmupSwarmData = this.handleWarmupSwarmData.bind(this);\n    this.handleSwarmData = this.handleSwarmData.bind(this);\n\n    this.chunkBufferLength = 0;\n    this.nextDataOffset = 0;\n    this.nextDataLength = 0;\n\n    this.swarm.on('data', this.handleWarmupSwarmData);\n  }\n\n  handleWarmupSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const delimiterIndex = data[i].indexOf(DELIMITER);\n      if (delimiterIndex === -1 || delimiterIndex + HEADER_INSTANCE_LENGTH > data[i].length) {\n        continue;\n      }\n\n      this.swarm.removeListener('data', this.handleWarmupSwarmData);\n      this.swarm.on('data', this.handleSwarmData);\n\n      this.readHeader(data[i], delimiterIndex);\n      this.handleSwarmData(data.slice(i));\n\n      break;\n    }\n  }\n\n  readHeader(data, offset) {\n    const instance = data.readUInt8(offset + DELIMITER_LENGTH);\n    this.nextDataOffset = offset + HEADER_INSTANCE_LENGTH * (2 - instance);\n    this.nextDataLength = data.readUInt32BE(offset + DELIMITER_LENGTH + 1);\n  }\n\n  handleSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const lastChunkOffset = this.chunkBufferLength;\n\n      this.chunkBufferLength += data[i].length;\n\n      const nextDataEnd = this.nextDataOffset + this.nextDataLength;\n      if (this.chunkBufferLength < nextDataEnd) {\n        this.handleData(data[i], lastChunkOffset);\n        continue;\n      }\n\n      const lastChunkEnd = nextDataEnd - lastChunkOffset;\n      this.handleEndData(data[i], lastChunkEnd);\n\n      // find the next header or defer to handleWarmupSwarmData if it hasn't arrived\n      if (this.chunkBufferLength - nextDataEnd <= HEADER_INSTANCE_LENGTH) {\n        this.swarm.removeListener('data', this.handleSwarmData);\n        this.swarm.on('data', this.handleWarmupSwarmData);\n\n        this.chunkBufferLength = 0;\n        this.handleWarmupSwarmData(data.slice(i));\n        return;\n      }\n\n      this.chunkBufferLength = 0;\n      this.readHeader(data[i], lastChunkEnd);\n      i--;\n    }\n  }\n}\n\nexport class ChunkedFragmentedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.firstEmitted = false;\n  }\n\n  handleData(data, lastChunkOffset) {\n    if (!this.firstEmitted) {\n      if (this.chunkBufferLength > this.nextDataOffset) {\n        this.emit('start', data.slice(this.nextDataOffset - lastChunkOffset));\n        this.firstEmitted = true;\n      }\n\n      return;\n    }\n\n    this.emit('data', data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.emit('end', data.slice(0, lastChunkEnd));\n    this.firstEmitted = false;\n  }\n}\n\nexport class ChunkedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.chunkBuffer = [];\n  }\n\n  handleData(data) {\n    this.chunkBuffer.push(data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.chunkBuffer.push(data);\n\n    // trim export data range and emit\n    const chunkSlice = this.chunkBuffer.slice();\n\n    chunkSlice[chunkSlice.length - 1] = chunkSlice[chunkSlice.length - 1].slice(0, lastChunkEnd);\n\n    let firstChunkStart = this.nextDataOffset;\n    if (firstChunkStart > chunkSlice[0].length) {\n      firstChunkStart -= chunkSlice[0].length;\n      chunkSlice.shift();\n    }\n    chunkSlice[0] = chunkSlice[0].slice(firstChunkStart);\n\n    this.emit(\n      'data',\n      {\n        chunks: chunkSlice,\n        length: this.nextDataLength,\n      },\n    );\n\n    this.chunkBuffer = [];\n  }\n}\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport createRandomId from './utils/createRandomId';\n\nexport class Server {\n  constructor(props = {}) {\n    this.queue = [];\n    this.dhtClient = props.dhtClient || new dht.Client(createRandomId());\n    this.ppsppClient = props.ppsppClient || new ppspp.Client();\n  }\n}\n\nexport class ConnManager {\n  constructor(server) {\n    this.server = server;\n  }\n\n  bootstrap() {\n    const id = createRandomId();\n\n    const data = {\n      type: 'bootstrap',\n      bootstrapId: arrayBufferToHex(this.server.dhtClient.id),\n      id: arrayBufferToHex(id),\n    };\n    const conn = Conn.open();\n    const client = this.createClient(conn);\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.server.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.server.ppsppClient.createChannel(channel);\n      }\n    });\n\n    this.server.queue.push(client);\n    if (this.server.queue.length > 6) {\n      this.server.queue.shift().close();\n    }\n    // setTimeout(() => client.close(), Math.random() * 30000);\n\n    return Promise.resolve({data, conn: conn.remote});\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    mediator.on('connection', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Conn extends EventEmitter {\n  constructor(remote) {\n    super();\n\n    this.remote = remote || new Conn(this);\n    this.remote.remote = this;\n\n    this.readyState = this.remote.readyState || Conn.ReadyStates.CONNECTING;\n\n    this.onmessage = () => {};\n  }\n\n  send(data) {\n    if (this.readyState === Conn.ReadyStates.OPEN) {\n      setImmediate(() => {\n        this.remote.emit('message', {data});\n        this.remote.onmessage({data});\n      });\n    }\n  }\n\n  addEventListener(...args) {\n    this.on(...args);\n  }\n\n  removeEventListener(...args) {\n    this.removeListener(...args);\n  }\n\n  static open() {\n    const conn = new Conn();\n    conn.open();\n    conn.remote.open();\n    return conn;\n  }\n\n  open() {\n    this.readyState = Conn.ReadyStates.OPEN;\n    this.remote.readyState = Conn.ReadyStates.OPEN;\n    this.emit('open');\n  }\n\n  close() {\n    this.readyState = Conn.ReadyStates.CLOSING;\n    this.remote.readyState = Conn.ReadyStates.CLOSING;\n\n    this.remote.emit('close');\n    this.emit('close');\n\n    this.readyState = Conn.ReadyStates.CLOSED;\n    this.remote.readyState = Conn.ReadyStates.CLOSED;\n\n    this.removeAllListeners();\n    this.remote.removeAllListeners();\n  }\n}\n\nConn.ReadyStates = {\n  CONNECTING: 'connecting',\n  OPEN: 'open',\n  CLOSING: 'closing',\n  CLOSED: 'closed',\n};\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case 'connection':\n        this.handleConnection(data);\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  handleConnection({id}) {\n    const datachannels = Mediator.datachannels[id];\n    delete Mediator.datachannels[id];\n\n    Object.entries(datachannels).forEach(([label, channel]) => this.emit('datachannel', label, channel));\n    this.emit('open');\n  }\n\n  sendConnection(datachannels) {\n    const id = Mediator.nextId ++;\n    Mediator.datachannels[id] = datachannels;\n\n    this.conn.send(JSON.stringify({\n      type: 'connection',\n      id,\n    }));\n\n    this.emit('open');\n  }\n}\n\nMediator.nextId = 0;\nMediator.datachannels = {};\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.datachannels = {};\n    this.conns = [];\n\n    mediator.on('datachannel', this.handleDataChannel.bind(this));\n    mediator.once('open', this.handleOpen.bind(this));\n  }\n\n  handleDataChannel(label, conn) {\n    const channel = new ClientDataChannel(this, label, conn);\n    this.conns.push(channel);\n    this.emit('datachannel', {label, channel});\n  }\n\n  handleOpen() {\n    setImmediate(() => {\n      this.conns.forEach(conn => conn.open());\n      this.emit('open');\n    });\n  }\n\n  createDataChannel(label) {\n    const channel = new ClientDataChannel(this, label);\n    this.datachannels[label] = channel;\n    this.conns.push(channel);\n    return channel;\n  }\n\n  init() {\n    this.mediator.sendConnection(this.datachannels);\n  }\n\n  close() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n\n    this.conns.forEach(conn => conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n}\n\nexport class ClientDataChannel extends Conn {\n  constructor(client, label, remote) {\n    super(remote);\n\n    this.client = client;\n    this.label = label;\n  }\n}\n","import {LiveSignatureAlgorithm} from './constants';\n\nconst isRsaAlgorithm = liveSignatureAlgorithm => {\n  const rsaAlgorithms = [\n    LiveSignatureAlgorithm.RSASHA1,\n    LiveSignatureAlgorithm.RSASHA256,\n  ];\n  return rsaAlgorithms.includes(liveSignatureAlgorithm);\n};\n\nexport default class SwarmId {\n  constructor(\n    liveSignatureAlgorithm,\n    publicKey,\n    publicExponent,\n    modulusLength,\n  ) {\n    this.liveSignatureAlgorithm = liveSignatureAlgorithm;\n    this.publicKey = Buffer.from(publicKey);\n    this.publicExponent = publicExponent;\n    this.modulusLength = modulusLength;\n  }\n\n  getLiveSignatureByteLength() {\n    switch (this.liveSignatureAlgorithm) {\n      case LiveSignatureAlgorithm.RSASHA1:\n      case LiveSignatureAlgorithm.RSASHA256:\n        return this.modulusLength / 8;\n      case LiveSignatureAlgorithm.ECDSAP256SHA256:\n        return 64;\n      case LiveSignatureAlgorithm.ECDSAP384SHA384:\n        return 96;\n      default:\n        throw new Error('unsupported live signature algorithm');\n    }\n  }\n\n  getKeyParams() {\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      return {\n        publicExponent: new Uint8Array(this.publicExponent),\n        modulusLength: this.modulusLength,\n      };\n    }\n    return {};\n  }\n\n  byteLength() {\n    const metadataLength = isRsaAlgorithm(this.liveSignatureAlgorithm) ? 9 : 1;\n    return this.publicKey.length + metadataLength;\n  }\n\n  toBuffer() {\n    const buffer = Buffer.alloc(this.byteLength());\n    let length = 0;\n\n    buffer.writeUInt8(this.liveSignatureAlgorithm, length);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      Buffer.from(this.publicExponent).copy(buffer, length + 4 - this.publicExponent.length);\n      length += 4;\n\n      buffer.writeUInt32BE(this.modulusLength, length);\n      length += 4;\n    }\n\n    this.publicKey.copy(buffer, length);\n\n    return buffer;\n  }\n\n  read(buffer) {\n    let length = 0;\n\n    this.liveSignatureAlgorithm = buffer.readUInt8(0);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      this.publicExponent = buffer.slice(length, length + 4);\n      length += 4;\n\n      this.modulusLength = buffer.readUInt32BE(length);\n      length += 4;\n    }\n\n    this.publicKey = buffer.slice(length);\n  }\n\n  static from(values) {\n    if (ArrayBuffer.isView(values)) {\n      const swarmId = Object.create(SwarmId.prototype);\n      swarmId.read(Buffer.from(values));\n      return swarmId;\n    }\n\n    return new SwarmId(\n      values.liveSignatureAlgorithm,\n      values.publicKey,\n      values.publicExponent,\n      values.modulusLength,\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport approx from 'approximate-number';\nimport {scaleLinear} from 'd3-scale';\n\nimport './index.css';\n\nclass ToggleButton extends Component {\n  static defaultProps = {\n    expanded: false,\n  };\n\n  render() {\n    const buttonClasses = classNames({\n      'diagnostic_menu__toggle_button': true,\n      'diagnostic_menu__toggle_button--expanded': this.props.expanded,\n    });\n\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={buttonClasses}\n      />\n    );\n  }\n}\n\nconst formatNumber = value => isFinite(value) ? approx(value) : String(value);\n\n// TODO: total downloaded\n// TODO: total discarded\n// TODO: upload/download rate\nclass SwarmState extends Component {\n  render() {\n    const {scheduler} = this.props.value;\n\n    const values = [\n      {\n        key: 'totalSends',\n        value: formatNumber(scheduler.totalSends),\n      },\n      {\n        key: 'totalRequests',\n        value: formatNumber(scheduler.totalRequests),\n      },\n      {\n        key: 'totalRequestsReceived',\n        value: formatNumber(scheduler.totalRequestsReceived),\n      },\n      {\n        key: 'totalDroppedRequests',\n        value: formatNumber(scheduler.totalDroppedRequests),\n      },\n      {\n        key: 'totalReceived',\n        value: formatNumber(scheduler.totalReceived),\n      },\n      {\n        key: 'totalAdded',\n        value: formatNumber(scheduler.totalAdded),\n      },\n      {\n        key: 'totalCancelled',\n        value: formatNumber(scheduler.totalCancelled),\n      },\n      {\n        key: 'ackUnknownSend',\n        value: formatNumber(scheduler.ackUnknownSend),\n      },\n      {\n        key: 'lastCompletedBin',\n        value: scheduler.lastCompletedBin,\n      },\n      {\n        key: 'picker.firstLoadedChunk',\n        value: scheduler.loadedChunks.min(),\n      },\n      {\n        key: 'picker.firstRequestedChunk',\n        value: scheduler.requestedChunks.min(),\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(scheduler.chunkRate.value()),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    return (\n      <div className=\"swarm_state__container\">\n        <table>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass PeerStateTable extends Component {\n  render() {\n    const peerState = this.props.value;\n\n    const values = [\n      {\n        key: 'chunkIntervalMean',\n        value: formatNumber(peerState.chunkIntervalMean.value()),\n      },\n      {\n        key: 'wasteRate',\n        value: formatNumber(peerState.wasteRate.value()),\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(peerState.chunkRate.value()),\n      },\n      {\n        key: 'ledbat.baseDelay',\n        value: formatNumber(peerState.ledbat.baseDelay.getMin()),\n      },\n      {\n        key: 'ledbat.currentDelay',\n        value: formatNumber(peerState.ledbat.currentDelay.getMin()),\n      },\n      {\n        key: 'ledbat.rttMean',\n        value: formatNumber(peerState.ledbat.rttMean.value()),\n      },\n      {\n        key: 'ledbat.rttVar',\n        value: formatNumber(peerState.ledbat.rttVar.value()),\n      },\n      {\n        key: 'ledbat.cwnd',\n        value: formatNumber(peerState.ledbat.cwnd),\n      },\n      {\n        key: 'ledbat.cto',\n        value: formatNumber(peerState.ledbat.cto),\n      },\n      {\n        key: 'ledbat.flightSize',\n        value: formatNumber(peerState.ledbat.flightSize),\n      },\n      {\n        key: 'validChunks',\n        value: formatNumber(peerState.validChunks),\n      },\n      {\n        key: 'requestQueue.length',\n        value: formatNumber(peerState.requestQueue.length),\n      },\n      {\n        key: 'requestedChunks.length',\n        value: formatNumber(peerState.requestedChunks.length),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    const {\n      startBin,\n      endBin,\n    } = this.props;\n\n    rows.push(\n      <tr key=\"availableChunks\">\n        <td colSpan=\"2\">\n          Available\n          <AvailabilityMapChart\n            value={this.props.value.availableChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"sentChunks\">\n        <td colSpan=\"2\">\n          Sent\n          <AvailabilityMapChart\n            value={this.props.value.sentChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"receivedChunks\">\n        <td colSpan=\"2\">\n          Received\n          <AvailabilityMapChart\n            value={this.props.value.receivedChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    return (\n      <table>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nclass AvailabilityMapChart extends Component {\n  static defaultProps = {\n    width: 300,\n    height: 20,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.canvas = React.createRef();\n    this.scratchCanvas = document.createElement('canvas');\n  }\n\n  componentDidUpdate() {\n    if (!this.canvas.current) {\n      return;\n    }\n\n    const {value} = this.props;\n    const min = isNaN(this.props.startBin)\n      ? value.min()\n      : this.props.startBin;\n    const max = isNaN(this.props.endBin)\n      ? value.max()\n      : this.props.endBin;\n\n    if (!isFinite(min) || !isFinite(max) || isNaN(min) || isNaN(max)) {\n      return;\n    }\n\n    this.scratchCanvas.height = this.props.height;\n    this.scratchCanvas.width = this.props.width;\n\n    const ctx = this.scratchCanvas.getContext('2d');\n\n    const scale = scaleLinear()\n      .domain([min, max])\n      .range([0, this.props.width]);\n\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, this.props.width, this.props.height);\n\n    ctx.fillStyle = '#ccc';\n\n    let lastStart = -1;\n    for (let i = min; i <= max; i += 2) {\n      if (!value.values.get((i + 2) / 2) || i === max) {\n        if (lastStart !== -1) {\n          ctx.fillRect(scale(lastStart), 0, scale(i) - scale(lastStart), 20);\n\n          lastStart = -1;\n        }\n      } else if (lastStart === -1) {\n        lastStart = i;\n      }\n    }\n\n    this.canvas.current.getContext('2d').drawImage(this.scratchCanvas, 0, 0);\n  }\n\n  render() {\n    return (\n      <canvas\n        height={this.props.height}\n        width={this.props.width}\n        ref={this.canvas}\n      />\n    );\n  }\n}\n\nclass PeerState extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n  }\n\n  render() {\n    let table;\n    if (this.state.expanded) {\n      table = (\n        <PeerStateTable\n          value={this.props.value}\n          startBin={this.props.startBin}\n          endBin={this.props.endBin}\n        />\n      );\n    }\n\n    return (\n      <div className=\"peer_state__container\">\n        <div className=\"peer_state__header\">\n          <ToggleButton\n            onClick={this.handleButtonClick}\n            expanded={this.state.expanded}\n          />\n          <h4 className=\"peer_state__title\">\n            {this.props.value.peer.localId} : {this.props.value.peer.remoteId}\n          </h4>\n        </div>\n        {table}\n      </div>\n    );\n  }\n}\n\nclass DiagnosticMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n\n    this.scheduleUpdate();\n  }\n\n  handleUpdate = () => {\n    if (this.state.expanded) {\n      this.forceUpdate(this.scheduleUpdate);\n    }\n  }\n\n  scheduleUpdate = () => {\n    window.requestAnimationFrame(this.handleUpdate);\n  }\n\n  render() {\n    const containerClasses = classNames(\n      this.props.containerClass,\n      {\n        'diagnostic_menu__container': true,\n        'diagnostic_menu__container--expanded': this.state.expanded,\n      },\n    );\n\n    const {\n      lastCompletedBin,\n      liveDiscardWindow,\n    } = this.props.swarm.scheduler;\n    const startBin = lastCompletedBin - liveDiscardWindow;\n    const endBin = lastCompletedBin + liveDiscardWindow;\n\n    let swarmState;\n    let peerStates;\n    if (this.state.expanded) {\n      swarmState = (\n        <SwarmState\n          value={this.props.swarm}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      );\n\n      peerStates = Object.entries(this.props.swarm.scheduler.peerStates).map(([key, peerState]) => (\n        <PeerState\n          key={key}\n          value={peerState}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      ));\n    }\n\n    return (\n      <div className={containerClasses}>\n        <ToggleButton\n          onClick={this.handleButtonClick}\n          expanded={this.state.expanded}\n        />\n        {swarmState}\n        {peerStates}\n      </div>\n    );\n  }\n}\n\nexport default DiagnosticMenu;\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport hexToUint8Array from './hexToUint8Array';\n\nexport class Client {\n  constructor(connManager, conn, bootstrap) {\n    const dhtClientId = hexToUint8Array(bootstrap.id);\n    const bootstrapId = hexToUint8Array(bootstrap.bootstrapId);\n\n    this.connManager = connManager;\n    this.bootstrap = bootstrap;\n    this.swarmUri = bootstrap.swarmUri;\n\n    const client = connManager.createClient(conn);\n\n    this.dhtClient = new dht.Client(dhtClientId);\n    this.dhtClient.on('peers.discover', this.handlePeersDiscover.bind(this));\n    this.dhtClient.on('receive.connect.request', this.handleReceiveConnectRequest.bind(this));\n    this.dhtClient.createChannel(bootstrapId, client.createDataChannel('dht'));\n\n    this.ppsppClient = new ppspp.Client();\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    client.init();\n  }\n\n  static create(connManager) {\n    return connManager.bootstrap().then(({data, conn}) => {\n      return new Client(connManager, conn, data);\n    });\n  }\n\n  handlePeersDiscover(id) {\n    // console.log('creating client for', ids);\n    const sub = new dht.SubChannel(this.dhtClient, id);\n    const client = this.connManager.createClient(sub);\n\n    const dhtChannel = client.createDataChannel('dht');\n    const ppsppChannel = client.createDataChannel('ppspp');\n\n    const timeout = setTimeout(() => client.close(), 10000);\n    const init = () => {\n      clearTimeout(timeout);\n      client.init();\n    };\n\n    dhtChannel.addEventListener('close', () => client.close());\n\n    this.dhtClient.createChannel(id, dhtChannel);\n    this.ppsppClient.createChannel(ppsppChannel);\n\n    this.dhtClient.send(id, 'connect.request', {channelId: sub.id}, init);\n  }\n\n  handleReceiveConnectRequest({data: {channelId, from}, callback}) {\n    // if (this.dhtClient.channels.count() > 10) {\n    //   return;\n    // }\n\n    // console.log('handleReceiveConnectRequest', {channelId, from, callback});\n    const id = new hexToUint8Array(from);\n    const client = this.connManager.createClient(new dht.SubChannel(this.dhtClient, id, channelId));\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.ppsppClient.createChannel(channel);\n      }\n    });\n\n    callback({});\n  }\n}\n","export default class EMA {\n  constructor(alpha) {\n    this.mean = 0;\n    this.alpha = alpha;\n    this.weight = 1;\n  }\n\n  update(value) {\n    this.mean = this.alpha * value + (1 - this.alpha) * this.mean;\n    this.weight *= this.alpha;\n  }\n\n  set(value) {\n    this.mean = value;\n    this.weight = 0;\n  }\n\n  isEmpty() {\n    return this.weight === 1;\n  }\n\n  value() {\n    return this.mean / (1 - this.weight);\n  }\n}\n","export default class RingBuffer {\n  constructor(capacity) {\n    this.setCapacity(capacity);\n  }\n\n  setCapacity(capacity) {\n    this.capacity = capacity;\n    this.lastIndex = capacity;\n    this.values = new Array(capacity);\n\n    for (let i = 0; i < capacity; i ++) {\n      this.values[i] = this.createEmptyValue(i);\n    }\n  }\n\n  advanceLastIndex(lastIndex) {\n    if (this.lastIndex > lastIndex) {\n      return;\n    }\n\n    let firstEmptyIndex = this.lastIndex;\n    if (lastIndex - firstEmptyIndex > this.capacity) {\n      firstEmptyIndex = lastIndex - this.capacity;\n    }\n    for (let i = firstEmptyIndex; i <= lastIndex; i ++) {\n      const index = i % this.capacity;\n      this.values[index] = this.createEmptyValue(i, this.values[index]);\n    }\n    this.lastIndex = lastIndex + 1;\n  }\n\n  createEmptyValue() {\n    return undefined;\n  }\n\n  set(index, value) {\n    this.advanceLastIndex(index);\n    this.values[index % this.capacity] = value;\n  }\n\n  get(index) {\n    if (index < this.lastIndex - this.capacity || index >= this.lastIndex) {\n      return undefined;\n    }\n    return this.values[index % this.capacity];\n  }\n\n  push(value) {\n    this.set(this.lastIndex, value);\n  }\n}\n","import EMA from './ema';\nimport RingBuffer from './RingBuffer';\n\nclass DelayBuffer extends RingBuffer {\n  constructor(capacity, window) {\n    super(capacity);\n    this.min = Infinity;\n    this.window = window;\n  }\n\n  createEmptyValue() {\n    return Infinity;\n  }\n\n  getMin() {\n    return this.min;\n  }\n\n  update(delay) {\n    const now = Math.floor(Date.now() / this.window);\n\n    if (now >= this.lastIndex) {\n      this.advanceLastIndex(now);\n      this.min = Math.min(...this.values);\n    }\n\n    if (delay < this.get(now)) {\n      this.set(now, delay);\n      this.min = Math.min(this.min, delay);\n    }\n  }\n}\n\n// rfc6817\nconst TARGET = 100;\nconst ALLOWED_INCREASE = 1;\nconst GAIN = 1;\nconst CURRENT_HISTORY = 4;\nconst CURRENT_HISTORY_INTERVAL = 1000;\nconst BASE_HISTORY = 10;\nconst BASE_HISTORY_INTERVAL = 60 * 1000;\nconst INIT_CWND = 2;\nconst MIN_CWND = 2;\n\n// max safe WebRTC data channel message size\nconst MSS = 8 * 1024;\n\n// rfc6298\nconst COEF_G = 1;\nconst COEF_K = 4;\n\n// jacobson, v. \"congestion avoidance and control\"\n// doi: 10.1145/52325.52356\nconst COEF_ALPHA = 0.125;\nconst COEF_BETA = 0.25;\n\nexport default class LEDBAT {\n  constructor(target = TARGET, mss = MSS) {\n    this.target = target;\n    this.mss = mss;\n    this.flightSize = 0;\n\n    // the amount of data that is allowed to be outstanding in an rtt in bytes\n    this.cwnd = INIT_CWND * MSS;\n\n    // the congestion timeout\n    this.cto = 1000;\n    this.currentDelay = new DelayBuffer(CURRENT_HISTORY, CURRENT_HISTORY_INTERVAL);\n    this.baseDelay = new DelayBuffer(BASE_HISTORY, BASE_HISTORY_INTERVAL);\n\n    this.lastDataLoss = 0;\n    this.lastAckTime = Infinity;\n    this.rttMean = new EMA(COEF_ALPHA);\n    this.rttVar = new EMA(COEF_BETA);\n\n    this.ackSize = 0;\n  }\n\n  addSent(bytes) {\n    this.flightSize += bytes;\n  }\n\n  addDelaySample(delaySample, bytes = MSS) {\n    this.currentDelay.update(delaySample);\n    this.baseDelay.update(delaySample);\n\n    this.ackSize += bytes;\n\n    this.lastAckTime = Date.now();\n  }\n\n  digestDelaySamples() {\n    this.checkCTO();\n\n    if (this.ackSize === 0) {\n      return;\n    }\n\n    const queuingDelay = Math.abs(this.currentDelay.getMin() - this.baseDelay.getMin());\n    const offTarget = (this.target - queuingDelay) / this.target;\n    this.cwnd += GAIN * offTarget * this.ackSize * this.mss / this.cwnd;\n\n    const maxAllowedCwnd = this.flightSize + ALLOWED_INCREASE * this.mss;\n    this.cwnd = Math.max(Math.min(this.cwnd, maxAllowedCwnd), MIN_CWND * this.mss);\n\n    this.flightSize = Math.max(0, this.flightSize - this.ackSize);\n    this.ackSize = 0;\n  }\n\n  checkCTO() {\n    if (this.flightSize > 0 && Date.now() - this.cto > this.lastAckTime) {\n      this.cwnd = this.mss;\n      this.cto = 2 * this.cto;\n    }\n  }\n\n  addRttSample(rtt) {\n    if (this.rttMean.isEmpty()) {\n      this.rttMean.set(rtt);\n      this.rttVar.set(rtt / 2);\n    } else {\n      this.rttVar.update(Math.abs(this.rttMean.value() - rtt));\n      this.rttMean.update(rtt);\n    }\n\n    this.cto = this.rttMean.value() + Math.max(COEF_G, COEF_K * this.rttVar.value());\n    if (this.cto < 1000) {\n      this.cto = 1000;\n    }\n  }\n\n  onDataLoss(bytes, retransmitting = false) {\n    const now = Date.now();\n    if (this.lastDataLoss !== 0 && now - this.lastDataLoss < this.rttMean.value()) {\n      return;\n    }\n    this.lastDataLoss = now;\n\n    this.cwnd = Math.min(this.cwnd, Math.max(this.cwnd / 2, MIN_CWND * this.mss));\n\n    if (!retransmitting) {\n      this.flightSize = Math.max(0, this.flightSize - bytes);\n    }\n  }\n\n  static computeOneWayDelay(timestamp) {\n    return Date.now() - timestamp;\n  }\n}\n","import {Buffer} from 'buffer';\nimport Address from './address';\nimport {MerkleHashTreeFunctionByteLengths} from './integrity';\n\nimport {\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n} from './constants';\n\nexport const createChunkAddressFieldType = (addressingMethod, chunkSize) => {\n  class Bin32ChunkAddress {\n    constructor(value = 0) {\n      this.type = ChunkAddressingMethod.Bin32;\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n\n    rangeByteLength() {\n      const [start, end] = Address.binBounds(this.value);\n      return (end - start + 1) * chunkSize;\n    }\n\n    static from({bin}) {\n      return new Bin32ChunkAddress(bin);\n    }\n  }\n\n  class ChunkRange32ChunkAddress {\n    constructor(start = 0, end = 0) {\n      this.type = ChunkAddressingMethod.ChunkRange32;\n      this.start = start;\n      this.end = end;\n    }\n\n    read(buffer, offset) {\n      this.start = buffer.readUInt32BE(offset);\n      this.end = buffer.readUInt32BE(offset + 4);\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.start, offset);\n      buffer.writeUInt32BE(this.end, offset + 4);\n    }\n\n    rangeByteLength() {\n      return (this.end - this.start + 1) * chunkSize;\n    }\n\n    static from({start, end}) {\n      return new ChunkRange32ChunkAddress(start, end);\n    }\n  }\n\n  switch (addressingMethod) {\n    case ChunkAddressingMethod.Bin32:\n      return Bin32ChunkAddress;\n    case ChunkAddressingMethod.ChunkRange32:\n      return ChunkRange32ChunkAddress;\n    default:\n      throw new Error('unsupported chunk addressing method');\n  }\n};\n\nconst createBufferFieldType = byteLength => {\n  class BufferField {\n    constructor(value = Buffer.alloc(byteLength)) {\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      buffer.copy(this.value, 0, offset, offset + byteLength);\n      return byteLength;\n    }\n\n    byteLength() {\n      return byteLength;\n    }\n\n    write(buffer, offset) {\n      this.value.copy(buffer, offset);\n    }\n  }\n\n  return BufferField;\n};\n\nexport const createLiveSignatureFieldType = (liveSignatureAlgorithm, swarmId) => {\n  const byteLength = swarmId.getLiveSignatureByteLength();\n\n  class LiveSignatureField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = liveSignatureAlgorithm;\n    }\n  }\n\n  return LiveSignatureField;\n};\n\nexport const createIntegrityHashFieldType = merkleHashTreeFunction => {\n  const byteLength = MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction];\n\n  class IntegrityHashField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = merkleHashTreeFunction;\n    }\n  }\n\n  return IntegrityHashField;\n};\n\nexport const createEncoding = (ChunkAddress, IntegrityHash, LiveSignature) => {\n  class Uint8ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt8(offset);\n      return 1;\n    }\n\n    byteLength() {\n      return 1;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt8(this.value, offset);\n    }\n  }\n\n  class Uint32ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n  }\n\n  class VersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.Version;\n    }\n  }\n\n  class MinimumVersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.MinimumVersion;\n    }\n  }\n\n  class SwarmIdentifierProtocolOption {\n    constructor(value = []) {\n      this.type = ProtocolOptions.SwarmIdentifier;\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt16BE(offset);\n      offset += 2;\n\n      this.value = buffer.slice(offset, offset + length);\n\n      return length + 2;\n    }\n\n    byteLength() {\n      return this.value.length + 2;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt16BE(this.value.length, offset);\n      this.value.copy(buffer, offset + 2);\n    }\n  }\n\n  class ContentIntegrityProtectionMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ContentIntegrityProtectionMethod.MerkleHashTree) {\n      super(method);\n      this.type = ProtocolOptions.ContentIntegrityProtectionMethod;\n    }\n  }\n\n  class MerkleHashTreeFunctionProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = MerkleHashTreeFunction.SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.MerkleHashTreeFunction;\n    }\n  }\n\n  class LiveSignatureAlgorithmProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = LiveSignatureAlgorithm.ECDSAP256SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.LiveSignatureAlgorithm;\n    }\n  }\n\n  class ChunkAddressingMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ChunkAddressingMethod.ChunkRange32) {\n      super(method);\n      this.type = ProtocolOptions.ChunkAddressingMethod;\n    }\n  }\n\n  class LiveDiscardWindowProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.LiveDiscardWindow;\n    }\n  }\n\n  class SupportedMessagesProtocolOption {\n    constructor(messageTypes = Object.values(MessageTypes).filter(v => !isNaN(v))) {\n      this.type = ProtocolOptions.SupportedMessages;\n      this.value = {};\n      messageTypes.forEach(type => this.value[type] = true);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt8(offset);\n      offset += 1;\n\n      for (let i = 0; i < length; i ++) {\n        const byte = buffer[offset + i];\n        for (let j = 0; j < 8; j ++) {\n          this.value[i * 8 + j] = Boolean(byte & (1 << 7 - j));\n        }\n      }\n\n      return length + 1;\n    }\n\n    bitmapByteLength() {\n      return Math.ceil(Math.max(...Object.keys(this.value)) / 8) + 1;\n    }\n\n    toBitmap() {\n      const length = this.bitmapByteLength();\n      const buffer = Buffer.alloc(length);\n\n      for (let i = 0; i < length; i ++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j ++) {\n          byte = (byte << 1) | (this.value[i * 8 + j] ? 1 : 0);\n        }\n        buffer.writeUInt8(byte, i);\n      }\n      return buffer;\n    }\n\n    byteLength() {\n      return this.bitmapByteLength() + 1;\n    }\n\n    write(buffer, offset) {\n      const bitmap = this.toBitmap();\n      buffer.writeUInt8(bitmap.length, offset);\n      bitmap.copy(buffer, offset + 1);\n    }\n  }\n\n  class ChunkSizeProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.ChunkSize;\n    }\n  }\n\n  const protocolOptionRecordTypes = {\n    [ProtocolOptions.Version]: VersionProtocolOption,\n    [ProtocolOptions.MinimumVersion]: MinimumVersionProtocolOption,\n    [ProtocolOptions.SwarmIdentifier]: SwarmIdentifierProtocolOption,\n    [ProtocolOptions.ContentIntegrityProtectionMethod]: ContentIntegrityProtectionMethodProtocolOption,\n    [ProtocolOptions.MerkleHashTreeFunction]: MerkleHashTreeFunctionProtocolOption,\n    [ProtocolOptions.LiveSignatureAlgorithm]: LiveSignatureAlgorithmProtocolOption,\n    [ProtocolOptions.ChunkAddressingMethod]: ChunkAddressingMethodProtocolOption,\n    [ProtocolOptions.LiveDiscardWindow]: LiveDiscardWindowProtocolOption,\n    [ProtocolOptions.SupportedMessages]: SupportedMessagesProtocolOption,\n    [ProtocolOptions.ChunkSize]: ChunkSizeProtocolOption,\n  };\n\n  class HandshakeMessage {\n    constructor(channelId = 0, options = []) {\n      this.type = MessageTypes.HANDSHAKE;\n      this.channelId = channelId;\n      this.options = options;\n    }\n\n    read(buffer, offset) {\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(offset);\n      length += 4;\n\n      while (offset + length < buffer.length) {\n        const code = buffer.readUInt8(offset + length);\n        length += 1;\n\n        if (code === ProtocolOptions.EndOption) {\n          break;\n        }\n\n        const RecordType = protocolOptionRecordTypes[code];\n        const option = new RecordType();\n\n        length += option.read(buffer, offset + length);\n        this.options.push(option);\n      }\n\n      return length;\n    }\n\n    byteLength() {\n      return this.options.reduce((length, option) => length + option.byteLength() + 1, 0) + 5;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, offset);\n      length += 4;\n\n      this.options.forEach(option => {\n        buffer.writeUInt8(option.type, offset + length);\n        length += 1;\n\n        option.write(buffer, offset + length);\n        length += option.byteLength();\n      });\n\n      buffer.writeUInt8(ProtocolOptions.EndOption, offset + length);\n      length += 1;\n\n      return length;\n    }\n  }\n\n  class Timestamp {\n    constructor(value = Date.now()) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      const seconds = buffer.readInt32BE(offset);\n      const nanoseconds = buffer.readInt32BE(offset + 4);\n      this.value = seconds * 1e3 + nanoseconds / 1e6;\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeInt32BE(Math.floor(this.value / 1e3), offset);\n      buffer.writeInt32BE((this.value % 1e3) * 1e6, offset + 4);\n    }\n  }\n\n  class DataMessage {\n    constructor(address = new ChunkAddress(), data = [], timestamp = new Timestamp()) {\n      this.type = MessageTypes.DATA;\n      this.address = address;\n      this.data = Buffer.from(data);\n      this.timestamp = timestamp;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n\n      offset += length;\n      const dataLength = Math.min(this.address.rangeByteLength(), buffer.length - offset);\n      this.data = buffer.slice(offset, offset + dataLength);\n\n      return length + dataLength;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.data.length + 8;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.data.copy(buffer, offset + length);\n    }\n  }\n\n  class AddressMessage {\n    constructor(address = new ChunkAddress()) {\n      this.address = address;\n    }\n\n    read(buffer, offset) {\n      return this.address.read(buffer, offset);\n    }\n\n    byteLength() {\n      return this.address.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n    }\n  }\n\n  class AckMessage {\n    constructor(address = new ChunkAddress(), delaySample = new Timestamp()) {\n      this.type = MessageTypes.ACK;\n      this.address = address;\n      this.delaySample = delaySample;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.delaySample.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.delaySample.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.delaySample.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class HaveMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.HAVE;\n    }\n  }\n\n  class IntegrityMessage {\n    constructor(address = new ChunkAddress(), hash = new IntegrityHash()) {\n      this.type = MessageTypes.INTEGRITY;\n      this.address = address;\n      this.hash = hash;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.hash.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.hash.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.hash.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class SignedIntegrityMessage {\n    constructor(\n      address = new ChunkAddress(),\n      timestamp = new Timestamp(),\n      signature = new LiveSignature(),\n    ) {\n      this.type = MessageTypes.SIGNED_INTEGRITY;\n      this.address = address;\n      this.timestamp = timestamp;\n      this.signature = signature;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n      length += this.signature.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.timestamp.byteLength() + this.signature.byteLength();\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.signature.write(buffer, offset + length);\n    }\n  }\n\n  class RequestMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.REQUEST;\n    }\n  }\n\n  class CancelMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.CANCEL;\n    }\n  }\n\n  class EmptyMessage {\n    read() {\n      return 0;\n    }\n\n    byteLength() {\n      return 0;\n    }\n\n    write() {}\n  }\n\n  class ChokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.CHOKE;\n    }\n  }\n\n  class UnchokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.UNCHOKE;\n    }\n  }\n\n  const messageRecordTypes = {\n    [MessageTypes.HANDSHAKE]: HandshakeMessage,\n    [MessageTypes.DATA]: DataMessage,\n    [MessageTypes.ACK]: AckMessage,\n    [MessageTypes.HAVE]: HaveMessage,\n    [MessageTypes.INTEGRITY]: IntegrityMessage,\n    [MessageTypes.SIGNED_INTEGRITY]: SignedIntegrityMessage,\n    [MessageTypes.REQUEST]: RequestMessage,\n    [MessageTypes.CANCEL]: CancelMessage,\n    [MessageTypes.CHOKE]: ChokeMessage,\n    [MessageTypes.UNCHOKE]: UnchokeMessage,\n  };\n\n  class Messages {\n    constructor(values = []) {\n      this.values = values;\n      this.buffer = null;\n      this.offset = 0;\n    }\n\n    static from(values) {\n      if (values instanceof Messages) {\n        return values;\n      }\n      if (Array.isArray(values)) {\n        return new Messages(values);\n      }\n      throw new Error('unable to create Messages from unsupported type');\n    }\n\n    next() {\n      if (this.offset >= this.buffer.length) {\n        return;\n      }\n\n      const messageType = this.buffer.readUInt8(this.offset);\n      this.offset += 1;\n\n      const RecordType = messageRecordTypes[messageType];\n      const message = new RecordType();\n      this.values.push(message);\n\n      this.offset += message.read(this.buffer, this.offset);\n\n      return message;\n    }\n\n    toArray() {\n      // eslint-disable-next-line no-empty\n      while (this.next()) {}\n      return this.values;\n    }\n\n    read(buffer, offset) {\n      this.buffer = buffer;\n      this.offset = offset;\n      return 0;\n    }\n\n    byteLength() {\n      return this.values.reduce((length, message) => length + message.byteLength() + 1, 0);\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.values.forEach(message => {\n        buffer.writeUInt8(message.type, offset + length);\n        length += 1;\n\n        message.write(buffer, offset + length);\n        length += message.byteLength();\n      });\n\n      return length;\n    }\n  }\n\n  class Datagram {\n    constructor(channelId = 0, messages = []) {\n      this.channelId = channelId;\n      this.messages = Messages.from(messages);\n    }\n\n    read(data) {\n      const buffer = Buffer.from(data);\n\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(0);\n      length += 4;\n\n      length += this.messages.read(buffer, length);\n\n      return length;\n    }\n\n    byteLength() {\n      return this.messages.byteLength() + 4;\n    }\n\n    write(buffer) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, 0);\n      length += 4;\n\n      length += this.messages.write(buffer, length);\n\n      return length;\n    }\n\n    toBuffer() {\n      const buffer = Buffer.alloc(this.byteLength());\n      this.write(buffer);\n      return buffer;\n    }\n\n    static from(buffer) {\n      const datagram = new Datagram();\n      datagram.read(buffer);\n      return datagram;\n    }\n  }\n\n  return {\n    VersionProtocolOption,\n    MinimumVersionProtocolOption,\n    SwarmIdentifierProtocolOption,\n    ContentIntegrityProtectionMethodProtocolOption,\n    MerkleHashTreeFunctionProtocolOption,\n    LiveSignatureAlgorithmProtocolOption,\n    ChunkAddressingMethodProtocolOption,\n    LiveDiscardWindowProtocolOption,\n    SupportedMessagesProtocolOption,\n    ChunkSizeProtocolOption,\n    HandshakeMessage,\n    Timestamp,\n    DataMessage,\n    AckMessage,\n    HaveMessage,\n    IntegrityMessage,\n    SignedIntegrityMessage,\n    RequestMessage,\n    CancelMessage,\n    ChokeMessage,\n    UnchokeMessage,\n    Datagram,\n    LiveSignature,\n    IntegrityHash,\n    ChunkAddress,\n  };\n};\n","function createMask(bits) {\n  let mask = 0;\n  for (let i = 0; i < bits; i ++) {\n    mask = (mask << 1) | 1;\n  }\n  return mask;\n}\n\nfunction applyMask(byte, mask, value) {\n  if (value) {\n    return byte | mask;\n  }\n  return byte & (255 ^ mask);\n}\n\nexport default class BitArray {\n  constructor(capacity = 0) {\n    this.offset = 0;\n    this.resize(capacity);\n  }\n\n  // TODO: copy old values..?\n  resize(capacity) {\n    this.capacity = capacity;\n    this.values = new Uint8Array(Math.ceil(capacity / 8));\n  }\n\n  adjustOffset(index) {\n    const {offset} = this;\n    const distance = (index - offset) - this.capacity;\n    if (distance <= 0) {\n      return;\n    }\n\n    this.offset += distance;\n    this.unsafelySetRange(offset + 1, offset + distance + 1, false);\n  }\n\n  getByteIndex(index) {\n    return Math.floor(index / 8) % this.values.length;\n  }\n\n  getBitIndex(index) {\n    return index % 8;\n  }\n\n  getIndexValue(byteIndex, bitIndex) {\n    const byteOffset = this.offset % (this.values.length * 8);\n    const offset = byteIndex < byteOffset\n      ? this.offset + (this.values.length * 8) - byteOffset\n      : this.offset;\n    return offset + (byteIndex * 8 + bitIndex);\n  }\n\n  setRange(start, end, value = true) {\n    if (end - start === 1) {\n      this.set(start, value);\n      return;\n    }\n\n    if (end <= this.offset) {\n      return;\n    }\n    start = Math.max(start, this.offset);\n\n    this.adjustOffset(end);\n    this.unsafelySetRange(start, end, value);\n  }\n\n  unsafelySetRange(start, end, value = true, fillEndByte = false) {\n    if (end - start >= this.capacity) {\n      this.values.fill(value ? 255 : 0);\n      return;\n    }\n\n    const startByteIndex = this.getByteIndex(start);\n    const endByteIndex = this.getByteIndex(end);\n    const startBitIndex = this.getBitIndex(start);\n    const endBitIndex = this.getBitIndex(end);\n\n    if (startByteIndex > endByteIndex) {\n      this.unsafelySetIndexRange(startByteIndex, startBitIndex, this.capacity, 0, value);\n      this.unsafelySetIndexRange(0, 0, endByteIndex, endBitIndex, value);\n      return;\n    }\n\n    this.unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value);\n  }\n\n  unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value) {\n    let startMask = createMask(8 - startBitIndex);\n    let endMask = 255 ^ createMask(8 - endBitIndex);\n\n    if (startByteIndex === endByteIndex) {\n      const mask = startMask & endMask;\n      this.values[startByteIndex] = applyMask(this.values[startByteIndex], mask, value);\n      return;\n    }\n\n    this.values[startByteIndex] = applyMask(this.values[startByteIndex], startMask, value);\n    this.values[endByteIndex] = applyMask(this.values[endByteIndex], endMask, value);\n\n    if (endByteIndex - startByteIndex > 1) {\n      this.values.fill(value ? 255 : 0, startByteIndex + 1, endByteIndex);\n    }\n  }\n\n  unsetRange(start, end) {\n    this.setRange(start, end, false);\n  }\n\n  set(index, value = true) {\n    if (index < this.offset) {\n      return;\n    }\n\n    this.adjustOffset(index);\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    this.values[byteIndex] = applyMask(this.values[byteIndex], mask, value);\n  }\n\n  unset(index) {\n    this.set(index, false);\n  }\n\n  get(index) {\n    if (index <= this.offset || index > this.offset + this.capacity) {\n      return false;\n    }\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    return (this.values[byteIndex] & mask) !== 0;\n  }\n\n  toValueArray() {\n    const values = [];\n    for (let i = 1; i <= this.capacity; i ++) {\n      if (this.get(this.offset + i)) {\n        values.push(this.offset + i);\n      }\n    }\n    return values;\n  }\n\n  min() {\n    for (let i = this.offset; i <= this.offset + this.capacity; i += 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const firstBit = Math.floor(i / 8) * 8;\n        for (let j = firstBit; j < firstBit + 8; j ++) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return Infinity;\n  }\n\n  max() {\n    for (let i = this.capacity + this.offset; i >= this.offset; i -= 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const lastBit = Math.ceil(i / 8) * 8 + 1;\n        for (let j = lastBit; j > lastBit - 8; j --) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return -Infinity;\n  }\n}\n","export class Flow {\n  constructor() {\n    this.lastVirtualFinish = 0;\n    this.nextVirtualFinish = Infinity;\n    this.queue = [];\n  }\n\n  computeWeight() {\n    return 1;\n  }\n}\n\nexport class Queue {\n  constructor(rate) {\n    this.rate = rate;\n    this.totalQueueSize = 0;\n    this.flows = [];\n  }\n\n  addFlow(flow) {\n    return this.flows.push(flow);\n  }\n\n  removeFlow(flow) {\n    const index = this.flows.indexOf(flow);\n    if (index !== -1) {\n      this.flows.splice(index, 1);\n    }\n  }\n\n  enqueue(flow, size, value) {\n    const weight = flow.computeWeight(this);\n    const rate = this.rate / weight;\n    const virtualFinish = Math.max(Date.now(), flow.lastVirtualFinish) + size / rate;\n\n    flow.queue.push({\n      virtualFinish,\n      size,\n      value,\n    });\n    flow.lastVirtualFinish = virtualFinish;\n    if (flow.queue.length === 1) {\n      flow.nextVirtualFinish = virtualFinish;\n    }\n  }\n\n  getNextScheduledFlow() {\n    let minVirtualFinish = Infinity;\n    let flow = null;\n    for (let i = 0; i < this.flows.length; i ++) {\n      if (this.flows[i].nextVirtualFinish < minVirtualFinish) {\n        flow = this.flows[i];\n        minVirtualFinish = flow.nextVirtualFinish;\n      }\n    }\n\n    return flow;\n  }\n\n  peek() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    return {\n      flow,\n      task: flow.queue[0],\n    };\n  }\n\n  dequeue() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    const task = flow.queue.shift();\n\n    flow.nextVirtualFinish = flow.queue.length !== 0\n      ? flow.queue[0].virtualFinish\n      : Infinity;\n\n    return {flow, task};\n  }\n}\n\nexport default {\n  Queue,\n  Flow,\n};\n","import BitArray from '../bitarray';\nimport Address from './address';\nimport wfq from '../wfq';\nimport EMA from '../ema';\nimport LEDBAT from '../ledbat';\nimport RingBuffer from '../RingBuffer';\n\nexport class AvailabilityMap {\n  constructor(capacity) {\n    this.values = new BitArray(capacity);\n  }\n\n  // TODO: ignore very large discard windows from remote peers...\n  setCapacity(capacity) {\n    this.values.resize(capacity);\n  }\n\n  set(address, value) {\n    this.values.setRange(address.start / 2, address.end / 2 + 1, value);\n  }\n\n  get({start, end = start}) {\n    for (let i = start; i <= end; i += 2) {\n      if (!this.values.get(i / 2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  min() {\n    return this.values.min() * 2;\n  }\n\n  max() {\n    return this.values.max() * 2;\n  }\n}\n\nexport class BinRingBuffer extends RingBuffer {\n  advanceLastBin(bin) {\n    super.advanceLastIndex(bin / 2);\n  }\n\n  setRange({start}, values) {\n    for (let i = 0; i < values.length; i ++) {\n      super.set(start / 2 + i, values[i]);\n    }\n  }\n\n  set({bin}, value) {\n    super.set(bin / 2, value);\n  }\n\n  get({bin}) {\n    return super.get(bin / 2);\n  }\n\n  forEach(callback) {\n    for (let i = this.lastIndex - this.capacity; i < this.lastIndex; i ++) {\n      if (callback(this.get(i), i * 2) === false) {\n        break;\n      }\n    }\n  }\n}\n\nexport class RateMeter {\n  constructor(windowMs, sampleWindowMs = 100) {\n    this.firstSampleWindow = Math.floor(Date.now() / sampleWindowMs);\n    this.lastSampleWindow = this.firstSampleWindow;\n    this.windowMs = windowMs;\n    this.sampleWindowMs = sampleWindowMs;\n    this.sum = 0;\n    this.values = new Array(Math.ceil(windowMs / sampleWindowMs));\n\n    this.values.fill(0);\n  }\n\n  adjustSampleWindow() {\n    const sampleWindow = Math.floor(Date.now() / this.sampleWindowMs);\n\n    for (let i = this.lastSampleWindow + 1; i <= sampleWindow; i ++) {\n      const index = i % this.values.length;\n      this.sum -= this.values[index];\n      this.values[index] = 0;\n    }\n    this.lastSampleWindow = sampleWindow;\n  }\n\n  update(value) {\n    this.adjustSampleWindow();\n    this.sum += value;\n    this.values[this.lastSampleWindow % this.values.length] += value;\n  }\n\n  value() {\n    this.adjustSampleWindow();\n    const accumulatedMs = Math.min(\n      (this.lastSampleWindow - this.firstSampleWindow) * this.sampleWindowMs,\n      this.windowMs,\n    );\n    return this.sum / accumulatedMs;\n  }\n}\n\nexport class ChunkRateMeter extends RateMeter {\n  constructor(windowMs = 15000) {\n    super(windowMs);\n    this.lastEndBin = 0;\n  }\n\n  update({start, end}) {\n    if (this.lastHeadBin === 0) {\n      super.update((end - start) / 2);\n    } else if (end > this.lastEndBin) {\n      super.update((end - this.lastEndBin) / 2);\n      this.lastEndBin = end;\n    }\n  }\n}\n\nexport class RequestFlow extends wfq.Flow {\n  constructor(id) {\n    super();\n    this.id = id;\n    this.queueSize = 0;\n  }\n\n  computeWeight(queue) {\n    return this.queueSize / queue.totalQueueSize;\n  }\n}\n\nexport class RequestQueue extends wfq.Queue {\n  constructor(rate) {\n    super(rate);\n    this.totalQueueSize = 0;\n  }\n\n  enqueue(flow, size, value) {\n    this.totalQueueSize += size;\n    flow.queueSize += size;\n    super.enqueue(flow, size, value);\n  }\n\n  cancel(flow, filter) {\n    flow.queue = flow.queue.filter(task => {\n      const remove = filter(task.value);\n\n      if (remove) {\n        this.totalQueueSize -= task.size;\n        flow.queueSize -= task.size;\n      }\n\n      return !remove;\n    });\n  }\n\n  dequeue() {\n    const result = super.dequeue();\n    if (result === null) {\n      return null;\n    }\n\n    this.totalQueueSize -= result.task.size;\n    result.flow.queueSize -= result.task.size;\n\n    return result;\n  }\n}\n\nexport class SchedulerChunkState {\n  constructor(bin) {\n    this.bin = bin;\n    this.reset();\n  }\n\n  reset() {\n    this.availableCopies = 0;\n    this.requestTime = [0, 0];\n    this.requestPeerId = 0;\n\n    this.requested = false;\n    this.received = false;\n    this.verified = false;\n  }\n}\n\nexport class SchedulerChunkRequestMap {\n  constructor() {\n    this.valueByBin = {};\n    this.head = undefined;\n    this.tail = undefined;\n    this.length = 0;\n  }\n\n  insert(address) {\n    const now = Date.now();\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      const value = {\n        address: new Address(i),\n        createdAt: now,\n        next: undefined,\n        prev: undefined,\n      };\n      this.valueByBin[i] = value;\n\n      if (this.head === undefined) {\n        this.head = value;\n      } else {\n        this.tail.next = value;\n      }\n      value.prev = this.tail;\n      this.tail = value;\n\n      this.length ++;\n    }\n  }\n\n  get({bin}) {\n    return this.valueByBin[bin];\n  }\n\n  remove({bin}) {\n    const value = this.valueByBin[bin];\n    if (value === undefined) {\n      return;\n    }\n    delete this.valueByBin[bin];\n\n    if (this.head === value) {\n      this.head = value.next;\n    }\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.prev !== undefined) {\n      value.prev.next = value.next;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = value.prev;\n    }\n\n    this.length --;\n  }\n\n  peek() {\n    return this.head;\n  }\n\n  pop() {\n    if (this.head === undefined) {\n      return;\n    }\n    const value = this.head;\n\n    this.head = value.next;\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = undefined;\n    }\n\n    delete this.valueByBin[value.address.bin];\n\n    this.length --;\n\n    return value;\n  }\n}\n\nexport class SchedulerChunkMap extends BinRingBuffer {\n  createEmptyValue(bin, value) {\n    if (value === undefined) {\n      return new SchedulerChunkState(bin);\n    }\n\n    // put the peer map here and when we advance the bin meme update\n    // the availability map here\n\n    value.reset();\n    return value;\n  }\n}\n\nexport class SchedulerPeerState {\n  constructor(peer, requestFlow) {\n    this.peer = peer;\n    this.requestFlow = requestFlow;\n    this.availableChunks = new AvailabilityMap();\n\n    this.ledbat = new LEDBAT();\n\n    // this.rttMean = new EMA(0.125);\n    // this.rttVar = new EMA(0.25);\n\n    this.rttMean = new EMA(0.05);\n    this.rttVar = new EMA(0.05);\n\n    this.chunkIntervalMean = new EMA(0.25);\n    this.chunkRate = new RateMeter(15000);\n    this.wasteRate = new RateMeter(15000);\n    this.lastChunkTime = null;\n\n    this.requestTimes = new BinRingBuffer();\n\n    this.requestedChunks = new SchedulerChunkRequestMap();\n    this.sentRequests = new SchedulerChunkRequestMap();\n\n    this.timeouts = 0;\n    this.validChunks = 0;\n    this.invalidChunks = 0;\n\n    this.requestQueue = [];\n\n    this.sentChunks = new AvailabilityMap();\n    this.receivedChunks = new AvailabilityMap();\n  }\n}\n\nexport class Scheduler {\n  constructor(chunkSize, clientOptions) {\n    const {\n      liveDiscardWindow,\n      uploadRateLimit,\n    } = clientOptions;\n\n    this.chunkSize = chunkSize;\n    this.liveDiscardWindow = liveDiscardWindow;\n\n    // where are we in the buffer\n\n    // how rare is a chunk\n    // how urgently is a chunk needed\n\n    // high/mid/low priority time bands\n\n    // high performance/reliability peers\n    // expected performance per peer\n\n    // request timeout/cancel\n    // send timeout/cancel?\n\n    // average stream bit rate\n    // position in available window\n    // position in theoretical window\n\n    // minimum needed bin\n\n    this.peerStates = {};\n    this.chunkStates = new SchedulerChunkMap(liveDiscardWindow);\n    this.loadedChunks = new AvailabilityMap(liveDiscardWindow);\n    this.peerCount = 0;\n\n    this.chunkRate = new ChunkRateMeter();\n\n    this.requestQueue = new RequestQueue(uploadRateLimit / 1000);\n\n    // this.update = this.update.bind(this);\n    // setTimeout(this.update, 0);\n\n    this.timers = {};\n\n    this.lastExportedBin = -Infinity;\n    this.lastCompletedBin = -Infinity;\n    this.requestedChunks = new AvailabilityMap(liveDiscardWindow);\n\n    this.totalSends = 0;\n    this.totalRequests = 0;\n    this.totalRequestsReceived = 0;\n    this.totalReceived = 0;\n    this.totalAdded = 0;\n    this.totalCancelled = 0;\n    this.ackUnknownSend = 0;\n    this.totalDroppedRequests = 0;\n    this.sendDelay = new EMA(0.05);\n    // setInterval(this.debug.bind(this), 1000);\n\n    this.nextSendTime = 0;\n    this.nextSendTimeout = 0;\n  }\n\n  debug() {\n    console.log('---');\n    Object.values(this.peerStates).forEach((peerState) => {\n      if (!peerState.peer.isReady()) {\n        return;\n      }\n\n      let cto = peerState.ledbat.cto / (peerState.ledbat.cwnd / this.chunkSize);\n      const timeout = Math.ceil(Math.min(cto, 1000));\n\n      const availableChunks = peerState.availableChunks;\n\n      const firstLoadedChunk = this.loadedChunks.min();\n      const firstRequestedChunk = this.requestedChunks.min();\n      const startBin = Math.max(\n        availableChunks.min(),\n        isFinite(firstLoadedChunk) ? firstLoadedChunk : -Infinity,\n        isFinite(firstRequestedChunk) ? firstLoadedChunk : -Infinity,\n        this.lastCompletedBin,\n      );\n      const lastAvailableBin = Math.min(availableChunks.max(), startBin + this.liveDiscardWindow * 2);\n\n      const planFor = Math.min(1000, peerState.ledbat.rttMean.value() * 4);\n\n      const dip = peerState.chunkIntervalMean.value() || 0;\n      const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n      const cwnd = firstPlanPick - peerState.sentRequests.length;\n\n      console.log(JSON.stringify({\n        peer_remoteId: peerState.peer.remoteId,\n        peer_localId: peerState.peer.localId,\n        sentRequests: peerState.sentRequests.length,\n        swift_rtt: peerState.rttMean.value(),\n        swift_rttvar: peerState.rttVar.value(),\n        swift_chunkIntervalMean: peerState.chunkIntervalMean.value(),\n        chunkRate: peerState.chunkRate.value(),\n        wasteRate: peerState.wasteRate.value(),\n        swift_cwnd: cwnd,\n        ledbat_cwnd: peerState.ledbat.cwnd,\n        ledbat_cto: peerState.ledbat.cto,\n        ledbat_currentDelay: peerState.ledbat.currentDelay.getMin(),\n        ledbat_baseDelay: peerState.ledbat.baseDelay.getMin(),\n        ledbat_rttMean: peerState.ledbat.rttMean.value(),\n        ledbat_rttVar: peerState.ledbat.rttVar.value(),\n        ledbat_rtt: peerState.ledbat.rtt,\n        ledbat_flightSize: peerState.ledbat.flightSize,\n        // requestedChunks: peerState.requestedChunks,\n        timeouts: peerState.timeouts,\n        validChunks: peerState.validChunks,\n        invalidChunks: peerState.invalidChunks,\n        timeout: timeout,\n        picker_startBin: startBin,\n        picker_lastAvailableBin: lastAvailableBin,\n      }, true, 2));\n    });\n\n    console.log(JSON.stringify({\n      totalSends: this.totalSends,\n      totalRequests: this.totalRequests,\n      totalRequestsReceived: this.totalRequestsReceived,\n      totalDroppedRequests: this.totalDroppedRequests,\n      totalReceived: this.totalReceived,\n      totalAdded: this.totalAdded,\n      totalCancelled: this.totalCancelled,\n      ackUnknownSend: this.ackUnknownSend,\n      minIncompleteBin: this.lastCompletedBin,\n      sendDelay: this.sendDelay.value(),\n      picker_firstLoadedChunk: this.loadedChunks.min(),\n      picker_firstRequestedChunk: this.requestedChunks.min(),\n      chunkRate: this.chunkRate.value(),\n    }, true, 2));\n    // this.totalSends = 0;\n    // this.totalRequests = 0;\n    // this.totalRequestsReceived = 0;\n    // this.totalReceived = 0;\n    // // this.ackUnknownSend = 0;\n    // this.totalAdded = 0;\n    // this.totalCancelled = 0;\n    // this.totalDroppedRequests = 0;\n  }\n\n  update(peerState, update) {\n    if (!peerState.peer.isReady()) {\n      this.timers[peerState.localId] = setTimeout(update, 1000);\n      return;\n    }\n\n    const {\n      availableChunks,\n      ledbat,\n      sentRequests,\n    } = peerState;\n\n    const now = Date.now();\n    // const planFor = ledbat.rttMean.value();\n    // const planFor = ledbat.rttMean.value() * 2 + ledbat.rttVar.value() * 4;\n    const planFor = Math.max(1000, ledbat.rttMean.value() * 4);\n    const timeoutThreshold = now - ledbat.cto * 2;\n\n    const dip = peerState.chunkIntervalMean.value() || 0;\n    const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n    const cwnd = firstPlanPick - sentRequests.length;\n\n    const cancelledRequests = [];\n    while (sentRequests.peek() !== undefined\n      && sentRequests.peek().createdAt < timeoutThreshold) {\n      cancelledRequests.push(sentRequests.pop());\n    }\n\n    if (cancelledRequests.length > 0) {\n      this.totalCancelled += cancelledRequests.length;\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        sentRequests.remove(address);\n      });\n\n      // TODO: this is for ack timeout\n      ledbat.onDataLoss(cancelledRequests.length * this.chunkSize);\n      // console.log(cancelledRequests);\n    }\n\n    ledbat.digestDelaySamples();\n\n    const startBin = Math.max(\n      this.loadedChunks.values.offset * 2 + 2,\n      this.requestedChunks.values.offset * 2 + 2,\n      availableChunks.min(),\n      this.lastCompletedBin,\n    );\n    const endBin = Math.min(\n      startBin + this.liveDiscardWindow * 2,\n      availableChunks.max(),\n    );\n    const requestAddresses = [];\n    for (let i = startBin; i < endBin && requestAddresses.length < cwnd; i += 2) {\n      const address = new Address(i);\n      if (!this.loadedChunks.get(address)\n        && !this.requestedChunks.get(address)\n        && availableChunks.get(address)) {\n\n        if (Math.random() < 0.05) {\n          requestAddresses.push(address);\n          sentRequests.insert(address);\n          this.requestedChunks.set(address);\n        }\n      }\n    }\n    if (this.lastCompletedBin === -Infinity && requestAddresses.length !== 0) {\n      const firstRequestedBin = requestAddresses[0].bin;\n      this.lastCompletedBin = firstRequestedBin;\n      this.lastExportedBin = firstRequestedBin - 2;\n    }\n\n    if (cancelledRequests.length !== 0) {\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        peerState.peer.sendCancel(address);\n      });\n    }\n\n    if (requestAddresses.length !== 0) {\n      this.totalRequests += requestAddresses.length;\n      peerState.peer.sendRequest(...requestAddresses);\n\n      requestAddresses.forEach(address => {\n        if (peerState.requestTimes.get(address) === undefined) {\n          peerState.requestTimes.set(address, now);\n        }\n      });\n    }\n\n    while (ledbat.flightSize < ledbat.cwnd && peerState.requestQueue.length) {\n      const requestedAddress = peerState.requestQueue.shift();\n      if (requestedAddress !== undefined) {\n        const requestedChunk = peerState.requestedChunks.get(requestedAddress);\n        if (requestedChunk !== undefined) {\n          requestedChunk.sentAt = now;\n          peerState.ledbat.addSent(this.chunkSize);\n          peerState.peer.sendChunk(requestedAddress);\n          this.totalSends ++;\n        }\n      }\n\n      peerState.sentChunks.set(requestedAddress);\n\n      // TODO: volunteer bin we have and they don't?\n    }\n\n    peerState.peer.flush();\n    let sendInterval = Math.min(1000, (ledbat.rttMean.value() || 0) / (ledbat.cwnd / this.chunkSize));\n    this.timers[peerState.localId] = setTimeout(update, sendInterval);\n  }\n\n  addPeer(peer) {\n    const {localId} = peer;\n\n    const requestFlow = new RequestFlow(localId);\n    this.requestQueue.addFlow(requestFlow);\n\n    const peerState = new SchedulerPeerState(peer, requestFlow);\n    this.peerStates[localId] = peerState;\n\n    const update = () => this.update(peerState, update);\n    this.timers[localId] = setTimeout(update, 1000);\n  }\n\n  removePeer({localId}) {\n    const peerState = this.peerStates[localId];\n    if (peerState === undefined) {\n      return;\n    }\n\n    const {\n      requestFlow,\n      sentRequests,\n    } = peerState;\n\n    this.requestQueue.removeFlow(requestFlow);\n\n    this.totalCancelled += sentRequests.length;\n    while (sentRequests.length) {\n      const {address} = sentRequests.pop();\n      this.requestedChunks.set(address, false);\n    }\n\n    delete this.peerStates[localId];\n\n    clearTimeout(this.timers[localId]);\n  }\n\n  getPeerState({localId}) {\n    return this.peerStates[localId];\n  }\n\n  getRecentChunks() {\n    // TODO: how to pick this... maybe remote discard window size?\n    const startBin = this.loadedChunks.max() - 64;\n\n    // bail if no chunks have been loaded yet\n    if (!isFinite(startBin)) {\n      return [];\n    }\n\n    const bins = [];\n\n    const endBin = this.loadedChunks.max();\n    for (let i = startBin; i <= endBin; i += 2) {\n      const address = new Address(i);\n      if (this.loadedChunks.get(address)) {\n        bins.push(address);\n      }\n    }\n\n    return bins;\n  }\n\n  setLiveDiscardWindow(peer, liveDiscardWindow) {\n    this.getPeerState(peer).availableChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).requestTimes.setCapacity(liveDiscardWindow);\n\n    this.getPeerState(peer).sentChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).receivedChunks.setCapacity(liveDiscardWindow);\n  }\n\n  markChunkReceived(peer, address, delaySample) {\n    const now = Date.now();\n\n    this.totalReceived ++;\n\n    const peerState = this.getPeerState(peer);\n    if (peerState === undefined) {\n      return;\n    }\n\n    if (this.loadedChunks.get(address)) {\n      peerState.wasteRate.update(1);\n    }\n\n    const request = peerState.sentRequests.get(address);\n    if (request === undefined) {\n      return;\n    }\n\n    if (peerState.lastChunkTime !== null) {\n      const chunkInterval = now - peerState.lastChunkTime;\n      peerState.chunkIntervalMean.update(chunkInterval);\n    }\n    peerState.lastChunkTime = now;\n    if (!this.loadedChunks.get(address)) {\n      peerState.chunkRate.update(1);\n    }\n\n    const requestTime = peerState.requestTimes.get(address);\n    if (requestTime !== undefined) {\n      peerState.ledbat.addRttSample(now - requestTime);\n    }\n\n    // peerState.rttMean.update(rtt);\n    // peerState.rttVar.update(Math.abs(rtt - peerState.rttMean.value()));\n\n    // TODO: double check LEDBAT to make sure we shouldn't be doing\n    // something here\n\n    peerState.sentRequests.remove(address);\n  }\n\n  markChunkVerified(peer, address) {\n    // this.chunkStates.get(address).verified = true;\n    this.getPeerState(peer).validChunks ++;\n    this.getPeerState(peer).receivedChunks.set(address);\n\n    // this.chunkStates.advanceLastBin(address.end);\n\n    this.chunkRate.update(address);\n    this.loadedChunks.set(address);\n\n    for (let i = this.lastCompletedBin; this.loadedChunks.get(new Address(i)); i += 2) {\n      this.lastCompletedBin = i;\n    }\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  getNewCompleteBins() {\n    const nextExportedBin = this.lastExportedBin + 2;\n    if (nextExportedBin <= this.lastCompletedBin) {\n      this.lastExportedBin = this.lastCompletedBin;\n      return [nextExportedBin, this.lastCompletedBin];\n    }\n  }\n\n  markChunkRejected(peer, address) {\n    this.requestedChunks.set(address, false);\n    this.getPeerState(peer).invalidChunks ++;\n  }\n\n  markChunkAvailable(peer, address) {\n    for (let i = address.start; i <= address.end; i += 2) {\n      if (!this.getPeerState(peer).availableChunks.get(new Address(i))) {\n        this.totalAdded ++;\n      }\n    }\n\n    this.getPeerState(peer).availableChunks.set(address);\n  }\n\n  markChunksLoaded(address) {\n    this.chunkStates.advanceLastBin(address.end);\n    this.loadedChunks.set(address);\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  markSendAcked(peer, address, delaySample) {\n    const peerState = this.getPeerState(peer);\n\n    peerState.ledbat.addDelaySample(delaySample, this.chunkSize);\n\n    const sentChunk = peerState.requestedChunks.get(address);\n    if (sentChunk === undefined) {\n      this.ackUnknownSend ++;\n      return;\n    }\n\n    // TODO: is this necessary?\n    if (sentChunk.sentAt) {\n      peerState.ledbat.addRttSample(Date.now() - sentChunk.sentAt);\n    }\n\n    peerState.requestedChunks.remove(address);\n  }\n\n  enqueueRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      this.totalRequestsReceived ++;\n      peerState.requestQueue.push(new Address(i));\n    }\n\n    peerState.requestedChunks.insert(address);\n  }\n\n  cancelRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n    const requestedChunk = peerState.requestedChunks.get(address);\n    if (requestedChunk && requestedChunk.sentAt) {\n      peerState.ledbat.onDataLoss(this.chunkSize);\n    }\n    peerState.requestedChunks.remove(address);\n\n    // this.requestQueue.cancel(\n    //   this.getPeerState(peer).requestFlow,\n    //   ({bin}) => address.containsBin(bin),\n    // );\n  }\n}\n","import {EventEmitter} from 'events';\nimport once from 'lodash.once';\nimport Address from './address';\nimport SwarmId from './swarmid';\nimport LEDBAT from '../ledbat';\nimport {\n  createChunkAddressFieldType,\n  createLiveSignatureFieldType,\n  createIntegrityHashFieldType,\n  createEncoding,\n} from './encoding';\nimport {\n  MaxChannelId,\n  ProtocolOptions,\n  MessageTypes,\n} from './constants';\nimport {\n  createMerkleHashTreeFunction,\n  createLiveSignatureVerifyFunction,\n  createLiveSignatureSignFunction,\n  createContentIntegrityVerifierFactory,\n} from './integrity';\nimport {\n  BinRingBuffer,\n  Scheduler,\n} from './scheduler';\n\nconst genericEncoding = createEncoding();\n\nconst BUFFER_SIZE = 3e7;\nconst MAX_UPLOAD_RATE = 1e6;\nconst HANDSHAKE_TIMEOUT = 5000;\n\nexport class Swarm extends EventEmitter {\n  constructor(uri, clientOptions) {\n    super();\n\n    const {swarmId} = uri;\n    const {\n      [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n      [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n      [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n      [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n      [ProtocolOptions.ChunkSize]: chunkSize,\n    } = uri.protocolOptions;\n    const {\n      liveDiscardWindow,\n      privateKey,\n    } = clientOptions;\n\n    this.uri = uri;\n\n    this.encoding = createEncoding(\n      createChunkAddressFieldType(chunkAddressingMethod, chunkSize),\n      createIntegrityHashFieldType(merkleHashTreeFunction),\n      createLiveSignatureFieldType(liveSignatureAlgorithm, swarmId),\n    );\n\n    const liveSignatureSignFunction = privateKey !== undefined\n      ? createLiveSignatureSignFunction(liveSignatureAlgorithm, privateKey)\n      : undefined;\n    this.contentIntegrity = createContentIntegrityVerifierFactory(\n      contentIntegrityProtectionMethod,\n      createMerkleHashTreeFunction(merkleHashTreeFunction),\n      createLiveSignatureVerifyFunction(liveSignatureAlgorithm, swarmId),\n      liveSignatureSignFunction,\n      liveDiscardWindow,\n    );\n\n    this.chunkBuffer = new BinRingBuffer(liveDiscardWindow);\n    this.scheduler = new Scheduler(chunkSize, clientOptions);\n\n    this.protocolOptions = [\n      new this.encoding.VersionProtocolOption(),\n      new this.encoding.MinimumVersionProtocolOption(),\n      new this.encoding.SwarmIdentifierProtocolOption(swarmId.toBuffer()),\n      new this.encoding.ContentIntegrityProtectionMethodProtocolOption(contentIntegrityProtectionMethod),\n      new this.encoding.MerkleHashTreeFunctionProtocolOption(merkleHashTreeFunction),\n      new this.encoding.LiveSignatureAlgorithmProtocolOption(liveSignatureAlgorithm),\n      new this.encoding.ChunkAddressingMethodProtocolOption(chunkAddressingMethod),\n      new this.encoding.ChunkSizeProtocolOption(chunkSize),\n      new this.encoding.LiveDiscardWindowProtocolOption(liveDiscardWindow),\n    ];\n  }\n\n  verifyProtocolOptions(protocolOptions) {\n    Object.entries(this.uri.protocolOptions)\n      .forEach(([protocolOption, value]) => {\n        if (protocolOptions[protocolOption] !== value) {\n          const protocolOptionName = ProtocolOptions.name(protocolOption);\n          throw new Error(`invalid peer options: ${protocolOptionName} mismatch`);\n        }\n      });\n  }\n\n  emitNewData() {\n    const newBins = this.scheduler.getNewCompleteBins();\n    if (newBins !== undefined) {\n      const [minNewBin, maxNewBin] = newBins;\n      const chunks = [];\n      for (let i = minNewBin; i <= maxNewBin; i += 2) {\n        const chunk = this.chunkBuffer.get(new Address(i));\n        if (chunk === undefined) {\n          debugger;\n        }\n        chunks.push(chunk);\n      }\n      this.emit('data', chunks);\n    }\n  }\n}\n\nconst PeerState = {\n  CONNECTING: 1,\n  AWAITING_HANDSHAKE: 2,\n  READY: 3,\n  CHOKED: 4,\n  DISCONNECTING: 5,\n  CLOSED: 6,\n};\n\nclass PeerDataHandlerContext {\n  constructor(swarm) {\n    this.swarm = swarm;\n    this.integrityVerifier = null;\n  }\n\n  getContentIntegrityVerifier(address) {\n    if (this.integrityVerifier === null) {\n      this.integrityVerifier = this.swarm.contentIntegrity.createVerifier(address);\n    }\n    return this.integrityVerifier;\n  }\n}\n\n// TODO: disconnect inactive peers\nclass Peer {\n  constructor(swarm, channel, remoteId = 0, localId = Peer.createChannelId()) {\n    this.swarm = swarm;\n    this.channel = channel;\n    this.remoteId = remoteId;\n    this.localId = localId;\n    this.state = PeerState.CONNECTING;\n\n    this.handlers = {\n      [MessageTypes.HANDSHAKE]: this.handleHandshakeMessage.bind(this),\n      [MessageTypes.DATA]: this.handleDataMessage.bind(this),\n      [MessageTypes.HAVE]: this.handleHaveMessage.bind(this),\n      [MessageTypes.ACK]: this.handleAckMessage.bind(this),\n      [MessageTypes.INTEGRITY]: this.handleIntegrityMessage.bind(this),\n      [MessageTypes.SIGNED_INTEGRITY]: this.handleSignedIntegrityMessage.bind(this),\n      [MessageTypes.REQUEST]: this.handleRequestMessage.bind(this),\n      [MessageTypes.CANCEL]: this.handleCancelMessage.bind(this),\n      [MessageTypes.CHOKE]: this.handleChokeMessage.bind(this),\n      [MessageTypes.UNCHOKE]: this.handleUnchokeMessage.bind(this),\n    };\n\n    this.sendBuffer = [];\n\n    this.swarm.scheduler.addPeer(this);\n  }\n\n  static createChannelId() {\n    return Math.round(Math.random() * MaxChannelId);\n  }\n\n  init() {\n    this.sendHandshake();\n    this.flush();\n\n    this.state = PeerState.AWAITING_HANDSHAKE;\n  }\n\n  close() {\n    this.state = PeerState.CLOSED;\n    this.swarm.scheduler.removePeer(this);\n  }\n\n  handleData(data) {\n    const context = new PeerDataHandlerContext(this.swarm);\n    data.messages.toArray().forEach(message => this.handleMessage(message, context));\n  }\n\n  handleMessage(message, context) {\n    const handler = this.handlers[message.type];\n    if (handler === undefined) {\n      throw new Error('unsupported message type');\n    }\n\n    // console.log(MessageTypes.name(message.type), this.remoteId, message);\n    handler(message, context);\n  }\n\n  handleHandshakeMessage(handshake) {\n    const options = handshake.options.reduce((options, {type, value}) => ({...options, [type]: value}), {});\n\n    const liveDiscardWindow = options[ProtocolOptions.LiveDiscardWindow];\n    if (liveDiscardWindow !== undefined) {\n      this.swarm.scheduler.setLiveDiscardWindow(this, liveDiscardWindow);\n    }\n\n    this.swarm.verifyProtocolOptions(options);\n\n    this.remoteId = handshake.channelId;\n\n    // console.log('received handshake message while in state', this.state);\n    if (this.state !== PeerState.READY) {\n      this.sendHandshake();\n      this.swarm.scheduler.getRecentChunks().forEach(address => this.sendHave(address));\n      this.flush();\n    }\n\n    this.state = PeerState.READY;\n  }\n\n  handleDataMessage(message, context) {\n    const address = Address.from(message.address);\n    const delaySample = LEDBAT.computeOneWayDelay(message.timestamp.value);\n\n    this.swarm.scheduler.markChunkReceived(this, address, delaySample);\n\n    const {encoding} = this.swarm;\n    this.channel.send(new encoding.Datagram(\n      this.remoteId,\n      [new encoding.AckMessage(message.address, new encoding.Timestamp(delaySample))],\n    ));\n\n    context.getContentIntegrityVerifier(address).verifyChunk(address, message.data)\n      .then(() => {\n        this.swarm.chunkBuffer.set(address, message.data);\n        this.swarm.scheduler.markChunkVerified(this, address);\n        this.swarm.emitNewData();\n      })\n      .catch((err) => {\n        console.log('error validating chunk', err);\n        this.swarm.scheduler.markChunkRejected(this, address);\n      });\n  }\n\n  handleHaveMessage(message) {\n    this.swarm.scheduler.markChunkAvailable(this, Address.from(message.address));\n  }\n\n  handleAckMessage(message) {\n    const address = Address.from(message.address);\n    this.swarm.scheduler.markChunkAvailable(this, address);\n    this.swarm.scheduler.markSendAcked(this, address, message.delaySample.value);\n  }\n\n  handleIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHash(address, message.hash.value);\n  }\n\n  handleSignedIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHashSignature(address, message.signature.value);\n  }\n\n  handleRequestMessage(message) {\n    this.swarm.scheduler.enqueueRequest(this, Address.from(message.address));\n  }\n\n  handleCancelMessage(message) {\n    this.swarm.scheduler.cancelRequest(this, Address.from(message.address));\n  }\n\n  handleChokeMessage() {\n    this.state = PeerState.CHOKED;\n  }\n\n  handleUnchokeMessage() {\n    this.state = PeerState.READY;\n  }\n\n  isReady() {\n    return this.state === PeerState.READY;\n  }\n\n  isInitialized() {\n    return this.state !== PeerState.CONNECTING && this.state !== PeerState.AWAITING_HANDSHAKE;\n  }\n\n  sendHandshake() {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HandshakeMessage(\n      this.localId,\n      [\n        ...this.swarm.protocolOptions,\n        new encoding.SupportedMessagesProtocolOption(Object.keys(this.handlers)),\n      ],\n    ));\n  }\n\n  sendHave(address) {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HaveMessage(encoding.ChunkAddress.from(address)));\n  }\n\n  sendRequest(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.RequestMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendCancel(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.CancelMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendChunk(address, timestamp) {\n    const chunk = this.swarm.chunkBuffer.get(address);\n    if (chunk === undefined) {\n      return;\n    }\n\n    // TODO: omit signatures for bins the peer has already acked\n    const constituentSignatures = this.swarm.contentIntegrity.getConstituentSignatures(address);\n    if (constituentSignatures === undefined) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n\n    constituentSignatures\n      .reverse()\n      .forEach(({bin, signature}, i) => {\n        const address = encoding.ChunkAddress.from(new Address(bin));\n\n        this.sendBuffer.push(new encoding.IntegrityMessage(\n          address,\n          new encoding.IntegrityHash(signature.getHash()),\n        ));\n\n        if (i === 0) {\n          this.sendBuffer.push(new encoding.SignedIntegrityMessage(\n            address,\n            new encoding.Timestamp(timestamp),\n            new encoding.LiveSignature(signature.getSignatureHash()),\n          ));\n        }\n      });\n\n    this.sendBuffer.push(new encoding.DataMessage(encoding.ChunkAddress.from(address), chunk));\n\n    this.flush();\n  }\n\n  flush() {\n    if (this.sendBuffer.length === 0) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n    try {\n      this.channel.send(new encoding.Datagram(this.remoteId, this.sendBuffer));\n    } catch (e) {\n      console.log('error sending');\n      console.log(this.channel);\n      throw e;\n    }\n    this.sendBuffer = [];\n  }\n}\n\nclass SwarmSet extends EventEmitter {\n  constructor() {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.swarms = {};\n  }\n\n  insert(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] === undefined) {\n      this.swarms[key] = swarm;\n      this.emit('insert', swarm);\n    }\n  }\n\n  remove(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] !== undefined) {\n      delete this.swarms[key];\n      this.emit('remove', swarm);\n    }\n  }\n\n  get(swarmId) {\n    return this.swarms[SwarmSet.swarmIdToKey(swarmId)];\n  }\n\n  toArray() {\n    return Object.values(this.swarms);\n  }\n\n  static swarmIdToKey(swarmId) {\n    return swarmId.toBuffer().toString('base64');\n  }\n}\n\nexport class Client {\n  constructor() {\n    this.channels = [];\n\n    this.swarms = new SwarmSet();\n  }\n\n  publishSwarm(swarm) {\n    this.swarms.insert(swarm);\n  }\n\n  unpublishSwarm(swarm) {\n    this.swarms.remove(swarm);\n  }\n\n  joinSwarm(uri) {\n    const chunkSize = uri.protocolOptions[ProtocolOptions.ChunkSize];\n    const clientOptions = {\n      liveDiscardWindow: Math.ceil(BUFFER_SIZE / chunkSize),\n      uploadRateLimit: MAX_UPLOAD_RATE,\n    };\n\n    const swarm = new Swarm(uri, clientOptions);\n    this.swarms.insert(swarm);\n\n    return swarm;\n  }\n\n  createChannel(conn) {\n    const channel = new Channel(conn, this.swarms);\n    this.channels.push(channel);\n\n    channel.once('close', () => {\n      const index = this.channels.indexOf(channel);\n      this.channels.splice(index, 1);\n    });\n  }\n}\n\nexport class Channel extends EventEmitter {\n  constructor(conn, swarms) {\n    super();\n\n    this.conn = conn;\n    this.swarms = swarms;\n    this.peers = {};\n\n    this.handleSwarmInsert = this.getOrCreatePeer.bind(this);\n    this.swarms.on('insert', this.handleSwarmInsert);\n\n    const liveSwarms = swarms.toArray();\n    this.conn.addEventListener('open', () => liveSwarms.forEach(this.handleSwarmInsert));\n    this.conn.addEventListener('message', this.handleMessage.bind(this));\n    this.conn.addEventListener('error', err => console.log('connection error:', err));\n    this.conn.addEventListener('close', this.handleClose.bind(this));\n  }\n\n  handleMessage(event) {\n    let data = new genericEncoding.Datagram();\n    try {\n      data.read(event.data);\n    } catch (e) {\n      console.log(event.data);\n      throw e;\n    }\n\n    let peer = this.peers[data.channelId];\n    if (peer === undefined) {\n      if (data.channelId !== 0) {\n        return;\n      }\n\n      let handshake;\n      try {\n        handshake = data.messages.next();\n      } catch (error) {\n        console.log('error decoding mesasge', error);\n        return;\n      }\n      if (handshake === undefined || handshake.type !== MessageTypes.HANDSHAKE) {\n        console.log('rejected new peer without handshake');\n        return;\n      }\n      const swarmId = handshake.options.find(({type}) => type === ProtocolOptions.SwarmIdentifier);\n      if (swarmId === undefined) {\n        // console.log('rejecting new peer with invalid swarm id');\n        return;\n      }\n      const swarm = this.swarms.get(SwarmId.from(swarmId.value));\n      if (swarm === undefined) {\n        // console.log('rejecting new peer requesting unknown swarm');\n        return;\n      }\n\n      peer = this.getOrCreatePeer(swarm);\n    }\n\n    data = new peer.swarm.encoding.Datagram();\n    data.read(event.data);\n    // console.log('RECEIVED', data.messages.toArray());\n    peer.handleData(data);\n  }\n\n  send(data) {\n    if (this.conn.readyState !== 'open') {\n      this.conn.addEventListener('open', () => this.conn.send(data.toBuffer()));\n      return;\n    }\n\n    try {\n      this.conn.send(data.toBuffer());\n    } catch (e) {\n      this.conn.close();\n    }\n  }\n\n  handleClose() {\n    this.swarms.removeListener('insert', this.handleSwarmInsert);\n    Object.values(this.peers).forEach(peer => peer.close());\n    this.emit('close');\n  }\n\n  getOrCreatePeer(swarm) {\n    let peer = Object.values(this.peers).find(p => p.swarm === swarm);\n    return peer || this.createPeer(swarm);\n  }\n\n  createPeer(swarm) {\n    const {peers, swarms} = this;\n\n    const peer = new Peer(swarm, this);\n    peers[peer.localId] = peer;\n    peer.init();\n\n    const destroyPeer = once(() => {\n      delete peers[peer.localId];\n      peer.close();\n\n      swarms.removeListener('remove', handleRemove);\n    });\n    setTimeout(() => {\n      if (!peer.isInitialized()) {\n        destroyPeer();\n      }\n    }, HANDSHAKE_TIMEOUT);\n\n    const handleRemove = removedSwarm => {\n      if (removedSwarm === swarm) {\n        destroyPeer();\n      }\n    };\n    swarms.on('remove', handleRemove);\n\n    return peer;\n  }\n}\n","import KBucket from 'k-bucket';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport arrayEqual from 'array-equal';\nimport randomBytes from 'randombytes';\nimport LRU from 'lru-cache';\nimport hexToUint8Array from './hexToUint8Array';\nimport idx from 'idx';\n\nconst SEND_REPLICAS = 2;\nconst MAX_HOPS = 10;\nconst DEFAULT_PEER_REQUEST_COUNT = 10;\nconst NUMBER_OF_NODES_PER_BUCKET = 2;\n\n// TODO: implement get/set\n// TODO: implement connection dump rpc for network debugging\n\nexport class Client extends EventEmitter {\n  constructor(id) {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.id = id;\n\n    // managed/unmanaged?\n    this.channels = new KBucket({\n      numberOfNodesPerKBucket: NUMBER_OF_NODES_PER_BUCKET,\n      localNodeId: this.id,\n    });\n    this.allChannels = new KBucket({\n      numberOfNodesPerKBucket: 100,\n      localNodeId: this.id,\n    });\n\n    this.channels.on('ping', this.handlePing.bind(this));\n    this.channels.on('removed', this.handleRemoved.bind(this));\n    this.channels.on('updated', this.handleUpdated.bind(this));\n    this.channels.on('added', this.handleAdded.bind(this));\n\n    this.knownPeerIds = {};\n    this.channelMap = {};\n\n    this.seenIds = new LRU({max: 1024});\n    this.knownRoutes = new LRU({\n      max: 1024,\n      maxAge: 1000 * 60,\n    });\n    this.callbacks = new LRU({max: 1024});\n\n    this.on('receive.peers.request', this.handlePeersRequest.bind(this));\n    this.on('receive.ping.request', this.handlePingRequest.bind(this));\n    this.on('receive.trace.request', this.handleTraceRequest.bind(this));\n    this.on('receive.callback.response', this.handleCallbackResponse.bind(this));\n\n    this.startPeerRequests();\n  }\n\n  // TODO: this is leaking connections\n  close() {\n    this.stopPeerRequests();\n    this.allChannels.toArray().forEach(({conn}) => conn && conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n\n  startPeerRequests() {\n    let index = 0;\n\n    const next = () => {\n      let ids = Object.keys(this.knownPeerIds);\n\n      for (let retry = 0; retry <= ids.length; retry ++) {\n        if (index >= ids.length) {\n          index = 0;\n        }\n\n        const id = ids[index];\n        index ++;\n\n        if (id) {\n          return id;\n        }\n      }\n    };\n\n    this.peerRequestIvl = setInterval(() => {\n      const id = next();\n      if (id) {\n        this.sendPeerRequest(hexToUint8Array(id));\n      }\n    }, 5000);\n  }\n\n  stopPeerRequests() {\n    clearInterval(this.peerRequestIvl);\n  }\n\n  handlePing(channels, newChannel) {\n    // console.log('ping', channels, newChannel);\n    const PING_TIMEOUT = 10000;\n\n    channels.forEach(channel => {\n      const {id} = channel;\n\n      if (channel.isOpen()) {\n        this.addChannel(channel);\n        return;\n      }\n\n      setTimeout(() => {\n        const channel = this.getChannel(id);\n        if (channel && channel.isOpen()) {\n          this.addChannel(channel);\n          return;\n        }\n\n        this.removeChannel(id);\n        this.addChannel(newChannel);\n      }, PING_TIMEOUT);\n    });\n  }\n\n  addChannel(channel) {\n    this.channels.add(channel);\n    this.allChannels.add(channel);\n  }\n\n  removeChannel(id) {\n    this.channels.remove(id);\n    this.allChannels.remove(id);\n    // delete this.channelMap[arrayBufferToHex(id)];\n  }\n\n  getChannel(id) {\n    return this.channelMap[arrayBufferToHex(id)];\n  }\n\n  handleRemoved(channel) {\n    // console.log('remove', arrayBufferToHex(channel.id));\n    // console.trace();\n    if (channel.conn) {\n      channel.conn.close();\n    }\n    // console.log('handleRemoved', arrayBufferToHex(channel.id));\n  }\n\n  handleUpdated(oldChannel, newChannel) {\n    // console.log('update', {oldChannel, newChannel});\n    // console.log('handleUpdated', arrayBufferToHex(channel.id));\n  }\n\n  handleAdded(channel) {\n    if (channel.conn === undefined) {\n      // console.log('peers.discover', arrayBufferToHex(this.id), arrayBufferToHex(channel.id), this.channels.count());\n      this.emit('peers.discover', channel.id);\n    }\n    // console.log('add');\n    // emit event?\n    // console.log('handleAdded', arrayBufferToHex(channel.id));\n  }\n\n  createChannel(id, conn) {\n    const idHex = arrayBufferToHex(id);\n    const channel = new Channel(id, conn);\n\n    const oldChannel = this.channelMap[idHex];\n    if (oldChannel && oldChannel.conn) {\n      // console.warn('replacing open channel...');\n      oldChannel.conn.close();\n    }\n    this.channelMap[idHex] = channel;\n\n    const messages = [];\n    const bufferMessages = event => messages.push(event);\n    const handleMessage = this.handleMessage.bind(this, channel);\n\n    const handleOpen = () => {\n      // console.log('saw open', idHex);\n      this.addChannel(channel);\n\n      conn.removeEventListener('message', bufferMessages);\n      conn.addEventListener('message', handleMessage);\n      messages.forEach(handleMessage);\n\n      this.sendPeerRequest(id);\n    };\n\n    const handleClose = () => {\n      // console.log('saw close', idHex);\n      conn.removeEventListener('message', bufferMessages);\n      conn.removeEventListener('message', handleMessage);\n      conn.removeEventListener('open', handleOpen);\n\n      if (this.channelMap[idHex] === channel) {\n        this.removeChannel(id);\n        delete this.channelMap[idHex];\n      }\n    };\n\n    conn.addEventListener('message', bufferMessages);\n    conn.addEventListener('open', handleOpen, {once: true});\n    conn.addEventListener('close', handleClose, {once: true});\n  }\n\n  handleMessage(channel, event) {\n    // console.log('handleMessage', event.data);\n\n    channel.lastActive = Date.now();\n\n    let req;\n    try {\n      req = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n    const {type, id} = req;\n\n    if (req.trace) {\n      req.trace.push(arrayBufferToHex(this.id));\n      // console.log('TRACE', req);\n    }\n\n    if (this.seenIds.get(id)) {\n      // console.log('discarding seen message', id);\n      // if (req.trace) {\n      //   console.log('DROPPED', req);\n      // }\n      return;\n    }\n    this.seenIds.set(id, true);\n\n    if (!this.getChannel(channel.id)) {\n      console.warn('receiving channel is not known to dht', arrayBufferToHex(channel.id));\n    }\n\n    this.knownRoutes.set(req.from, channel.id);\n    // this.knownRoutes.set(req.from, arrayBufferToHex(channel.id));\n\n    const to = hexToUint8Array(req.to);\n    if (!arrayEqual(to, this.id)) {\n      this.forwardMessage(to, req);\n      return;\n    }\n\n    // if (req.trace) {\n    //   console.log('DELIVERED', req);\n    // }\n\n    const resCallback = (res={}, callback=null) => {\n      const from = hexToUint8Array(req.from);\n      const data = {re: id, ...res};\n      this.send(from, 'callback.response', data, callback);\n    };\n\n    // console.log(`emit receive.${type}`, req);\n    this.emit(`receive.${type}`, {data: req, callback: resCallback});\n  }\n\n  forwardMessage(to, data) {\n    // console.log('forwarding message', arrayBufferToHex(to), data);\n\n    if (data.hops >= MAX_HOPS) {\n      // console.log('discarding message with too many hops', data.id);\n      return;\n    }\n    data.hops ++;\n\n    this.sendRaw(to, JSON.stringify(data), data.trace);\n  }\n\n  sendPing(to, callback=()=>{}) {\n    this.send(to, 'ping.request', {}, callback);\n  }\n\n  handlePingRequest({data, callback}) {\n    // console.log('PING', data);\n    callback({});\n  }\n\n  handleTraceRequest({data, callback}) {\n    callback(data);\n  }\n\n  handleCallbackResponse({data, callback}) {\n    const reqCallback = this.callbacks.get(data.re);\n    if (reqCallback) {\n      reqCallback(data, callback);\n    } else {\n      // console.warn('<<< callback for %s expired', data.re);\n    }\n  }\n\n  sendPeerRequest(to, count=DEFAULT_PEER_REQUEST_COUNT) {\n    const timeout = setTimeout(() => {\n      delete this.knownPeerIds[arrayBufferToHex(to)];\n    }, 5000);\n    this.send(to, 'peers.request', {count}, res => {\n      clearTimeout(timeout);\n      this.handlePeersResponse(res);\n    });\n  }\n\n  handlePeersRequest({data: {count=DEFAULT_PEER_REQUEST_COUNT, from}, callback}) {\n    // console.log('handlePeersRequest');\n\n    const fromId = hexToUint8Array(from);\n\n    const ids = this.allChannels.closest(fromId)\n      .filter(({conn}) => conn != null)\n      .filter(({id}) => !arrayEqual(id, this.id) && !arrayEqual(id, fromId))\n      .map(({id}) => arrayBufferToHex(id))\n      .slice(0, count);\n    callback({ids});\n  }\n\n  handlePeersResponse(res) {\n    // console.log('handlePeersResponse', res.ids);\n\n    res.ids\n      .map(id => hexToUint8Array(id))\n      .filter(id => !arrayEqual(id, this.id))\n      .filter(id => {\n        const channel = this.getChannel(id);\n        return channel == null || channel.conn == null;\n      })\n      .forEach(id => {\n        // TODO: store peer provenance so we can ignore bad actors?\n        this.knownPeerIds[arrayBufferToHex(id)] = true;\n        this.addChannel(new Channel(id));\n      });\n  }\n\n  send(to, type, data={}, callback=null) {\n    if (typeof data === 'function') {\n      callback = data;\n      data = {};\n    }\n\n    const id = arrayBufferToHex(randomBytes(16));\n    this.seenIds.set(id, true);\n\n    if (callback != null) {\n      this.callbacks.set(id, callback);\n    }\n\n    const message = JSON.stringify({\n      id,\n      type,\n      from: arrayBufferToHex(this.id),\n      to: arrayBufferToHex(to),\n      trace: [arrayBufferToHex(this.id)],\n      hops: 0,\n      ...data,\n    });\n\n    // console.log('formatMessage', message);\n\n    this.sendRaw(to, message);\n  }\n\n  sendRaw(to, message, trace=[]) {\n    let closest = this.allChannels.closest(to)\n      .filter(channel => channel.isOpen())\n      .filter(({idHex}) => trace.indexOf(idHex) === -1)\n      .slice(0, SEND_REPLICAS);\n\n    const knownRoute = this.knownRoutes.get(arrayBufferToHex(to));\n    if (knownRoute) {\n      const channel = this.getChannel(knownRoute);\n      // const channel = this.allChannels.get(knownRoute);\n      if (channel != null && channel.isOpen()) {\n        closest.push(channel);\n      }\n    }\n\n    if (closest.length === 0) {\n      // console.warn(`closest value to ${arrayBufferToHex(to)} does not exist, dropping`, message);\n      return;\n    }\n\n    if (arrayEqual(closest[0].id, to)) {\n      closest = closest.slice(0, 1);\n    }\n    // console.log('send', closest.map(({id}) => arrayBufferToHex(id)), message);\n    // console.log(closest.length, closest.filter(({conn}) => !!conn).length, message);\n    closest.forEach(({id, conn}) => {\n      try {\n        // console.log('buffered amount before send', conn.bufferedAmount);\n        // console.log(message);\n        conn.send(message);\n      } catch (e) {\n        console.log('error sending to peer, closing', arrayBufferToHex(id), e);\n        conn.close();\n      }\n    });\n  }\n}\n\nexport class Channel {\n  constructor(id, conn) {\n    this.id = id;\n    this.idHex = arrayBufferToHex(id);\n    this.vectorClock = Date.now();\n    this.lastPing = Date.now();\n    this.conn = conn;\n\n    // console.log('channel', this);\n  }\n\n  isOpen() {\n    const readyState = idx(this, _ => _.conn.readyState);\n    return readyState === 1 || readyState === 'open';\n  }\n}\n\nexport class SubChannel {\n  constructor(client, peerId, id=arrayBufferToHex(randomBytes(16))) {\n    // console.log('subchannel created', id);\n    this.client = client;\n    this.peerId = peerId;\n    this.id = id;\n    this.readyState = SubChannel.ReadyStates.OPEN;\n    this.onmessage = () => {};\n\n    this.handleMessage = this.handleMessage.bind(this);\n    this.client.on('receive.subchannel.message', this.handleMessage);\n  }\n\n  handleMessage({data: {channelId, data}}) {\n    // console.log('receive.subchannel.message', channelId, this.id, data);\n\n    if (channelId === this.id) {\n      this.onmessage({data});\n    }\n  }\n\n  send(data) {\n    this.client.send(\n      this.peerId,\n      'subchannel.message',\n      {\n        channelId: this.id,\n        data: data,\n      },\n    );\n  }\n\n  close() {\n    this.readyState = SubChannel.ReadyStates.CLOSED;\n    this.client.removeListener('receive.subchannel.message', this.handleMessage);\n  }\n}\n\nSubChannel.ReadyStates = {\n  OPEN: 1,\n  CLOSED: 3,\n};\n","import URLSafeBase64 from 'urlsafe-base64';\nimport SwarmId from './swarmid';\nimport {ProtocolOptions} from './constants';\n\nconst protocolOptionToKey = {\n  [ProtocolOptions.ContentIntegrityProtectionMethod]: 'x.im',\n  [ProtocolOptions.MerkleHashTreeFunction]: 'x.hf',\n  [ProtocolOptions.LiveSignatureAlgorithm]: 'x.sa',\n  [ProtocolOptions.ChunkAddressingMethod]: 'x.am',\n  [ProtocolOptions.ChunkSize]: 'x.cs',\n};\n\n// TODO: dn with stream name\n// TODO: as to m3u8 url?\nexport default class URI {\n  constructor(swarmId, protocolOptions) {\n    this.swarmId = swarmId;\n    this.protocolOptions = protocolOptions;\n  }\n\n  toString() {\n    const swarmId = URLSafeBase64.encode(this.swarmId.toBuffer());\n    const protocolOptions = Object.entries(this.protocolOptions)\n      .map(([protocolOption, value]) => `${protocolOptionToKey[protocolOption]}=${value}`)\n      .join('&');\n    return `magnet:?xt=urn:ppspp:${swarmId}&${protocolOptions}`;\n  }\n\n  static parse(uriString) {\n    if (!uriString.startsWith('magnet:')) {\n      throw new Error('invalid uri: expected magnet');\n    }\n\n    const args = uriString.substring(8)\n      .split('&')\n      .map(query => {\n        const [key, value] = query.split('=');\n        return [key, decodeURIComponent(value)];\n      });\n\n    const protocolOptions = Object.entries(protocolOptionToKey)\n      .reduce((protocolOptions, [protocolOption, key]) => {\n        const arg = args.find(([argKey]) => argKey === key);\n        if (arg === undefined) {\n          throw new Error(`invalid uri: missing ${key}`);\n        }\n        return {...protocolOptions, [protocolOption]: parseFloat(arg[1])};\n      }, {});\n\n    const xt = args.find(([key, value]) => key === 'xt' && value.startsWith('urn:ppspp:'));\n    if (xt === undefined) {\n      throw new Error('invalid uri: missing suitable xt');\n    }\n    const swarmId = SwarmId.from(URLSafeBase64.decode(xt[1].substring(10)));\n\n    return new URI(swarmId, protocolOptions);\n  }\n}\n","import React, {useEffect, useState} from 'react';\nimport classNames from 'classnames';\nimport {useHover} from 'use-events';\nimport {useDebounce} from 'react-use';\n\nimport './PlayButton.scss';\n\nconst PlayButton = ({\n  spin = false,\n  flicker = false,\n  pulse = false,\n  disabled = false,\n  visible = true,\n  blur = false,\n  error = false,\n  onClick = null,\n  idleTimeout = 2000,\n}) => {\n  const [currentVisibility, setCurrentVisibility] = useState(true);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => setCurrentVisibility(visible), 300);\n    return () => clearTimeout(timeout);\n  }, [visible]);\n\n  const [hovering, hoverEventHandlers] = useHover();\n  const [mouseIdle, setMouseIdle] = useState('');\n\n  useDebounce(() => setMouseIdle(hovering), idleTimeout, [hovering]);\n  useEffect(() => {\n    if (!hovering) {\n      setMouseIdle(false);\n    }\n  }, [hovering]);\n\n  const hoverClasses = classNames({\n    play_button_wrap: true,\n    hovering: mouseIdle,\n    disabled,\n  });\n\n  const buttonClasses = classNames({\n    play_button: true,\n    clickable: onClick != null && !disabled,\n    exiting: !visible && currentVisibility,\n    hidden: !visible && !currentVisibility,\n    spin,\n    flicker,\n    pulse,\n    blur,\n    error,\n    disabled,\n  });\n\n  return (\n    <div className={hoverClasses}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 926 926\"\n        className={buttonClasses}\n        onClick={disabled ? undefined : onClick}\n        {...hoverEventHandlers}\n      >\n        <g className=\"background\">\n          <circle cx=\"463\" cy=\"463\" r=\"463\"/>\n        </g>\n        <g className=\"network\">\n          <circle cx=\"327\" cy=\"229\" r=\"139\"/>\n          <circle cx=\"732\" cy=\"463\" r=\"139\"/>\n          <circle cx=\"327\" cy=\"697\" r=\"139\"/>\n          <polygon points=\"854 463 269 125 269 801 854 463\"/>\n        </g>\n        <g className=\"button\">\n          <path d=\"M658,524c23-13,23-36,0-50L457,358c-23-13-43-2-43,25V616c0,27,19,38,43,25Z\" transform=\"translate(-45 -36)\"/>\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default PlayButton;\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n"],"sourceRoot":""}