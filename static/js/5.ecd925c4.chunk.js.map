{"version":3,"sources":["components/MediaDeviceTest.js"],"names":["MediaDeviceTest","props","client","useAsync","Client","create","ConnManager","getDefaultBootstrapAddress","value","_useSwarm","useSwarm","_useSwarm2","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","clientSwarm","joinSwarm","_useState","useState","_useState2","serverSwarm","setServerSwarm","_useState3","_useState4","swarmUri","setSwarmUri","swarm","videoRef","useRef","useReady","chunkStream","ChunkedReadStream","webmStream","mtw","DecodedStream","mimeType","videoElement","current","on","data","write","Buffer","concat","chunks","length","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","className","controls","autoPlay","ref","_DiagnosticMenu__WEBPACK_IMPORTED_MODULE_13__","defaultValue","uri","toString","handleBeginStreamClick","_ref","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","e","getDisplayMediaResult","injector","writer","wrap","_context","prev","next","preventDefault","navigator","mediaDevices","getDisplayMedia","video","frameRate","getUserMedia","mediaSource","t0","t1","sent","t2","EncodedStream","call","Injector","chunkSize","chunksPerSignature","liveSignatureAlgorithm","LiveSignatureAlgorithm","RSASHA1","ChunkedWriteStream","d","ppsppClient","publishSwarm","stop","_x","apply","this","arguments","streamButton","onClick","onSubmit","onChange","target","placeholder"],"mappings":"2VAkGeA,UAhFS,SAAAC,GACtB,IAAMC,EAASC,mBAAS,kBAAMC,IAAOC,OAAO,IAAIC,IAAYC,iBAAgC,IAAIC,MADjEC,EAEEC,YAASR,GAFXS,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAExBK,EAFwBH,EAAA,GAEXI,EAFWJ,EAAA,GAAAK,EAGOC,mBAAS,MAHhBC,EAAAN,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGxBG,EAHwBD,EAAA,GAGXE,EAHWF,EAAA,GAAAG,EAICJ,mBAAS,IAJVK,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAIxBE,EAJwBD,EAAA,GAIdE,EAJcF,EAAA,GAMzBG,EAAQX,GAAeK,EACvBO,EAAWC,mBAcjB,GAZAC,YAAS,WACP,IAAMC,EAAc,IAAIC,IAAkBL,GACpCM,EAAaC,IAAIC,cAAc,CACnCC,SAdY,2BAeZC,aAAcT,EAASU,UAGzBP,EAAYQ,GAAG,OAAQ,SAAAC,GACrBP,EAAWQ,MAAMC,SAAOC,OAAOH,EAAKI,OAAQJ,EAAKK,YAElD,CAACjB,EAAUD,IAEVA,EACF,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,SACEE,UAAQ,EACRC,UAAQ,EACRC,IAAKxB,IAEPkB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAgB1B,MAAOA,IACvBmB,EAAAC,EAAAC,cAAA,SAAOM,aAAc3B,EAAM4B,IAAIC,cAKrC,IAEMC,EAAsB,eAAAC,EAAA5C,OAAA6C,EAAA,EAAA7C,CAAA8C,EAAAb,EAAAc,KAAG,SAAAC,EAAMC,GAAN,IAAAC,EAAA/B,EAAAgC,EAAAC,EAAA,OAAAN,EAAAb,EAAAoB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAC7BP,EAAEQ,iBAEIP,EAAwBQ,UAAUC,aAAaC,gBACjDF,UAAUC,aAAaC,gBAAgB,CAACC,OAAO,EAAMC,UAAW,KAChEJ,UAAUC,aAAaI,aAAa,CAACF,MAAO,CAACG,YAAa,UAAWF,UAAW,KALvDR,EAAAW,GAOV7C,IAPUkC,EAAAE,KAAA,EAOcN,EAPd,cAAAI,EAAAY,GAAAZ,EAAAa,KAAAb,EAAAc,GAOqC,CAChE9C,SA/CY,4BA8CRH,EAPuBmC,EAAAW,GAONI,cAPMC,KAAAhB,EAAAW,GAAAX,EAAAY,GAAAZ,EAAAc,IAAAd,EAAAE,KAAA,GAWNe,IAAS9E,OAAO,CACrC+E,UAAW,MACXC,mBAAoB,GACpBC,uBAAwBC,IAAuBC,UAdpB,QAWvBzB,EAXuBG,EAAAa,KAiBvBf,EAAS,IAAIyB,IAAmB1B,GAGtChC,EAAWM,GAAG,OAAQ,SAAAqD,GAAC,OAAI1B,EAAOzB,MAAMmD,KAExCtE,EAAe2C,EAAStC,OACxBvB,EAAOyF,YAAYC,aAAa7B,EAAStC,OAvBZ,yBAAAyC,EAAA2B,SAAAjC,MAAH,gBAAAkC,GAAA,OAAAtC,EAAAuC,MAAAC,KAAAC,YAAA,GA0BtBC,EAAe5B,UAAUC,aAAaC,iBAC1C5B,EAAAC,EAAAC,cAAA,UAAQqD,QAAS5C,GAAjB,UAGF,OACEX,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0BAA0BqD,SAAU,kBAAMrF,EAAUQ,KAClEqB,EAAAC,EAAAC,cAAA,SACEuD,SAnCkB,SAAAxC,GAAC,OAAIrC,EAAYqC,EAAEyC,OAAO9F,QAoC5C+F,YAAY,kBACZ/F,MAAOe,IAETqB,EAAAC,EAAAC,cAAA,sBACCoD","file":"static/js/5.ecd925c4.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\nimport {Client} from '../client';\nimport {ConnManager} from '../wrtc';\nimport {useAsync} from 'react-use';\nimport useReady from '../hooks/useReady';\nimport {getDefaultBootstrapAddress, useSwarm} from './App';\nimport Injector from '../ppspp/injector';\nimport {ChunkedWriteStream, ChunkedReadStream} from '../chunkedStream';\nimport {LiveSignatureAlgorithm} from '../ppspp/constants';\nimport {Buffer} from 'buffer';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport mtw from 'mediastream-to-webm';\n\nimport './App.scss';\nimport './MediaDeviceTest.scss';\n\nconst MIME_TYPE = 'video/webm; codecs=\"vp8\"';\n\nconst MediaDeviceTest = props => {\n  const client = useAsync(() => Client.create(new ConnManager(getDefaultBootstrapAddress())), []).value;\n  const [clientSwarm, joinSwarm] = useSwarm(client);\n  const [serverSwarm, setServerSwarm] = useState(null);\n  const [swarmUri, setSwarmUri] = useState('');\n\n  const swarm = clientSwarm || serverSwarm;\n  const videoRef = useRef();\n\n  useReady(() => {\n    const chunkStream = new ChunkedReadStream(swarm);\n    const webmStream = mtw.DecodedStream({\n      mimeType: MIME_TYPE,\n      videoElement: videoRef.current,\n    });\n\n    chunkStream.on('data', data => {\n      webmStream.write(Buffer.concat(data.chunks, data.length));\n    });\n  }, [videoRef, swarm]);\n\n  if (swarm) {\n    return (\n      <div className=\"media_device_test__player\">\n        <video\n          controls\n          autoPlay\n          ref={videoRef}\n        />\n        <DiagnosticMenu swarm={swarm} />\n        <input defaultValue={swarm.uri.toString()} />\n      </div>\n    );\n  }\n\n  const handleUriChange = e => setSwarmUri(e.target.value);\n\n  const handleBeginStreamClick = async e => {\n    e.preventDefault();\n\n    const getDisplayMediaResult = navigator.mediaDevices.getDisplayMedia\n      ? navigator.mediaDevices.getDisplayMedia({video: true, frameRate: 30})\n      : navigator.mediaDevices.getUserMedia({video: {mediaSource: 'screen'}, frameRate: 30});\n\n    const webmStream = mtw.EncodedStream(await getDisplayMediaResult, {\n      mimeType: MIME_TYPE,\n    });\n\n    const injector = await Injector.create({\n      chunkSize: 32 * 1024,\n      chunksPerSignature: 16,\n      liveSignatureAlgorithm: LiveSignatureAlgorithm.RSASHA1,\n    });\n\n    const writer = new ChunkedWriteStream(injector);\n\n    // TODO: mtw doesn't work with webms from firefox...\n    webmStream.on('data', d => writer.write(d));\n\n    setServerSwarm(injector.swarm);\n    client.ppsppClient.publishSwarm(injector.swarm);\n  };\n\n  const streamButton = navigator.mediaDevices.getDisplayMedia && (\n    <button onClick={handleBeginStreamClick}>Stream</button>\n  );\n\n  return (\n    <form className=\"media_device_test__form\" onSubmit={() => joinSwarm(swarmUri)}>\n      <input\n        onChange={handleUriChange}\n        placeholder=\"Enter Swarm URI\"\n        value={swarmUri}\n      />\n      <button>Join</button>\n      {streamButton}\n    </form>\n  );\n};\n\nexport default MediaDeviceTest;\n"],"sourceRoot":""}