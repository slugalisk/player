{"version":3,"sources":["ppspp/constants.js","utils/createRandomId.js","ppspp/injector.js","ppspp/address.js","ppspp/webcrypto.js","ppspp/crypto.js","DiagnosticMenu/index.js","SwarmPlayer.js","client.js","wrtc.js","App.js","Test.js","DhtGraph.js","Router.js","index.js","ppspp/integrity.js","binSearch.js","hexToUint8Array.js","ppspp/swarmid.js","ema.js","RingBuffer.js","ledbat.js","ppspp/encoding.js","bitarray.js","wfq.js","ppspp/scheduler.js","ppspp/index.js","dht.js","loopback.js","chunkedStream.js","ppspp/uri.js"],"names":["__webpack_require__","d","__webpack_exports__","MaxChannelId","ProtocolOptions","Version","ContentIntegrityProtectionMethod","MerkleHashTreeFunction","LiveSignatureAlgorithm","ChunkAddressingMethod","MessageTypes","lodash_invert__WEBPACK_IMPORTED_MODULE_0__","lodash_invert__WEBPACK_IMPORTED_MODULE_0___default","n","MinimumVersion","SwarmIdentifier","LiveDiscardWindow","SupportedMessages","ChunkSize","EndOption","RFC7574","None","MerkleHashTree","SignAll","UnifiedMerkleTree","SHA1","SHA224","SHA256","SHA384","SHA512","RSASHA1","RSASHA256","ECDSAP256SHA256","ECDSAP384SHA384","Bin32","ByteRange64","ChunkRange32","Bin64","ChunkRange64","HANDSHAKE","DATA","ACK","HAVE","INTEGRITY","PEX_RESv4","PEX_REQ","SIGNED_INTEGRITY","REQUEST","CANCEL","CHOKE","UNCHOKE","PEX_RESv6","PEX_REScert","forEach","enumType","names","invert","name","value","crypto__WEBPACK_IMPORTED_MODULE_0__","crypto__WEBPACK_IMPORTED_MODULE_0___default","createRandomId","id","Uint8Array","crypto","randomFillSync","Injector","swarm","chunkSize","chunksPerSignature","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","this","inputBuffer","Buffer","alloc","chunkBuffer","data","_this","length","concat","dataOffset","push","slice","i","Math","min","_loop","subtreeChunks","splice","contentIntegrity","appendSubtree","then","subtree","setRange","rootAddress","scheduler","markChunksLoaded","options","arguments","undefined","_options$chunkSize","_options$chunksPerSig","_options$liveDiscardW","liveDiscardWindow","ceil","_options$chunkAddress","chunkAddressingMethod","_options$contentInteg","contentIntegrityProtectionMethod","_options$merkleHashTr","merkleHashTreeFunction","_options$liveSignatur","liveSignatureAlgorithm","generateKeyPair","_ref","_ref2","swarmId","privateKey","uri","URI","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__","console","log","toString","clientOptions","uploadRateLimit","Swarm","EventEmitter","Address","bin","treeBounds","binBounds","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_treeBounds","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","start","end","address","type","Error","r","module","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0__","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0___default","exports","WebCrypto","window","ToggleButton","buttonClasses","classNames","diagnostic_menu__toggle_button","diagnostic_menu__toggle_button--expanded","props","expanded","react_default","a","createElement","onClick","className","Component","defaultProps","SwarmState","rows","key","totalSends","totalRequests","totalRequestsReceived","totalDroppedRequests","totalReceived","totalAdded","totalCancelled","ackUnknownSend","lastCompletedBin","loadedChunks","requestedChunks","chunkRate","map","PeerStateTable","peerState","chunkIntervalMean","wasteRate","ledbat","baseDelay","getMin","currentDelay","rttMean","rttVar","cwnd","cto","flightSize","validChunks","requestQueue","_this$props","startBin","endBin","colSpan","DiagnosticMenu_AvailabilityMapChart","availableChunks","sentChunks","receivedChunks","AvailabilityMapChart","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","canvas","React","createRef","current","isNaN","max","isFinite","ctx","getContext","scale","scaleLinear","domain","range","fillStyle","fillRect","lastStart","values","get","height","width","ref","PeerState","_this2","handleButtonClick","setState","state","table","DiagnosticMenu_PeerStateTable","DiagnosticMenu_ToggleButton","peer","localId","remoteId","DiagnosticMenu","_this3","scheduleUpdate","handleUpdate","forceUpdate","requestAnimationFrame","swarmState","peerStates","containerClasses","containerClass","diagnostic_menu__container","diagnostic_menu__container--expanded","_this$props$swarm$sch","DiagnosticMenu_SwarmState","entries","_ref3","_ref4","slicedToArray","DiagnosticMenu_PeerState","e","SwarmPlayer","handleSourceOpen","mediaSource","sourceBuffer","addSourceBuffer","addEventListener","videoSegments","initSet","appendBuffer","shift","transmuxer","muxjs","mp4","Transmuxer","on","event","buf","from","initSegment","updating","stream","ChunkedFragmentedReadStream","flush","video","MediaSource","src","URL","createObjectURL","Fragment","src_DiagnosticMenu_0","controls","Client","connManager","dhtClientId","bootstrapId","conn","swarmUri","client","createClient","dhtClient","dht","handlePeersDiscover","bind","handleReceiveConnectRequest","createChannel","createDataChannel","ppsppClient","ppspp","init","createClass","sub","send","channelId","_ref$data","callback","hexToUint8Array","channel","label","bootstrap","ConnManager","bootstrapAddress","Promise","resolve","reject","protocol","location","WebSocket","onmessage","JSON","parse","mediator","Mediator","once","close","_EventEmitter","handleMessage","assertThisInitialized","inherits","emit","RTCSessionDescription","sdp","candidate","RTCIceCandidate","readyState","stringify","_EventEmitter2","initialized","waitingChannels","peerConn","RTCPeerConnection","iceServers","urls","sendIceCandidate","handleDataChannel","addIceCandidate","_ready","description","setRemoteDescription","createAnswer","catch","_this4","setLocalDescription","sendAnswer","error","_this5","resolveWaitingChannel","objectSpread","ordered","maxRetransmits","binaryType","_this6","createOffer","offer","sendOffer","BOOTSTRAP_ADDRESS","host","App","_useState","useState","_useState2","setPpsppClient","_useState3","_useState4","setSwarmUri","_useState5","_useState6","setSwarm","useEffect","create","SwarmPlayer_SwarmPlayer","onSubmit","preventDefault","joinSwarm","onChange","target","placeholder","defaultValue","Server","server","swarms","setSwarms","injector","ChunkedWriteStreamInjector","publishSwarm","unpublishSwarm","stop","diagnosticMenus","toConsumableArray","ChunkedReadStream","color","scaleOrdinal","schemeCategory10","reduceGraph","graph","objectWithoutProperties","nodes","links","filter","source","gen","setGen","_useReducer","useReducer","_useReducer2","dispatchGraphAction","arrayBufferToHex","handleAddPeerClick","all","Array","fill","clients","_ref3$dhtClient","channels","_ref5","react_force_graph_3d_module","graphData","nodeAutoColorBy","Router","HashRouter","Switch","Route","exact","path","component","Test","DhtGraph","ReactDOM","render","src_Router","document","getElementById","require","toUint8Array","MerkleHashTreeFunctionAlgorithms","_MerkleHashTreeFuncti","defineProperty","MerkleHashTreeFunctionByteLengths","_MerkleHashTreeFuncti2","createMerkleHashTreeFunction","algorithm","nullHash","_len","_key","every","arrayEqual","subtle","digest","LiveSignatureAlgorithms","_LiveSignatureAlgorit","modulusLength","publicExponent","hash","namedCurve","createLiveSignatureSignFunction","importResult","importKey","sign","createLiveSignatureVerifyFunction","getKeyParams","publicKey","signature","verify","generateKey","keyPair","exportKey","SwarmId","unavailableLiveSignatureSignFunction","createContentIntegrityVerifierFactory","liveSignatureVerifyFunction","liveSignatureSignFunction","Infinity","Signature","verified","SignedSignature","verificationResult","getHash","markVerified","verifyHash","compare","signatures","getChunkCount","MerkleHashTreeVerifier","hashTree","containsBin","bins","bfsIndex","stride","parent","branch","isRoot","siblingBin","siblingBfsIndex","floor","getConstituentHashBins","minSize","size","hashes","siblings","apply","rootHashSignature","pow","log2","_ref6","hashResult","some","_ref7","siblingSignature","index","verifiedSignature","siblingHash","_ref8","UnifiedMerkleHashTree","subtrees","nextStart","chunkCount","_ref9","comparator","left","right","mid","order","binSearch","_this5$subtrees$i$roo","storedSubtree","findSubtree","copy","sort","b","pruneSubtrees","removedTree","treeSize","nextAddress","insertSubtree","MerkleHashSubtreeVerifier","getConstituentSignatures","_MerkleHashTreeVerifi","unifiedHashTree","_this7","prototype","NoneVerifier","NoneVerifierFactory","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0__","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0___default","v","hexToArrayBuffer","isRsaAlgorithm","includes","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","metadataLength","buffer","byteLength","writeUInt8","writeUInt32BE","readUInt8","readUInt32BE","ArrayBuffer","isView","read","EMA","alpha","mean","weight","RingBuffer","capacity","setCapacity","lastIndex","createEmptyValue","firstEmptyIndex","advanceLastIndex","set","DelayBuffer","delay","now","Date","TARGET","CURRENT_HISTORY","CURRENT_HISTORY_INTERVAL","BASE_HISTORY","BASE_HISTORY_INTERVAL","INIT_CWND","MSS","COEF_ALPHA","COEF_BETA","LEDBAT","mss","lastDataLoss","lastAckTime","ackSize","bytes","delaySample","update","checkCTO","queuingDelay","abs","offTarget","maxAllowedCwnd","rtt","isEmpty","retransmitting","timestamp","createChunkAddressFieldType","addressingMethod","Bin32ChunkAddress","offset","_Address$binBounds","_Address$binBounds2","ChunkRange32ChunkAddress","createBufferFieldType","BufferField","createLiveSignatureFieldType","getLiveSignatureByteLength","_createBufferFieldTyp","LiveSignatureField","createIntegrityHashFieldType","_createBufferFieldTyp2","IntegrityHashField","createEncoding","ChunkAddress","IntegrityHash","LiveSignature","_protocolOptionRecord","_messageRecordTypes","Uint8ProtocolOption","Uint32ProtocolOption","VersionProtocolOption","_Uint8ProtocolOption","version","MinimumVersionProtocolOption","_Uint8ProtocolOption2","SwarmIdentifierProtocolOption","readUInt16BE","writeUInt16BE","ContentIntegrityProtectionMethodProtocolOption","_Uint8ProtocolOption3","method","MerkleHashTreeFunctionProtocolOption","_Uint8ProtocolOption4","LiveSignatureAlgorithmProtocolOption","_Uint8ProtocolOption5","ChunkAddressingMethodProtocolOption","_Uint8ProtocolOption6","_this8","LiveDiscardWindowProtocolOption","_Uint32ProtocolOption","_this9","SupportedMessagesProtocolOption","_this10","messageTypes","byte","j","Boolean","keys","bitmapByteLength","bitmap","toBitmap","ChunkSizeProtocolOption","_Uint32ProtocolOption2","_this11","protocolOptionRecordTypes","HandshakeMessage","code","option","RecordType","reduce","write","Timestamp","seconds","readInt32BE","nanoseconds","writeInt32BE","DataMessage","dataLength","rangeByteLength","AddressMessage","AckMessage","HaveMessage","_AddressMessage","_this12","IntegrityMessage","SignedIntegrityMessage","RequestMessage","_AddressMessage2","_this13","CancelMessage","_AddressMessage3","_this14","EmptyMessage","ChokeMessage","_EmptyMessage","_this15","UnchokeMessage","_EmptyMessage2","_this16","messageRecordTypes","Messages","messageType","message","next","isArray","Datagram","messages","datagram","createMask","bits","mask","applyMask","BitArray","resize","distance","unsafelySetRange","byteIndex","bitIndex","byteOffset","adjustOffset","startByteIndex","getByteIndex","endByteIndex","startBitIndex","getBitIndex","endBitIndex","unsafelySetIndexRange","startMask","endMask","firstBit","lastBit","Flow","lastVirtualFinish","nextVirtualFinish","queue","wfq","Queue","rate","totalQueueSize","flows","flow","indexOf","computeWeight","virtualFinish","minVirtualFinish","getNextScheduledFlow","task","AvailabilityMap","_ref$end","BinRingBuffer","_RingBuffer","esm_get","RateMeter","windowMs","sampleWindowMs","firstSampleWindow","lastSampleWindow","sum","sampleWindow","adjustSampleWindow","accumulatedMs","ChunkRateMeter","_RateMeter","lastEndBin","lastHeadBin","RequestFlow","_wfq$Flow","queueSize","RequestQueue","_wfq$Queue","remove","result","SchedulerChunkState","reset","availableCopies","requestTime","requestPeerId","requested","received","SchedulerChunkRequestMap","valueByBin","head","tail","createdAt","prev","SchedulerChunkMap","_BinRingBuffer","SchedulerPeerState","requestFlow","lastChunkTime","requestTimes","sentRequests","timeouts","invalidChunks","Scheduler","chunkStates","definitelyLoadedChunks","peerCount","timers","lastExportedBin","sendDelay","nextSendTime","nextSendTimeout","isReady","timeout","firstLoadedChunk","firstRequestedChunk","lastAvailableBin","planFor","dip","peer_remoteId","peer_localId","swift_rtt","swift_rttvar","swift_chunkIntervalMean","swift_cwnd","ledbat_cwnd","ledbat_cto","ledbat_currentDelay","ledbat_baseDelay","ledbat_rttMean","ledbat_rttVar","ledbat_rtt","ledbat_flightSize","picker_startBin","picker_lastAvailableBin","minIncompleteBin","picker_firstLoadedChunk","picker_firstRequestedChunk","digestDelaySamples","timeoutThreshold","cancelledRequests","peek","pop","_peerState$peer","requestAddresses","random","insert","firstRequestedBin","sendCancel","sendRequest","requestedAddress","requestedChunk","sentAt","addSent","sendChunk","sendInterval","setTimeout","addFlow","_ref10","removeFlow","clearTimeout","_ref11","getPeerState","chunkInterval","addRttSample","_ref12","sendHave","nextExportedBin","advanceLastBin","_ref13","addDelaySample","sentChunk","onDataLoss","genericEncoding","_uri$protocolOptions","protocolOptions","encoding","toBuffer","protocolOption","protocolOptionName","newBins","getNewCompleteBins","_newBins","minNewBin","maxNewBin","chunks","CONNECTING","AWAITING_HANDSHAKE","READY","CHOKED","DISCONNECTING","CLOSED","PeerDataHandlerContext","integrityVerifier","createVerifier","Peer","_this$handlers","createChannelId","handlers","handleHandshakeMessage","handleDataMessage","handleHaveMessage","handleAckMessage","handleIntegrityMessage","handleSignedIntegrityMessage","handleRequestMessage","handleCancelMessage","handleChokeMessage","handleUnchokeMessage","sendBuffer","addPeer","sendHandshake","removePeer","context","toArray","handler","handshake","setLiveDiscardWindow","verifyProtocolOptions","getRecentChunks","computeOneWayDelay","markChunkReceived","getContentIntegrityVerifier","verifyChunk","markChunkVerified","emitNewData","err","markChunkRejected","markChunkAvailable","markSendAcked","setHash","setHashSignature","enqueueRequest","cancelRequest","addresses","_len2","_key2","chunk","constituentSignatures","reverse","getSignatureHash","round","SwarmSet","setMaxListeners","swarmIdToKey","Channel","_EventEmitter3","peers","handleSwarmInsert","getOrCreatePeer","liveSwarms","find","handleData","handleClose","removeListener","p","createPeer","handleRemove","removedSwarm","NUMBER_OF_NODES_PER_BUCKET","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","KBucket","numberOfNodesPerKBucket","localNodeId","handlePing","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleRemoved","handleUpdated","handleAdded","seenIds","LRU","knownRoutes","maxAge","callbacks","handlePeersRequest","handlePingRequest","handleCallbackResponse","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","newChannel","replaceChannel","add","replaceChannelTimeout","oldChannel","bufferMessages","removeEventListener","handlePeersResponse","handleError","req","to","res","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","re","forwardMessage","hops","sendRaw","candidates","reqCallback","_ref4$data","_ref4$data$count","count","ids","closest","randomBytes","knownRoute","vectorClock","SubChannel","peerId","ReadyStates","OPEN","_ref8$data","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__","Conn","remote","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","setImmediate","handleConnection","datachannels","nextId","handleOpen","ClientDataChannel","sendConnection","_Conn","DELIMITER","DELIMITER_LENGTH","ChunkedWriteStream","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","appendData","HEADER_INSTANCE_LENGTH","writer","intervalId","setInterval","done","clearInterval","AbstractChunkedReadStream","handleWarmupSwarmData","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","handleSwarmData","chunkBufferLength","nextDataOffset","nextDataLength","delimiterIndex","readHeader","instance","lastChunkOffset","nextDataEnd","lastChunkEnd","handleEndData","_AbstractChunkedReadS","firstEmitted","_AbstractChunkedReadS2","chunkSlice","firstChunkStart","protocolOptionToKey","_protocolOptionToKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","URLSafeBase64","encode","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","join","uriString","startsWith","args","substring","split","query","_query$split","_query$split2","decodeURIComponent","arg","parseFloat","xt","decode"],"mappings":"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","file":"static/js/main.a0924a7f.chunk.js","sourcesContent":["import invert from 'lodash.invert';\n\nexport const MaxChannelId = 0xffffffff;\n\nexport const ProtocolOptions = {\n  Version: 0,\n  MinimumVersion: 1,\n  SwarmIdentifier: 2,\n  ContentIntegrityProtectionMethod: 3,\n  MerkleHashTreeFunction: 4,\n  LiveSignatureAlgorithm: 5,\n  ChunkAddressingMethod: 6,\n  LiveDiscardWindow: 7,\n  SupportedMessages: 8,\n  ChunkSize: 9,\n  EndOption: 255,\n};\n\nexport const Version = {\n  RFC7574: 1,\n};\n\nexport const ContentIntegrityProtectionMethod = {\n  None: 0,\n  MerkleHashTree: 1,\n  SignAll: 2,\n  UnifiedMerkleTree: 3,\n};\n\nexport const MerkleHashTreeFunction = {\n  SHA1: 0,\n  SHA224: 1,\n  SHA256: 2,\n  SHA384: 3,\n  SHA512: 4,\n};\n\nexport const LiveSignatureAlgorithm = {\n  RSASHA1: 5,\n  RSASHA256: 8,\n  ECDSAP256SHA256: 13,\n  ECDSAP384SHA384: 14,\n};\n\nexport const ChunkAddressingMethod = {\n  Bin32: 0,\n  ByteRange64: 1,\n  ChunkRange32: 2,\n  Bin64: 3,\n  ChunkRange64: 4,\n};\n\nexport const VariableChunkSize = 0xffffffff;\n\nexport const MessageTypes = {\n  HANDSHAKE: 0,\n  DATA: 1,\n  ACK: 2,\n  HAVE: 3,\n  INTEGRITY: 4,\n  PEX_RESv4: 5,\n  PEX_REQ: 6,\n  SIGNED_INTEGRITY: 7,\n  REQUEST: 8,\n  CANCEL: 9,\n  CHOKE: 10,\n  UNCHOKE: 11,\n  PEX_RESv6: 12,\n  PEX_REScert: 13,\n};\n\n[\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n].forEach(enumType => {\n  const names = invert(enumType);\n  enumType.name = value => names[value] || 'UNDEFINED';\n});\n","import crypto from 'crypto';\n\nconst createRandomId = () => {\n  const id = new Uint8Array(16);\n  crypto.randomFillSync(id);\n  return id;\n};\n\nexport default createRandomId;\n","import {EventEmitter} from 'events';\nimport crypto from 'crypto';\nimport {generateKeyPair} from './integrity';\nimport URI from './uri';\nimport {\n  ChunkAddressingMethod,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ProtocolOptions,\n} from './constants';\nimport {Swarm} from '../ppspp';\n\nexport default class Injector {\n  constructor(swarm, chunkSize, chunksPerSignature) {\n    this.swarm = swarm;\n    this.chunkSize = chunkSize;\n    this.chunksPerSignature = chunksPerSignature;\n    this.inputBuffer = Buffer.alloc(0);\n    this.chunkBuffer = [];\n  }\n\n  appendData(data) {\n    if (this.inputBuffer.length + data.length < this.chunkSize) {\n      this.inputBuffer = Buffer.concat([this.inputBuffer, data]);\n      return;\n    }\n\n    let dataOffset = 0;\n    if (this.inputBuffer.length > 0) {\n      dataOffset = this.chunkSize - this.inputBuffer.length;\n      this.chunkBuffer.push(Buffer.concat([this.inputBuffer, data.slice(0, dataOffset)], this.chunkSize));\n    }\n\n    for (let i = dataOffset; i + this.chunkSize < data.length; i += this.chunkSize) {\n      this.chunkBuffer.push(data.slice(i, Math.min(data.length, i + this.chunkSize)));\n      dataOffset = i + this.chunkSize;\n    }\n\n    if (dataOffset < data.length) {\n      this.inputBuffer = data.slice(dataOffset);\n    }\n\n    while (this.chunkBuffer.length > this.chunksPerSignature) {\n      const subtreeChunks = this.chunkBuffer.splice(0, this.chunksPerSignature);\n      this.swarm.contentIntegrity.appendSubtree(subtreeChunks).then(subtree => {\n        this.swarm.chunkBuffer.setRange(subtree.rootAddress, subtreeChunks);\n        this.swarm.scheduler.markChunksLoaded(subtree.rootAddress);\n      });\n    }\n  }\n\n  static create(options = {}) {\n    const {\n      chunkSize = 8 * 1024,\n      chunksPerSignature = 64,\n      liveDiscardWindow = Math.ceil(15 * 3500 * 1024 / chunkSize),\n      chunkAddressingMethod = ChunkAddressingMethod.Bin32,\n      contentIntegrityProtectionMethod = ContentIntegrityProtectionMethod.UnifiedMerkleTree,\n      merkleHashTreeFunction = MerkleHashTreeFunction.SHA256,\n      liveSignatureAlgorithm = LiveSignatureAlgorithm.ECDSAP256SHA256,\n    } = options;\n\n    return generateKeyPair(liveSignatureAlgorithm).then(({swarmId, privateKey}) => {\n      const uri = new URI(\n        swarmId,\n        {\n          [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n          [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n          [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n          [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n          [ProtocolOptions.ChunkSize]: chunkSize,\n        }\n      );\n\n      console.log('swarm uri:', uri.toString());\n\n      const clientOptions = {\n        liveDiscardWindow,\n        privateKey,\n        uploadRateLimit: 10e6,\n      };\n\n      return new Swarm(uri, clientOptions);\n    }).then(swarm => new Injector(swarm, chunkSize, chunksPerSignature));\n  }\n}\n\nexport class NoiseInjector extends EventEmitter {\n  constructor(dataRate = 3.5e6 / 8, interval = 250) {\n    super();\n    this.dataRate = dataRate * (interval / 1000);\n    this.interval = interval;\n  }\n\n  start() {\n    const data = Buffer.alloc(this.dataRate);\n    crypto.randomFillSync(data);\n\n    Injector.create().then(injector => {\n      this.intervalId = setInterval(() => injector.appendChunk(data), this.interval);\n      this.injector = injector;\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n","import {ChunkAddressingMethod} from './constants';\n\nexport default class Address {\n  constructor(bin = 0, treeBounds = Address.binBounds(bin)) {\n    this.bin = bin;\n    [this.start, this.end] = treeBounds;\n  }\n\n  containsBin(bin) {\n    return this.start <= bin && bin <= this.end;\n  }\n\n  getChunkCount() {\n    return (this.end - this.start) / 2 + 1;\n  }\n\n  static from(address) {\n    if (address instanceof Address) {\n      return address;\n    }\n\n    switch (address.type) {\n      case ChunkAddressingMethod.Bin32:\n        return new Address(address.value);\n      case ChunkAddressingMethod.ChunkRange32: {\n        const {start, end} = address;\n        return new Address((end - start) / 2, [start, end]);\n      }\n      default:\n        throw new Error('unsupported address type');\n    }\n  }\n\n  static binBounds(bin) {\n    return [\n      bin & (bin + 1),\n      (bin | (bin + 1)) - 1,\n    ];\n  }\n}\n","import WebCrypto from 'node-webcrypto-ossl';\n\nmodule.exports = new WebCrypto();\n","module.exports = window.crypto;\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport {scaleLinear} from 'd3-scale';\n\nimport './index.css';\n\nclass ToggleButton extends Component {\n  static defaultProps = {\n    expanded: false,\n  };\n\n  render() {\n    const buttonClasses = classNames({\n      'diagnostic_menu__toggle_button': true,\n      'diagnostic_menu__toggle_button--expanded': this.props.expanded,\n    });\n\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={buttonClasses}\n      />\n    );\n  }\n}\n\nclass SwarmState extends Component {\n  render() {\n    const {scheduler} = this.props.value;\n\n    const values = [\n      {\n        key: 'totalSends',\n        value: scheduler.totalSends,\n      },\n      {\n        key: 'totalRequests',\n        value: scheduler.totalRequests,\n      },\n      {\n        key: 'totalRequestsReceived',\n        value: scheduler.totalRequestsReceived,\n      },\n      {\n        key: 'totalDroppedRequests',\n        value: scheduler.totalDroppedRequests,\n      },\n      {\n        key: 'totalReceived',\n        value: scheduler.totalReceived,\n      },\n      {\n        key: 'totalAdded',\n        value: scheduler.totalAdded,\n      },\n      {\n        key: 'totalCancelled',\n        value: scheduler.totalCancelled,\n      },\n      {\n        key: 'ackUnknownSend',\n        value: scheduler.ackUnknownSend,\n      },\n      {\n        key: 'lastCompletedBin',\n        value: scheduler.lastCompletedBin,\n      },\n      {\n        key: 'picker.firstLoadedChunk',\n        value: scheduler.loadedChunks.min(),\n      },\n      {\n        key: 'picker.firstRequestedChunk',\n        value: scheduler.requestedChunks.min(),\n      },\n      {\n        key: 'chunkRate',\n        value: scheduler.chunkRate.value(),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    return (\n      <div className=\"swarm_state__container\">\n        <table>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass PeerStateTable extends Component {\n  render() {\n    const peerState = this.props.value;\n\n    const values = [\n      {\n        key: 'chunkIntervalMean',\n        value: peerState.chunkIntervalMean.value(),\n      },\n      {\n        key: 'wasteRate',\n        value: peerState.wasteRate.value(),\n      },\n      {\n        key: 'chunkRate',\n        value: peerState.chunkRate.value(),\n      },\n      {\n        key: 'ledbat.baseDelay',\n        value: peerState.ledbat.baseDelay.getMin(),\n      },\n      {\n        key: 'ledbat.currentDelay',\n        value: peerState.ledbat.currentDelay.getMin(),\n      },\n      {\n        key: 'ledbat.rttMean',\n        value: peerState.ledbat.rttMean.value(),\n      },\n      {\n        key: 'ledbat.rttVar',\n        value: peerState.ledbat.rttVar.value(),\n      },\n      {\n        key: 'ledbat.cwnd',\n        value: peerState.ledbat.cwnd,\n      },\n      {\n        key: 'ledbat.cto',\n        value: peerState.ledbat.cto,\n      },\n      {\n        key: 'ledbat.flightSize',\n        value: peerState.ledbat.flightSize,\n      },\n      {\n        key: 'validChunks',\n        value: peerState.validChunks,\n      },\n      {\n        key: 'requestQueue.length',\n        value: peerState.requestQueue.length,\n      },\n      {\n        key: 'requestedChunks.length',\n        value: peerState.requestedChunks.length,\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    const {\n      startBin,\n      endBin,\n    } = this.props;\n\n    rows.push(\n      <tr key=\"availableChunks\">\n        <td colSpan=\"2\">\n          Available\n          <AvailabilityMapChart\n            value={this.props.value.availableChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"sentChunks\">\n        <td colSpan=\"2\">\n          Sent\n          <AvailabilityMapChart\n            value={this.props.value.sentChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"receivedChunks\">\n        <td colSpan=\"2\">\n          Received\n          <AvailabilityMapChart\n            value={this.props.value.receivedChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    return (\n      <table>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nclass AvailabilityMapChart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (!this.canvas.current) {\n      return;\n    }\n\n    const {value} = this.props;\n    const min = isNaN(this.props.startBin)\n      ? value.min()\n      : this.props.startBin;\n    const max = isNaN(this.props.endBin)\n      ? value.max()\n      : this.props.endBin;\n\n    if (!isFinite(min) || !isFinite(max) || isNaN(min) || isNaN(max)) {\n      return;\n    }\n\n    const ctx = this.canvas.current.getContext('2d');\n    const width = 500;\n    const height = 20;\n\n    const scale = scaleLinear()\n      .domain([min, max])\n      .range([0, width]);\n\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n\n    ctx.fillStyle = '#ccc';\n\n    let lastStart = -1;\n    for (let i = min; i <= max; i += 2) {\n      if (!value.values.get((i + 2) / 2) || i === max) {\n        if (lastStart !== -1) {\n          ctx.fillRect(scale(lastStart), 0, scale(i) - scale(lastStart), 20);\n\n          lastStart = -1;\n        }\n      } else if (lastStart === -1) {\n        lastStart = i;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <canvas\n        height=\"20\"\n        width=\"500\"\n        ref={this.canvas}\n      />\n    );\n  }\n}\n\nclass PeerState extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n  }\n\n  render() {\n    let table;\n    if (this.state.expanded) {\n      table = (\n        <PeerStateTable\n          value={this.props.value}\n          startBin={this.props.startBin}\n          endBin={this.props.endBin}\n        />\n      );\n    }\n\n    return (\n      <div className=\"peer_state__container\">\n        <div className=\"peer_state__header\">\n          <ToggleButton\n            onClick={this.handleButtonClick}\n            expanded={this.state.expanded}\n          />\n          <h4 className=\"peer_state__title\">\n            {this.props.value.peer.localId} : {this.props.value.peer.remoteId}\n          </h4>\n        </div>\n        {table}\n      </div>\n    );\n  }\n}\n\nclass DiagnosticMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n\n    this.scheduleUpdate();\n  }\n\n  handleUpdate = () => {\n    if (this.state.expanded) {\n      this.forceUpdate(this.scheduleUpdate);\n    }\n  }\n\n  scheduleUpdate = () => {\n    window.requestAnimationFrame(this.handleUpdate);\n  }\n\n  render() {\n    const containerClasses = classNames(\n      this.props.containerClass,\n      {\n        'diagnostic_menu__container': true,\n        'diagnostic_menu__container--expanded': this.state.expanded,\n      },\n    );\n\n    const {\n      lastCompletedBin,\n      liveDiscardWindow,\n    } = this.props.swarm.scheduler;\n    const startBin = lastCompletedBin - liveDiscardWindow;\n    const endBin = lastCompletedBin + liveDiscardWindow;\n\n    let swarmState;\n    let peerStates;\n    if (this.state.expanded) {\n      swarmState = (\n        <SwarmState\n          value={this.props.swarm}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      );\n\n      peerStates = Object.entries(this.props.swarm.scheduler.peerStates).map(([key, peerState]) => (\n        <PeerState\n          key={key}\n          value={peerState}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      ));\n    }\n\n    return (\n      <div className={containerClasses}>\n        <ToggleButton\n          onClick={this.handleButtonClick}\n          expanded={this.state.expanded}\n        />\n        {swarmState}\n        {peerStates}\n      </div>\n    );\n  }\n}\n\nexport default DiagnosticMenu;\n","import React, {Component} from 'react';\nimport muxjs from 'mux.js';\nimport {ChunkedFragmentedReadStream} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport {Buffer} from 'buffer';\n\nimport './SwarmPlayer.css';\n\nconst log = e => console.log(e);\n\nexport default class SwarmPlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.video = React.createRef();\n  }\n\n  componentDidMount() {\n    const mediaSource = new MediaSource();\n\n    this.video.current.addEventListener('error', log);\n    this.video.current.src = URL.createObjectURL(mediaSource);\n\n    mediaSource.addEventListener('sourceopen', () => this.handleSourceOpen(mediaSource));\n  }\n\n  handleSourceOpen = (mediaSource) => {\n    const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"mp4a.40.5,avc1.64001F\"');\n    sourceBuffer.addEventListener('updatestart', log);\n    sourceBuffer.addEventListener('updateend', log);\n    sourceBuffer.addEventListener('error', log);\n\n    const videoSegments = [];\n    let initSet = false;\n\n    sourceBuffer.addEventListener('updateend', () => {\n      if (videoSegments.length) {\n        sourceBuffer.appendBuffer(videoSegments.shift());\n      }\n    });\n\n    var transmuxer = new muxjs.mp4.Transmuxer();\n    transmuxer.on('data', event => {\n      if (event.type === 'combined') {\n        const buf = initSet\n          ? event.data\n          : Buffer.concat([Buffer.from(event.initSegment), Buffer.from(event.data)]);\n        initSet = true;\n\n        if (sourceBuffer.updating) {\n          videoSegments.push(new Uint8Array(buf));\n        } else {\n          sourceBuffer.appendBuffer(new Uint8Array(buf));\n        }\n      } else {\n        console.log('unhandled event', event.type);\n      }\n    });\n\n    const stream = new ChunkedFragmentedReadStream(this.props.swarm);\n    stream.on('start', data => transmuxer.push(new Uint8Array(data)));\n    stream.on('data', data => transmuxer.push(new Uint8Array(data)));\n    stream.on('end', data => {\n      transmuxer.push(new Uint8Array(data));\n      transmuxer.flush();\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <DiagnosticMenu swarm={this.props.swarm} />\n        <video\n          controls\n          className=\"swarm-player-video\"\n          ref={this.video}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport hexToUint8Array from './hexToUint8Array';\n\nexport class Client {\n  constructor(connManager, dhtClientId, bootstrapId, conn, swarmUri) {\n    this.connManager = connManager;\n    this.swarmUri = swarmUri;\n\n    const client = connManager.createClient(conn);\n\n    this.dhtClient = new dht.Client(dhtClientId);\n    this.dhtClient.on('peers.discover', this.handlePeersDiscover.bind(this));\n    this.dhtClient.on('receive.connect.request', this.handleReceiveConnectRequest.bind(this));\n    this.dhtClient.createChannel(bootstrapId, client.createDataChannel('dht'));\n\n    this.ppsppClient = new ppspp.Client();\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    client.init();\n  }\n\n  static create(connManager) {\n    return connManager.bootstrap().then(({data, conn}) => {\n      return new Client(\n        connManager,\n        hexToUint8Array(data.id),\n        hexToUint8Array(data.bootstrapId),\n        conn,\n        data.swarmUri,\n      );\n    });\n  }\n\n  handlePeersDiscover(id) {\n    // console.log('creating client for', ids);\n    const sub = new dht.SubChannel(this.dhtClient, id);\n    const client = this.connManager.createClient(sub);\n\n    this.dhtClient.createChannel(id, client.createDataChannel('dht'));\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    this.dhtClient.send(id, 'connect.request', {channelId: sub.id}, () => client.init());\n  }\n\n  handleReceiveConnectRequest({data: {channelId, from}, callback}) {\n    // console.log('handleReceiveConnectRequest', {channelId, from, callback});\n    const id = new hexToUint8Array(from);\n    const client = this.connManager.createClient(new dht.SubChannel(this.dhtClient, id, channelId));\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.ppsppClient.createChannel(channel);\n      }\n    });\n\n    callback();\n  }\n}\n","import {EventEmitter} from 'events';\nimport {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from 'wrtc';\n\nexport class ConnManager {\n  constructor(bootstrapAddress) {\n    this.bootstrapAddress = bootstrapAddress;\n  }\n\n  bootstrap() {\n    return new Promise((resolve, reject) => {\n      const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n      const conn = new WebSocket(`${protocol}://${this.bootstrapAddress}`);\n      conn.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'bootstrap') {\n          resolve({data, conn});\n        } else {\n          reject(new Error(`expected bootstrap, received: ${event.data}`));\n        }\n      };\n    });\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    // TODO: retry?\n    mediator.once('error', () => conn.close());\n    client.once('open', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n\n    switch (data.type) {\n      case 'offer':\n      case 'answer':\n        this.emit('remotedescription', new RTCSessionDescription(data));\n        break;\n      case 'icecandidate':\n        if (data.sdp && data.sdp.candidate) {\n          this.emit('icecandidate', new RTCIceCandidate(data.sdp));\n        }\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  sendOffer(event) {\n    this.send(event);\n  }\n\n  sendAnswer(event) {\n    this.send(event);\n  }\n\n  sendIceCandidate(event) {\n    if (event.candidate) {\n      this.send({\n        type: 'icecandidate',\n        sdp: event.candidate,\n      });\n    }\n  }\n\n  send(event) {\n    if (this.conn.readyState !== 1) {\n      this.emit('error', new Error('connection in invalid state'));\n      return;\n    }\n\n    this.conn.send(JSON.stringify(event));\n  }\n}\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.initialized = false;\n    this.waitingChannels = 0;\n\n    this.peerConn = new RTCPeerConnection({\n      iceServers: [{urls: 'stun:stun.l.google.com:19302'}],\n    });\n\n    this.peerConn.addEventListener('icecandidate', candidate => this.mediator.sendIceCandidate(candidate));\n    this.peerConn.addEventListener('datachannel', this.handleDataChannel.bind(this));\n\n    mediator.once('error', () => this.peerConn.close());\n    mediator.on('icecandidate', candidate => this.addIceCandidate(candidate));\n\n    this._ready = new Promise((resolve, reject) => {\n      mediator.on('remotedescription', description => {\n        this.peerConn.setRemoteDescription(description)\n          .then(() => {\n            resolve();\n            this.createAnswer();\n          })\n          .catch(reject);\n      });\n    });\n  }\n\n  createAnswer() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n\n    this.peerConn.createAnswer()\n      .then((description) => {\n        this.peerConn.setLocalDescription(description);\n        this.mediator.sendAnswer(description);\n      })\n      .catch(error => console.error(error));\n  }\n\n  addIceCandidate(candidate) {\n    this._ready.then(() => this.peerConn.addIceCandidate(candidate));\n  }\n\n  handleDataChannel(event) {\n    this.waitingChannels ++;\n    event.channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    this.emit('datachannel', event);\n  }\n\n  createDataChannel(label, options = {}) {\n    options = {\n      ordered: true,\n      maxRetransmits: 10,\n      ...options,\n    };\n\n    const channel = this.peerConn.createDataChannel(label, options);\n    channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    return channel;\n  }\n\n  resolveWaitingChannel() {\n    if (-- this.waitingChannels === 0) {\n      this.emit('open');\n    }\n  }\n\n  init() {\n    this.peerConn.createOffer()\n      .then(offer => {\n        this.initialized = true;\n        // console.log('initial offer', offer);\n        this.peerConn.setLocalDescription(offer);\n        this.mediator.sendOffer(offer);\n      });\n  }\n}\n","import React, {useEffect, useState} from 'react';\nimport URI from './ppspp/uri';\nimport SwarmPlayer from './SwarmPlayer';\nimport {Client} from './client';\nimport {ConnManager} from './wrtc';\n// import {ChunkedReadStream} from './chunkedStream';\n\nimport './App.css';\n\nconst BOOTSTRAP_ADDRESS = process.env.NODE_ENV === 'development'\n  ? window.location.hostname + ':8080'\n  : window.location.host;\n\nconst App = () => {\n  const [ppsppClient, setPpsppClient] = useState(null);\n  const [swarmUri, setSwarmUri] = useState('');\n  const [swarm, setSwarm] = useState(null);\n\n  useEffect(() => {\n    const connManager = new ConnManager(BOOTSTRAP_ADDRESS);\n\n    Client.create(connManager).then(({ppsppClient, swarmUri}) => {\n      setPpsppClient(ppsppClient);\n      setSwarmUri(swarmUri);\n    });\n  }, []);\n\n  if (swarm) {\n    return <SwarmPlayer swarm={swarm} />;\n  }\n\n  const onJoinSubmit = e => {\n    e.preventDefault();\n\n    console.log(swarmUri);\n    const uri = URI.parse(swarmUri);\n    console.log('joining', uri);\n\n    const swarm = ppsppClient.joinSwarm(uri);\n    // const stream = new ChunkedReadStream(swarm);\n    // stream.on('data', d => console.log(`received ${d.length} bytes`));\n    setSwarm(swarm);\n  };\n\n  const onInputChange = e => {\n    setSwarmUri(e.target.value);\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"idle\">\n        <div className=\"scanner\"></div>\n        <div className=\"noise\"></div>\n      </div>\n      <form className=\"join-form\" onSubmit={onJoinSubmit}>\n        <input\n          onChange={onInputChange}\n          placeholder=\"Enter Swarm URI\"\n          defaultValue={swarmUri}\n        />\n        <button>Join</button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React, {useEffect, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport {ChunkedReadStream, ChunkedWriteStreamInjector} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\n\nimport './App.css';\n\nconst App = () => {\n  const [server] = useState(new Server());\n  const [swarms, setSwarms] = useState([]);\n  const [swarmUri, setSwarmUri] = useState('');\n\n  useEffect(() => {\n    const injector = new ChunkedWriteStreamInjector();\n\n    injector.on('publish', ({swarm}) => {\n      setSwarmUri(swarm.uri);\n      server.ppsppClient.publishSwarm(swarm);\n    });\n\n    injector.on('unpublish', ({swarm}) => {\n      server.ppsppClient.unpublishSwarm(swarm);\n    });\n\n    injector.start();\n\n    return () => injector.stop();\n  }, []);\n\n  const handleAddPeerClick = () => {\n    Client.create(new ConnManager(server)).then(({ppsppClient}) => {\n      const swarm = ppsppClient.joinSwarm(swarmUri);\n      // console.log(ppsppClient);\n\n      setSwarms([...swarms, swarm]);\n\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', d => console.log(`received ${d.length} bytes`));\n    });\n  };\n\n  const diagnosticMenus = swarms.map((swarm, i) => (\n    <DiagnosticMenu\n      key={i}\n      swarm={swarm}\n      containerClass={`diagnostic-menu--indent-${i}`}\n    />\n  ));\n\n  return (\n    <div>\n      {diagnosticMenus}\n      <button onClick={handleAddPeerClick}>add peer</button>\n    </div>\n  );\n};\n\nexport default App;\n","import React, {useEffect, useReducer, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport {schemeCategory10} from 'd3-scale-chromatic';\nimport {scaleOrdinal} from 'd3-scale';\n\nimport './App.css';\n\nconst color = scaleOrdinal(schemeCategory10);\n\nconst reduceGraph = (graph, {type, ...data}) => {\n  switch (type) {\n    case 'ADD_NODE':\n      return {\n        nodes: [...graph.nodes, data],\n        links: graph.links,\n      };\n    case 'ADD_LINK':\n      return {\n        nodes: graph.nodes,\n        links: [...graph.links, data],\n      };\n    case 'REMOVE_LINK':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.filter(({source, target}) => {\n          return source !== data.source || target !== data.target;\n        }),\n      };\n    default:\n      return graph;\n  }\n};\n\nconst App = () => {\n  const [server] = useState(new Server());\n  const [gen, setGen] = useState(1);\n  const [graph, dispatchGraphAction] = useReducer(reduceGraph, {nodes: [], links: []});\n\n  useEffect(() => {\n    const source = arrayBufferToHex(server.dhtClient.id);\n    dispatchGraphAction({\n      type: 'ADD_NODE',\n      id: source,\n      color: color(0),\n    });\n  }, []);\n\n  const handleAddPeerClick = (n=1) => {\n    setGen(gen + 1);\n\n    Promise.all(new Array(n).fill(0).map(() => Client.create(new ConnManager(server))))\n      .then(clients => clients.forEach(({dhtClient: {id, channels}}) => {\n        const source = arrayBufferToHex(id);\n        dispatchGraphAction({\n          type: 'ADD_NODE',\n          id: source,\n          color: color(gen),\n        });\n\n        channels.on('added', ({id}) => dispatchGraphAction({\n          type: 'ADD_LINK',\n          source,\n          target: arrayBufferToHex(id),\n        }));\n        channels.on('removed', ({id}) => dispatchGraphAction({\n          type: 'REMOVE_LINK',\n          source,\n          target: arrayBufferToHex(id),\n        }));\n      }));\n  };\n\n  return (\n    <div>\n      <div className=\"graph-buttons\">\n        <button onClick={() => handleAddPeerClick(1)}>add 1 peer</button>\n        <button onClick={() => handleAddPeerClick(5)}>add 5 peers</button>\n        <button onClick={() => handleAddPeerClick(10)}>add 10 peers</button>\n        <button onClick={() => handleAddPeerClick(50)}>add 50 peers</button>\n      </div>\n      <ForceGraph3D\n        graphData={graph}\n        nodeAutoColorBy=\"gen\"\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport App from './App';\nimport Test from './Test';\nimport DhtGraph from './DhtGraph';\n\nconst Router = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/test\" component={Test} />\n      <Route exact path=\"/dht-graph\" component={DhtGraph} />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './Router';\n\nimport './index.css';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n","import {Buffer} from 'buffer';\nimport arrayEqual from 'array-equal';\nimport binSearch from '../binSearch';\nimport Address from './address';\nimport SwarmId from './swarmid';\n\nimport {\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n} from './constants';\n\nconst crypto = typeof window === 'undefined'\n  ? require('./webcrypto')\n  : require('./crypto');\n\nconst toUint8Array = data => new Uint8Array(data);\n\nexport const MerkleHashTreeFunctionAlgorithms = {\n  [MerkleHashTreeFunction.SHA1]: 'SHA-1',\n  [MerkleHashTreeFunction.SHA224]: 'SHA-224',\n  [MerkleHashTreeFunction.SHA256]: 'SHA-256',\n  [MerkleHashTreeFunction.SHA384]: 'SHA-384',\n  [MerkleHashTreeFunction.SHA512]: 'SHA-512',\n};\n\nexport const MerkleHashTreeFunctionByteLengths = {\n  [MerkleHashTreeFunction.SHA1]: 20,\n  [MerkleHashTreeFunction.SHA224]: 28,\n  [MerkleHashTreeFunction.SHA256]: 32,\n  [MerkleHashTreeFunction.SHA384]: 48,\n  [MerkleHashTreeFunction.SHA512]: 64,\n};\n\nexport const createMerkleHashTreeFunction = (merkleHashTreeFunction) => {\n  const algorithm = MerkleHashTreeFunctionAlgorithms[merkleHashTreeFunction];\n  if (algorithm === undefined) {\n    throw new Error('invalid merkle hash tree function');\n  }\n\n  const nullHash = new Uint8Array(MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction]);\n\n  return (...values) => {\n    values = values.map(value => value === undefined ? nullHash : value);\n\n    if (values.every(value => arrayEqual(value, nullHash))) {\n      return Promise.resolve(nullHash);\n    }\n\n    if (values.length > 1) {\n      values = new Uint8Array(Buffer.concat(values.map(value => Buffer.from(value))));\n    } else {\n      values = values[0];\n    }\n\n    return crypto.subtle.digest(algorithm, values).then(toUint8Array);\n  };\n};\n\nexport const LiveSignatureAlgorithms = {\n  [LiveSignatureAlgorithm.RSASHA1]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-1'},\n  },\n  [LiveSignatureAlgorithm.RSASHA256]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP256SHA256]: {\n    name: 'ECDSA',\n    namedCurve: 'P-256',\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP384SHA384]: {\n    name: 'ECDSA',\n    namedCurve: 'P-384',\n    hash: {name: 'SHA-384'},\n  },\n};\n\nexport const createLiveSignatureSignFunction = (liveSignatureAlgorithm, privateKey, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  const importResult = crypto.subtle.importKey('pkcs8', privateKey, algorithm, false, ['sign']);\n\n  return data => importResult\n    .then(privateKey => crypto.subtle.sign(algorithm, privateKey, data))\n    .then(toUint8Array);\n};\n\nexport const createLiveSignatureVerifyFunction = (liveSignatureAlgorithm, swarmId, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...swarmId.getKeyParams(),\n    ...algorithm,\n  };\n\n  const publicKey = new Uint8Array(swarmId.publicKey);\n  const importResult = crypto.subtle.importKey('spki', publicKey, algorithm, false, ['verify']);\n\n  return (signature, data) => importResult\n    .then(publicKey => crypto.subtle.verify(algorithm, publicKey, signature, data))\n    .then(toUint8Array);\n};\n\nexport const generateKeyPair = (liveSignatureAlgorithm, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  return crypto.subtle.generateKey(algorithm, true, ['sign', 'verify'])\n    .then(keyPair => Promise.all([\n      crypto.subtle.exportKey('pkcs8', keyPair.privateKey),\n      crypto.subtle.exportKey('spki', keyPair.publicKey),\n    ]))\n    .then(([privateKey, publicKey]) => ({\n      privateKey,\n      publicKey,\n      swarmId: SwarmId.from({\n        ...algorithm,\n        liveSignatureAlgorithm,\n        publicKey,\n      }),\n    }));\n};\n\nconst unavailableLiveSignatureSignFunction = () => Promise.reject('live signature function not available');\n\nexport const createContentIntegrityVerifierFactory = (\n  contentIntegrityProtectionMethod,\n  merkleHashTreeFunction,\n  liveSignatureVerifyFunction,\n  liveSignatureSignFunction = unavailableLiveSignatureSignFunction,\n  liveDiscardWindow = Infinity,\n) => {\n  class Signature {\n    constructor(hash, verified = false) {\n      this.hash = hash;\n      this.verified = verified;\n    }\n\n    markVerified() {\n      this.verified = true;\n    }\n\n    getHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return !this.verified\n        ? Promise.reject('cannot use unverified signature')\n        : Promise.resolve(arrayEqual(this.hash, value));\n    }\n  }\n\n  // TODO: timestamp in hash?\n  class SignedSignature {\n    constructor(signature, hash) {\n      this.signature = signature;\n      this.hash = hash;\n      this.verificationResult = undefined;\n    }\n\n    verifyHash() {\n      if (this.verificationResult === undefined) {\n        this.verificationResult = liveSignatureVerifyFunction(this.hash, this.getHash())\n          .then(() => this.markVerified());\n      }\n      return this.verificationResult;\n    }\n\n    markVerified() {\n      this.signature.markVerified();\n    }\n\n    getHash() {\n      return this.signature.getHash();\n    }\n\n    getSignatureHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return this.verifyHash().then(() => this.signature.compare(value));\n    }\n  }\n\n  class MerkleHashTree {\n    constructor(rootAddress, signatures = new Array(rootAddress.getChunkCount() * 2 - 1)) {\n      this.rootAddress = rootAddress;\n      this.signatures = signatures;\n    }\n\n    createVerifier() {\n      return new MerkleHashTreeVerifier(this);\n    }\n\n    copy(hashTree) {\n      for (let i = 0; i < this.signatures.length; i ++) {\n        if (hashTree.signatures[i] === undefined) {\n          hashTree.signatures[i] = this.signatures[i];\n        }\n      }\n    }\n\n    getChunkCount() {\n      return this.rootAddress.getChunkCount();\n    }\n\n    getConstituentHashBins({bin}) {\n      if (!this.rootAddress.containsBin(bin)) {\n        throw new Error('bin out of range');\n      }\n\n      const {start} = this.rootAddress;\n      bin -= start;\n\n      const bins = [];\n      let bfsIndex = this.rootAddress.getChunkCount() + bin / 2 - 1;\n      let stride = 2;\n      let parent = bin;\n\n      while (bfsIndex !== 0) {\n        const branch = (bfsIndex & 1) === 1 ? 1 : -1;\n\n        bins.push({\n          isRoot: false,\n          branch,\n          bin: parent + start,\n          bfsIndex,\n          siblingBin: parent + branch * stride + start,\n          siblingBfsIndex: bfsIndex + branch,\n        });\n\n        bfsIndex = Math.floor((bfsIndex - 1) / 2);\n        parent += branch * stride / 2;\n        stride *= 2;\n      }\n\n      bins.push({\n        isRoot: true,\n        branch: 0,\n        bin: parent + start,\n        bfsIndex: 0,\n        siblingBin: parent + start,\n        siblingBfsIndex: 0,\n      });\n\n      return bins;\n    }\n\n    getConstituentSignatures(address) {\n      return this.getConstituentHashBins(address).map(({\n        siblingBin,\n        siblingBfsIndex,\n      }) => ({\n        bin: siblingBin,\n        signature: this.signatures[siblingBfsIndex],\n      }));\n    }\n\n    static from(values, rootAddress = new Address(MerkleHashTree.minSize(values.length) - 1)) {\n      const size = rootAddress.getChunkCount();\n      const hashes = new Array(size * 2 - 1);\n      for (let i = 0; i < size; i ++) {\n        hashes[i + size - 1] = merkleHashTreeFunction(values[i]);\n      }\n      for (let i = (size - 1) * 2; i > 0; i -= 2) {\n        hashes[Math.floor(i / 2) - 1] = Promise.all([hashes[i - 1], hashes[i]])\n          .then(siblings => merkleHashTreeFunction(...siblings));\n      }\n\n      return Promise.all(hashes).then(hashes => {\n        const signatures = hashes.map(hash => new Signature(hash, true));\n\n        return liveSignatureSignFunction(hashes[0]).then(rootHashSignature => {\n          signatures[0] = new SignedSignature(\n            signatures[0],\n            rootHashSignature,\n          );\n\n          return new MerkleHashTree(rootAddress, signatures);\n        });\n      });\n    }\n\n    static minSize(size) {\n      return Math.pow(2, Math.ceil(Math.log2(size)));\n    }\n  }\n\n  class MerkleHashTreeVerifier {\n    constructor(hashTree) {\n      this.hashTree = hashTree;\n      this.signatures = {};\n    }\n\n    setHash({bin}, hash) {\n      this.signatures[bin] = new Signature(hash);\n    }\n\n    setHashSignature({bin}, hash) {\n      const signature = new SignedSignature(this.signatures[bin], hash);\n      this.signatures[bin] = signature;\n    }\n\n    verifyChunk(address, value) {\n      const signatures = [];\n      let hashResult = merkleHashTreeFunction(value);\n\n      this.hashTree.getConstituentHashBins(address).some(({\n        isRoot,\n        branch,\n        bfsIndex,\n        siblingBin,\n        siblingBfsIndex,\n      }) => {\n        let siblingSignature = this.hashTree.signatures[siblingBfsIndex];\n        if (siblingSignature === undefined) {\n          siblingSignature = this.signatures[siblingBin];\n          signatures.push({\n            index: siblingBfsIndex,\n            signature: siblingSignature,\n          });\n        }\n\n        // if the current branch has already been verified short circuit\n        const verifiedSignature = this.hashTree.signatures[bfsIndex];\n        if (verifiedSignature !== undefined) {\n          hashResult = hashResult.then(hash => verifiedSignature.compare(hash));\n          return true;\n        }\n\n        // verify the generated root hash using the one supplied to the mutator\n        if (isRoot) {\n          hashResult = hashResult.then(hash => siblingSignature.compare(hash));\n          return true;\n        }\n\n        // chain generating the next parent hash\n        hashResult = hashResult.then(hash => {\n          signatures.push({\n            index: bfsIndex,\n            signature: new Signature(hash),\n          });\n\n          const siblingHash = siblingSignature.getHash();\n          const siblings = branch === 1 ? [hash, siblingHash] : [siblingHash, hash];\n          return merkleHashTreeFunction(...siblings);\n        });\n        return false;\n      });\n\n      return hashResult.then(() => {\n        signatures.forEach(({index, signature}) => {\n          signature.markVerified();\n          this.hashTree.signatures[index] = signature;\n        });\n      });\n    }\n  }\n\n  class UnifiedMerkleHashTree {\n    constructor() {\n      this.subtrees = [];\n      this.nextStart = 0;\n      this.chunkCount = 0;\n    }\n\n    findSubtree({bin}) {\n      const index = binSearch(\n        this.subtrees.length - 1,\n        i => {\n          const {start, end} = this.subtrees[i].rootAddress;\n          return start <= bin && bin <= end ? 0 : start - bin;\n        },\n      );\n\n      return index < 0 ? undefined : this.subtrees[index];\n    }\n\n    insertSubtree(subtree) {\n      const storedSubtree = this.findSubtree(subtree.rootAddress);\n      if (storedSubtree !== undefined) {\n        if (storedSubtree !== subtree) {\n          subtree.copy(storedSubtree);\n        }\n\n        return storedSubtree;\n      }\n\n      this.subtrees.push(subtree);\n      this.subtrees.sort((a, b) => a.rootAddress.start - b.rootAddress.start);\n\n      this.chunkCount += subtree.getChunkCount();\n      this.pruneSubtrees();\n\n      return subtree;\n    }\n\n    pruneSubtrees() {\n      while (this.subtrees.length > 0 && this.chunkCount - this.subtrees[0].getChunkCount() > liveDiscardWindow) {\n        const removedTree = this.subtrees.shift();\n        this.chunkCount -= removedTree.getChunkCount();\n      }\n    }\n\n    appendSubtree(values) {\n      const treeSize = MerkleHashTree.minSize(values.length);\n      const nextAddress = new Address(\n        this.nextStart + treeSize - 1,\n        [this.nextStart, this.nextStart + (treeSize - 1) * 2],\n      );\n\n      this.nextStart += treeSize * 2;\n\n      return MerkleHashTree.from(values, nextAddress)\n        .then(subtree => this.insertSubtree(subtree));\n    }\n\n    createVerifier(address) {\n      let subtree = this.findSubtree(address) || new MerkleHashTree(address);\n      return new MerkleHashSubtreeVerifier(this, subtree);\n    }\n\n    getConstituentSignatures(address) {\n      const subtree = this.findSubtree(address);\n      if (subtree === undefined) {\n        return;\n      }\n\n      return subtree.getConstituentSignatures(address);\n    }\n  }\n\n  class MerkleHashSubtreeVerifier extends MerkleHashTreeVerifier {\n    constructor(unifiedHashTree, subtree) {\n      super(subtree);\n      this.unifiedHashTree = unifiedHashTree;\n    }\n\n    verifyChunk(address, value) {\n      return super.verifyChunk(address, value)\n        .then(this.unifiedHashTree.insertSubtree(this.hashTree));\n    }\n  }\n\n  class NoneVerifier {\n    setHash() {}\n\n    setHashSignature() {}\n\n    verifyChunk() {\n      return Promise.resolve();\n    }\n  }\n\n  class NoneVerifierFactory {\n    createVerifier() {\n      return new NoneVerifier();\n    }\n\n    getConstituentSignatures() {\n      return [];\n    }\n  }\n\n  // TODO: sign all method\n  switch (contentIntegrityProtectionMethod) {\n    case ContentIntegrityProtectionMethod.None:\n      return new NoneVerifierFactory();\n    case ContentIntegrityProtectionMethod.MerkleHashTree:\n      return new MerkleHashTree();\n    case ContentIntegrityProtectionMethod.UnifiedMerkleTree:\n      return new UnifiedMerkleHashTree();\n    default:\n      throw new Error('unsupported content integrity protection method');\n  }\n};\n","export default function binSearch(max, comparator) {\n  let left = 0;\n  let right = max;\n\n  while (left <= right) {\n    const mid = left + Math.floor((right - left) / 2);\n    const order = comparator(mid);\n\n    if (order < 0) {\n      left = mid + 1;\n    } else if (order > 0) {\n      right = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(left + 1);\n}\n","import hexToArrayBuffer from 'hex-to-array-buffer';\n\nexport default function hexToUint8Array(v) {\n  return new Uint8Array(hexToArrayBuffer(v));\n}\n","import {LiveSignatureAlgorithm} from './constants';\n\nconst isRsaAlgorithm = liveSignatureAlgorithm => {\n  const rsaAlgorithms = [\n    LiveSignatureAlgorithm.RSASHA1,\n    LiveSignatureAlgorithm.RSASHA256,\n  ];\n  return rsaAlgorithms.includes(liveSignatureAlgorithm);\n};\n\nexport default class SwarmId {\n  constructor(\n    liveSignatureAlgorithm,\n    publicKey,\n    publicExponent,\n    modulusLength,\n  ) {\n    this.liveSignatureAlgorithm = liveSignatureAlgorithm;\n    this.publicKey = Buffer.from(publicKey);\n    this.publicExponent = publicExponent;\n    this.modulusLength = modulusLength;\n  }\n\n  getLiveSignatureByteLength() {\n    switch (this.liveSignatureAlgorithm) {\n      case LiveSignatureAlgorithm.RSASHA1:\n      case LiveSignatureAlgorithm.RSASHA256:\n        return this.modulusLength / 8;\n      case LiveSignatureAlgorithm.ECDSAP256SHA256:\n        return 64;\n      case LiveSignatureAlgorithm.ECDSAP384SHA384:\n        return 96;\n      default:\n        throw new Error('unsupported live signature algorithm');\n    }\n  }\n\n  getKeyParams() {\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      return {\n        publicExponent: new Uint8Array(this.publicExponent),\n        modulusLength: this.modulusLength,\n      };\n    }\n    return {};\n  }\n\n  byteLength() {\n    const metadataLength = isRsaAlgorithm(this.liveSignatureAlgorithm) ? 9 : 1;\n    return this.publicKey.length + metadataLength;\n  }\n\n  toBuffer() {\n    const buffer = Buffer.alloc(this.byteLength());\n    let length = 0;\n\n    buffer.writeUInt8(this.liveSignatureAlgorithm, length);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      Buffer.from(this.publicExponent).copy(buffer, length + 4 - this.publicExponent.length);\n      length += 4;\n\n      buffer.writeUInt32BE(this.modulusLength, length);\n      length += 4;\n    }\n\n    this.publicKey.copy(buffer, length);\n\n    return buffer;\n  }\n\n  read(buffer) {\n    let length = 0;\n\n    this.liveSignatureAlgorithm = buffer.readUInt8(0);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      this.publicExponent = buffer.slice(length, length + 4);\n      length += 4;\n\n      this.modulusLength = buffer.readUInt32BE(length);\n      length += 4;\n    }\n\n    this.publicKey = buffer.slice(length);\n  }\n\n  static from(values) {\n    if (ArrayBuffer.isView(values)) {\n      const swarmId = Object.create(SwarmId.prototype);\n      swarmId.read(Buffer.from(values));\n      return swarmId;\n    }\n\n    return new SwarmId(\n      values.liveSignatureAlgorithm,\n      values.publicKey,\n      values.publicExponent,\n      values.modulusLength,\n    );\n  }\n}\n","export default class EMA {\n  constructor(alpha) {\n    this.mean = 0;\n    this.alpha = alpha;\n    this.weight = 1;\n  }\n\n  update(value) {\n    this.mean = this.alpha * value + (1 - this.alpha) * this.mean;\n    this.weight *= this.alpha;\n  }\n\n  set(value) {\n    this.mean = value;\n    this.weight = 0;\n  }\n\n  isEmpty() {\n    return this.weight === 1;\n  }\n\n  value() {\n    return this.mean / (1 - this.weight);\n  }\n}\n","export default class RingBuffer {\n  constructor(capacity) {\n    this.setCapacity(capacity);\n  }\n\n  setCapacity(capacity) {\n    this.capacity = capacity;\n    this.lastIndex = capacity;\n    this.values = new Array(capacity);\n\n    for (let i = 0; i < capacity; i ++) {\n      this.values[i] = this.createEmptyValue(i);\n    }\n  }\n\n  advanceLastIndex(lastIndex) {\n    if (this.lastIndex > lastIndex) {\n      return;\n    }\n\n    let firstEmptyIndex = this.lastIndex;\n    if (lastIndex - firstEmptyIndex > this.capacity) {\n      firstEmptyIndex = lastIndex - this.capacity;\n    }\n    for (let i = firstEmptyIndex; i <= lastIndex; i ++) {\n      const index = i % this.capacity;\n      this.values[index] = this.createEmptyValue(i, this.values[index]);\n    }\n    this.lastIndex = lastIndex + 1;\n  }\n\n  createEmptyValue() {\n    return undefined;\n  }\n\n  set(index, value) {\n    this.advanceLastIndex(index);\n    this.values[index % this.capacity] = value;\n  }\n\n  get(index) {\n    if (index < this.lastIndex - this.capacity || index >= this.lastIndex) {\n      return undefined;\n    }\n    return this.values[index % this.capacity];\n  }\n\n  push(value) {\n    this.set(this.lastIndex, value);\n  }\n}\n","import EMA from './ema';\nimport RingBuffer from './RingBuffer';\n\nclass DelayBuffer extends RingBuffer {\n  constructor(capacity, window) {\n    super(capacity);\n    this.min = Infinity;\n    this.window = window;\n  }\n\n  createEmptyValue() {\n    return Infinity;\n  }\n\n  getMin() {\n    return this.min;\n  }\n\n  update(delay) {\n    const now = Math.floor(Date.now() / this.window);\n\n    if (now >= this.lastIndex) {\n      this.advanceLastIndex(now);\n      this.min = Math.min(...this.values);\n    }\n\n    if (delay < this.get(now)) {\n      this.set(now, delay);\n      this.min = Math.min(this.min, delay);\n    }\n  }\n}\n\n// rfc6817\nconst TARGET = 100;\nconst ALLOWED_INCREASE = 1;\nconst GAIN = 1;\nconst CURRENT_HISTORY = 4;\nconst CURRENT_HISTORY_INTERVAL = 1000;\nconst BASE_HISTORY = 10;\nconst BASE_HISTORY_INTERVAL = 60 * 1000;\nconst INIT_CWND = 2;\nconst MIN_CWND = 2;\n\n// max safe WebRTC data channel message size\nconst MSS = 8 * 1024;\n\n// rfc6298\nconst COEF_G = 1;\nconst COEF_K = 4;\n\n// jacobson, v. \"congestion avoidance and control\"\n// doi: 10.1145/52325.52356\nconst COEF_ALPHA = 0.125;\nconst COEF_BETA = 0.25;\n\nexport default class LEDBAT {\n  constructor(target = TARGET, mss = MSS) {\n    this.target = target;\n    this.mss = mss;\n    this.flightSize = 0;\n\n    // the amount of data that is allowed to be outstanding in an rtt in bytes\n    this.cwnd = INIT_CWND * MSS;\n\n    // the congestion timeout\n    this.cto = 1000;\n    this.currentDelay = new DelayBuffer(CURRENT_HISTORY, CURRENT_HISTORY_INTERVAL);\n    this.baseDelay = new DelayBuffer(BASE_HISTORY, BASE_HISTORY_INTERVAL);\n\n    this.lastDataLoss = 0;\n    this.lastAckTime = Infinity;\n    this.rttMean = new EMA(COEF_ALPHA);\n    this.rttVar = new EMA(COEF_BETA);\n\n    this.ackSize = 0;\n  }\n\n  addSent(bytes) {\n    this.flightSize += bytes;\n  }\n\n  addDelaySample(delaySample, bytes = MSS) {\n    this.currentDelay.update(delaySample);\n    this.baseDelay.update(delaySample);\n\n    this.ackSize += bytes;\n\n    this.lastAckTime = Date.now();\n  }\n\n  digestDelaySamples() {\n    this.checkCTO();\n\n    if (this.ackSize === 0) {\n      return;\n    }\n\n    const queuingDelay = Math.abs(this.currentDelay.getMin() - this.baseDelay.getMin());\n    const offTarget = (this.target - queuingDelay) / this.target;\n    this.cwnd += GAIN * offTarget * this.ackSize * this.mss / this.cwnd;\n\n    const maxAllowedCwnd = this.flightSize + ALLOWED_INCREASE * this.mss;\n    this.cwnd = Math.max(Math.min(this.cwnd, maxAllowedCwnd), MIN_CWND * this.mss);\n\n    this.flightSize = Math.max(0, this.flightSize - this.ackSize);\n    this.ackSize = 0;\n  }\n\n  checkCTO() {\n    if (this.flightSize > 0 && Date.now() - this.cto > this.lastAckTime) {\n      this.cwnd = this.mss;\n      this.cto = 2 * this.cto;\n    }\n  }\n\n  addRttSample(rtt) {\n    if (this.rttMean.isEmpty()) {\n      this.rttMean.set(rtt);\n      this.rttVar.set(rtt / 2);\n    } else {\n      this.rttVar.update(Math.abs(this.rttMean.value() - rtt));\n      this.rttMean.update(rtt);\n    }\n\n    this.cto = this.rttMean.value() + Math.max(COEF_G, COEF_K * this.rttVar.value());\n    if (this.cto < 1000) {\n      this.cto = 1000;\n    }\n  }\n\n  onDataLoss(bytes, retransmitting = false) {\n    const now = Date.now();\n    if (this.lastDataLoss !== 0 && now - this.lastDataLoss < this.rttMean.value()) {\n      return;\n    }\n    this.lastDataLoss = now;\n\n    this.cwnd = Math.min(this.cwnd, Math.max(this.cwnd / 2, MIN_CWND * this.mss));\n\n    if (!retransmitting) {\n      this.flightSize = Math.max(0, this.flightSize - bytes);\n    }\n  }\n\n  static computeOneWayDelay(timestamp) {\n    return Date.now() - timestamp;\n  }\n}\n","import {Buffer} from 'buffer';\nimport Address from './address';\nimport {MerkleHashTreeFunctionByteLengths} from './integrity';\n\nimport {\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n} from './constants';\n\nexport const createChunkAddressFieldType = (addressingMethod, chunkSize) => {\n  class Bin32ChunkAddress {\n    constructor(value = 0) {\n      this.type = ChunkAddressingMethod.Bin32;\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n\n    rangeByteLength() {\n      const [start, end] = Address.binBounds(this.value);\n      return (end - start + 1) * chunkSize;\n    }\n\n    static from({bin}) {\n      return new Bin32ChunkAddress(bin);\n    }\n  }\n\n  class ChunkRange32ChunkAddress {\n    constructor(start = 0, end = 0) {\n      this.type = ChunkAddressingMethod.ChunkRange32;\n      this.start = start;\n      this.end = end;\n    }\n\n    read(buffer, offset) {\n      this.start = buffer.readUInt32BE(offset);\n      this.end = buffer.readUInt32BE(offset + 4);\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.start, offset);\n      buffer.writeUInt32BE(this.end, offset + 4);\n    }\n\n    rangeByteLength() {\n      return (this.end - this.start + 1) * chunkSize;\n    }\n\n    static from({start, end}) {\n      return new ChunkRange32ChunkAddress(start, end);\n    }\n  }\n\n  switch (addressingMethod) {\n    case ChunkAddressingMethod.Bin32:\n      return Bin32ChunkAddress;\n    case ChunkAddressingMethod.ChunkRange32:\n      return ChunkRange32ChunkAddress;\n    default:\n      throw new Error('unsupported chunk addressing method');\n  }\n};\n\nconst createBufferFieldType = byteLength => {\n  class BufferField {\n    constructor(value = Buffer.alloc(byteLength)) {\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      buffer.copy(this.value, 0, offset, offset + byteLength);\n      return byteLength;\n    }\n\n    byteLength() {\n      return byteLength;\n    }\n\n    write(buffer, offset) {\n      this.value.copy(buffer, offset);\n    }\n  }\n\n  return BufferField;\n};\n\nexport const createLiveSignatureFieldType = (liveSignatureAlgorithm, swarmId) => {\n  const byteLength = swarmId.getLiveSignatureByteLength();\n\n  class LiveSignatureField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = liveSignatureAlgorithm;\n    }\n  }\n\n  return LiveSignatureField;\n};\n\nexport const createIntegrityHashFieldType = merkleHashTreeFunction => {\n  const byteLength = MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction];\n\n  class IntegrityHashField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = merkleHashTreeFunction;\n    }\n  }\n\n  return IntegrityHashField;\n};\n\nexport const createEncoding = (ChunkAddress, IntegrityHash, LiveSignature) => {\n  class Uint8ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt8(offset);\n      return 1;\n    }\n\n    byteLength() {\n      return 1;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt8(this.value, offset);\n    }\n  }\n\n  class Uint32ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n  }\n\n  class VersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.Version;\n    }\n  }\n\n  class MinimumVersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.MinimumVersion;\n    }\n  }\n\n  class SwarmIdentifierProtocolOption {\n    constructor(value = []) {\n      this.type = ProtocolOptions.SwarmIdentifier;\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt16BE(offset);\n      offset += 2;\n\n      this.value = buffer.slice(offset, offset + length);\n\n      return length + 2;\n    }\n\n    byteLength() {\n      return this.value.length + 2;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt16BE(this.value.length, offset);\n      this.value.copy(buffer, offset + 2);\n    }\n  }\n\n  class ContentIntegrityProtectionMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ContentIntegrityProtectionMethod.MerkleHashTree) {\n      super(method);\n      this.type = ProtocolOptions.ContentIntegrityProtectionMethod;\n    }\n  }\n\n  class MerkleHashTreeFunctionProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = MerkleHashTreeFunction.SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.MerkleHashTreeFunction;\n    }\n  }\n\n  class LiveSignatureAlgorithmProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = LiveSignatureAlgorithm.ECDSAP256SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.LiveSignatureAlgorithm;\n    }\n  }\n\n  class ChunkAddressingMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ChunkAddressingMethod.ChunkRange32) {\n      super(method);\n      this.type = ProtocolOptions.ChunkAddressingMethod;\n    }\n  }\n\n  class LiveDiscardWindowProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.LiveDiscardWindow;\n    }\n  }\n\n  class SupportedMessagesProtocolOption {\n    constructor(messageTypes = Object.values(MessageTypes).filter(v => !isNaN(v))) {\n      this.type = ProtocolOptions.SupportedMessages;\n      this.value = {};\n      messageTypes.forEach(type => this.value[type] = true);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt8(offset);\n      offset += 1;\n\n      for (let i = 0; i < length; i ++) {\n        const byte = buffer[offset + i];\n        for (let j = 0; j < 8; j ++) {\n          this.value[i * 8 + j] = Boolean(byte & (1 << 7 - j));\n        }\n      }\n\n      return length + 1;\n    }\n\n    bitmapByteLength() {\n      return Math.ceil(Math.max(...Object.keys(this.value)) / 8) + 1;\n    }\n\n    toBitmap() {\n      const length = this.bitmapByteLength();\n      const buffer = Buffer.alloc(length);\n\n      for (let i = 0; i < length; i ++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j ++) {\n          byte = (byte << 1) | (this.value[i * 8 + j] ? 1 : 0);\n        }\n        buffer.writeUInt8(byte, i);\n      }\n      return buffer;\n    }\n\n    byteLength() {\n      return this.bitmapByteLength() + 1;\n    }\n\n    write(buffer, offset) {\n      const bitmap = this.toBitmap();\n      buffer.writeUInt8(bitmap.length, offset);\n      bitmap.copy(buffer, offset + 1);\n    }\n  }\n\n  class ChunkSizeProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.ChunkSize;\n    }\n  }\n\n  const protocolOptionRecordTypes = {\n    [ProtocolOptions.Version]: VersionProtocolOption,\n    [ProtocolOptions.MinimumVersion]: MinimumVersionProtocolOption,\n    [ProtocolOptions.SwarmIdentifier]: SwarmIdentifierProtocolOption,\n    [ProtocolOptions.ContentIntegrityProtectionMethod]: ContentIntegrityProtectionMethodProtocolOption,\n    [ProtocolOptions.MerkleHashTreeFunction]: MerkleHashTreeFunctionProtocolOption,\n    [ProtocolOptions.LiveSignatureAlgorithm]: LiveSignatureAlgorithmProtocolOption,\n    [ProtocolOptions.ChunkAddressingMethod]: ChunkAddressingMethodProtocolOption,\n    [ProtocolOptions.LiveDiscardWindow]: LiveDiscardWindowProtocolOption,\n    [ProtocolOptions.SupportedMessages]: SupportedMessagesProtocolOption,\n    [ProtocolOptions.ChunkSize]: ChunkSizeProtocolOption,\n  };\n\n  class HandshakeMessage {\n    constructor(channelId = 0, options = []) {\n      this.type = MessageTypes.HANDSHAKE;\n      this.channelId = channelId;\n      this.options = options;\n    }\n\n    read(buffer, offset) {\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(offset);\n      length += 4;\n\n      while (offset + length < buffer.length) {\n        const code = buffer.readUInt8(offset + length);\n        length += 1;\n\n        if (code === ProtocolOptions.EndOption) {\n          break;\n        }\n\n        const RecordType = protocolOptionRecordTypes[code];\n        const option = new RecordType();\n\n        length += option.read(buffer, offset + length);\n        this.options.push(option);\n      }\n\n      return length;\n    }\n\n    byteLength() {\n      return this.options.reduce((length, option) => length + option.byteLength() + 1, 0) + 5;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, offset);\n      length += 4;\n\n      this.options.forEach(option => {\n        buffer.writeUInt8(option.type, offset + length);\n        length += 1;\n\n        option.write(buffer, offset + length);\n        length += option.byteLength();\n      });\n\n      buffer.writeUInt8(ProtocolOptions.EndOption, offset + length);\n      length += 1;\n\n      return length;\n    }\n  }\n\n  class Timestamp {\n    constructor(value = Date.now()) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      const seconds = buffer.readInt32BE(offset);\n      const nanoseconds = buffer.readInt32BE(offset + 4);\n      this.value = seconds * 1e3 + nanoseconds / 1e6;\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeInt32BE(Math.floor(this.value / 1e3), offset);\n      buffer.writeInt32BE((this.value % 1e3) * 1e6, offset + 4);\n    }\n  }\n\n  class DataMessage {\n    constructor(address = new ChunkAddress(), data = [], timestamp = new Timestamp()) {\n      this.type = MessageTypes.DATA;\n      this.address = address;\n      this.data = Buffer.from(data);\n      this.timestamp = timestamp;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n\n      offset += length;\n      const dataLength = Math.min(this.address.rangeByteLength(), buffer.length - offset);\n      this.data = buffer.slice(offset, offset + dataLength);\n\n      return length + dataLength;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.data.length + 8;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.data.copy(buffer, offset + length);\n    }\n  }\n\n  class AddressMessage {\n    constructor(address = new ChunkAddress()) {\n      this.address = address;\n    }\n\n    read(buffer, offset) {\n      return this.address.read(buffer, offset);\n    }\n\n    byteLength() {\n      return this.address.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n    }\n  }\n\n  class AckMessage {\n    constructor(address = new ChunkAddress(), delaySample = new Timestamp()) {\n      this.type = MessageTypes.ACK;\n      this.address = address;\n      this.delaySample = delaySample;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.delaySample.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.delaySample.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.delaySample.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class HaveMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.HAVE;\n    }\n  }\n\n  class IntegrityMessage {\n    constructor(address = new ChunkAddress(), hash = new IntegrityHash()) {\n      this.type = MessageTypes.INTEGRITY;\n      this.address = address;\n      this.hash = hash;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.hash.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.hash.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.hash.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class SignedIntegrityMessage {\n    constructor(\n      address = new ChunkAddress(),\n      timestamp = new Timestamp(),\n      signature = new LiveSignature(),\n    ) {\n      this.type = MessageTypes.SIGNED_INTEGRITY;\n      this.address = address;\n      this.timestamp = timestamp;\n      this.signature = signature;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n      length += this.signature.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.timestamp.byteLength() + this.signature.byteLength();\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.signature.write(buffer, offset + length);\n    }\n  }\n\n  class RequestMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.REQUEST;\n    }\n  }\n\n  class CancelMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.CANCEL;\n    }\n  }\n\n  class EmptyMessage {\n    read() {\n      return 0;\n    }\n\n    byteLength() {\n      return 0;\n    }\n\n    write() {}\n  }\n\n  class ChokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.CHOKE;\n    }\n  }\n\n  class UnchokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.UNCHOKE;\n    }\n  }\n\n  const messageRecordTypes = {\n    [MessageTypes.HANDSHAKE]: HandshakeMessage,\n    [MessageTypes.DATA]: DataMessage,\n    [MessageTypes.ACK]: AckMessage,\n    [MessageTypes.HAVE]: HaveMessage,\n    [MessageTypes.INTEGRITY]: IntegrityMessage,\n    [MessageTypes.SIGNED_INTEGRITY]: SignedIntegrityMessage,\n    [MessageTypes.REQUEST]: RequestMessage,\n    [MessageTypes.CANCEL]: CancelMessage,\n    [MessageTypes.CHOKE]: ChokeMessage,\n    [MessageTypes.UNCHOKE]: UnchokeMessage,\n  };\n\n  class Messages {\n    constructor(values = []) {\n      this.values = values;\n      this.buffer = null;\n      this.offset = 0;\n    }\n\n    static from(values) {\n      if (values instanceof Messages) {\n        return values;\n      }\n      if (Array.isArray(values)) {\n        return new Messages(values);\n      }\n      throw new Error('unable to create Messages from unsupported type');\n    }\n\n    next() {\n      if (this.offset >= this.buffer.length) {\n        return;\n      }\n\n      const messageType = this.buffer.readUInt8(this.offset);\n      this.offset += 1;\n\n      const RecordType = messageRecordTypes[messageType];\n      const message = new RecordType();\n      this.values.push(message);\n\n      this.offset += message.read(this.buffer, this.offset);\n\n      return message;\n    }\n\n    toArray() {\n      // eslint-disable-next-line no-empty\n      while (this.next()) {}\n      return this.values;\n    }\n\n    read(buffer, offset) {\n      this.buffer = buffer;\n      this.offset = offset;\n      return 0;\n    }\n\n    byteLength() {\n      return this.values.reduce((length, message) => length + message.byteLength() + 1, 0);\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.values.forEach(message => {\n        buffer.writeUInt8(message.type, offset + length);\n        length += 1;\n\n        message.write(buffer, offset + length);\n        length += message.byteLength();\n      });\n\n      return length;\n    }\n  }\n\n  class Datagram {\n    constructor(channelId = 0, messages = []) {\n      this.channelId = channelId;\n      this.messages = Messages.from(messages);\n    }\n\n    read(data) {\n      const buffer = Buffer.from(data);\n\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(0);\n      length += 4;\n\n      length += this.messages.read(buffer, length);\n\n      return length;\n    }\n\n    byteLength() {\n      return this.messages.byteLength() + 4;\n    }\n\n    write(buffer) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, 0);\n      length += 4;\n\n      length += this.messages.write(buffer, length);\n\n      return length;\n    }\n\n    toBuffer() {\n      const buffer = Buffer.alloc(this.byteLength());\n      this.write(buffer);\n      return buffer;\n    }\n\n    static from(buffer) {\n      const datagram = new Datagram();\n      datagram.read(buffer);\n      return datagram;\n    }\n  }\n\n  return {\n    VersionProtocolOption,\n    MinimumVersionProtocolOption,\n    SwarmIdentifierProtocolOption,\n    ContentIntegrityProtectionMethodProtocolOption,\n    MerkleHashTreeFunctionProtocolOption,\n    LiveSignatureAlgorithmProtocolOption,\n    ChunkAddressingMethodProtocolOption,\n    LiveDiscardWindowProtocolOption,\n    SupportedMessagesProtocolOption,\n    ChunkSizeProtocolOption,\n    HandshakeMessage,\n    Timestamp,\n    DataMessage,\n    AckMessage,\n    HaveMessage,\n    IntegrityMessage,\n    SignedIntegrityMessage,\n    RequestMessage,\n    CancelMessage,\n    ChokeMessage,\n    UnchokeMessage,\n    Datagram,\n    LiveSignature,\n    IntegrityHash,\n    ChunkAddress,\n  };\n};\n","function createMask(bits) {\n  let mask = 0;\n  for (let i = 0; i < bits; i ++) {\n    mask = (mask << 1) | 1;\n  }\n  return mask;\n}\n\nfunction applyMask(byte, mask, value) {\n  if (value) {\n    return byte | mask;\n  }\n  return byte & (255 ^ mask);\n}\n\nexport default class BitArray {\n  constructor(capacity = 0) {\n    this.offset = 0;\n    this.resize(capacity);\n  }\n\n  // TODO: copy old values..?\n  resize(capacity) {\n    this.capacity = capacity;\n    this.values = new Uint8Array(Math.ceil(capacity / 8));\n  }\n\n  adjustOffset(index) {\n    const {offset} = this;\n    const distance = (index - offset) - this.capacity;\n    if (distance <= 0) {\n      return;\n    }\n\n    this.offset += distance;\n    this.unsafelySetRange(offset + 1, offset + distance + 1, false);\n  }\n\n  getByteIndex(index) {\n    return Math.floor(index / 8) % this.values.length;\n  }\n\n  getBitIndex(index) {\n    return index % 8;\n  }\n\n  getIndexValue(byteIndex, bitIndex) {\n    const byteOffset = this.offset % (this.values.length * 8);\n    const offset = byteIndex < byteOffset\n      ? this.offset + (this.values.length * 8) - byteOffset\n      : this.offset;\n    return offset + (byteIndex * 8 + bitIndex);\n  }\n\n  setRange(start, end, value = true) {\n    if (end - start === 1) {\n      this.set(start, value);\n      return;\n    }\n\n    if (end <= this.offset) {\n      return;\n    }\n    start = Math.max(start, this.offset);\n\n    this.adjustOffset(end);\n    this.unsafelySetRange(start, end, value);\n  }\n\n  unsafelySetRange(start, end, value = true, fillEndByte = false) {\n    if (end - start >= this.capacity) {\n      this.values.fill(value ? 255 : 0);\n      return;\n    }\n\n    const startByteIndex = this.getByteIndex(start);\n    const endByteIndex = this.getByteIndex(end);\n    const startBitIndex = this.getBitIndex(start);\n    const endBitIndex = this.getBitIndex(end);\n\n    if (startByteIndex > endByteIndex) {\n      this.unsafelySetIndexRange(startByteIndex, startBitIndex, this.capacity, 0, value);\n      this.unsafelySetIndexRange(0, 0, endByteIndex, endBitIndex, value);\n      return;\n    }\n\n    this.unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value);\n  }\n\n  unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value) {\n    let startMask = createMask(8 - startBitIndex);\n    let endMask = 255 ^ createMask(8 - endBitIndex);\n\n    if (startByteIndex === endByteIndex) {\n      const mask = startMask & endMask;\n      this.values[startByteIndex] = applyMask(this.values[startByteIndex], mask, value);\n      return;\n    }\n\n    this.values[startByteIndex] = applyMask(this.values[startByteIndex], startMask, value);\n    this.values[endByteIndex] = applyMask(this.values[endByteIndex], endMask, value);\n\n    if (endByteIndex - startByteIndex > 1) {\n      this.values.fill(value ? 255 : 0, startByteIndex + 1, endByteIndex);\n    }\n  }\n\n  unsetRange(start, end) {\n    this.setRange(start, end, false);\n  }\n\n  set(index, value = true) {\n    if (index < this.offset) {\n      return;\n    }\n\n    this.adjustOffset(index);\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    this.values[byteIndex] = applyMask(this.values[byteIndex], mask, value);\n  }\n\n  unset(index) {\n    this.set(index, false);\n  }\n\n  get(index) {\n    if (index <= this.offset || index > this.offset + this.capacity) {\n      return false;\n    }\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    return (this.values[byteIndex] & mask) !== 0;\n  }\n\n  toValueArray() {\n    const values = [];\n    for (let i = 1; i <= this.capacity; i ++) {\n      if (this.get(this.offset + i)) {\n        values.push(this.offset + i);\n      }\n    }\n    return values;\n  }\n\n  min() {\n    for (let i = this.offset; i <= this.offset + this.capacity; i += 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const firstBit = Math.floor(i / 8) * 8;\n        for (let j = firstBit; j < firstBit + 8; j ++) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return Infinity;\n  }\n\n  max() {\n    for (let i = this.capacity + this.offset; i >= this.offset; i -= 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const lastBit = Math.ceil(i / 8) * 8 + 1;\n        for (let j = lastBit; j > lastBit - 8; j --) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return -Infinity;\n  }\n}\n","export class Flow {\n  constructor() {\n    this.lastVirtualFinish = 0;\n    this.nextVirtualFinish = Infinity;\n    this.queue = [];\n  }\n\n  computeWeight() {\n    return 1;\n  }\n}\n\nexport class Queue {\n  constructor(rate) {\n    this.rate = rate;\n    this.totalQueueSize = 0;\n    this.flows = [];\n  }\n\n  addFlow(flow) {\n    return this.flows.push(flow);\n  }\n\n  removeFlow(flow) {\n    const index = this.flows.indexOf(flow);\n    if (index !== -1) {\n      this.flows.splice(index, 1);\n    }\n  }\n\n  enqueue(flow, size, value) {\n    const weight = flow.computeWeight(this);\n    const rate = this.rate / weight;\n    const virtualFinish = Math.max(Date.now(), flow.lastVirtualFinish) + size / rate;\n\n    flow.queue.push({\n      virtualFinish,\n      size,\n      value,\n    });\n    flow.lastVirtualFinish = virtualFinish;\n    if (flow.queue.length === 1) {\n      flow.nextVirtualFinish = virtualFinish;\n    }\n  }\n\n  getNextScheduledFlow() {\n    let minVirtualFinish = Infinity;\n    let flow = null;\n    for (let i = 0; i < this.flows.length; i ++) {\n      if (this.flows[i].nextVirtualFinish < minVirtualFinish) {\n        flow = this.flows[i];\n        minVirtualFinish = flow.nextVirtualFinish;\n      }\n    }\n\n    return flow;\n  }\n\n  peek() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    return {\n      flow,\n      task: flow.queue[0],\n    };\n  }\n\n  dequeue() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    const task = flow.queue.shift();\n\n    flow.nextVirtualFinish = flow.queue.length !== 0\n      ? flow.queue[0].virtualFinish\n      : Infinity;\n\n    return {flow, task};\n  }\n}\n\nexport default {\n  Queue,\n  Flow,\n};\n","import BitArray from '../bitarray';\nimport Address from './address';\nimport wfq from '../wfq';\nimport EMA from '../ema';\nimport LEDBAT from '../ledbat';\nimport RingBuffer from '../RingBuffer';\n\nexport class AvailabilityMap {\n  constructor(capacity) {\n    this.values = new BitArray(capacity);\n  }\n\n  // TODO: ignore very large discard windows from remote peers...\n  setCapacity(capacity) {\n    this.values.resize(capacity);\n  }\n\n  set(address, value) {\n    this.values.setRange(address.start / 2, address.end / 2 + 1, value);\n  }\n\n  get({start, end = start}) {\n    for (let i = start; i <= end; i += 2) {\n      if (!this.values.get(i / 2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  min() {\n    return this.values.min() * 2;\n  }\n\n  max() {\n    return this.values.max() * 2;\n  }\n}\n\nexport class BinRingBuffer extends RingBuffer {\n  advanceLastBin(bin) {\n    super.advanceLastIndex(bin / 2);\n  }\n\n  setRange({start}, values) {\n    for (let i = 0; i < values.length; i ++) {\n      super.set(start / 2 + i, values[i]);\n    }\n  }\n\n  set({bin}, value) {\n    super.set(bin / 2, value);\n  }\n\n  get({bin}) {\n    return super.get(bin / 2);\n  }\n\n  forEach(callback) {\n    for (let i = this.lastIndex - this.capacity; i < this.lastIndex; i ++) {\n      if (callback(this.get(i), i * 2) === false) {\n        break;\n      }\n    }\n  }\n}\n\nexport class RateMeter {\n  constructor(windowMs, sampleWindowMs = 100) {\n    this.firstSampleWindow = Math.floor(Date.now() / sampleWindowMs);\n    this.lastSampleWindow = this.firstSampleWindow;\n    this.windowMs = windowMs;\n    this.sampleWindowMs = sampleWindowMs;\n    this.sum = 0;\n    this.values = new Array(Math.ceil(windowMs / sampleWindowMs));\n\n    this.values.fill(0);\n  }\n\n  adjustSampleWindow() {\n    const sampleWindow = Math.floor(Date.now() / this.sampleWindowMs);\n\n    for (let i = this.lastSampleWindow + 1; i <= sampleWindow; i ++) {\n      const index = i % this.values.length;\n      this.sum -= this.values[index];\n      this.values[index] = 0;\n    }\n    this.lastSampleWindow = sampleWindow;\n  }\n\n  update(value) {\n    this.adjustSampleWindow();\n    this.sum += value;\n    this.values[this.lastSampleWindow % this.values.length] += value;\n  }\n\n  value() {\n    this.adjustSampleWindow();\n    const accumulatedMs = Math.min(\n      (this.lastSampleWindow - this.firstSampleWindow) * this.sampleWindowMs,\n      this.windowMs,\n    );\n    return this.sum / accumulatedMs;\n  }\n}\n\nexport class ChunkRateMeter extends RateMeter {\n  constructor(windowMs = 15000) {\n    super(windowMs);\n    this.lastEndBin = 0;\n  }\n\n  update({start, end}) {\n    if (this.lastHeadBin === 0) {\n      super.update((end - start) / 2);\n    } else if (end > this.lastEndBin) {\n      super.update((end - this.lastEndBin) / 2);\n      this.lastEndBin = end;\n    }\n  }\n}\n\nexport class RequestFlow extends wfq.Flow {\n  constructor(id) {\n    super();\n    this.id = id;\n    this.queueSize = 0;\n  }\n\n  computeWeight(queue) {\n    return this.queueSize / queue.totalQueueSize;\n  }\n}\n\nexport class RequestQueue extends wfq.Queue {\n  constructor(rate) {\n    super(rate);\n    this.totalQueueSize = 0;\n  }\n\n  enqueue(flow, size, value) {\n    this.totalQueueSize += size;\n    flow.queueSize += size;\n    super.enqueue(flow, size, value);\n  }\n\n  cancel(flow, filter) {\n    flow.queue = flow.queue.filter(task => {\n      const remove = filter(task.value);\n\n      if (remove) {\n        this.totalQueueSize -= task.size;\n        flow.queueSize -= task.size;\n      }\n\n      return !remove;\n    });\n  }\n\n  dequeue() {\n    const result = super.dequeue();\n    if (result === null) {\n      return null;\n    }\n\n    this.totalQueueSize -= result.task.size;\n    result.flow.queueSize -= result.task.size;\n\n    return result;\n  }\n}\n\nexport class SchedulerChunkState {\n  constructor(bin) {\n    this.bin = bin;\n    this.reset();\n  }\n\n  reset() {\n    this.availableCopies = 0;\n    this.requestTime = [0, 0];\n    this.requestPeerId = 0;\n\n    this.requested = false;\n    this.received = false;\n    this.verified = false;\n  }\n}\n\nexport class SchedulerChunkRequestMap {\n  constructor() {\n    this.valueByBin = {};\n    this.head = undefined;\n    this.tail = undefined;\n    this.length = 0;\n  }\n\n  insert(address) {\n    const now = Date.now();\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      const value = {\n        address: new Address(i),\n        createdAt: now,\n        next: undefined,\n        prev: undefined,\n      };\n      this.valueByBin[i] = value;\n\n      if (this.head === undefined) {\n        this.head = value;\n      } else {\n        this.tail.next = value;\n      }\n      value.prev = this.tail;\n      this.tail = value;\n\n      this.length ++;\n    }\n  }\n\n  get({bin}) {\n    return this.valueByBin[bin];\n  }\n\n  remove({bin}) {\n    const value = this.valueByBin[bin];\n    if (value === undefined) {\n      return;\n    }\n    delete this.valueByBin[bin];\n\n    if (this.head === value) {\n      this.head = value.next;\n    }\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.prev !== undefined) {\n      value.prev.next = value.next;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = value.prev;\n    }\n\n    this.length --;\n  }\n\n  peek() {\n    return this.head;\n  }\n\n  pop() {\n    if (this.head === undefined) {\n      return;\n    }\n    const value = this.head;\n\n    this.head = value.next;\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = undefined;\n    }\n\n    delete this.valueByBin[value.address.bin];\n\n    this.length --;\n\n    return value;\n  }\n}\n\nexport class SchedulerChunkMap extends BinRingBuffer {\n  createEmptyValue(bin, value) {\n    if (value === undefined) {\n      return new SchedulerChunkState(bin);\n    }\n\n    // put the peer map here and when we advance the bin meme update\n    // the availability map here\n\n    value.reset();\n    return value;\n  }\n}\n\nexport class SchedulerPeerState {\n  constructor(peer, requestFlow) {\n    this.peer = peer;\n    this.requestFlow = requestFlow;\n    this.availableChunks = new AvailabilityMap();\n\n    this.ledbat = new LEDBAT();\n\n    // this.rttMean = new EMA(0.125);\n    // this.rttVar = new EMA(0.25);\n\n    this.rttMean = new EMA(0.05);\n    this.rttVar = new EMA(0.05);\n\n    this.chunkIntervalMean = new EMA(0.25);\n    this.chunkRate = new RateMeter(15000);\n    this.wasteRate = new RateMeter(15000);\n    this.lastChunkTime = null;\n\n    this.requestTimes = new BinRingBuffer();\n\n    this.requestedChunks = new SchedulerChunkRequestMap();\n    this.sentRequests = new SchedulerChunkRequestMap();\n\n    this.timeouts = 0;\n    this.validChunks = 0;\n    this.invalidChunks = 0;\n\n    this.requestQueue = [];\n\n    this.sentChunks = new AvailabilityMap();\n    this.receivedChunks = new AvailabilityMap();\n  }\n}\n\nexport class Scheduler {\n  constructor(chunkSize, clientOptions) {\n    const {\n      liveDiscardWindow,\n      uploadRateLimit,\n    } = clientOptions;\n\n    this.chunkSize = chunkSize;\n    this.liveDiscardWindow = liveDiscardWindow;\n\n    // where are we in the buffer\n\n    // how rare is a chunk\n    // how urgently is a chunk needed\n\n    // high/mid/low priority time bands\n\n    // high performance/reliability peers\n    // expected performance per peer\n\n    // request timeout/cancel\n    // send timeout/cancel?\n\n    // average stream bit rate\n    // position in available window\n    // position in theoretical window\n\n    // minimum needed bin\n\n    this.peerStates = {};\n    this.chunkStates = new SchedulerChunkMap(liveDiscardWindow);\n    this.definitelyLoadedChunks = [];\n    this.loadedChunks = new AvailabilityMap(liveDiscardWindow);\n    this.peerCount = 0;\n\n    this.chunkRate = new ChunkRateMeter();\n\n    this.requestQueue = new RequestQueue(uploadRateLimit / 1000);\n\n    // this.update = this.update.bind(this);\n    // setTimeout(this.update, 0);\n\n    this.timers = {};\n\n    this.lastExportedBin = -Infinity;\n    this.lastCompletedBin = -Infinity;\n    this.requestedChunks = new AvailabilityMap(liveDiscardWindow);\n\n    this.totalSends = 0;\n    this.totalRequests = 0;\n    this.totalRequestsReceived = 0;\n    this.totalReceived = 0;\n    this.totalAdded = 0;\n    this.totalCancelled = 0;\n    this.ackUnknownSend = 0;\n    this.totalDroppedRequests = 0;\n    this.sendDelay = new EMA(0.05);\n    // setInterval(this.debug.bind(this), 1000);\n\n    this.nextSendTime = 0;\n    this.nextSendTimeout = 0;\n  }\n\n  debug() {\n    console.log('---');\n    Object.values(this.peerStates).forEach((peerState) => {\n      if (!peerState.peer.isReady()) {\n        return;\n      }\n\n      let cto = peerState.ledbat.cto / (peerState.ledbat.cwnd / this.chunkSize);\n      const timeout = Math.ceil(Math.min(cto, 1000));\n\n      const availableChunks = peerState.availableChunks;\n\n      const firstLoadedChunk = this.loadedChunks.min();\n      const firstRequestedChunk = this.requestedChunks.min();\n      const startBin = Math.max(\n        availableChunks.min(),\n        isFinite(firstLoadedChunk) ? firstLoadedChunk : -Infinity,\n        isFinite(firstRequestedChunk) ? firstLoadedChunk : -Infinity,\n        this.lastCompletedBin,\n      );\n      const lastAvailableBin = Math.min(availableChunks.max(), startBin + this.liveDiscardWindow * 2);\n\n      const planFor = Math.min(1000, peerState.ledbat.rttMean.value() * 4);\n\n      const dip = peerState.chunkIntervalMean.value() || 0;\n      const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n      const cwnd = firstPlanPick - peerState.sentRequests.length;\n\n      console.log(JSON.stringify({\n        peer_remoteId: peerState.peer.remoteId,\n        peer_localId: peerState.peer.localId,\n        sentRequests: peerState.sentRequests.length,\n        swift_rtt: peerState.rttMean.value(),\n        swift_rttvar: peerState.rttVar.value(),\n        swift_chunkIntervalMean: peerState.chunkIntervalMean.value(),\n        chunkRate: peerState.chunkRate.value(),\n        wasteRate: peerState.wasteRate.value(),\n        swift_cwnd: cwnd,\n        ledbat_cwnd: peerState.ledbat.cwnd,\n        ledbat_cto: peerState.ledbat.cto,\n        ledbat_currentDelay: peerState.ledbat.currentDelay.getMin(),\n        ledbat_baseDelay: peerState.ledbat.baseDelay.getMin(),\n        ledbat_rttMean: peerState.ledbat.rttMean.value(),\n        ledbat_rttVar: peerState.ledbat.rttVar.value(),\n        ledbat_rtt: peerState.ledbat.rtt,\n        ledbat_flightSize: peerState.ledbat.flightSize,\n        // requestedChunks: peerState.requestedChunks,\n        timeouts: peerState.timeouts,\n        validChunks: peerState.validChunks,\n        invalidChunks: peerState.invalidChunks,\n        timeout: timeout,\n        picker_startBin: startBin,\n        picker_lastAvailableBin: lastAvailableBin,\n      }, true, 2));\n    });\n\n    console.log(JSON.stringify({\n      totalSends: this.totalSends,\n      totalRequests: this.totalRequests,\n      totalRequestsReceived: this.totalRequestsReceived,\n      totalDroppedRequests: this.totalDroppedRequests,\n      totalReceived: this.totalReceived,\n      totalAdded: this.totalAdded,\n      totalCancelled: this.totalCancelled,\n      ackUnknownSend: this.ackUnknownSend,\n      minIncompleteBin: this.lastCompletedBin,\n      sendDelay: this.sendDelay.value(),\n      picker_firstLoadedChunk: this.loadedChunks.min(),\n      picker_firstRequestedChunk: this.requestedChunks.min(),\n      chunkRate: this.chunkRate.value(),\n    }, true, 2));\n    // this.totalSends = 0;\n    // this.totalRequests = 0;\n    // this.totalRequestsReceived = 0;\n    // this.totalReceived = 0;\n    // // this.ackUnknownSend = 0;\n    // this.totalAdded = 0;\n    // this.totalCancelled = 0;\n    // this.totalDroppedRequests = 0;\n  }\n\n  update(peerState, update) {\n    if (!peerState.peer.isReady()) {\n      this.timers[peerState.localId] = setTimeout(update, 1000);\n      return;\n    }\n\n    const {\n      availableChunks,\n      ledbat,\n      sentRequests,\n    } = peerState;\n\n    ledbat.digestDelaySamples();\n\n    const now = Date.now();\n    // const planFor = ledbat.rttMean.value();\n    // const planFor = ledbat.rttMean.value() * 2 + ledbat.rttVar.value() * 4;\n    const planFor = Math.max(1000, ledbat.rttMean.value() * 4);\n    const timeoutThreshold = now - ledbat.cto * 2;\n\n    const dip = peerState.chunkIntervalMean.value() || 0;\n    const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n    const cwnd = firstPlanPick - sentRequests.length;\n\n    const cancelledRequests = [];\n    while (sentRequests.peek() !== undefined\n      && sentRequests.peek().createdAt < timeoutThreshold) {\n      cancelledRequests.push(sentRequests.pop());\n    }\n\n    if (cancelledRequests.length > 0) {\n      this.totalCancelled += cancelledRequests.length;\n      cancelledRequests.forEach(({address}) => sentRequests.remove(address));\n\n      // TODO: this is for ack timeout\n      // ledbat.onDataLoss(cancelledRequests.length * this.chunkSize);\n    }\n\n    const startBin = Math.max(\n      this.loadedChunks.values.offset * 2 + 2,\n      this.requestedChunks.values.offset * 2 + 2,\n      availableChunks.min(),\n      this.lastCompletedBin,\n    );\n    const endBin = Math.min(\n      startBin + this.liveDiscardWindow * 2,\n      availableChunks.max(),\n    );\n    const requestAddresses = [];\n    for (let i = startBin; i < endBin && requestAddresses.length < cwnd; i += 2) {\n      const address = new Address(i);\n      if (!this.loadedChunks.get(address)\n        && !this.requestedChunks.get(address)\n        && availableChunks.get(address)) {\n\n        if (Math.random() < 0.05) {\n          requestAddresses.push(address);\n          sentRequests.insert(address);\n          this.requestedChunks.set(address);\n        }\n      }\n    }\n    if (this.lastCompletedBin === -Infinity && requestAddresses.length !== 0) {\n      const firstRequestedBin = requestAddresses[0].bin;\n      this.lastCompletedBin = firstRequestedBin;\n      this.lastExportedBin = firstRequestedBin - 2;\n    }\n\n    if (cancelledRequests.length !== 0) {\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        peerState.peer.sendCancel(address);\n      });\n    }\n\n    if (requestAddresses.length !== 0) {\n      this.totalRequests += requestAddresses.length;\n      peerState.peer.sendRequest(...requestAddresses);\n\n      requestAddresses.forEach(address => {\n        if (peerState.requestTimes.get(address) === undefined) {\n          peerState.requestTimes.set(address, now);\n        }\n      });\n    }\n\n    while (ledbat.flightSize < ledbat.cwnd && peerState.requestQueue.length) {\n      const requestedAddress = peerState.requestQueue.shift();\n      if (requestedAddress !== undefined) {\n        const requestedChunk = peerState.requestedChunks.get(requestedAddress);\n        if (requestedChunk !== undefined) {\n          requestedChunk.sentAt = now;\n          peerState.ledbat.addSent(this.chunkSize);\n          peerState.peer.sendChunk(requestedAddress);\n          this.totalSends ++;\n        }\n      }\n\n      peerState.sentChunks.set(requestedAddress);\n\n      // TODO: volunteer bin we have and they don't?\n    }\n\n    peerState.peer.flush();\n    let sendInterval = Math.min(1000, (ledbat.rttMean.value() || 0) / (ledbat.cwnd / this.chunkSize));\n    this.timers[peerState.localId] = setTimeout(update, sendInterval);\n  }\n\n  addPeer(peer) {\n    const {localId} = peer;\n\n    const requestFlow = new RequestFlow(localId);\n    this.requestQueue.addFlow(requestFlow);\n\n    const peerState = new SchedulerPeerState(peer, requestFlow);\n    this.peerStates[localId] = peerState;\n\n    const update = () => this.update(peerState, update);\n    this.timers[localId] = setTimeout(update, 1000);\n  }\n\n  removePeer({localId}) {\n    const peerState = this.peerStates[localId];\n    if (peerState === undefined) {\n      return;\n    }\n\n    const {requestFlow} = peerState;\n    this.requestQueue.removeFlow(requestFlow);\n\n    delete this.peerStates[localId];\n\n    clearTimeout(this.timers[localId]);\n  }\n\n  getPeerState({localId}) {\n    return this.peerStates[localId];\n  }\n\n  getRecentChunks() {\n    // TODO: how to pick this... maybe remote discard window size?\n    const startBin = this.loadedChunks.max() - 512;\n\n    // bail if no chunks have been loaded yet\n    if (!isFinite(startBin)) {\n      return [];\n    }\n\n    const bins = [];\n\n    const endBin = this.loadedChunks.max();\n    for (let i = startBin; i <= endBin; i += 2) {\n      const address = new Address(i);\n      if (this.loadedChunks.get(address)) {\n        bins.push(address);\n      }\n    }\n\n    return bins;\n  }\n\n  setLiveDiscardWindow(peer, liveDiscardWindow) {\n    this.getPeerState(peer).availableChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).requestTimes.setCapacity(liveDiscardWindow);\n\n    this.getPeerState(peer).sentChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).receivedChunks.setCapacity(liveDiscardWindow);\n  }\n\n  markChunkReceived(peer, address, delaySample) {\n    const now = Date.now();\n\n    this.totalReceived ++;\n\n    const peerState = this.getPeerState(peer);\n    if (peerState === undefined) {\n      return;\n    }\n\n    if (this.loadedChunks.get(address)) {\n      peerState.wasteRate.update(1);\n    }\n\n    const request = peerState.sentRequests.get(address);\n    if (request === undefined) {\n      return;\n    }\n\n    if (peerState.lastChunkTime !== null) {\n      const chunkInterval = now - peerState.lastChunkTime;\n      peerState.chunkIntervalMean.update(chunkInterval);\n    }\n    peerState.lastChunkTime = now;\n    if (!this.loadedChunks.get(address)) {\n      peerState.chunkRate.update(1);\n    }\n\n    const requestTime = peerState.requestTimes.get(address);\n    if (requestTime !== undefined) {\n      peerState.ledbat.addRttSample(now - requestTime);\n    }\n\n    // peerState.rttMean.update(rtt);\n    // peerState.rttVar.update(Math.abs(rtt - peerState.rttMean.value()));\n\n    // TODO: double check LEDBAT to make sure we shouldn't be doing\n    // something here\n\n    peerState.sentRequests.remove(address);\n  }\n\n  markChunkVerified(peer, address) {\n    // this.chunkStates.get(address).verified = true;\n    this.getPeerState(peer).validChunks ++;\n    this.getPeerState(peer).receivedChunks.set(address);\n\n    // this.chunkStates.advanceLastBin(address.end);\n\n    this.definitelyLoadedChunks.push(address.bin);\n    this.chunkRate.update(address);\n    this.loadedChunks.set(address);\n\n    for (let i = this.lastCompletedBin; this.loadedChunks.get(new Address(i)); i += 2) {\n      this.lastCompletedBin = i;\n    }\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  getNewCompleteBins() {\n    const nextExportedBin = this.lastExportedBin + 2;\n    if (nextExportedBin <= this.lastCompletedBin) {\n      this.lastExportedBin = this.lastCompletedBin;\n      return [nextExportedBin, this.lastCompletedBin];\n    }\n  }\n\n  markChunkRejected(peer, address) {\n    this.requestedChunks.set(address, false);\n    this.getPeerState(peer).invalidChunks ++;\n  }\n\n  markChunkAvailable(peer, address) {\n    for (let i = address.start; i <= address.end; i += 2) {\n      if (!this.getPeerState(peer).availableChunks.get(new Address(i))) {\n        this.totalAdded ++;\n      }\n    }\n\n    this.getPeerState(peer).availableChunks.set(address);\n  }\n\n  markChunksLoaded(address) {\n    this.chunkStates.advanceLastBin(address.end);\n    this.loadedChunks.set(address);\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  markSendAcked(peer, address, delaySample) {\n    const peerState = this.getPeerState(peer);\n\n    peerState.ledbat.addDelaySample(delaySample, this.chunkSize);\n\n    const sentChunk = peerState.requestedChunks.get(address);\n    if (sentChunk === undefined) {\n      this.ackUnknownSend ++;\n      return;\n    }\n\n    // TODO: is this necessary?\n    if (sentChunk.sentAt) {\n      peerState.ledbat.addRttSample(Date.now() - sentChunk.sentAt);\n    }\n\n    peerState.requestedChunks.remove(address);\n  }\n\n  enqueueRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      this.totalRequestsReceived ++;\n      peerState.requestQueue.push(new Address(i));\n    }\n\n    peerState.requestedChunks.insert(address);\n  }\n\n  cancelRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n    const requestedChunk = peerState.requestedChunks.get(address);\n    if (requestedChunk && requestedChunk.sentAt) {\n      peerState.ledbat.onDataLoss(this.chunkSize);\n    }\n    peerState.requestedChunks.remove(address);\n\n    // this.requestQueue.cancel(\n    //   this.getPeerState(peer).requestFlow,\n    //   ({bin}) => address.containsBin(bin),\n    // );\n  }\n}\n","import {EventEmitter} from 'events';\nimport Address from './address';\nimport SwarmId from './swarmid';\nimport LEDBAT from '../ledbat';\nimport {\n  createChunkAddressFieldType,\n  createLiveSignatureFieldType,\n  createIntegrityHashFieldType,\n  createEncoding,\n} from './encoding';\nimport {\n  MaxChannelId,\n  ProtocolOptions,\n  MessageTypes,\n} from './constants';\nimport {\n  createMerkleHashTreeFunction,\n  createLiveSignatureVerifyFunction,\n  createLiveSignatureSignFunction,\n  createContentIntegrityVerifierFactory,\n} from './integrity';\nimport {\n  BinRingBuffer,\n  Scheduler,\n} from './scheduler';\n\nconst genericEncoding = createEncoding();\n\nconst BUFFER_SIZE = 1e7;\nconst MAX_UPLOAD_RATE = 1e6;\n\nexport class Swarm extends EventEmitter {\n  constructor(uri, clientOptions) {\n    super();\n\n    const {swarmId} = uri;\n    const {\n      [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n      [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n      [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n      [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n      [ProtocolOptions.ChunkSize]: chunkSize,\n    } = uri.protocolOptions;\n    const {\n      liveDiscardWindow,\n      privateKey,\n    } = clientOptions;\n\n    this.uri = uri;\n\n    this.encoding = createEncoding(\n      createChunkAddressFieldType(chunkAddressingMethod, chunkSize),\n      createIntegrityHashFieldType(merkleHashTreeFunction),\n      createLiveSignatureFieldType(liveSignatureAlgorithm, swarmId),\n    );\n\n    const liveSignatureSignFunction = privateKey !== undefined\n      ? createLiveSignatureSignFunction(liveSignatureAlgorithm, privateKey)\n      : undefined;\n    this.contentIntegrity = createContentIntegrityVerifierFactory(\n      contentIntegrityProtectionMethod,\n      createMerkleHashTreeFunction(merkleHashTreeFunction),\n      createLiveSignatureVerifyFunction(liveSignatureAlgorithm, swarmId),\n      liveSignatureSignFunction,\n      liveDiscardWindow,\n    );\n\n    this.chunkBuffer = new BinRingBuffer(liveDiscardWindow);\n    this.scheduler = new Scheduler(chunkSize, clientOptions);\n\n    this.protocolOptions = [\n      new this.encoding.VersionProtocolOption(),\n      new this.encoding.MinimumVersionProtocolOption(),\n      new this.encoding.SwarmIdentifierProtocolOption(swarmId.toBuffer()),\n      new this.encoding.ContentIntegrityProtectionMethodProtocolOption(contentIntegrityProtectionMethod),\n      new this.encoding.MerkleHashTreeFunctionProtocolOption(merkleHashTreeFunction),\n      new this.encoding.LiveSignatureAlgorithmProtocolOption(liveSignatureAlgorithm),\n      new this.encoding.ChunkAddressingMethodProtocolOption(chunkAddressingMethod),\n      new this.encoding.ChunkSizeProtocolOption(chunkSize),\n      new this.encoding.LiveDiscardWindowProtocolOption(liveDiscardWindow),\n    ];\n  }\n\n  verifyProtocolOptions(protocolOptions) {\n    Object.entries(this.uri.protocolOptions)\n      .forEach(([protocolOption, value]) => {\n        if (protocolOptions[protocolOption] !== value) {\n          const protocolOptionName = ProtocolOptions.name(protocolOption);\n          throw new Error(`invalid peer options: ${protocolOptionName} mismatch`);\n        }\n      });\n  }\n\n  emitNewData() {\n    const newBins = this.scheduler.getNewCompleteBins();\n    if (newBins !== undefined) {\n      const [minNewBin, maxNewBin] = newBins;\n      const chunks = [];\n      for (let i = minNewBin; i <= maxNewBin; i += 2) {\n        chunks.push(this.chunkBuffer.get(new Address(i)));\n      }\n      this.emit('data', chunks);\n    }\n  }\n}\n\nconst PeerState = {\n  CONNECTING: 1,\n  AWAITING_HANDSHAKE: 2,\n  READY: 3,\n  CHOKED: 4,\n  DISCONNECTING: 5,\n  CLOSED: 6,\n};\n\nclass PeerDataHandlerContext {\n  constructor(swarm) {\n    this.swarm = swarm;\n    this.integrityVerifier = null;\n  }\n\n  getContentIntegrityVerifier(address) {\n    if (this.integrityVerifier === null) {\n      this.integrityVerifier = this.swarm.contentIntegrity.createVerifier(address);\n    }\n    return this.integrityVerifier;\n  }\n}\n\n// TODO: disconnect inactive peers\nclass Peer {\n  constructor(swarm, channel, remoteId = 0, localId = Peer.createChannelId()) {\n    this.swarm = swarm;\n    this.channel = channel;\n    this.remoteId = remoteId;\n    this.localId = localId;\n    this.state = PeerState.CONNECTING;\n\n    this.handlers = {\n      [MessageTypes.HANDSHAKE]: this.handleHandshakeMessage.bind(this),\n      [MessageTypes.DATA]: this.handleDataMessage.bind(this),\n      [MessageTypes.HAVE]: this.handleHaveMessage.bind(this),\n      [MessageTypes.ACK]: this.handleAckMessage.bind(this),\n      [MessageTypes.INTEGRITY]: this.handleIntegrityMessage.bind(this),\n      [MessageTypes.SIGNED_INTEGRITY]: this.handleSignedIntegrityMessage.bind(this),\n      [MessageTypes.REQUEST]: this.handleRequestMessage.bind(this),\n      [MessageTypes.CANCEL]: this.handleCancelMessage.bind(this),\n      [MessageTypes.CHOKE]: this.handleChokeMessage.bind(this),\n      [MessageTypes.UNCHOKE]: this.handleUnchokeMessage.bind(this),\n    };\n\n    this.sendBuffer = [];\n\n    this.swarm.scheduler.addPeer(this);\n  }\n\n  static createChannelId() {\n    return Math.round(Math.random() * MaxChannelId);\n  }\n\n  init() {\n    this.sendHandshake();\n    this.flush();\n\n    this.state = PeerState.AWAITING_HANDSHAKE;\n  }\n\n  close() {\n    this.state = PeerState.CLOSED;\n    this.swarm.scheduler.removePeer(this);\n  }\n\n  handleData(data) {\n    const context = new PeerDataHandlerContext(this.swarm);\n    data.messages.toArray().forEach(message => this.handleMessage(message, context));\n  }\n\n  handleMessage(message, context) {\n    const handler = this.handlers[message.type];\n    if (handler === undefined) {\n      throw new Error('unsupported message type');\n    }\n\n    // console.log(MessageTypes.name(message.type), this.remoteId, message);\n    handler(message, context);\n  }\n\n  handleHandshakeMessage(handshake) {\n    const options = handshake.options.reduce((options, {type, value}) => ({...options, [type]: value}), {});\n\n    const liveDiscardWindow = options[ProtocolOptions.LiveDiscardWindow];\n    if (liveDiscardWindow !== undefined) {\n      this.swarm.scheduler.setLiveDiscardWindow(this, liveDiscardWindow);\n    }\n\n    this.swarm.verifyProtocolOptions(options);\n\n    this.remoteId = handshake.channelId;\n\n    if (this.state === PeerState.CONNECTING) {\n      this.sendHandshake();\n      this.swarm.scheduler.getRecentChunks().forEach(address => this.sendHave(address));\n      this.flush();\n    }\n\n    this.state = PeerState.READY;\n  }\n\n  handleDataMessage(message, context) {\n    const address = Address.from(message.address);\n    const delaySample = LEDBAT.computeOneWayDelay(message.timestamp.value);\n\n    this.swarm.scheduler.markChunkReceived(this, address, delaySample);\n\n    const {encoding} = this.swarm;\n    this.channel.send(new encoding.Datagram(\n      this.remoteId,\n      [new encoding.AckMessage(message.address, new encoding.Timestamp(delaySample))],\n    ));\n\n    context.getContentIntegrityVerifier(address).verifyChunk(address, message.data)\n      .then(() => {\n        this.swarm.chunkBuffer.set(address, message.data);\n        this.swarm.scheduler.markChunkVerified(this, address);\n        this.swarm.emitNewData();\n      })\n      .catch((err) => {\n        console.log('error validating chunk', err);\n        this.swarm.scheduler.markChunkRejected(this, address);\n      });\n  }\n\n  handleHaveMessage(message) {\n    this.swarm.scheduler.markChunkAvailable(this, Address.from(message.address));\n  }\n\n  handleAckMessage(message) {\n    const address = Address.from(message.address);\n    this.swarm.scheduler.markChunkAvailable(this, address);\n    this.swarm.scheduler.markSendAcked(this, address, message.delaySample.value);\n  }\n\n  handleIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHash(address, message.hash.value);\n  }\n\n  handleSignedIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHashSignature(address, message.signature.value);\n  }\n\n  handleRequestMessage(message) {\n    this.swarm.scheduler.enqueueRequest(this, Address.from(message.address));\n  }\n\n  handleCancelMessage(message) {\n    this.swarm.scheduler.cancelRequest(this, Address.from(message.address));\n  }\n\n  handleChokeMessage() {\n    this.state = PeerState.CHOKED;\n  }\n\n  handleUnchokeMessage() {\n    this.state = PeerState.READY;\n  }\n\n  isReady() {\n    return this.state === PeerState.READY;\n  }\n\n  sendHandshake() {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HandshakeMessage(\n      this.localId,\n      [\n        ...this.swarm.protocolOptions,\n        new encoding.SupportedMessagesProtocolOption(Object.keys(this.handlers)),\n      ],\n    ));\n  }\n\n  sendHave(address) {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HaveMessage(encoding.ChunkAddress.from(address)));\n  }\n\n  sendRequest(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.RequestMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendCancel(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.CancelMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendChunk(address, timestamp) {\n    const chunk = this.swarm.chunkBuffer.get(address);\n    if (chunk === undefined) {\n      return;\n    }\n\n    // TODO: omit signatures for bins the peer has already acked\n    const constituentSignatures = this.swarm.contentIntegrity.getConstituentSignatures(address);\n    if (constituentSignatures === undefined) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n\n    constituentSignatures\n      .reverse()\n      .forEach(({bin, signature}, i) => {\n        const address = encoding.ChunkAddress.from(new Address(bin));\n\n        this.sendBuffer.push(new encoding.IntegrityMessage(\n          address,\n          new encoding.IntegrityHash(signature.getHash()),\n        ));\n\n        if (i === 0) {\n          this.sendBuffer.push(new encoding.SignedIntegrityMessage(\n            address,\n            new encoding.Timestamp(timestamp),\n            new encoding.LiveSignature(signature.getSignatureHash()),\n          ));\n        }\n      });\n\n    this.sendBuffer.push(new encoding.DataMessage(encoding.ChunkAddress.from(address), chunk));\n\n    this.flush();\n  }\n\n  flush() {\n    if (this.sendBuffer.length === 0) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n    this.channel.send(new encoding.Datagram(this.remoteId, this.sendBuffer));\n    this.sendBuffer = [];\n  }\n}\n\nclass SwarmSet extends EventEmitter {\n  constructor() {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.swarms = {};\n  }\n\n  insert(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] === undefined) {\n      this.swarms[key] = swarm;\n      this.emit('insert', swarm);\n    }\n  }\n\n  remove(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] !== undefined) {\n      delete this.swarms[key];\n      this.emit('remove', swarm);\n    }\n  }\n\n  get(swarmId) {\n    return this.swarms[SwarmSet.swarmIdToKey(swarmId)];\n  }\n\n  toArray() {\n    return Object.values(this.swarms);\n  }\n\n  static swarmIdToKey(swarmId) {\n    return swarmId.toBuffer().toString('base64');\n  }\n}\n\nexport class Client {\n  constructor() {\n    this.channels = [];\n\n    this.swarms = new SwarmSet();\n  }\n\n  publishSwarm(swarm) {\n    this.swarms.insert(swarm);\n  }\n\n  unpublishSwarm(swarm) {\n    this.swarms.remove(swarm);\n  }\n\n  joinSwarm(uri) {\n    const chunkSize = uri.protocolOptions[ProtocolOptions.ChunkSize];\n    const clientOptions = {\n      liveDiscardWindow: Math.ceil(BUFFER_SIZE / chunkSize),\n      uploadRateLimit: MAX_UPLOAD_RATE,\n    };\n\n    const swarm = new Swarm(uri, clientOptions);\n    this.swarms.insert(swarm);\n\n    return swarm;\n  }\n\n  createChannel(conn) {\n    const channel = new Channel(conn, this.swarms);\n    this.channels.push(channel);\n\n    channel.once('close', () => {\n      const index = this.channels.indexOf(channel);\n      this.channels.splice(index, 1);\n    });\n  }\n}\n\nexport class Channel extends EventEmitter {\n  constructor(conn, swarms) {\n    super();\n\n    this.conn = conn;\n    this.swarms = swarms;\n    this.peers = {};\n\n    this.handleSwarmInsert = this.getOrCreatePeer.bind(this);\n    this.swarms.on('insert', this.handleSwarmInsert);\n\n    const liveSwarms = swarms.toArray();\n    this.conn.addEventListener('open', () => liveSwarms.forEach(this.handleSwarmInsert));\n    this.conn.addEventListener('message', this.handleMessage.bind(this));\n    this.conn.addEventListener('error', err => console.log('connection error:', err));\n  }\n\n  handleMessage(event) {\n    let data = new genericEncoding.Datagram();\n    data.read(event.data);\n\n    let peer = this.peers[data.channelId];\n    if (peer === undefined) {\n      if (data.channelId !== 0) {\n        return;\n      }\n\n      let handshake;\n      try {\n        handshake = data.messages.next();\n      } catch (error) {\n        console.log('error decoding mesasge', error);\n        return;\n      }\n      if (handshake === undefined || handshake.type !== MessageTypes.HANDSHAKE) {\n        return;\n      }\n      const swarmId = handshake.options.find(({type}) => type === ProtocolOptions.SwarmIdentifier);\n      if (swarmId === undefined) {\n        return;\n      }\n      const swarm = this.swarms.get(SwarmId.from(swarmId.value));\n      if (swarm === undefined) {\n        return;\n      }\n\n      peer = this.getOrCreatePeer(swarm);\n    }\n\n    data = new peer.swarm.encoding.Datagram();\n    data.read(event.data);\n    peer.handleData(data);\n  }\n\n  send(data) {\n    try {\n      this.conn.send(data.toBuffer());\n    } catch (error) {\n      console.log('encountered error while sending', error);\n      this.handleClose();\n    }\n  }\n\n  handleClose() {\n    this.swarms.removeListener('insert', this.handleSwarmInsert);\n    Object.values(this.peers).forEach(peer => peer.close());\n    this.emit('close');\n  }\n\n  getOrCreatePeer(swarm) {\n    let peer = Object.values(this.peers).find(p => p.swarm === swarm);\n    return peer || this.createPeer(swarm);\n  }\n\n  createPeer(swarm) {\n    const {peers, swarms} = this;\n\n    const peer = new Peer(swarm, this);\n    peers[peer.localId] = peer;\n    peer.init();\n\n    function handleRemove(removedSwarm) {\n      if (removedSwarm === swarm) {\n        delete peers[peer.localId];\n        peer.close();\n\n        swarms.removeListener('remove', handleRemove);\n      }\n    }\n\n    swarms.on('remove', handleRemove);\n\n    return peer;\n  }\n}\n","import KBucket from 'k-bucket';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport arrayEqual from 'array-equal';\nimport randomBytes from 'randombytes';\nimport LRU from 'lru-cache';\nimport hexToUint8Array from './hexToUint8Array';\n\nconst SEND_REPLICAS = 2;\nconst MAX_HOPS = 10;\nconst DEFAULT_PEER_REQUEST_COUNT = 5;\nconst NUMBER_OF_NODES_PER_BUCKET = 15;\n\n// TODO: replace dropped connections\n// TODO: implement get/set\n// TODO: implement connection dump rpc for network debugging\n// TODO: update peers with new peer lists periodically\n\nexport class Client extends EventEmitter {\n  constructor(id) {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.id = id;\n\n    this.channels = new KBucket({\n      numberOfNodesPerKBucket: NUMBER_OF_NODES_PER_BUCKET,\n      localNodeId: this.id,\n    });\n\n    this.channels.on('ping', this.handlePing.bind(this));\n    this.channels.on('removed', this.handleRemoved.bind(this));\n    this.channels.on('updated', this.handleUpdated.bind(this));\n    this.channels.on('added', this.handleAdded.bind(this));\n\n    this.seenIds = new LRU({max: 1024});\n    this.knownRoutes = new LRU({\n      max: 1024,\n      maxAge: 1000 * 60,\n    });\n    this.callbacks = new LRU({max: 1024});\n\n    this.on('receive.peers.request', this.handlePeersRequest.bind(this));\n    this.on('receive.ping.request', this.handlePingRequest.bind(this));\n    this.on('receive.callback.response', this.handleCallbackResponse.bind(this));\n  }\n\n  handlePing(channels, newChannel) {\n    // console.log('ping', channels, newChannel);\n    const PING_TIMEOUT = 1000;\n    const CONNECT_TIMEOUT = 1000;\n\n    channels.forEach(channel => {\n      const {id} = channel;\n\n      // console.log('>>> conn exists, pinging');\n      // TODO: maybe keep track of how recently we pinged? debounce\n      const replaceChannel = () => {\n        // console.log('>>> ping timeout');\n        this.channels.remove(id);\n        this.channels.add(newChannel);\n      };\n\n      // TODO: connection up/down getter\n      if (channel.conn == null) {\n        // console.log('>>> channel undefined, waiting to see if it gets replaced');\n        setTimeout(() => {\n          const channel = this.channels.get(id);\n          if (channel != null && channel.conn != null) {\n            this.channels.add(channel);\n            return;\n          }\n          replaceChannel();\n        }, CONNECT_TIMEOUT);\n\n        return;\n      }\n\n      // console.log('ping', arrayBufferToHex(id));\n      const replaceChannelTimeout = setTimeout(replaceChannel, PING_TIMEOUT);\n      const clearReplaceChannelTimeout = () => {\n        // console.log('>>> clear timeout');\n        clearTimeout(replaceChannelTimeout);\n        this.channels.add(channel);\n      };\n      this.send(id, 'ping.request', {}, clearReplaceChannelTimeout);\n    });\n  }\n\n  handleRemoved(channel) {\n    // console.log('remove', arrayBufferToHex(channel.id));\n    if (channel.conn) {\n      channel.conn.close();\n    }\n    // console.log('handleRemoved', arrayBufferToHex(channel.id));\n  }\n\n  handleUpdated(oldChannel, newChannel) {\n    // console.log('update', {oldChannel, newChannel});\n    // console.log('handleUpdated', arrayBufferToHex(channel.id));\n  }\n\n  handleAdded(channel) {\n    if (channel.conn === undefined) {\n      // console.log('peers.discover', arrayBufferToHex(this.id), arrayBufferToHex(channel.id), this.channels.count());\n      this.emit('peers.discover', channel.id);\n    }\n    // console.log('add');\n    // emit event?\n    // console.log('handleAdded', arrayBufferToHex(channel.id));\n  }\n\n  createChannel(id, conn) {\n    const channel = new Channel(id, conn);\n\n    // console.log('create channel');\n    // this.candidates.add(channel);\n\n    const messages = [];\n    const bufferMessages = event => messages.push(event);\n\n    conn.addEventListener('open', () => {\n      this.channels.add(channel);\n\n      conn.removeEventListener('message', bufferMessages);\n      conn.addEventListener('message', this.handleMessage.bind(this, channel));\n      messages.forEach(event => this.handleMessage(channel, event));\n\n      this.send(id, 'peers.request', {}, this.handlePeersResponse.bind(this));\n    });\n\n    conn.addEventListener('message', bufferMessages);\n    conn.addEventListener('close', this.handleClose.bind(this, channel));\n    conn.addEventListener('error', this.handleError.bind(this, channel));\n  }\n\n  handleMessage(channel, event) {\n    // console.log('handleMessage', event.data);\n\n    const req = JSON.parse(event.data);\n    const {type, id} = req;\n\n    if (this.seenIds.get(id)) {\n      // console.log('discarding seen message', id);\n      return;\n    }\n    this.seenIds.set(id, true);\n\n    this.knownRoutes.set(req.from, channel.id);\n\n    const to = hexToUint8Array(req.to);\n    if (!arrayEqual(to, this.id)) {\n      this.forwardMessage(to, req);\n      return;\n    }\n\n    const resCallback = (res={}, callback=null) => {\n      const from = hexToUint8Array(req.from);\n      const data = {re: id, ...res};\n      this.send(from, 'callback.response', data, callback);\n    };\n\n    // console.log(`emit receive.${type}`, req);\n    this.emit(`receive.${type}`, {data: req, callback: resCallback});\n  }\n\n  forwardMessage(to, data) {\n    // console.log('forwarding message', arrayBufferToHex(to), data);\n\n    if (data.hops >= MAX_HOPS) {\n      // console.log('discarding message with too many hops', data.id);\n      return;\n    }\n    data.hops ++;\n\n    this.sendRaw(to, JSON.stringify(data));\n  }\n\n  handleClose({id}) {\n    // console.warn('handleClose', arrayBufferToHex(id));\n    this.channels.remove(id);\n    this.candidates.remove(id);\n  }\n\n  handleError(error) {\n    // console.log('error', error);\n  }\n\n  handlePingRequest({callback}) {\n    callback();\n  }\n\n  handleCallbackResponse({data, callback}) {\n    const reqCallback = this.callbacks.get(data.re);\n    if (reqCallback) {\n      reqCallback(data, callback);\n    } else {\n      // console.warn('<<< callback for %s expired', data.re);\n    }\n  }\n\n  handlePeersRequest({data: {count=DEFAULT_PEER_REQUEST_COUNT, from}, callback}) {\n    // console.log('handlePeersRequest');\n\n    const ids = this.channels.closest(hexToUint8Array(from), count)\n      .map(({id}) => arrayBufferToHex(id));\n    callback({ids});\n  }\n\n  handlePeersResponse(res) {\n    // console.log('handlePeersResponse', res.ids);\n\n    res.ids\n      .map(id => hexToUint8Array(id))\n      .filter(id => this.channels.get(id) == null && !arrayEqual(id, this.id))\n      .forEach(id => this.channels.add(new Channel(id)));\n  }\n\n  send(to, type, data={}, callback=null) {\n    if (typeof data === 'function') {\n      callback = data;\n      data = {};\n    }\n\n    const id = arrayBufferToHex(randomBytes(16));\n    this.seenIds.set(id, true);\n\n    if (callback != null) {\n      this.callbacks.set(id, callback);\n    }\n\n    const message = JSON.stringify({\n      id,\n      type,\n      from: arrayBufferToHex(this.id),\n      to: arrayBufferToHex(to),\n      hops: 0,\n      ...data,\n    });\n\n    // console.log('formatMessage', message);\n\n    this.sendRaw(to, message);\n  }\n\n  sendRaw(to, message) {\n    let closest = this.channels.closest(to)\n      .filter(({conn}) => conn != null)\n      .slice(0, SEND_REPLICAS);\n\n    const knownRoute = this.knownRoutes.get(arrayBufferToHex(to));\n    if (knownRoute) {\n      const channel = this.channels.get(knownRoute);\n      if (channel != null && channel.conn != null) {\n        closest.push(channel);\n      }\n    }\n\n    if (closest.length === 0) {\n      // console.warn(`closest value to ${arrayBufferToHex(to)} does not exist, dropping`, message);\n      return;\n    }\n\n    if (arrayEqual(closest[0].id, to)) {\n      closest = closest.slice(0, 1);\n    }\n    // console.log('send', closest.map(({id}) => arrayBufferToHex(id)), message);\n    // console.log(closest.length, closest.filter(({conn}) => !!conn).length, message);\n    closest.forEach(({conn}) => conn.send(message));\n  }\n}\n\nexport class Channel {\n  constructor(id, conn) {\n    this.id = id;\n    this.vectorClock = Date.now();\n    this.conn = conn;\n\n    // console.log('channel', this);\n  }\n}\n\nexport class SubChannel {\n  constructor(client, peerId, id=arrayBufferToHex(randomBytes(16))) {\n    // console.log('subchannel created', id);\n    this.client = client;\n    this.peerId = peerId;\n    this.id = id;\n    this.readyState = SubChannel.ReadyStates.OPEN;\n    this.onmessage = () => {};\n\n    this.handleMessage = this.handleMessage.bind(this);\n    this.client.on('receive.subchannel.message', this.handleMessage);\n  }\n\n  handleMessage({data: {channelId, data}}) {\n    // console.log('receive.subchannel.message', channelId, this.id, data);\n\n    if (channelId === this.id) {\n      this.onmessage({data});\n    }\n  }\n\n  send(data) {\n    this.client.send(\n      this.peerId,\n      'subchannel.message',\n      {\n        channelId: this.id,\n        data: data,\n      },\n    );\n  }\n\n  close() {\n    this.readyState = SubChannel.ReadyStates.CLOSED;\n    this.client.removeListener('receive.subchannel.message', this.handleMessage);\n  }\n}\n\nSubChannel.ReadyStates = {\n  OPEN: 1,\n  CLOSED: 3,\n};\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport createRandomId from './utils/createRandomId';\n\nexport class Server {\n  constructor() {\n    this.dhtClient = new dht.Client(createRandomId());\n    this.ppsppClient = new ppspp.Client();\n  }\n}\n\nexport class ConnManager {\n  constructor(server) {\n    this.server = server;\n  }\n\n  bootstrap() {\n    const id = createRandomId();\n\n    const data = {\n      type: 'bootstrap',\n      bootstrapId: arrayBufferToHex(this.server.dhtClient.id),\n      id: arrayBufferToHex(id),\n    };\n    const conn = new Conn();\n    const client = this.createClient(conn);\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.server.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.server.ppsppClient.createChannel(channel);\n      }\n    });\n\n    return Promise.resolve({data, conn: conn.remote});\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    mediator.on('connection', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Conn extends EventEmitter {\n  constructor(remote) {\n    super();\n    this.remote = remote || new Conn(this);\n    this.remote.remote = this;\n    this.onmessage = () => {};\n  }\n\n  send(data) {\n    setImmediate(() => {\n      this.remote.emit('message', {data});\n      this.remote.onmessage({data});\n    });\n  }\n\n  addEventListener(...args) {\n    this.on(...args);\n  }\n\n  removeEventListener(...args) {\n    this.removeListener(...args);\n  }\n\n  // TODO: this should do something...?\n  close() {}\n}\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case 'connection':\n        this.handleConnection(data);\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  handleConnection({id}) {\n    const datachannels = Mediator.datachannels[id];\n    delete Mediator.datachannels[id];\n\n    Object.entries(datachannels).forEach(([label, channel]) => this.emit('datachannel', label, channel));\n    this.emit('open');\n  }\n\n  sendConnection(datachannels) {\n    const id = Mediator.nextId ++;\n    Mediator.datachannels[id] = datachannels;\n\n    this.conn.send(JSON.stringify({\n      type: 'connection',\n      id,\n    }));\n\n    this.emit('open');\n  }\n}\n\nMediator.nextId = 0;\nMediator.datachannels = {};\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.datachannels = {};\n\n    mediator.on('datachannel', this.handleDataChannel.bind(this));\n    mediator.once('open', this.handleOpen.bind(this));\n  }\n\n  handleDataChannel(label, conn) {\n    this.emit('datachannel', {label, channel: new ClientDataChannel(this, label, conn)});\n  }\n\n  handleOpen() {\n    setImmediate(() => this.emit('open'));\n  }\n\n  createDataChannel(label) {\n    this.datachannels[label] = new ClientDataChannel(this, label);\n    return this.datachannels[label];\n  }\n\n  init() {\n    this.mediator.sendConnection(this.datachannels);\n  }\n}\n\nexport class ClientDataChannel extends Conn {\n  constructor(client, label, remote) {\n    super(remote);\n\n    this.client = client;\n    this.label = label;\n\n    this.client.on('open', () => this.emit('open'));\n  }\n}\n","import {EventEmitter} from 'events';\nimport Injector from './ppspp/injector';\n\nconst DELIMITER = Buffer.from('4c93bf00ae13c37e5df3b7a9cea0413521fe1b08a627d065d7180b9d0738c666', 'hex');\nconst DELIMITER_LENGTH = DELIMITER.length;\nconst HEADER_INSTANCE_LENGTH = 37;\n\nexport class ChunkedWriteStream extends EventEmitter {\n  constructor(injector) {\n    super();\n    this.injector = injector;\n  }\n\n  write(buffer) {\n    const length = Buffer.alloc(4);\n    length.writeUInt32BE(buffer.length);\n    this.injector.appendData(Buffer.concat(\n      [\n        DELIMITER,\n        Buffer.from([0]),\n        length,\n        DELIMITER,\n        Buffer.from([1]),\n        length,\n      ],\n      HEADER_INSTANCE_LENGTH * 2,\n    ));\n\n    this.injector.appendData(buffer);\n  }\n}\n\nexport class ChunkedWriteStreamInjector extends EventEmitter {\n  start() {\n    const data = Buffer.alloc(3500000 / 8);\n    data.fill(255);\n\n    Injector.create().then(injector => {\n      this.injector = injector;\n\n      const writer = new ChunkedWriteStream(injector);\n      this.intervalId = setInterval(() => writer.write(data), 1000);\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n\nclass AbstractChunkedReadStream extends EventEmitter {\n  constructor(swarm) {\n    super();\n\n    this.swarm = swarm;\n\n    this.handleWarmupSwarmData = this.handleWarmupSwarmData.bind(this);\n    this.handleSwarmData = this.handleSwarmData.bind(this);\n\n    this.chunkBufferLength = 0;\n    this.nextDataOffset = 0;\n    this.nextDataLength = 0;\n\n    this.swarm.on('data', this.handleWarmupSwarmData);\n  }\n\n  handleWarmupSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const delimiterIndex = data[i].indexOf(DELIMITER);\n      if (delimiterIndex === -1 || delimiterIndex + HEADER_INSTANCE_LENGTH > data[i].length) {\n        continue;\n      }\n\n      this.swarm.removeListener('data', this.handleWarmupSwarmData);\n      this.swarm.on('data', this.handleSwarmData);\n\n      this.readHeader(data[i], delimiterIndex);\n      this.handleSwarmData(data.slice(i));\n\n      break;\n    }\n  }\n\n  readHeader(data, offset) {\n    const instance = data.readUInt8(offset + DELIMITER_LENGTH);\n    this.nextDataOffset = offset + HEADER_INSTANCE_LENGTH * (2 - instance);\n    this.nextDataLength = data.readUInt32BE(offset + DELIMITER_LENGTH + 1);\n  }\n\n  handleSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const lastChunkOffset = this.chunkBufferLength;\n\n      this.chunkBufferLength += data[i].length;\n\n      const nextDataEnd = this.nextDataOffset + this.nextDataLength;\n      if (this.chunkBufferLength < nextDataEnd) {\n        this.handleData(data[i], lastChunkOffset);\n        continue;\n      }\n\n      const lastChunkEnd = nextDataEnd - lastChunkOffset;\n      this.handleEndData(data[i], lastChunkEnd);\n\n      // find the next header or defer to handleWarmupSwarmData if it hasn't arrived\n      if (this.chunkBufferLength - nextDataEnd <= HEADER_INSTANCE_LENGTH) {\n        this.swarm.removeListener('data', this.handleSwarmData);\n        this.swarm.on('data', this.handleWarmupSwarmData);\n\n        this.chunkBufferLength = 0;\n        this.handleWarmupSwarmData(data.slice(i));\n        return;\n      }\n\n      this.chunkBufferLength = 0;\n      this.readHeader(data[i], lastChunkEnd);\n      i--;\n    }\n  }\n}\n\nexport class ChunkedFragmentedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.firstEmitted = false;\n  }\n\n  handleData(data, lastChunkOffset) {\n    if (!this.firstEmitted) {\n      if (this.chunkBufferLength > this.nextDataOffset) {\n        this.emit('start', data.slice(this.nextDataOffset - lastChunkOffset));\n        this.firstEmitted = true;\n      }\n\n      return;\n    }\n\n    this.emit('data', data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.emit('end', data.slice(0, lastChunkEnd));\n    this.firstEmitted = false;\n  }\n}\n\nexport class ChunkedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.chunkBuffer = [];\n  }\n\n  handleData(data) {\n    this.chunkBuffer.push(data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.chunkBuffer.push(data);\n\n    // trim export data range and emit\n    const chunkSlice = this.chunkBuffer.slice();\n\n    chunkSlice[chunkSlice.length - 1] = chunkSlice[chunkSlice.length - 1].slice(0, lastChunkEnd);\n\n    let firstChunkStart = this.nextDataOffset;\n    if (firstChunkStart > chunkSlice[0].length) {\n      firstChunkStart -= chunkSlice[0].length;\n      chunkSlice.shift();\n    }\n    chunkSlice[0] = chunkSlice[0].slice(firstChunkStart);\n\n    this.emit(\n      'data',\n      {\n        chunks: chunkSlice,\n        length: this.nextDataLength,\n      },\n    );\n\n    this.chunkBuffer = [];\n  }\n}\n","import URLSafeBase64 from 'urlsafe-base64';\nimport SwarmId from './swarmid';\nimport {ProtocolOptions} from './constants';\n\nconst protocolOptionToKey = {\n  [ProtocolOptions.ContentIntegrityProtectionMethod]: 'x.im',\n  [ProtocolOptions.MerkleHashTreeFunction]: 'x.hf',\n  [ProtocolOptions.LiveSignatureAlgorithm]: 'x.sa',\n  [ProtocolOptions.ChunkAddressingMethod]: 'x.am',\n  [ProtocolOptions.ChunkSize]: 'x.cs',\n};\n\n// TODO: dn with stream name\n// TODO: as to m3u8 url?\nexport default class URI {\n  constructor(swarmId, protocolOptions) {\n    this.swarmId = swarmId;\n    this.protocolOptions = protocolOptions;\n  }\n\n  toString() {\n    const swarmId = URLSafeBase64.encode(this.swarmId.toBuffer());\n    const protocolOptions = Object.entries(this.protocolOptions)\n      .map(([protocolOption, value]) => `${protocolOptionToKey[protocolOption]}=${value}`)\n      .join('&');\n    return `magnet:?xt=urn:ppspp:${swarmId}&${protocolOptions}`;\n  }\n\n  static parse(uriString) {\n    if (!uriString.startsWith('magnet:')) {\n      throw new Error('invalid uri: expected magnet');\n    }\n\n    const args = uriString.substring(8)\n      .split('&')\n      .map(query => {\n        const [key, value] = query.split('=');\n        return [key, decodeURIComponent(value)];\n      });\n\n    const protocolOptions = Object.entries(protocolOptionToKey)\n      .reduce((protocolOptions, [protocolOption, key]) => {\n        const arg = args.find(([argKey]) => argKey === key);\n        if (arg === undefined) {\n          throw new Error(`invalid uri: missing ${key}`);\n        }\n        return {...protocolOptions, [protocolOption]: parseFloat(arg[1])};\n      }, {});\n\n    const xt = args.find(([key, value]) => key === 'xt' && value.startsWith('urn:ppspp:'));\n    if (xt === undefined) {\n      throw new Error('invalid uri: missing suitable xt');\n    }\n    const swarmId = SwarmId.from(URLSafeBase64.decode(xt[1].substring(10)));\n\n    return new URI(swarmId, protocolOptions);\n  }\n}\n"],"sourceRoot":""}