{"version":3,"sources":["pubsub.js","utils/createRandomId.js","App.js","SwarmPlayer.js","ppspp/constants.js","wrtc.js","compat/ws/index.js","ppspp/address.js","hexToUint8Array.js","compat/crypto/index.js","compat/crypto/node.js","compat/crypto/browser.js","chunkedStream.js","compat/ws/node.js","compat/ws/browser.js","compat/wrtc/node.js","compat/wrtc/browser.js","DiagnosticMenu/index.js","ppspp/integrity.js","Test.js","DhtGraph.js","Router.js","index.js","loopback.js","ppspp/swarmid.js","client.js","ema.js","RingBuffer.js","ledbat.js","ppspp/encoding.js","bitarray.js","wfq.js","ppspp/scheduler.js","ppspp/index.js","ppspp/uri.js","dht.js","ppspp/injector.js","binSearch.js","PlayButton.js","compat/wrtc/index.js"],"names":["Topic","injectorResult","_ref","arguments","length","undefined","_ref$minFlushIvl","minFlushIvl","_ref$maxFlushIvl","maxFlushIvl","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","this","lastFlushTime","flushTimeout","writerResult","then","injector","ChunkedWriteStream","flush","debounce","maxWait","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__","key","value","event","json","Buffer","from","JSON","stringify","writer","write","PubSubConsumer","EventEmitter","_EventEmitter2","swarm","_this3","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","ChunkedReadStream","on","handleData","bind","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__","_ref2","chunks","data","concat","emit","parse","crypto__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","crypto__WEBPACK_IMPORTED_MODULE_0___default","n","createRandomId","id","Uint8Array","crypto","randomFillSync","usePubSubSwarm","client","name","_useState3","useState","_useState4","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","setSwarm","_useState5","_useState6","consumer","setConsumer","useEffect","setImmediate","uri","bootstrap","swarms","find","desc","ppsppClient","joinSwarm","URI","leaveSwarm","NoiseLogger","_ref3","console","log","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_DiagnosticMenu__WEBPACK_IMPORTED_MODULE_4__","PubSubLogger","_ref4","indexSwarm","message","Fragment","containerClass","ChatMessages","_ref5","items","messages","map","_ref6","time","className","title","moment","format","reverse","Chat","_ref7","_useChatSwarm","_usePubSubSwarm","_useState7","_useState8","setMessages","handleMessage","prev","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","slice","e","removeListener","dhtClient","send","hexToUint8Array","bootstrapId","useChatSwarm","_useChatSwarm2","sendMessage","_useState9","_useState10","setMessage","useRef","onSubmit","preventDefault","type","placeholder","onChange","target","App","_ref8","queryString","location","params","match","_ref8$clientTimeoutMs","clientTimeoutMs","query","search","useMemo","qs","ignoreQueryPrefix","autoPlay","bootstrapAddress","proto","window","protocol","host","getDefaultBootstrapAddress","swarmName","clientTimeout","useTimeout","_useAsync","useAsync","Client","create","ConnManager","clientLoading","loading","clientError","error","_useSwarm","_useState","_useState2","useSwarm","_useSwarm2","swarmDesc","Component","application/octet-stream","application/json","video/mpeg-ts","SwarmPlayer","contentType","index","chat","_PlayButton__WEBPACK_IMPORTED_MODULE_10__","disabled","onClick","pulse","flicker","blur","_useVideo","ref","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","loaded","setLoaded","playing","setPlaying","paused","setPaused","ended","setEnded","_useState11","_useState12","waiting","setWaiting","_useState13","_useState14","muted","setMuted","_useState15","_useState16","volume","setVolume","_useState17","_useState18","readyState","setReadyState","current","addEventListener","Date","toUTCString","play","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","wrap","_context","next","t0","t1","warn","stop","apply","onEnded","onPause","onPlaying","onCanPlay","onCanPlayThrough","onVolumeChange","onWaiting","onDurationChange","onLoadedMetadata","onLoadedData","useVideo","_useVideo2","videoState","videoProps","videoControls","mediaSource","MediaSource","handleSourceOpen","sourceBuffer","addSourceBuffer","videoSegments","appendBuffer","newSegment","updating","segment","shift","unshift","push","transmuxer","muxjs","mp4","Transmuxer","initSet","buf","initSegment","stream","ChunkedFragmentedReadStream","useSwarmMediaSource","src","URL","createObjectURL","playButton","react__WEBPACK_IMPORTED_MODULE_3___default","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_9__","icon","faSyncAlt","_PlayButton__WEBPACK_IMPORTED_MODULE_8__","visible","spin","_DiagnosticMenu__WEBPACK_IMPORTED_MODULE_6__","assign","d","__webpack_exports__","MaxChannelId","ProtocolOptions","Version","ContentIntegrityProtectionMethod","MerkleHashTreeFunction","LiveSignatureAlgorithm","ChunkAddressingMethod","MessageTypes","lodash_invert__WEBPACK_IMPORTED_MODULE_0__","lodash_invert__WEBPACK_IMPORTED_MODULE_0___default","MinimumVersion","SwarmIdentifier","LiveDiscardWindow","SupportedMessages","ChunkSize","EndOption","RFC7574","None","MerkleHashTree","SignAll","UnifiedMerkleTree","SHA1","SHA224","SHA256","SHA384","SHA512","RSASHA1","RSASHA256","ECDSAP256SHA256","ECDSAP384SHA384","Bin32","ByteRange64","ChunkRange32","Bin64","ChunkRange64","HANDSHAKE","DATA","ACK","HAVE","INTEGRITY","PEX_RESv4","PEX_REQ","SIGNED_INTEGRITY","REQUEST","CANCEL","CHOKE","UNCHOKE","PEX_RESv6","PEX_REScert","forEach","enumType","names","invert","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__","_this","Promise","resolve","reject","conn","WebSocket","onerror","onmessage","Error","mediator","Mediator","once","close","_EventEmitter","_this2","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","RTCSessionDescription","sdp","candidate","RTCIceCandidate","initialized","waitingChannels","peerConn","RTCPeerConnection","iceServers","urls","sendIceCandidate","handleDataChannel","handleIceConnectionStateChange","addIceCandidate","_ready","description","setRemoteDescription","createAnswer","catch","_this4","setLocalDescription","sendAnswer","_this5","channel","binaryType","resolveWaitingChannel","label","options","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","ordered","maxRetransmits","createDataChannel","iceConnectionState","_this6","createOffer","offer","sendOffer","module","exports","require","Address","bin","treeBounds","binBounds","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_treeBounds","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","start","end","address","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0__","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0___default","v","hexToArrayBuffer","r","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0__","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0___default","WebCrypto","DELIMITER","DELIMITER_LENGTH","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","buffer","alloc","writeUInt32BE","appendData","HEADER_INSTANCE_LENGTH","ChunkedWriteStreamInjector","_ref$name","_ref$bitRate","bitRate","injectorOptions","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","fill","Injector","intervalId","setInterval","done","clearInterval","setTimeout","AbstractChunkedReadStream","handleWarmupSwarmData","handleSwarmData","chunkBufferLength","nextDataOffset","nextDataLength","nextChunkOffset","i","delimiterIndex","indexOf","readHeader","offset","instance","readUInt8","readUInt32BE","lastChunkOffset","nextDataEnd","lastChunkEnd","handleEndData","_AbstractChunkedReadS","firstEmitted","_AbstractChunkedReadS2","chunkBuffer","chunkSlice","firstChunkStart","ws__WEBPACK_IMPORTED_MODULE_0__","ws__WEBPACK_IMPORTED_MODULE_0___default","ws","wrtc__WEBPACK_IMPORTED_MODULE_0__","ToggleButton","buttonClasses","classNames","diagnostic_menu__toggle_button","diagnostic_menu__toggle_button--expanded","props","expanded","react__WEBPACK_IMPORTED_MODULE_6___default","defaultProps","formatNumber","isFinite","approx","String","SwarmState","scheduler","rows","totalSends","totalRequests","totalRequestsReceived","totalDroppedRequests","totalReceived","totalAdded","totalCancelled","ackUnknownSend","lastCompletedBin","loadedChunks","min","requestedChunks","chunkRate","PeerStateTable","peerState","chunkIntervalMean","wasteRate","ledbat","baseDelay","getMin","currentDelay","rttMean","rttVar","cwnd","cto","flightSize","validChunks","requestQueue","_this$props","startBin","endBin","colSpan","AvailabilityMapChart","availableChunks","sentChunks","receivedChunks","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","canvas","React","createRef","scratchCanvas","document","isNaN","max","height","width","ctx","getContext","scale","scaleLinear","domain","range","fillStyle","fillRect","lastStart","values","get","drawImage","PeerState","handleButtonClick","setState","state","table","peer","localId","remoteId","DiagnosticMenu","scheduleUpdate","handleUpdate","forceUpdate","requestAnimationFrame","swarmState","peerStates","containerClasses","diagnostic_menu__container","diagnostic_menu__container--expanded","_this$props$swarm$sch","liveDiscardWindow","entries","toUint8Array","MerkleHashTreeFunctionAlgorithms","_MerkleHashTreeFuncti","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_10__","MerkleHashTreeFunctionByteLengths","_MerkleHashTreeFuncti2","createMerkleHashTreeFunction","merkleHashTreeFunction","algorithm","nullHash","_len","Array","_key","every","arrayEqual","subtle","digest","LiveSignatureAlgorithms","_LiveSignatureAlgorit","modulusLength","publicExponent","hash","namedCurve","createLiveSignatureSignFunction","liveSignatureAlgorithm","privateKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_9__","importResult","importKey","sign","createLiveSignatureVerifyFunction","swarmId","getKeyParams","publicKey","signature","verify","generateKeyPair","generateKey","keyPair","all","exportKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_8__","SwarmId","unavailableLiveSignatureSignFunction","createContentIntegrityVerifierFactory","contentIntegrityProtectionMethod","liveSignatureVerifyFunction","liveSignatureSignFunction","Infinity","Signature","verified","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__","SignedSignature","verificationResult","getHash","markVerified","verifyHash","compare","rootAddress","signatures","getChunkCount","contains","MerkleHashTreeVerifier","hashTree","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default","getConstituentHashBins","bfsIndex","stride","parent","branch","containsBin","isRoot","siblingBin","siblingBfsIndex","Math","floor","minSize","size","hashes","siblings","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__","rootHashSignature","pow","ceil","log2","hashResult","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","siblingSignature","verifiedSignature","siblingHash","_iterator","Symbol","iterator","err","return","UnifiedMerkleHashTree","subtrees","nextStart","chunkCount","binSearch","_this5$subtrees$i$roo","subtree","storedSubtree","findSubtree","copy","sort","b","pruneSubtrees","removedTree","treeSize","nextAddress","insertSubtree","MerkleHashSubtreeVerifier","getConstituentSignatures","_MerkleHashTreeVerifi","unifiedHashTree","_this7","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__","prototype","NoneVerifier","NoneVerifierFactory","Server","server","slicedToArray","setSwarms","swarmUri","setSwarmUri","publishSwarm","unpublishSwarm","diagnosticMenus","react_default","toConsumableArray","color","scaleOrdinal","schemeCategory10","reduceGraph","graph","objectWithoutProperties","nodes","links","filter","node","source","objectSpread","activity","link","_useGraph","servers","setServers","gen","setGen","_useReducer","useReducer","_useReducer2","dispatchGraphAction","arrayBufferToHex","addNodes","clients","newServers","clientsResult","firstIndex","serverIndex","random","allChannels","toArray","isOpen","oldChannel","newChannel","deleteNodes","keys","useGraph","_useGraph2","_useGraph2$","handleNodeClick","setSource","sendPing","useNodePinger","react_force_graph_3d_module","graphData","nodeAutoColorBy","onNodeClick","linkColor","linkWidth","nodeRelSize","nodeVal","count","Router","HashRouter","Switch","Route","exact","path","component","Test","DhtGraph","Redirect","to","ReactDOM","render","src_Router","getElementById","queue","dht","ppspp","Conn","open","createClient","createChannel","remote","ReadyStates","CONNECTING","OPEN","CLOSING","CLOSED","removeAllListeners","handleConnection","datachannels","nextId","_EventEmitter3","conns","handleOpen","ClientDataChannel","sendConnection","closed","_Conn","_this8","isRsaAlgorithm","includes","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","metadataLength","byteLength","writeUInt8","ArrayBuffer","isView","read","connManager","dhtClientId","handlePeersDiscover","handleReceiveConnectRequest","init","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","sub","dhtChannel","ppsppChannel","timeout","channelId","clearTimeout","_ref$data","callback","EMA","alpha","classCallCheck","mean","weight","RingBuffer","capacity","setCapacity","lastIndex","createEmptyValue","firstEmptyIndex","advanceLastIndex","set","DelayBuffer","possibleConstructorReturn","getPrototypeOf","delay","now","TARGET","CURRENT_HISTORY","CURRENT_HISTORY_INTERVAL","BASE_HISTORY","BASE_HISTORY_INTERVAL","INIT_CWND","MSS","COEF_ALPHA","COEF_BETA","LEDBAT","mss","lastDataLoss","lastAckTime","ackSize","bytes","delaySample","update","checkCTO","queuingDelay","abs","offTarget","maxAllowedCwnd","rtt","isEmpty","retransmitting","timestamp","createChunkAddressFieldType","addressingMethod","chunkSize","Bin32ChunkAddress","createClass","_Address$binBounds","_Address$binBounds2","ChunkRange32ChunkAddress","createBufferFieldType","BufferField","createLiveSignatureFieldType","getLiveSignatureByteLength","_createBufferFieldTyp","LiveSignatureField","inherits","createIntegrityHashFieldType","_createBufferFieldTyp2","IntegrityHashField","createEncoding","ChunkAddress","IntegrityHash","LiveSignature","_protocolOptionRecord","_messageRecordTypes","Uint8ProtocolOption","Uint32ProtocolOption","VersionProtocolOption","_Uint8ProtocolOption","version","MinimumVersionProtocolOption","_Uint8ProtocolOption2","SwarmIdentifierProtocolOption","readUInt16BE","writeUInt16BE","ContentIntegrityProtectionMethodProtocolOption","_Uint8ProtocolOption3","method","MerkleHashTreeFunctionProtocolOption","_Uint8ProtocolOption4","LiveSignatureAlgorithmProtocolOption","_Uint8ProtocolOption5","ChunkAddressingMethodProtocolOption","_Uint8ProtocolOption6","LiveDiscardWindowProtocolOption","_Uint32ProtocolOption","_this9","SupportedMessagesProtocolOption","_this10","messageTypes","byte","j","Boolean","bitmapByteLength","bitmap","toBitmap","ChunkSizeProtocolOption","_Uint32ProtocolOption2","_this11","protocolOptionRecordTypes","defineProperty","HandshakeMessage","code","option","RecordType","reduce","Timestamp","seconds","readInt32BE","nanoseconds","writeInt32BE","DataMessage","dataLength","rangeByteLength","AddressMessage","AckMessage","HaveMessage","_AddressMessage","_this12","IntegrityMessage","SignedIntegrityMessage","RequestMessage","_AddressMessage2","_this13","CancelMessage","_AddressMessage3","_this14","EmptyMessage","ChokeMessage","_EmptyMessage","_this15","UnchokeMessage","_EmptyMessage2","_this16","messageRecordTypes","Messages","messageType","isArray","Datagram","datagram","createMask","bits","mask","applyMask","BitArray","resize","distance","unsafelySetRange","byteIndex","bitIndex","byteOffset","adjustOffset","startByteIndex","getByteIndex","endByteIndex","startBitIndex","getBitIndex","endBitIndex","unsafelySetIndexRange","startMask","endMask","setRange","firstBit","lastBit","Flow","lastVirtualFinish","nextVirtualFinish","wfq","Queue","rate","totalQueueSize","flows","flow","splice","computeWeight","virtualFinish","minVirtualFinish","getNextScheduledFlow","task","AvailabilityMap","_ref$end","BinRingBuffer","_RingBuffer","esm_get","RateMeter","windowMs","sampleWindowMs","firstSampleWindow","lastSampleWindow","sum","sampleWindow","adjustSampleWindow","accumulatedMs","ChunkRateMeter","_RateMeter","lastEndBin","lastHeadBin","RequestFlow","_wfq$Flow","queueSize","RequestQueue","_wfq$Queue","remove","result","SchedulerChunkRequestMap","valueByBin","head","tail","createdAt","_ref9","SchedulerPeerState","requestFlow","lastChunkTime","requestTimes","sentRequests","timeouts","invalidChunks","Scheduler","clientOptions","uploadRateLimit","peerCount","timers","lastExportedBin","priorityBinThreshold","sendDelay","nextSendTime","nextSendTimeout","isReady","firstLoadedChunk","firstRequestedChunk","lastAvailableBin","planFor","dip","peer_remoteId","peer_localId","swift_rtt","swift_rttvar","swift_chunkIntervalMean","swift_cwnd","ledbat_cwnd","ledbat_cto","ledbat_currentDelay","ledbat_baseDelay","ledbat_rttMean","ledbat_rttVar","ledbat_rtt","ledbat_flightSize","picker_startBin","picker_lastAvailableBin","minIncompleteBin","picker_firstLoadedChunk","picker_firstRequestedChunk","timeoutThreshold","cancelledRequests","peek","pop","_ref10","onDataLoss","digestDelaySamples","_peerState$peer","requestAddresses","insert","firstRequestedBin","_ref11","sendCancel","sendRequest","requestedAddress","requestedChunk","sentAt","addSent","sendChunk","sendInterval","addFlow","_ref12","removeFlow","_ref13","bins","getPeerState","chunkInterval","requestTime","addRttSample","_ref14","sendHave","nextExportedBin","_ref15","addDelaySample","sentChunk","genericEncoding","Swarm","_uri$protocolOptions","protocolOptions","chunkAddressingMethod","encoding","contentIntegrity","toBuffer","protocolOption","protocolOptionName","newBins","getNewCompleteBins","_newBins","minNewBin","maxNewBin","chunk","AWAITING_HANDSHAKE","READY","CHOKED","DISCONNECTING","PeerDataHandlerContext","integrityVerifier","createVerifier","Peer","_this$handlers","createChannelId","handlers","handleHandshakeMessage","handleDataMessage","handleHaveMessage","handleAckMessage","handleIntegrityMessage","handleSignedIntegrityMessage","handleRequestMessage","handleCancelMessage","handleChokeMessage","handleUnchokeMessage","sendBuffer","addPeer","sendHandshake","removePeer","context","handler","handshake","setLiveDiscardWindow","verifyProtocolOptions","getRecentChunks","computeOneWayDelay","markChunkReceived","getContentIntegrityVerifier","verifyChunk","markChunkVerified","emitNewData","markChunkRejected","markChunkAvailable","markSendAcked","setHash","setHashSignature","enqueueRequest","cancelRequest","addresses","_len2","_key2","constituentSignatures","getSignatureHash","round","SwarmSet","setMaxListeners","swarmIdToKey","toString","channels","Channel","peers","handleSwarmInsert","getOrCreatePeer","assertThisInitialized","liveSwarms","handleClose","p","createPeer","destroyPeer","handleRemove","isInitialized","removedSwarm","protocolOptionToKey","_protocolOptionToKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__","URLSafeBase64","encode","join","uriString","startsWith","args","substring","split","_query$split","_query$split2","decodeURIComponent","arg","parseFloat","xt","decode","NUMBER_OF_NODES_PER_BUCKET","KBucket","numberOfNodesPerKBucket","localNodeId","handlePing","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleRemoved","handleUpdated","handleAdded","knownPeerIds","channelMap","seenIds","LRU","knownRoutes","maxAge","callbacks","handlePeersRequest","handlePingRequest","handleTraceRequest","handleCallbackResponse","startPeerRequests","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","stopPeerRequests","peerRequestIvl","ids","retry","sendPeerRequest","addChannel","getChannel","removeChannel","add","idHex","bufferMessages","removeEventListener","req","lastActive","_req","trace","res","re","forwardMessage","hops","sendRaw","reqCallback","handlePeersResponse","_ref5$data","_ref5$data$count","fromId","closest","randomBytes","knownRoute","vectorClock","lastPing","idx","_","SubChannel","peerId","_ref11$data","chunksPerSignature","inputBuffer","inputBufferSize","outputResult","signatureSize","outputChunks","appendSubtree","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_4__","markChunksLoaded","_options$chunkSize","_options$chunksPerSig","_options$liveDiscardW","_options$chunkAddress","_options$contentInteg","_options$merkleHashTr","_options$liveSignatur","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__","comparator","left","right","mid","order","PlayButton","_ref$spin","_ref$flicker","_ref$pulse","_ref$disabled","_ref$visible","_ref$blur","_ref$error","_ref$onClick","_ref$idleTimeout","idleTimeout","currentVisibility","setCurrentVisibility","_useHover","useHover","_useHover2","hovering","hoverEventHandlers","mouseIdle","setMouseIdle","useDebounce","hidden","hoverClasses","play_button_wrap","play_button","clickable","exiting","react__WEBPACK_IMPORTED_MODULE_1___default","xmlns","viewBox","cx","cy","points","transform"],"mappings":"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","file":"static/js/main.0a78fe26.chunk.js","sourcesContent":["import PpsppInjector from './ppspp/injector';\nimport {EventEmitter} from 'events';\nimport {ChunkedWriteStream, ChunkedReadStream} from './chunkedStream';\nimport debounce from 'lodash.debounce';\n\nexport class Topic {\n  constructor(\n    injectorResult,\n    {\n      minFlushIvl = 20,\n      maxFlushIvl = 200,\n    } = {},\n  ) {\n    this.injectorResult = injectorResult;\n    this.minFlushIvl = minFlushIvl;\n    this.maxFlushIvl = maxFlushIvl;\n\n    this.lastFlushTime = 0;\n    this.flushTimeout = null;\n\n    this.writerResult = injectorResult.then(injector => new ChunkedWriteStream(injector));\n\n    this.flush = debounce(\n      () => injectorResult.then(injector => injector.flush()),\n      minFlushIvl,\n      {maxWait: maxFlushIvl},\n    );\n  }\n\n  publish(event) {\n    const json = Buffer.from(JSON.stringify(event), 'utf8');\n    this.writerResult.then(writer => writer.write(json));\n    this.flush();\n  }\n}\n\nexport class Injector extends EventEmitter {\n  constructor() {\n    super();\n    this.topics = {};\n  }\n\n  handleConnect(req, res) {\n    console.log('handleConnect', req.body);\n    res.status(200).send('');\n  }\n\n  handlePlay(req, res) {\n    console.log('handlePlay', req.body);\n  }\n\n  createTopic(name) {\n    if (this.topics[name] !== undefined) {\n      throw new Error('topic already exists');\n    }\n    console.log('creating topic', name);\n\n    const injectorResult = PpsppInjector.create({\n      chunkSize: 256,\n      chunksPerSignature: 1,\n    });\n\n    injectorResult.then(injector => this.emit('publish', {\n      name,\n      contentType: 'application/json',\n      injector,\n    }));\n\n    return this.topics[name] = new Topic(injectorResult);\n  }\n\n  destroyTopic(name) {\n    const topic = this.topics[name];\n    if (topic === undefined) {\n      throw new Error('topic does not exists');\n    }\n    console.log('destroying topic', name);\n\n    this.emit('unpublish', {name, injector: topic.injector});\n    delete this.topics[name];\n  }\n}\n\nexport class PubSubConsumer extends EventEmitter {\n  constructor(swarm) {\n    super();\n\n    const stream = new ChunkedReadStream(swarm);\n    stream.on('data', this.handleData.bind(this));\n  }\n\n  handleData({chunks}) {\n    const data = chunks.length === 1 ? chunks[0] : Buffer.concat(chunks);\n    this.emit('message', JSON.parse(data));\n  }\n}\n","import crypto from 'crypto';\n\nconst createRandomId = () => {\n  const id = new Uint8Array(16);\n  crypto.randomFillSync(id);\n  return id;\n};\n\nexport default createRandomId;\n","import React, {useEffect, useState, useMemo, useRef} from 'react';\nimport URI from './ppspp/uri';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport SwarmPlayer from './SwarmPlayer';\nimport {ChunkedReadStream} from './chunkedStream';\nimport {Client} from './client';\nimport {ConnManager} from './wrtc';\nimport {PubSubConsumer} from './pubsub';\nimport PlayButton from './PlayButton';\nimport qs from 'qs';\nimport {useTimeout, useAsync} from 'react-use';\nimport hexToUint8Array from './hexToUint8Array';\nimport moment from 'moment';\n\nimport './App.scss';\n\nconst getDefaultBootstrapAddress = () => {\n  const proto = window.location.protocol === 'https:' ? 'wss' : 'ws';\n  const host = process.env.NODE_ENV === 'development'\n    ? window.location.hostname + ':8080'\n    : window.location.host;\n  return `${proto}://${host}`;\n};\n\nconst useSwarm = ({ppsppClient} = {}) => {\n  const [swarm, setSwarm] = useState(null);\n  const join = uri => setSwarm(ppsppClient.joinSwarm(URI.parse(uri)));\n  return [swarm, join];\n};\n\nconst usePubSubSwarm = (client, name) => {\n  const [swarm, setSwarm] = useState(null);\n  const [consumer, setConsumer] = useState(null);\n\n  useEffect(() => {\n    if (client) {\n      setImmediate(() => {\n        const {uri} = client.bootstrap.swarms.find(desc => desc.name === name);\n        const swarm = client.ppsppClient.joinSwarm(URI.parse(uri));\n        const consumer = new PubSubConsumer(swarm);\n\n        setSwarm(swarm);\n        setConsumer(consumer);\n\n        return () => client.ppsppClient.leaveSwarm(URI.parse(uri));\n      });\n    }\n  }, [client]);\n\n  return [consumer, swarm];\n};\n\nconst useIndexSwarm = client => usePubSubSwarm(client, 'index');\n\nconst useQuery = queryString => useMemo(() => {\n  return qs.parse(queryString, {ignoreQueryPrefix: true}) || {};\n}, [queryString]);\n\nconst NoiseLogger = ({swarm}) => {\n  useEffect(() => {\n    if (swarm) {\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', ({length}) => console.log(`received ${length} bytes`));\n    }\n  }, [swarm]);\n\n  return <DiagnosticMenu swarm={swarm} />;\n};\n\nconst PubSubLogger = ({indexSwarm, swarm}) => {\n  useEffect(() => {\n    if (swarm) {\n      const consumer = new PubSubConsumer(swarm);\n      consumer.on('message', message => console.log(message));\n    }\n  }, [swarm]);\n\n  return (\n    <>\n      <DiagnosticMenu swarm={swarm} containerClass=\"diagnostic-menu--indent-1\" />\n      <DiagnosticMenu swarm={indexSwarm} />\n    </>\n  );\n};\n\nconst useChatSwarm = client => {\n  const [consumer] = usePubSubSwarm(client, 'chat');\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    if (consumer == null) {\n      return;\n    }\n\n    const handleMessage = message => setMessages(prev => ([\n      ...prev.slice(prev.length > 100 ? 1 : 0),\n      message,\n    ]));\n\n    consumer.on('message', e => console.log(e));\n    consumer.on('message', handleMessage);\n    return () => consumer.removeListener('message', handleMessage);\n  }, [consumer]);\n\n  const sendMessage = message => {\n    if (client.dhtClient) {\n      client.dhtClient.send(\n        hexToUint8Array(client.bootstrap.bootstrapId),\n        'chat.message',\n        {message},\n      );\n    }\n  };\n\n  return [messages, sendMessage];\n};\n\nconst ChatMessages = ({messages}) => {\n  const items = messages.map(({time, message, id}) => (\n    <li className=\"message\" key={id}>\n      <span className=\"timestamp\" title={time}>{moment(time).format('HH:mm:ss')}</span>\n      <span className=\"text\">{message}</span>\n    </li>\n  )).reverse();\n\n  return (\n    <ul className=\"messages\">\n      {items}\n    </ul>\n  );\n};\n\nconst Chat = ({client}) => {\n  const [messages, sendMessage] = useChatSwarm(client);\n  const [message, setMessage] = useState('');\n  const input = useRef();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    sendMessage(message);\n    setMessage('');\n  };\n\n  const handleChange = e => {\n    setMessage(e.target.value);\n  };\n\n  return (\n    <div className=\"chat\">\n      <form className=\"compose-form\" onSubmit={handleSubmit}>\n        <input\n          className=\"message-input\"\n          type=\"text\"\n          placeholder=\"write a message...\"\n          onChange={handleChange}\n          value={message}\n        />\n        <button className=\"send-button\">Send</button>\n      </form>\n      <ChatMessages messages={messages} />\n    </div>\n  );\n};\n\nconst App = ({\n  location,\n  match: {params},\n  clientTimeoutMs = 5000,\n}) => {\n  const query = useQuery(location.search);\n  const autoPlay = 'autoplay' in query;\n  const bootstrapAddress = query.bootstrap || getDefaultBootstrapAddress();\n  const swarmName = params.name;\n\n  const clientTimeout = useTimeout(clientTimeoutMs);\n  const {\n    loading: clientLoading,\n    error: clientError,\n    value: client,\n  } = useAsync(() =>  Client.create(new ConnManager(bootstrapAddress)), []);\n\n  const index = null;\n  const indexSwarm = null;\n  // const [index, indexSwarm] = useIndexSwarm(client);\n  const [swarm, joinSwarm] = useSwarm(client);\n\n  const swarmDesc = client?.bootstrap.swarms.find(desc => desc.name === swarmName);\n  const error = clientError || (autoPlay && clientTimeout) || !(clientLoading || swarmDesc);\n\n  useEffect(() => {\n    if (autoPlay && swarmDesc) {\n      setImmediate(() => joinSwarm(swarmDesc.uri));\n    }\n  }, [autoPlay, swarmDesc]);\n\n  if (swarm) {\n    const Component = {\n      'application/octet-stream': NoiseLogger,\n      'application/json': PubSubLogger,\n      'video/mpeg-ts': SwarmPlayer,\n    }[swarmDesc.contentType];\n\n    return (\n      <Component\n        swarm={swarm}\n        index={index}\n        indexSwarm={indexSwarm}\n      />\n    );\n  }\n\n  const indexSwarmDiagnosticMenu = indexSwarm && <DiagnosticMenu swarm={indexSwarm} />;\n  const chat = 'chat' in query && <Chat client={client} />;\n\n  return (\n    <>\n      {chat}\n      {indexSwarmDiagnosticMenu}\n      <div className=\"idle\">\n        <div className=\"noise\"></div>\n      </div>\n      <PlayButton\n        disabled={clientLoading || autoPlay || error}\n        onClick={() => joinSwarm(swarmDesc.uri)}\n        pulse={!clientLoading && !autoPlay}\n        flicker={clientLoading || autoPlay}\n        error={error}\n        blur\n      />\n    </>\n  );\n};\n\nexport default App;\n","import React, {useRef, useEffect, useState} from 'react';\nimport muxjs from 'mux.js';\nimport {ChunkedFragmentedReadStream} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport {Buffer} from 'buffer';\nimport PlayButton from './PlayButton';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faSyncAlt} from '@fortawesome/free-solid-svg-icons';\n\nimport './SwarmPlayer.scss';\n\nconst useSwarmMediaSource = swarm => {\n  const [mediaSource] = useState(() => {\n    const mediaSource = new MediaSource();\n    mediaSource.addEventListener('sourceopen', handleSourceOpen);\n    return mediaSource;\n  }, []);\n\n  function handleSourceOpen() {\n    const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"mp4a.40.5,avc1.64001F\"');\n    // sourceBuffer.addEventListener('updatestart', e => console.log(e));\n    // sourceBuffer.addEventListener('updateend', e => console.log(e));\n    sourceBuffer.addEventListener('error', e => console.log(e));\n\n    const videoSegments = [];\n    const appendBuffer = newSegment => {\n      if (newSegment !== undefined && (videoSegments.length !== 0 || sourceBuffer.updating)) {\n        videoSegments.push(newSegment);\n        return;\n      }\n\n      if (sourceBuffer.updating) {\n        return;\n      }\n\n      const segment = newSegment || videoSegments.shift();\n      if (segment === undefined) {\n        return;\n      }\n\n      try {\n        sourceBuffer.appendBuffer(segment);\n      } catch (e) {\n        videoSegments.unshift(segment);\n        setImmediate(appendBuffer);\n      }\n    };\n\n    sourceBuffer.addEventListener('updateend', () => appendBuffer());\n\n    const transmuxer = new muxjs.mp4.Transmuxer();\n    let initSet = false;\n    transmuxer.on('data', event => {\n      if (event.type === 'combined') {\n        const buf = initSet\n          ? event.data\n          : Buffer.concat([Buffer.from(event.initSegment), Buffer.from(event.data)]);\n        initSet = true;\n\n        appendBuffer(buf);\n      } else {\n        console.log('unhandled event', event.type);\n      }\n    });\n\n    const stream = new ChunkedFragmentedReadStream(swarm);\n    stream.on('start', data => transmuxer.push(data));\n    stream.on('data', data => transmuxer.push(data));\n    stream.on('end', data => {\n      transmuxer.push(data);\n      transmuxer.flush();\n    });\n  }\n\n  return mediaSource;\n};\n\nexport const VideoReadyState = {\n  // No information is available about the media resource.\n  HAVE_NOTHING: 0,\n  // Enough of the media resource has been retrieved that the metadata attributes\n  // are initialized. Seeking will no longer raise an exception.\n  HAVE_METADATA: 1,\n  // Data is available for the current playback position, but not enough to\n  // actually play more than one frame.\n  HAVE_CURRENT_DATA: 2,\n  // Data for the current playback position as well as for at least a little\n  // bit of time into the future is available (in other words, at least two frames of video, for example).\n  HAVE_FUTURE_DATA: 3,\n  // Enough data is available—and the download rate is high enough—that the\n  // media can be played through to the end without interruption.\n  HAVE_ENOUGH_DATA: 4,\n};\n\nconst useVideo = () => {\n  const ref = useRef();\n  const [loaded, setLoaded] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [paused, setPaused] = useState(false);\n  const [ended, setEnded] = useState(true);\n  const [waiting, setWaiting] = useState(true);\n  const [muted, setMuted] = useState(null);\n  const [volume, setVolume] = useState(null);\n  const [readyState, setReadyState] = useState(0);\n\n  useEffect(() => {\n    if (ref.current == null) {\n      return;\n    }\n\n    setMuted(ref.current.muted);\n    setVolume(ref.current.volume);\n    setPaused(ref.current.paused);\n    setReadyState(ref.current.readyState);\n\n    ref.current.addEventListener('audioprocess', e => console.log(new Date().toUTCString(), 'audioprocess', e));\n    ref.current.addEventListener('canplay', e => console.log(new Date().toUTCString(), 'canplay', e));\n    ref.current.addEventListener('canplaythrough', e => console.log(new Date().toUTCString(), 'canplaythrough', e));\n    ref.current.addEventListener('complete', e => console.log(new Date().toUTCString(), 'complete', e));\n    ref.current.addEventListener('durationchange', e => console.log(new Date().toUTCString(), 'durationchange', e));\n    ref.current.addEventListener('emptied', e => console.log(new Date().toUTCString(), 'emptied', e));\n    ref.current.addEventListener('ended', e => console.log(new Date().toUTCString(), 'ended', e));\n    ref.current.addEventListener('loadeddata', e => console.log(new Date().toUTCString(), 'loadeddata', e));\n    ref.current.addEventListener('loadedmetadata', e => console.log(new Date().toUTCString(), 'loadedmetadata', e));\n    ref.current.addEventListener('pause', e => console.log(new Date().toUTCString(), 'pause', e));\n    ref.current.addEventListener('play', e => console.log(new Date().toUTCString(), 'play', e));\n    ref.current.addEventListener('playing', e => console.log(new Date().toUTCString(), 'playing', e));\n    ref.current.addEventListener('ratechange', e => console.log(new Date().toUTCString(), 'ratechange', e));\n    ref.current.addEventListener('seeked', e => console.log(new Date().toUTCString(), 'seeked', e));\n    ref.current.addEventListener('seeking', e => console.log(new Date().toUTCString(), 'seeking', e));\n    ref.current.addEventListener('stalled', e => console.log(new Date().toUTCString(), 'stalled', e));\n    ref.current.addEventListener('suspend', e => console.log(new Date().toUTCString(), 'suspend', e));\n    // ref.current.addEventListener('timeupdate', e => console.log(new Date().toUTCString(), 'timeupdate', e));\n    ref.current.addEventListener('volumechange', e => console.log(new Date().toUTCString(), 'volumechange', e));\n    ref.current.addEventListener('waiting', e => console.log(new Date().toUTCString(), 'waiting', e));\n    ref.current.addEventListener('readystatechange', e => console.log(new Date().toUTCString(), 'readystatechange', e));\n  }, [ref]);\n\n  const onEnded = () => {\n    setPlaying(false);\n    setEnded(false);\n    setWaiting(false);\n  };\n\n  const onPause = () => {\n    setPlaying(false);\n    setPaused(true);\n  };\n\n  const onPlaying = () => {\n    setPaused(false);\n    setPlaying(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onCanPlay = () => {\n    setWaiting(false);\n    setLoaded(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onCanPlayThrough = () => {\n    setWaiting(false);\n    setLoaded(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onVolumeChange = () => {\n    setVolume(ref.current.volume);\n  };\n\n  const onWaiting = () => {\n    setPlaying(false);\n    setWaiting(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onDurationChange = () => {\n    setReadyState(ref.current.readyState);\n  };\n\n  const onLoadedMetadata = (e) => {\n    setReadyState(ref.current.readyState);\n  };\n\n  const onLoadedData = () => {\n    setReadyState(ref.current.readyState);\n  };\n\n  // const onTimeUpdate = () => {\n  //   console.log({\n  //     buffered: ref.current.buffered,\n  //     seekable: ref.current.seekable,\n  //   });\n  // };\n\n  const play = async () => {\n    try {\n      await ref.current.play();\n    } catch (e) {\n      ref.current.muted = true;\n      try {\n        await ref.current.play();\n      } catch (e) {\n        console.warn('error playing video', e);\n      }\n    }\n  };\n\n  return [\n    {\n      readyState,\n      loaded,\n      playing,\n      paused,\n      ended,\n      waiting,\n      muted,\n      volume,\n    },\n    {\n      ref,\n      onEnded,\n      onPause,\n      onPlaying,\n      onCanPlay,\n      onCanPlayThrough,\n      onVolumeChange,\n      onWaiting,\n      onDurationChange,\n      onLoadedMetadata,\n      onLoadedData,\n      // onTimeUpdate,\n    },\n    {\n      play,\n    },\n  ];\n};\n\nconst SwarmPlayer = ({swarm, indexSwarm}) =>{\n  const [videoState, videoProps, videoControls] = useVideo();\n  const mediaSource = useSwarmMediaSource(swarm);\n\n  useEffect(() => {\n    if (videoProps.ref.current != null && mediaSource != null) {\n      videoProps.ref.current.src = URL.createObjectURL(mediaSource);\n      videoControls.play();\n    }\n  }, [videoProps.ref, mediaSource]);\n\n  console.log(videoState);\n\n  const playButton = (videoState.waiting && videoState.loaded) ? (\n    <div className=\"swarm_player__waiting_spinner\">\n      <FontAwesomeIcon icon={faSyncAlt} />\n    </div>\n  ) : (\n    <PlayButton\n      visible={!videoState.playing}\n      onClick={videoControls.play}\n      flicker={videoState.ended && !videoState.loaded}\n      spin={videoState.waiting && videoState.loaded}\n      disabled={videoState.waiting || !videoState.loaded}\n      blur={true}\n    />\n  );\n\n  return (\n    <React.Fragment>\n      {/* <DiagnosticMenu swarm={indexSwarm} containerClass=\"diagnostic-menu--indent-1\" /> */}\n      <DiagnosticMenu swarm={swarm} />\n      <video\n        onClick={e => e.preventDefault()}\n        className=\"swarm_player__video\"\n        {...videoProps}\n      />\n      {playButton}\n    </React.Fragment>\n  );\n};\n\nexport default SwarmPlayer;\n","import invert from 'lodash.invert';\n\nexport const MaxChannelId = 0xffffffff;\n\nexport const ProtocolOptions = {\n  Version: 0,\n  MinimumVersion: 1,\n  SwarmIdentifier: 2,\n  ContentIntegrityProtectionMethod: 3,\n  MerkleHashTreeFunction: 4,\n  LiveSignatureAlgorithm: 5,\n  ChunkAddressingMethod: 6,\n  LiveDiscardWindow: 7,\n  SupportedMessages: 8,\n  ChunkSize: 9,\n  EndOption: 255,\n};\n\nexport const Version = {\n  RFC7574: 1,\n};\n\nexport const ContentIntegrityProtectionMethod = {\n  None: 0,\n  MerkleHashTree: 1,\n  SignAll: 2,\n  UnifiedMerkleTree: 3,\n};\n\nexport const MerkleHashTreeFunction = {\n  SHA1: 0,\n  SHA224: 1,\n  SHA256: 2,\n  SHA384: 3,\n  SHA512: 4,\n};\n\nexport const LiveSignatureAlgorithm = {\n  RSASHA1: 5,\n  RSASHA256: 8,\n  ECDSAP256SHA256: 13,\n  ECDSAP384SHA384: 14,\n};\n\nexport const ChunkAddressingMethod = {\n  Bin32: 0,\n  ByteRange64: 1,\n  ChunkRange32: 2,\n  Bin64: 3,\n  ChunkRange64: 4,\n};\n\nexport const VariableChunkSize = 0xffffffff;\n\nexport const MessageTypes = {\n  HANDSHAKE: 0,\n  DATA: 1,\n  ACK: 2,\n  HAVE: 3,\n  INTEGRITY: 4,\n  PEX_RESv4: 5,\n  PEX_REQ: 6,\n  SIGNED_INTEGRITY: 7,\n  REQUEST: 8,\n  CANCEL: 9,\n  CHOKE: 10,\n  UNCHOKE: 11,\n  PEX_RESv6: 12,\n  PEX_REScert: 13,\n};\n\n[\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n].forEach(enumType => {\n  const names = invert(enumType);\n  enumType.name = value => names[value] || 'UNDEFINED';\n});\n","import {EventEmitter} from 'events';\nimport WebSocket from './compat/ws';\nimport {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from './compat/wrtc';\n\nexport class ConnManager {\n  constructor(bootstrapAddress) {\n    this.bootstrapAddress = bootstrapAddress;\n  }\n\n  bootstrap() {\n    return new Promise((resolve, reject) => {\n      const conn = new WebSocket(this.bootstrapAddress);\n      conn.onerror = reject;\n      conn.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'bootstrap') {\n          resolve({data, conn});\n        } else {\n          reject(new Error(`expected bootstrap, received: ${event.data}`));\n        }\n      };\n    });\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    // firefox seems to continue generating ice messages after the datachannel\n    // has opened...\n    mediator.once('error', () => conn.close());\n    client.once('open', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    // console.log('mediator message', data);\n\n    switch (data.type) {\n      case 'offer':\n      case 'answer':\n        this.emit('remotedescription', new RTCSessionDescription(data));\n        break;\n      case 'icecandidate':\n        if (data.sdp && data.sdp.candidate) {\n          this.emit('icecandidate', new RTCIceCandidate(data.sdp));\n        }\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  sendOffer(event) {\n    this.send(event);\n  }\n\n  sendAnswer(event) {\n    this.send(event);\n  }\n\n  sendIceCandidate(event) {\n    if (event.candidate) {\n      this.send({\n        type: 'icecandidate',\n        sdp: event.candidate,\n      });\n    }\n  }\n\n  send(event) {\n    if (this.conn.readyState !== 1) {\n      console.log('mediator tried to send after closing its connection');\n      // console.log('send error', this.conn);\n      // console.trace();\n      // this.emit('error', new Error('connection in invalid state'));\n      return;\n    }\n\n    this.conn.send(JSON.stringify(event));\n  }\n}\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.initialized = false;\n    this.waitingChannels = 0;\n\n    this.peerConn = new RTCPeerConnection({\n      iceServers: [{urls: 'stun:stun.l.google.com:19302'}],\n    });\n\n    this.peerConn.addEventListener('icecandidate', candidate => this.mediator.sendIceCandidate(candidate));\n    this.peerConn.addEventListener('datachannel', this.handleDataChannel.bind(this));\n    this.peerConn.addEventListener('iceconnectionstatechange', this.handleIceConnectionStateChange.bind(this));\n\n    mediator.once('error', () => this.peerConn.close());\n    mediator.on('icecandidate', candidate => this.addIceCandidate(candidate));\n\n    this._ready = new Promise((resolve, reject) => {\n      mediator.on('remotedescription', description => {\n        this.peerConn.setRemoteDescription(description)\n          .then(() => {\n            resolve();\n            this.createAnswer();\n          })\n          .catch(reject);\n      });\n    });\n  }\n\n  createAnswer() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n\n    this.peerConn.createAnswer()\n      .then((description) => {\n        this.peerConn.setLocalDescription(description);\n        this.mediator.sendAnswer(description);\n      })\n      .catch(error => console.error(error));\n  }\n\n  addIceCandidate(candidate) {\n    this._ready.then(() => this.peerConn.addIceCandidate(candidate));\n  }\n\n  handleDataChannel(event) {\n    // event.channel.addEventListener('close', e => console.log('< begin close event handlers'));\n    event.channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    event.channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('< received data channel', event);\n    // event.channel.addEventListener('error', e => console.log('< data channel emitted error', e));\n    // event.channel.addEventListener('open', e => console.log('< data channel opened', e));\n    // event.channel.addEventListener('bufferedamountlow', e => console.log('< data channel bufferamountlow', e));\n    // event.channel.addEventListener('close', e => console.log('< data channel closed', e));\n\n    this.emit('datachannel', event);\n  }\n\n  createDataChannel(label, options = {}) {\n    options = {\n      ordered: true,\n      maxRetransmits: 10,\n      ...options,\n    };\n\n    const channel = this.peerConn.createDataChannel(label, options);\n    // channel.addEventListener('close', e => console.log('> begin close event handlers'));\n    channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('> received data channel', {channel});\n    // channel.addEventListener('error', e => console.log('> data channel emitted error', e));\n    // channel.addEventListener('open', e => console.log('> data channel opened', e));\n    // channel.addEventListener('bufferedamountlow', e => console.log('> data channel bufferedamountlow', e));\n    // channel.addEventListener('close', e => console.log('> data channel closed', e));\n\n    return channel;\n  }\n\n  resolveWaitingChannel() {\n    if (-- this.waitingChannels === 0) {\n      this.emit('open');\n    }\n  }\n\n  handleIceConnectionStateChange() {\n    // this seems to be the most reliable way to get connection state in chrome\n    if (this.peerConn.iceConnectionState === 'failed') {\n      this.peerConn.close();\n    }\n  }\n\n  init() {\n    this.peerConn.createOffer()\n      .then(offer => {\n        this.initialized = true;\n        // console.log('initial offer', offer);\n        this.peerConn.setLocalDescription(offer);\n        this.mediator.sendOffer(offer);\n      });\n  }\n\n  close() {\n    // console.log('wrtc client closed');\n    // console.trace();\n    this.peerConn.close();\n    this.emit('close');\n  }\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","import {ChunkAddressingMethod} from './constants';\n\nexport default class Address {\n  constructor(bin = 0, treeBounds = Address.binBounds(bin)) {\n    this.bin = bin;\n    [this.start, this.end] = treeBounds;\n  }\n\n  containsBin(bin) {\n    return this.start <= bin && bin <= this.end;\n  }\n\n  getChunkCount() {\n    return (this.end - this.start) / 2 + 1;\n  }\n\n  static from(address) {\n    if (address instanceof Address) {\n      return address;\n    }\n\n    switch (address.type) {\n      case ChunkAddressingMethod.Bin32:\n        return new Address(address.value);\n      case ChunkAddressingMethod.ChunkRange32: {\n        const {start, end} = address;\n        return new Address((end - start) / 2, [start, end]);\n      }\n      default:\n        throw new Error('unsupported address type');\n    }\n  }\n\n  static binBounds(bin) {\n    return [\n      bin & (bin + 1),\n      (bin | (bin + 1)) - 1,\n    ];\n  }\n}\n","import hexToArrayBuffer from 'hex-to-array-buffer';\n\nexport default function hexToUint8Array(v) {\n  return new Uint8Array(hexToArrayBuffer(v));\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","import WebCrypto from 'node-webcrypto-ossl';\n\nmodule.exports = new WebCrypto();\n","module.exports = crypto;\n","import {EventEmitter} from 'events';\nimport Injector from './ppspp/injector';\n\nconst DELIMITER = Buffer.from('4c93bf00ae13c37e5df3b7a9cea0413521fe1b08a627d065d7180b9d0738c666', 'hex');\nconst DELIMITER_LENGTH = DELIMITER.length;\nconst HEADER_INSTANCE_LENGTH = 37;\n\nexport class ChunkedWriteStream extends EventEmitter {\n  constructor(injector) {\n    super();\n    this.injector = injector;\n  }\n\n  write(buffer) {\n    const length = Buffer.alloc(4);\n    length.writeUInt32BE(buffer.length);\n    this.injector.appendData(Buffer.concat(\n      [\n        DELIMITER,\n        Buffer.from([0]),\n        length,\n        DELIMITER,\n        Buffer.from([1]),\n        length,\n      ],\n      HEADER_INSTANCE_LENGTH * 2,\n    ));\n\n    this.injector.appendData(buffer);\n  }\n\n  flush() {\n    this.injector.flush();\n  }\n}\n\nexport class ChunkedWriteStreamInjector extends EventEmitter {\n  start({\n    name = 'chunked-stream',\n    bitRate = 3500000,\n    ...injectorOptions\n  } = {}) {\n    this.name = name;\n\n    const data = Buffer.alloc(bitRate / 8);\n    data.fill(255);\n\n    Injector.create(injectorOptions).then(injector => {\n      this.injector = injector;\n\n      const writer = new ChunkedWriteStream(injector);\n      this.intervalId = setInterval(() => writer.write(data), 1000);\n      this.emit('publish', {\n        name,\n        contentType: 'application/octet-stream',\n        injector,\n      });\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', {name: this.name, injector: this.injector});\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n\nclass AbstractChunkedReadStream extends EventEmitter {\n  constructor(swarm) {\n    super();\n\n    this.swarm = swarm;\n\n    this.handleWarmupSwarmData = this.handleWarmupSwarmData.bind(this);\n    this.handleSwarmData = this.handleSwarmData.bind(this);\n\n    this.chunkBufferLength = 0;\n    this.nextDataOffset = 0;\n    this.nextDataLength = 0;\n\n    this.swarm.on('data', this.handleWarmupSwarmData);\n  }\n\n  handleWarmupSwarmData(data, offset = 0) {\n    let nextChunkOffset = offset;\n\n    for (let i = 0; i < data.length; i ++) {\n      const delimiterIndex = data[i].indexOf(DELIMITER, nextChunkOffset);\n      nextChunkOffset = 0;\n      if (delimiterIndex === -1 || delimiterIndex + HEADER_INSTANCE_LENGTH > data[i].length) {\n        continue;\n      }\n\n      this.swarm.removeListener('data', this.handleWarmupSwarmData);\n      this.swarm.on('data', this.handleSwarmData);\n\n      this.readHeader(data[i], delimiterIndex);\n      this.handleSwarmData(data.slice(i));\n\n      break;\n    }\n  }\n\n  readHeader(data, offset) {\n    const instance = data.readUInt8(offset + DELIMITER_LENGTH);\n    this.nextDataOffset = offset + HEADER_INSTANCE_LENGTH * (2 - instance);\n    this.nextDataLength = data.readUInt32BE(offset + DELIMITER_LENGTH + 1);\n  }\n\n  handleSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const lastChunkOffset = this.chunkBufferLength;\n\n      this.chunkBufferLength += data[i].length;\n\n      const nextDataEnd = this.nextDataOffset + this.nextDataLength;\n      if (this.chunkBufferLength < nextDataEnd) {\n        this.handleData(data[i], lastChunkOffset);\n        continue;\n      }\n\n      const lastChunkEnd = nextDataEnd - lastChunkOffset;\n      this.handleEndData(data[i], lastChunkEnd);\n\n      // find the next header or defer to handleWarmupSwarmData if it hasn't arrived\n      if (this.chunkBufferLength - nextDataEnd <= HEADER_INSTANCE_LENGTH) {\n        this.swarm.removeListener('data', this.handleSwarmData);\n        this.swarm.on('data', this.handleWarmupSwarmData);\n\n        this.chunkBufferLength = 0;\n        this.handleWarmupSwarmData(data.slice(i), lastChunkEnd);\n        return;\n      }\n\n      this.chunkBufferLength = 0;\n      this.readHeader(data[i], lastChunkEnd);\n      i--;\n    }\n  }\n}\n\nexport class ChunkedFragmentedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.firstEmitted = false;\n  }\n\n  handleData(data, lastChunkOffset) {\n    if (!this.firstEmitted) {\n      if (this.chunkBufferLength > this.nextDataOffset) {\n        this.emit('start', data.slice(this.nextDataOffset - lastChunkOffset));\n        this.firstEmitted = true;\n      }\n\n      return;\n    }\n\n    this.emit('data', data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.emit('end', data.slice(0, lastChunkEnd));\n    this.firstEmitted = false;\n  }\n}\n\nexport class ChunkedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.chunkBuffer = [];\n  }\n\n  handleData(data) {\n    this.chunkBuffer.push(data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.chunkBuffer.push(data);\n\n    // trim export data range and emit\n    const chunkSlice = this.chunkBuffer.slice();\n\n    chunkSlice[chunkSlice.length - 1] = chunkSlice[chunkSlice.length - 1].slice(0, lastChunkEnd);\n\n    let firstChunkStart = this.nextDataOffset;\n    if (firstChunkStart >= chunkSlice[0].length) {\n      firstChunkStart -= chunkSlice[0].length;\n      chunkSlice.shift();\n    }\n    chunkSlice[0] = chunkSlice[0].slice(firstChunkStart);\n\n    this.emit(\n      'data',\n      {\n        chunks: chunkSlice,\n        length: this.nextDataLength,\n      },\n    );\n\n    this.chunkBuffer = [];\n  }\n}\n","import ws from 'ws';\n\nexport default ws;\n","module.exports = WebSocket;\n","import {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from 'wrtc';\n\nmodule.exports = {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n};\n","module.exports = {\n  RTCPeerConnection: window.RTCPeerConnection,\n  RTCSessionDescription: window.RTCSessionDescription,\n  RTCIceCandidate: window.RTCIceCandidate,\n};\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport approx from 'approximate-number';\nimport {scaleLinear} from 'd3-scale';\n\nimport './index.css';\n\nclass ToggleButton extends Component {\n  static defaultProps = {\n    expanded: false,\n  };\n\n  render() {\n    const buttonClasses = classNames({\n      'diagnostic_menu__toggle_button': true,\n      'diagnostic_menu__toggle_button--expanded': this.props.expanded,\n    });\n\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={buttonClasses}\n      />\n    );\n  }\n}\n\nconst formatNumber = value => isFinite(value) ? approx(value) : String(value);\n\n// TODO: total downloaded\n// TODO: total discarded\n// TODO: upload/download rate\nclass SwarmState extends Component {\n  render() {\n    const {scheduler} = this.props.value;\n\n    const values = [\n      {\n        key: 'totalSends',\n        value: formatNumber(scheduler.totalSends),\n      },\n      {\n        key: 'totalRequests',\n        value: formatNumber(scheduler.totalRequests),\n      },\n      {\n        key: 'totalRequestsReceived',\n        value: formatNumber(scheduler.totalRequestsReceived),\n      },\n      {\n        key: 'totalDroppedRequests',\n        value: formatNumber(scheduler.totalDroppedRequests),\n      },\n      {\n        key: 'totalReceived',\n        value: formatNumber(scheduler.totalReceived),\n      },\n      {\n        key: 'totalAdded',\n        value: formatNumber(scheduler.totalAdded),\n      },\n      {\n        key: 'totalCancelled',\n        value: formatNumber(scheduler.totalCancelled),\n      },\n      {\n        key: 'ackUnknownSend',\n        value: formatNumber(scheduler.ackUnknownSend),\n      },\n      {\n        key: 'lastCompletedBin',\n        value: scheduler.lastCompletedBin,\n      },\n      {\n        key: 'picker.firstLoadedChunk',\n        value: scheduler.loadedChunks.min(),\n      },\n      {\n        key: 'picker.firstRequestedChunk',\n        value: scheduler.requestedChunks.min(),\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(scheduler.chunkRate.value() * 1000) + '/s',\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    return (\n      <div className=\"swarm_state__container\">\n        <table>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass PeerStateTable extends Component {\n  render() {\n    const peerState = this.props.value;\n\n    const values = [\n      {\n        key: 'chunkIntervalMean',\n        value: formatNumber(peerState.chunkIntervalMean.value()),\n      },\n      {\n        key: 'wasteRate',\n        value: formatNumber(peerState.wasteRate.value() * 1000) + '/s',\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(peerState.chunkRate.value() * 1000) + '/s',\n      },\n      {\n        key: 'ledbat.baseDelay',\n        value: formatNumber(peerState.ledbat.baseDelay.getMin()),\n      },\n      {\n        key: 'ledbat.currentDelay',\n        value: formatNumber(peerState.ledbat.currentDelay.getMin()),\n      },\n      {\n        key: 'ledbat.rttMean',\n        value: formatNumber(peerState.ledbat.rttMean.value()),\n      },\n      {\n        key: 'ledbat.rttVar',\n        value: formatNumber(peerState.ledbat.rttVar.value()),\n      },\n      {\n        key: 'ledbat.cwnd',\n        value: formatNumber(peerState.ledbat.cwnd),\n      },\n      {\n        key: 'ledbat.cto',\n        value: formatNumber(peerState.ledbat.cto),\n      },\n      {\n        key: 'ledbat.flightSize',\n        value: formatNumber(peerState.ledbat.flightSize),\n      },\n      {\n        key: 'validChunks',\n        value: formatNumber(peerState.validChunks),\n      },\n      {\n        key: 'requestQueue.length',\n        value: formatNumber(peerState.requestQueue.length),\n      },\n      {\n        key: 'requestedChunks.length',\n        value: formatNumber(peerState.requestedChunks.length),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    const {\n      startBin,\n      endBin,\n    } = this.props;\n\n    rows.push(\n      <tr key=\"availableChunks\">\n        <td colSpan=\"2\">\n          Available\n          <AvailabilityMapChart\n            value={this.props.value.availableChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"sentChunks\">\n        <td colSpan=\"2\">\n          Sent\n          <AvailabilityMapChart\n            value={this.props.value.sentChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"receivedChunks\">\n        <td colSpan=\"2\">\n          Received\n          <AvailabilityMapChart\n            value={this.props.value.receivedChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    return (\n      <table>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nclass AvailabilityMapChart extends Component {\n  static defaultProps = {\n    width: 300,\n    height: 20,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.canvas = React.createRef();\n    this.scratchCanvas = document.createElement('canvas');\n  }\n\n  componentDidUpdate() {\n    if (!this.canvas.current) {\n      return;\n    }\n\n    const {value} = this.props;\n    const min = isNaN(this.props.startBin)\n      ? value.min()\n      : this.props.startBin;\n    const max = isNaN(this.props.endBin)\n      ? value.max()\n      : this.props.endBin;\n\n    if (!isFinite(min) || !isFinite(max) || isNaN(min) || isNaN(max)) {\n      return;\n    }\n\n    this.scratchCanvas.height = this.props.height;\n    this.scratchCanvas.width = this.props.width;\n\n    const ctx = this.scratchCanvas.getContext('2d');\n\n    const scale = scaleLinear()\n      .domain([min, max])\n      .range([0, this.props.width]);\n\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, this.props.width, this.props.height);\n\n    ctx.fillStyle = '#ccc';\n\n    let lastStart = -1;\n    for (let i = min; i <= max; i += 2) {\n      if (!value.values.get((i + 2) / 2) || i === max) {\n        if (lastStart !== -1) {\n          ctx.fillRect(scale(lastStart), 0, scale(i) - scale(lastStart), 20);\n\n          lastStart = -1;\n        }\n      } else if (lastStart === -1) {\n        lastStart = i;\n      }\n    }\n\n    this.canvas.current.getContext('2d').drawImage(this.scratchCanvas, 0, 0);\n  }\n\n  render() {\n    return (\n      <canvas\n        height={this.props.height}\n        width={this.props.width}\n        ref={this.canvas}\n      />\n    );\n  }\n}\n\nclass PeerState extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n  }\n\n  render() {\n    let table;\n    if (this.state.expanded) {\n      table = (\n        <PeerStateTable\n          value={this.props.value}\n          startBin={this.props.startBin}\n          endBin={this.props.endBin}\n        />\n      );\n    }\n\n    return (\n      <div className=\"peer_state__container\">\n        <div className=\"peer_state__header\">\n          <ToggleButton\n            onClick={this.handleButtonClick}\n            expanded={this.state.expanded}\n          />\n          <h4 className=\"peer_state__title\">\n            {this.props.value.peer.localId} : {this.props.value.peer.remoteId}\n          </h4>\n        </div>\n        {table}\n      </div>\n    );\n  }\n}\n\nclass DiagnosticMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n\n    this.scheduleUpdate();\n  }\n\n  handleUpdate = () => {\n    if (this.state.expanded) {\n      this.forceUpdate(this.scheduleUpdate);\n    }\n  }\n\n  scheduleUpdate = () => {\n    window.requestAnimationFrame(this.handleUpdate);\n  }\n\n  render() {\n    const containerClasses = classNames(\n      this.props.containerClass,\n      {\n        'diagnostic_menu__container': true,\n        'diagnostic_menu__container--expanded': this.state.expanded,\n      },\n    );\n\n    const {\n      lastCompletedBin,\n      liveDiscardWindow,\n    } = this.props.swarm.scheduler;\n    const startBin = lastCompletedBin - liveDiscardWindow;\n    const endBin = lastCompletedBin + liveDiscardWindow;\n\n    let swarmState;\n    let peerStates;\n    if (this.state.expanded) {\n      swarmState = (\n        <SwarmState\n          value={this.props.swarm}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      );\n\n      peerStates = Object.entries(this.props.swarm.scheduler.peerStates).map(([key, peerState]) => (\n        <PeerState\n          key={key}\n          value={peerState}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      ));\n    }\n\n    return (\n      <div className={containerClasses}>\n        <ToggleButton\n          onClick={this.handleButtonClick}\n          expanded={this.state.expanded}\n        />\n        {swarmState}\n        {peerStates}\n      </div>\n    );\n  }\n}\n\nexport default DiagnosticMenu;\n","import {Buffer} from 'buffer';\nimport arrayEqual from 'array-equal';\nimport binSearch from '../binSearch';\nimport Address from './address';\nimport SwarmId from './swarmid';\n\nimport {\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n} from './constants';\n\nconst crypto = require('../compat/crypto');\n\nconst toUint8Array = data => new Uint8Array(data);\n\nexport const MerkleHashTreeFunctionAlgorithms = {\n  [MerkleHashTreeFunction.SHA1]: 'SHA-1',\n  [MerkleHashTreeFunction.SHA224]: 'SHA-224',\n  [MerkleHashTreeFunction.SHA256]: 'SHA-256',\n  [MerkleHashTreeFunction.SHA384]: 'SHA-384',\n  [MerkleHashTreeFunction.SHA512]: 'SHA-512',\n};\n\nexport const MerkleHashTreeFunctionByteLengths = {\n  [MerkleHashTreeFunction.SHA1]: 20,\n  [MerkleHashTreeFunction.SHA224]: 28,\n  [MerkleHashTreeFunction.SHA256]: 32,\n  [MerkleHashTreeFunction.SHA384]: 48,\n  [MerkleHashTreeFunction.SHA512]: 64,\n};\n\nexport const createMerkleHashTreeFunction = (merkleHashTreeFunction) => {\n  const algorithm = MerkleHashTreeFunctionAlgorithms[merkleHashTreeFunction];\n  if (algorithm === undefined) {\n    throw new Error('invalid merkle hash tree function');\n  }\n\n  const nullHash = new Uint8Array(MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction]);\n\n  return (...values) => {\n    values = values.map(value => value === undefined ? nullHash : value);\n\n    if (values.every(value => arrayEqual(value, nullHash))) {\n      return Promise.resolve(nullHash);\n    }\n\n    if (values.length > 1) {\n      values = new Uint8Array(Buffer.concat(values.map(value => Buffer.from(value))));\n    } else {\n      values = values[0];\n    }\n\n    return crypto.subtle.digest(algorithm, values).then(toUint8Array);\n  };\n};\n\nexport const LiveSignatureAlgorithms = {\n  [LiveSignatureAlgorithm.RSASHA1]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-1'},\n  },\n  [LiveSignatureAlgorithm.RSASHA256]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP256SHA256]: {\n    name: 'ECDSA',\n    namedCurve: 'P-256',\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP384SHA384]: {\n    name: 'ECDSA',\n    namedCurve: 'P-384',\n    hash: {name: 'SHA-384'},\n  },\n};\n\nexport const createLiveSignatureSignFunction = (liveSignatureAlgorithm, privateKey, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  const importResult = crypto.subtle.importKey('pkcs8', privateKey, algorithm, false, ['sign']);\n\n  return data => importResult\n    .then(privateKey => crypto.subtle.sign(algorithm, privateKey, data))\n    .then(toUint8Array);\n};\n\nexport const createLiveSignatureVerifyFunction = (liveSignatureAlgorithm, swarmId, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...swarmId.getKeyParams(),\n    ...algorithm,\n  };\n\n  const publicKey = new Uint8Array(swarmId.publicKey);\n  const importResult = crypto.subtle.importKey('spki', publicKey, algorithm, false, ['verify']);\n\n  return (signature, data) => importResult\n    .then(publicKey => crypto.subtle.verify(algorithm, publicKey, signature, data))\n    .then(toUint8Array);\n};\n\nexport const generateKeyPair = (liveSignatureAlgorithm, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  return crypto.subtle.generateKey(algorithm, true, ['sign', 'verify'])\n    .then(keyPair => Promise.all([\n      crypto.subtle.exportKey('pkcs8', keyPair.privateKey),\n      crypto.subtle.exportKey('spki', keyPair.publicKey),\n    ]))\n    .then(([privateKey, publicKey]) => ({\n      privateKey,\n      publicKey,\n      swarmId: SwarmId.from({\n        ...algorithm,\n        liveSignatureAlgorithm,\n        publicKey,\n      }),\n    }));\n};\n\nconst unavailableLiveSignatureSignFunction = () => Promise.reject('live signature function not available');\n\nexport const createContentIntegrityVerifierFactory = (\n  contentIntegrityProtectionMethod,\n  merkleHashTreeFunction,\n  liveSignatureVerifyFunction,\n  liveSignatureSignFunction = unavailableLiveSignatureSignFunction,\n  liveDiscardWindow = Infinity,\n) => {\n  class Signature {\n    constructor(hash, verified = false) {\n      this.hash = hash;\n      this.verified = verified;\n    }\n\n    markVerified() {\n      this.verified = true;\n    }\n\n    getHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return !this.verified\n        ? Promise.reject('cannot use unverified signature')\n        : Promise.resolve(arrayEqual(this.hash, value));\n    }\n  }\n\n  // TODO: timestamp in hash?\n  class SignedSignature {\n    constructor(signature, hash) {\n      this.signature = signature;\n      this.hash = hash;\n      this.verificationResult = undefined;\n    }\n\n    verifyHash() {\n      if (this.verificationResult === undefined) {\n        this.verificationResult = liveSignatureVerifyFunction(this.hash, this.getHash())\n          .then(() => this.markVerified());\n      }\n      return this.verificationResult;\n    }\n\n    markVerified() {\n      this.signature.markVerified();\n    }\n\n    getHash() {\n      return this.signature.getHash();\n    }\n\n    getSignatureHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return this.verifyHash().then(() => this.signature.compare(value));\n    }\n  }\n\n  class MerkleHashTree {\n    constructor(rootAddress = new Address(0), signatures = new Array(rootAddress.getChunkCount() * 2 - 1)) {\n      this.rootAddress = rootAddress;\n      this.signatures = signatures;\n    }\n\n    createVerifier(address) {\n      if (address.contains(this.rootAddress)) {\n        const {signatures} = this;\n\n        this.rootAddress = address;\n        this.signatures = new Array(address.getChunkCount() * 2 - 1);\n\n        for (let i = 0; i < signatures.length; i ++) {\n          if (signatures[i] !== undefined) {\n            this.signatures[i] = signatures[i];\n          }\n        }\n      }\n\n      return new MerkleHashTreeVerifier(this);\n    }\n\n    copy(hashTree) {\n      for (let i = 0; i < this.signatures.length; i ++) {\n        if (hashTree.signatures[i] === undefined) {\n          hashTree.signatures[i] = this.signatures[i];\n        }\n      }\n    }\n\n    getChunkCount() {\n      return this.rootAddress.getChunkCount();\n    }\n\n    *getConstituentHashBins({bin}) {\n      if (!this.rootAddress.containsBin(bin)) {\n        throw new Error('bin out of range');\n      }\n\n      const {start} = this.rootAddress;\n      bin -= start;\n\n      let bfsIndex = this.rootAddress.getChunkCount() + bin / 2 - 1;\n      let stride = 2;\n      let parent = bin;\n\n      while (bfsIndex !== 0) {\n        const branch = (bfsIndex & 1) === 1 ? 1 : -1;\n\n        yield {\n          isRoot: false,\n          branch,\n          bin: parent + start,\n          bfsIndex,\n          siblingBin: parent + branch * stride + start,\n          siblingBfsIndex: bfsIndex + branch,\n        };\n\n        bfsIndex = Math.floor((bfsIndex - 1) / 2);\n        parent += branch * stride / 2;\n        stride *= 2;\n      }\n\n      yield {\n        isRoot: true,\n        branch: 0,\n        bin: parent + start,\n        bfsIndex: 0,\n        siblingBin: parent + start,\n        siblingBfsIndex: 0,\n      };\n    }\n\n    getConstituentSignatures(address) {\n      return Array.from(this.getConstituentHashBins(address)).map(({\n        siblingBin,\n        siblingBfsIndex,\n      }) => ({\n        bin: siblingBin,\n        signature: this.signatures[siblingBfsIndex],\n      }));\n    }\n\n    static from(values, rootAddress = new Address(MerkleHashTree.minSize(values.length) - 1)) {\n      const size = rootAddress.getChunkCount();\n      const hashes = new Array(size * 2 - 1);\n      for (let i = 0; i < size; i ++) {\n        hashes[i + size - 1] = merkleHashTreeFunction(values[i]);\n      }\n      for (let i = (size - 1) * 2; i > 0; i -= 2) {\n        hashes[Math.floor(i / 2) - 1] = Promise.all([hashes[i - 1], hashes[i]])\n          .then(siblings => merkleHashTreeFunction(...siblings));\n      }\n\n      return Promise.all(hashes).then(hashes => {\n        const signatures = hashes.map(hash => new Signature(hash, true));\n\n        return liveSignatureSignFunction(hashes[0]).then(rootHashSignature => {\n          signatures[0] = new SignedSignature(\n            signatures[0],\n            rootHashSignature,\n          );\n\n          return new MerkleHashTree(rootAddress, signatures);\n        });\n      });\n    }\n\n    static minSize(size) {\n      return Math.pow(2, Math.ceil(Math.log2(size)));\n    }\n  }\n\n  class MerkleHashTreeVerifier {\n    constructor(hashTree) {\n      this.hashTree = hashTree;\n      this.signatures = {};\n    }\n\n    setHash({bin}, hash) {\n      this.signatures[bin] = new Signature(hash);\n    }\n\n    setHashSignature({bin}, hash) {\n      this.signatures[bin] = new SignedSignature(this.signatures[bin], hash);\n    }\n\n    verifyChunk(address, value) {\n      const signatures = [];\n      let hashResult = merkleHashTreeFunction(value);\n\n      for (let bin of this.hashTree.getConstituentHashBins(address)) {\n        let siblingSignature = this.hashTree.signatures[bin.siblingBfsIndex];\n        if (siblingSignature === undefined) {\n          siblingSignature = this.signatures[bin.siblingBin];\n          signatures.push({\n            index: bin.siblingBfsIndex,\n            signature: siblingSignature,\n          });\n        }\n\n        // if the current branch has already been verified short circuit\n        const verifiedSignature = this.hashTree.signatures[bin.bfsIndex];\n        if (verifiedSignature !== undefined) {\n          hashResult = hashResult.then(hash => verifiedSignature.compare(hash));\n          break;\n        }\n\n        // verify the generated root hash using the one supplied to the verifier\n        if (bin.isRoot) {\n          hashResult = hashResult.then(hash => siblingSignature.compare(hash));\n          break;\n        }\n\n        // chain generating the next parent hash\n        hashResult = hashResult.then(hash => {\n          signatures.push({\n            index: bin.bfsIndex,\n            signature: new Signature(hash),\n          });\n\n          const siblingHash = siblingSignature.getHash();\n          return bin.branch === 1\n            ? merkleHashTreeFunction(hash, siblingHash)\n            : merkleHashTreeFunction(siblingHash, hash);\n        });\n      }\n\n      return hashResult.then(() => {\n        signatures.forEach(({index, signature}) => {\n          signature.markVerified();\n          this.hashTree.signatures[index] = signature;\n        });\n      });\n    }\n  }\n\n  class UnifiedMerkleHashTree {\n    constructor() {\n      this.subtrees = [];\n      this.nextStart = 0;\n      this.chunkCount = 0;\n    }\n\n    findSubtree({bin}) {\n      const index = binSearch(\n        this.subtrees.length - 1,\n        i => {\n          const {start, end} = this.subtrees[i].rootAddress;\n          return start <= bin && bin <= end ? 0 : start - bin;\n        },\n      );\n\n      return index < 0 ? undefined : this.subtrees[index];\n    }\n\n    insertSubtree(subtree) {\n      const storedSubtree = this.findSubtree(subtree.rootAddress);\n      if (storedSubtree !== undefined) {\n        if (storedSubtree !== subtree) {\n          subtree.copy(storedSubtree);\n        }\n\n        return storedSubtree;\n      }\n\n      this.subtrees.push(subtree);\n      this.subtrees.sort((a, b) => a.rootAddress.start - b.rootAddress.start);\n\n      this.chunkCount += subtree.getChunkCount();\n      this.pruneSubtrees();\n\n      return subtree;\n    }\n\n    pruneSubtrees() {\n      while (this.subtrees.length > 0 && this.chunkCount - this.subtrees[0].getChunkCount() > liveDiscardWindow) {\n        const removedTree = this.subtrees.shift();\n        this.chunkCount -= removedTree.getChunkCount();\n      }\n    }\n\n    appendSubtree(values) {\n      const treeSize = MerkleHashTree.minSize(values.length);\n      const nextAddress = new Address(\n        this.nextStart + treeSize - 1,\n        [this.nextStart, this.nextStart + (treeSize - 1) * 2],\n      );\n\n      this.nextStart += treeSize * 2;\n\n      return MerkleHashTree.from(values, nextAddress)\n        .then(subtree => this.insertSubtree(subtree));\n    }\n\n    createVerifier(address) {\n      let subtree = this.findSubtree(address) || new MerkleHashTree(address);\n      return new MerkleHashSubtreeVerifier(this, subtree);\n    }\n\n    getConstituentSignatures(address) {\n      const subtree = this.findSubtree(address);\n      if (subtree === undefined) {\n        return;\n      }\n\n      return subtree.getConstituentSignatures(address);\n    }\n  }\n\n  class MerkleHashSubtreeVerifier extends MerkleHashTreeVerifier {\n    constructor(unifiedHashTree, subtree) {\n      super(subtree);\n      this.unifiedHashTree = unifiedHashTree;\n    }\n\n    verifyChunk(address, value) {\n      return super.verifyChunk(address, value)\n        .then(this.unifiedHashTree.insertSubtree(this.hashTree));\n    }\n  }\n\n  class NoneVerifier {\n    setHash() {}\n\n    setHashSignature() {}\n\n    verifyChunk() {\n      return Promise.resolve();\n    }\n  }\n\n  class NoneVerifierFactory {\n    createVerifier() {\n      return new NoneVerifier();\n    }\n\n    getConstituentSignatures() {\n      return [];\n    }\n  }\n\n  // TODO: sign all method\n  switch (contentIntegrityProtectionMethod) {\n    case ContentIntegrityProtectionMethod.None:\n      return new NoneVerifierFactory();\n    case ContentIntegrityProtectionMethod.MerkleHashTree:\n      return new MerkleHashTree();\n    case ContentIntegrityProtectionMethod.UnifiedMerkleTree:\n      return new UnifiedMerkleHashTree();\n    default:\n      throw new Error('unsupported content integrity protection method');\n  }\n};\n","import React, {useEffect, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport {ChunkedReadStream, ChunkedWriteStreamInjector} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\n\nimport './App.scss';\n\nconst App = () => {\n  const [server] = useState(new Server());\n  const [swarms, setSwarms] = useState([]);\n  const [swarmUri, setSwarmUri] = useState('');\n\n  useEffect(() => {\n    const injector = new ChunkedWriteStreamInjector();\n\n    injector.on('publish', ({injector: {swarm}}) => {\n      setSwarmUri(swarm.uri);\n      server.ppsppClient.publishSwarm(swarm);\n    });\n\n    injector.on('unpublish', ({injector: {swarm}}) => {\n      server.ppsppClient.unpublishSwarm(swarm);\n    });\n\n    injector.start({\n      bitRate: 9000000,\n    });\n\n    return () => injector.stop();\n  }, []);\n\n  const handleAddPeerClick = () => {\n    Client.create(new ConnManager(server)).then(({ppsppClient}) => {\n      const swarm = ppsppClient.joinSwarm(swarmUri);\n      // console.log(ppsppClient);\n\n      setSwarms([...swarms, swarm]);\n\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', d => console.log(`received ${d.length} bytes`));\n    });\n  };\n\n  const diagnosticMenus = swarms.map((swarm, i) => (\n    <DiagnosticMenu\n      key={i}\n      swarm={swarm}\n      containerClass={`diagnostic-menu--indent-${i}`}\n    />\n  ));\n\n  return (\n    <div>\n      {diagnosticMenus}\n      <button onClick={handleAddPeerClick}>add peer</button>\n    </div>\n  );\n};\n\nexport default App;\n","import React, {useEffect, useReducer, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport {schemeCategory10} from 'd3-scale-chromatic';\nimport {scaleOrdinal} from 'd3-scale';\n// import SpriteText from 'three-spritetext';\n// import {Mesh, SphereBufferGeometry, MeshLambertMaterial} from 'three';\n\nimport './App.scss';\n\nconst color = scaleOrdinal(schemeCategory10);\n\nconst reduceGraph = (graph, {type, ...data}) => {\n  switch (type) {\n    case 'ADD_NODE':\n      return {\n        nodes: [...graph.nodes, data],\n        links: graph.links,\n      };\n    case 'REMOVE_NODE':\n      return {\n        nodes: graph.nodes.filter(node => node.id !== data.id),\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.id && target.id !== data.id;\n        }),\n      };\n    case 'ADD_LINK':\n      return {\n        nodes: graph.nodes,\n        links: [...graph.links, {...data, activity: 0}],\n      };\n    case 'UPDATE_LINK':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            ...data,\n          };\n        }),\n      };\n    case 'INCR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity + 1,\n          };\n        }),\n      };\n    case 'DECR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity - 1,\n          };\n        }),\n      };\n    case 'REMOVE_LINK':\n      console.log(data);\n      return {\n        nodes: graph.nodes,\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.source || target.id !== data.target;\n        }),\n      };\n    default:\n      return graph;\n  }\n};\n\nconst useGraph = () => {\n  const [servers, setServers] = useState([new Server()]);\n  const [gen, setGen] = useState(1);\n  const [graph, dispatchGraphAction] = useReducer(reduceGraph, {nodes: [], links: []});\n\n  useEffect(() => {\n    const source = arrayBufferToHex(servers[0].dhtClient.id);\n    dispatchGraphAction({\n      type: 'ADD_NODE',\n      id: source,\n      color: '#fff',\n      dhtClient: servers[0].dhtClient,\n    });\n\n    addNodes(3)\n      .then(clients => clients.map(({dhtClient, ppsppClient}) => {\n        return new Server({dhtClient, ppsppClient});\n      }))\n      .then(newServers => setServers([...servers, ...newServers]));\n  }, []);\n\n  const addNodes = (n = 1, props = {}) => {\n    setGen(gen + 1);\n\n    const clientsResult = Promise.all(new Array(n).fill(0).map(() => {\n      const firstIndex = servers.length - 1;\n      const serverIndex = Math.min(firstIndex, 1 + Math.floor(Math.random() * firstIndex));\n      const server = servers[serverIndex];\n      return Client.create(new ConnManager(server));\n    }));\n\n    clientsResult.then(clients => clients.forEach(({dhtClient}) => {\n      // if (Math.random() > 0.5) {\n      //   setTimeout(() => dhtClient.close(), Math.random() * 30000);\n      // }\n\n      const {id, allChannels} = dhtClient;\n      console.log(allChannels);\n\n      const source = arrayBufferToHex(id);\n      dispatchGraphAction({\n        type: 'ADD_NODE',\n        id: source,\n        color: color(gen),\n        dhtClient,\n        ...props,\n      });\n      dhtClient.on('close', () => dispatchGraphAction({\n        type: 'REMOVE_NODE',\n        id: source,\n      }));\n\n      allChannels.toArray().forEach(channel => {\n        if (channel.isOpen()) {\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target: arrayBufferToHex(channel.id),\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n        }\n      });\n\n      // const registerConnObservers = (target, conn) => {\n      //   const handleMessage = () => {\n      //     dispatchGraphAction({type: 'INCR_LINK_ACTIVITY', source, target});\n      //     setTimeout(() => dispatchGraphAction({type: 'DECR_LINK_ACTIVITY', source, target}), 10000);\n      //   };\n\n      //   conn.on('message', handleMessage);\n      //   conn.remote.on('message', handleMessage);\n      // };\n\n      allChannels.on('added',  channel => {\n        if (channel.isOpen()) {\n          const target = arrayBufferToHex(channel.id);\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('updated', (oldChannel, newChannel) => {\n        if (oldChannel.isOpen() !== newChannel.isOpen()) {\n          const target = arrayBufferToHex(newChannel.id);\n          // dispatchGraphAction({\n          //   type: 'UPDATE_LINK',\n          //   source,\n          //   target,\n          //   color: conn ? '#fff' : '#66f',\n          // });\n\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: newChannel.isOpen() ? '#fff' : '#66f',\n          });\n\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('removed', ({id}) => dispatchGraphAction({\n        type: 'REMOVE_LINK',\n        source,\n        target: arrayBufferToHex(id),\n      }));\n    }));\n\n    return clientsResult;\n  };\n\n  const deleteNodes = (n = 1) => {\n    for (let i = 0; i < n; i ++) {\n      const firstIndex = servers.length;\n      const node = graph.nodes[firstIndex + Math.floor(Math.random() * (Object.keys(graph.nodes).length - firstIndex))];\n      if (node) {\n        node.dhtClient.close();\n      }\n    }\n  };\n\n  return [graph, {addNodes, deleteNodes}];\n};\n\nconst useNodePinger = () => {\n  const [source, setSource] = useState(null);\n\n  const handleNodeClick = node => {\n    console.log(node);\n    if (source === null) {\n      setSource(node);\n      console.log('set source', arrayBufferToHex(node.dhtClient.id));\n      return;\n    }\n\n    console.log('pinging %s > %s', arrayBufferToHex(source.dhtClient.id), arrayBufferToHex(node.dhtClient.id));\n    source.dhtClient.sendPing(node.dhtClient.id, (data) => {\n      console.log('received ping response', data);\n    });\n    setSource(null);\n  };\n\n  return handleNodeClick;\n};\n\nconst App = () => {\n  const [graph, {addNodes, deleteNodes}] = useGraph();\n  const handleNodeClick = useNodePinger();\n\n  console.log(graph);\n\n  // useEffect(() => {\n  //   let n = 1;\n  //   const ivl = setInterval(() => {\n  //     addNodes(1, {color: color(n)});\n  //     if (++ n == 50) {\n  //       clearInterval(ivl);\n  //     }\n  //   }, 1000);\n  //   return () => clearInterval(ivl);\n  // }, []);\n\n  return (\n    <div>\n      <div className=\"graph-buttons\">\n        <button onClick={() => addNodes(1)}>add 1 peer</button>\n        <button onClick={() => addNodes(5)}>add 5 peers</button>\n        <button onClick={() => addNodes(10)}>add 10 peers</button>\n        <button onClick={() => deleteNodes(1)}>delete 1 peer</button>\n        <button onClick={() => deleteNodes(5)}>delete 5 peers</button>\n      </div>\n      <ForceGraph3D\n        graphData={graph}\n        nodeAutoColorBy=\"gen\"\n        onNodeClick={handleNodeClick}\n        linkColor={link => link.color}\n        linkWidth={1.5}\n        nodeRelSize={2}\n        nodeVal={node => node.dhtClient.allChannels.count()}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport App from './App';\nimport Test from './Test';\nimport DhtGraph from './DhtGraph';\n\nconst Router = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/test\" component={Test} />\n      <Route exact path=\"/dht-graph\" component={DhtGraph} />\n      <Route exact path=\"/:name([\\w\\-]*)\" component={App} />\n      <Redirect to=\"/\" />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './Router';\n\nimport './index.css';\n\n// if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {\n//   window.addEventListener('load', function() {\n//     navigator.serviceWorker.register('/service-worker.js');\n//   });\n// }\n\nReactDOM.render(<Router />, document.getElementById('root'));\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport createRandomId from './utils/createRandomId';\n\nexport class Server {\n  constructor(props = {}) {\n    this.queue = [];\n    this.dhtClient = props.dhtClient || new dht.Client(createRandomId());\n    this.ppsppClient = props.ppsppClient || new ppspp.Client();\n  }\n}\n\nexport class ConnManager {\n  constructor(server) {\n    this.server = server;\n  }\n\n  bootstrap() {\n    const id = createRandomId();\n\n    const data = {\n      type: 'bootstrap',\n      bootstrapId: arrayBufferToHex(this.server.dhtClient.id),\n      id: arrayBufferToHex(id),\n    };\n    const conn = Conn.open();\n    const client = this.createClient(conn);\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.server.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.server.ppsppClient.createChannel(channel);\n      }\n    });\n\n    this.server.queue.push(client);\n    if (this.server.queue.length > 6) {\n      this.server.queue.shift().close();\n    }\n    // setTimeout(() => client.close(), Math.random() * 30000);\n\n    return Promise.resolve({data, conn: conn.remote});\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    mediator.on('connection', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Conn extends EventEmitter {\n  constructor(remote) {\n    super();\n\n    this.remote = remote || new Conn(this);\n    this.remote.remote = this;\n\n    this.readyState = this.remote.readyState || Conn.ReadyStates.CONNECTING;\n\n    this.onmessage = () => {};\n  }\n\n  send(data) {\n    if (this.readyState === Conn.ReadyStates.OPEN) {\n      setImmediate(() => {\n        this.remote.emit('message', {data});\n        this.remote.onmessage({data});\n      });\n    }\n  }\n\n  addEventListener(...args) {\n    this.on(...args);\n  }\n\n  removeEventListener(...args) {\n    this.removeListener(...args);\n  }\n\n  static open() {\n    const conn = new Conn();\n    conn.open();\n    conn.remote.open();\n    return conn;\n  }\n\n  open() {\n    this.readyState = Conn.ReadyStates.OPEN;\n    this.remote.readyState = Conn.ReadyStates.OPEN;\n    this.emit('open');\n  }\n\n  close() {\n    this.readyState = Conn.ReadyStates.CLOSING;\n    this.remote.readyState = Conn.ReadyStates.CLOSING;\n\n    this.remote.emit('close');\n    this.emit('close');\n\n    this.readyState = Conn.ReadyStates.CLOSED;\n    this.remote.readyState = Conn.ReadyStates.CLOSED;\n\n    this.removeAllListeners();\n    this.remote.removeAllListeners();\n  }\n}\n\nConn.ReadyStates = {\n  CONNECTING: 'connecting',\n  OPEN: 'open',\n  CLOSING: 'closing',\n  CLOSED: 'closed',\n};\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case 'connection':\n        this.handleConnection(data);\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  handleConnection({id}) {\n    const datachannels = Mediator.datachannels[id];\n    delete Mediator.datachannels[id];\n\n    Object.entries(datachannels).forEach(([label, channel]) => this.emit('datachannel', label, channel));\n    this.emit('open');\n  }\n\n  sendConnection(datachannels) {\n    const id = Mediator.nextId ++;\n    Mediator.datachannels[id] = datachannels;\n\n    this.conn.send(JSON.stringify({\n      type: 'connection',\n      id,\n    }));\n\n    this.emit('open');\n  }\n}\n\nMediator.nextId = 0;\nMediator.datachannels = {};\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.datachannels = {};\n    this.conns = [];\n\n    mediator.on('datachannel', this.handleDataChannel.bind(this));\n    mediator.once('open', this.handleOpen.bind(this));\n  }\n\n  handleDataChannel(label, conn) {\n    const channel = new ClientDataChannel(this, label, conn);\n    this.conns.push(channel);\n    this.emit('datachannel', {label, channel});\n  }\n\n  handleOpen() {\n    setImmediate(() => {\n      this.conns.forEach(conn => conn.open());\n      this.emit('open');\n    });\n  }\n\n  createDataChannel(label) {\n    const channel = new ClientDataChannel(this, label);\n    this.datachannels[label] = channel;\n    this.conns.push(channel);\n    return channel;\n  }\n\n  init() {\n    this.mediator.sendConnection(this.datachannels);\n  }\n\n  close() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n\n    this.conns.forEach(conn => conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n}\n\nexport class ClientDataChannel extends Conn {\n  constructor(client, label, remote) {\n    super(remote);\n\n    this.client = client;\n    this.label = label;\n  }\n}\n","import {LiveSignatureAlgorithm} from './constants';\n\nconst isRsaAlgorithm = liveSignatureAlgorithm => {\n  const rsaAlgorithms = [\n    LiveSignatureAlgorithm.RSASHA1,\n    LiveSignatureAlgorithm.RSASHA256,\n  ];\n  return rsaAlgorithms.includes(liveSignatureAlgorithm);\n};\n\nexport default class SwarmId {\n  constructor(\n    liveSignatureAlgorithm,\n    publicKey,\n    publicExponent,\n    modulusLength,\n  ) {\n    this.liveSignatureAlgorithm = liveSignatureAlgorithm;\n    this.publicKey = Buffer.from(publicKey);\n    this.publicExponent = publicExponent;\n    this.modulusLength = modulusLength;\n  }\n\n  getLiveSignatureByteLength() {\n    switch (this.liveSignatureAlgorithm) {\n      case LiveSignatureAlgorithm.RSASHA1:\n      case LiveSignatureAlgorithm.RSASHA256:\n        return this.modulusLength / 8;\n      case LiveSignatureAlgorithm.ECDSAP256SHA256:\n        return 64;\n      case LiveSignatureAlgorithm.ECDSAP384SHA384:\n        return 96;\n      default:\n        throw new Error('unsupported live signature algorithm');\n    }\n  }\n\n  getKeyParams() {\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      return {\n        publicExponent: new Uint8Array(this.publicExponent),\n        modulusLength: this.modulusLength,\n      };\n    }\n    return {};\n  }\n\n  byteLength() {\n    const metadataLength = isRsaAlgorithm(this.liveSignatureAlgorithm) ? 9 : 1;\n    return this.publicKey.length + metadataLength;\n  }\n\n  toBuffer() {\n    const buffer = Buffer.alloc(this.byteLength());\n    let length = 0;\n\n    buffer.writeUInt8(this.liveSignatureAlgorithm, length);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      Buffer.from(this.publicExponent).copy(buffer, length + 4 - this.publicExponent.length);\n      length += 4;\n\n      buffer.writeUInt32BE(this.modulusLength, length);\n      length += 4;\n    }\n\n    this.publicKey.copy(buffer, length);\n\n    return buffer;\n  }\n\n  read(buffer) {\n    let length = 0;\n\n    this.liveSignatureAlgorithm = buffer.readUInt8(0);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      this.publicExponent = buffer.slice(length, length + 4);\n      length += 4;\n\n      this.modulusLength = buffer.readUInt32BE(length);\n      length += 4;\n    }\n\n    this.publicKey = buffer.slice(length);\n  }\n\n  static from(values) {\n    if (ArrayBuffer.isView(values)) {\n      const swarmId = Object.create(SwarmId.prototype);\n      swarmId.read(Buffer.from(values));\n      return swarmId;\n    }\n\n    return new SwarmId(\n      values.liveSignatureAlgorithm,\n      values.publicKey,\n      values.publicExponent,\n      values.modulusLength,\n    );\n  }\n}\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport hexToUint8Array from './hexToUint8Array';\n\nexport class Client {\n  constructor(connManager, conn, bootstrap) {\n    const dhtClientId = hexToUint8Array(bootstrap.id);\n    const bootstrapId = hexToUint8Array(bootstrap.bootstrapId);\n\n    this.connManager = connManager;\n    this.bootstrap = bootstrap;\n    this.swarmUri = bootstrap.swarmUri;\n\n    const client = connManager.createClient(conn);\n\n    this.dhtClient = new dht.Client(dhtClientId);\n    this.dhtClient.on('peers.discover', this.handlePeersDiscover.bind(this));\n    this.dhtClient.on('receive.connect.request', this.handleReceiveConnectRequest.bind(this));\n    this.dhtClient.createChannel(bootstrapId, client.createDataChannel('dht'));\n\n    this.ppsppClient = new ppspp.Client();\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    client.init();\n  }\n\n  static create(connManager) {\n    return connManager.bootstrap().then(({data, conn}) => {\n      return new Client(connManager, conn, data);\n    });\n  }\n\n  handlePeersDiscover(id) {\n    // console.log('creating client for', ids);\n    const sub = new dht.SubChannel(this.dhtClient, id);\n    const client = this.connManager.createClient(sub);\n\n    const dhtChannel = client.createDataChannel('dht');\n    const ppsppChannel = client.createDataChannel('ppspp');\n\n    const timeout = setTimeout(() => client.close(), 10000);\n    const init = () => {\n      clearTimeout(timeout);\n      client.init();\n    };\n\n    dhtChannel.addEventListener('close', () => client.close());\n\n    this.dhtClient.createChannel(id, dhtChannel);\n    this.ppsppClient.createChannel(ppsppChannel);\n\n    this.dhtClient.send(id, 'connect.request', {channelId: sub.id}, init);\n  }\n\n  handleReceiveConnectRequest({data: {channelId, from}, callback}) {\n    // if (this.dhtClient.channels.count() > 10) {\n    //   return;\n    // }\n\n    // console.log('handleReceiveConnectRequest', {channelId, from, callback});\n    const id = new hexToUint8Array(from);\n    const client = this.connManager.createClient(new dht.SubChannel(this.dhtClient, id, channelId));\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.ppsppClient.createChannel(channel);\n      }\n    });\n\n    callback({});\n  }\n}\n","export default class EMA {\n  constructor(alpha) {\n    this.mean = 0;\n    this.alpha = alpha;\n    this.weight = 1;\n  }\n\n  update(value) {\n    this.mean = this.alpha * value + (1 - this.alpha) * this.mean;\n    this.weight *= this.alpha;\n  }\n\n  set(value) {\n    this.mean = value;\n    this.weight = 0;\n  }\n\n  isEmpty() {\n    return this.weight === 1;\n  }\n\n  value() {\n    return this.mean / (1 - this.weight);\n  }\n}\n","export default class RingBuffer {\n  constructor(capacity) {\n    this.setCapacity(capacity);\n  }\n\n  setCapacity(capacity) {\n    this.capacity = capacity;\n    this.lastIndex = capacity;\n    this.values = new Array(capacity);\n\n    for (let i = 0; i < capacity; i ++) {\n      this.values[i] = this.createEmptyValue(i);\n    }\n  }\n\n  advanceLastIndex(lastIndex) {\n    if (this.lastIndex > lastIndex) {\n      return;\n    }\n\n    let firstEmptyIndex = this.lastIndex;\n    if (lastIndex - firstEmptyIndex > this.capacity) {\n      firstEmptyIndex = lastIndex - this.capacity;\n    }\n    for (let i = firstEmptyIndex; i <= lastIndex; i ++) {\n      const index = i % this.capacity;\n      this.values[index] = this.createEmptyValue(i, this.values[index]);\n    }\n    this.lastIndex = lastIndex + 1;\n  }\n\n  createEmptyValue() {\n    return undefined;\n  }\n\n  set(index, value) {\n    this.advanceLastIndex(index);\n    this.values[index % this.capacity] = value;\n  }\n\n  push(value) {\n    this.set(this.lastIndex, value);\n  }\n\n  get firstIndex() {\n    return this.lastIndex - this.capacity;\n  }\n\n  get(index) {\n    if (index < this.firstIndex || index >= this.lastIndex) {\n      return this.createEmptyValue(index);\n    }\n    return this.values[index % this.capacity];\n  }\n}\n","import EMA from './ema';\nimport RingBuffer from './RingBuffer';\n\nclass DelayBuffer extends RingBuffer {\n  constructor(capacity, window) {\n    super(capacity);\n    this.min = Infinity;\n    this.window = window;\n  }\n\n  createEmptyValue() {\n    return Infinity;\n  }\n\n  getMin() {\n    return this.min;\n  }\n\n  update(delay) {\n    const now = Math.floor(Date.now() / this.window);\n\n    if (now >= this.lastIndex) {\n      this.advanceLastIndex(now);\n      this.min = Math.min(...this.values);\n    }\n\n    if (delay < this.get(now)) {\n      this.set(now, delay);\n      this.min = Math.min(this.min, delay);\n    }\n  }\n}\n\n// rfc6817\nconst TARGET = 100;\nconst ALLOWED_INCREASE = 1;\nconst GAIN = 1;\nconst CURRENT_HISTORY = 4;\nconst CURRENT_HISTORY_INTERVAL = 1000;\nconst BASE_HISTORY = 10;\nconst BASE_HISTORY_INTERVAL = 60 * 1000;\nconst INIT_CWND = 2;\nconst MIN_CWND = 2;\n\n// max safe WebRTC data channel message size\nconst MSS = 8 * 1024;\n\n// rfc6298\nconst COEF_G = 1;\nconst COEF_K = 4;\n\n// jacobson, v. \"congestion avoidance and control\"\n// doi: 10.1145/52325.52356\nconst COEF_ALPHA = 0.125;\nconst COEF_BETA = 0.25;\n\nexport default class LEDBAT {\n  constructor(target = TARGET, mss = MSS) {\n    this.target = target;\n    this.mss = mss;\n    this.flightSize = 0;\n\n    // the amount of data that is allowed to be outstanding in an rtt in bytes\n    this.cwnd = INIT_CWND * MSS;\n\n    // the congestion timeout\n    this.cto = 1000;\n    this.currentDelay = new DelayBuffer(CURRENT_HISTORY, CURRENT_HISTORY_INTERVAL);\n    this.baseDelay = new DelayBuffer(BASE_HISTORY, BASE_HISTORY_INTERVAL);\n\n    this.lastDataLoss = 0;\n    this.lastAckTime = Infinity;\n    this.rttMean = new EMA(COEF_ALPHA);\n    this.rttVar = new EMA(COEF_BETA);\n\n    this.ackSize = 0;\n  }\n\n  addSent(bytes) {\n    this.flightSize += bytes;\n  }\n\n  addDelaySample(delaySample, bytes = MSS) {\n    this.currentDelay.update(delaySample);\n    this.baseDelay.update(delaySample);\n\n    this.ackSize += bytes;\n\n    this.lastAckTime = Date.now();\n  }\n\n  digestDelaySamples() {\n    this.checkCTO();\n\n    if (this.ackSize === 0) {\n      return;\n    }\n\n    const queuingDelay = Math.abs(this.currentDelay.getMin() - this.baseDelay.getMin());\n    const offTarget = (this.target - queuingDelay) / this.target;\n    this.cwnd += GAIN * offTarget * this.ackSize * this.mss / this.cwnd;\n\n    const maxAllowedCwnd = this.flightSize + ALLOWED_INCREASE * this.mss;\n    this.cwnd = Math.max(Math.min(this.cwnd, maxAllowedCwnd), MIN_CWND * this.mss);\n\n    this.flightSize = Math.max(0, this.flightSize - this.ackSize);\n    this.ackSize = 0;\n  }\n\n  checkCTO() {\n    if (this.flightSize > 0 && Date.now() - this.cto > this.lastAckTime) {\n      this.cwnd = this.mss;\n      this.cto = 2 * this.cto;\n    }\n  }\n\n  addRttSample(rtt) {\n    if (this.rttMean.isEmpty()) {\n      this.rttMean.set(rtt);\n      this.rttVar.set(rtt / 2);\n    } else {\n      this.rttVar.update(Math.abs(this.rttMean.value() - rtt));\n      this.rttMean.update(rtt);\n    }\n\n    this.cto = this.rttMean.value() + Math.max(COEF_G, COEF_K * this.rttVar.value());\n    if (this.cto < 1000) {\n      this.cto = 1000;\n    }\n  }\n\n  onDataLoss(bytes, retransmitting = false) {\n    const now = Date.now();\n    if (this.lastDataLoss !== 0 && now - this.lastDataLoss < this.rttMean.value()) {\n      return;\n    }\n    this.lastDataLoss = now;\n\n    this.cwnd = Math.min(this.cwnd, Math.max(this.cwnd / 2, MIN_CWND * this.mss));\n\n    if (!retransmitting) {\n      this.flightSize = Math.max(0, this.flightSize - bytes);\n    }\n  }\n\n  static computeOneWayDelay(timestamp) {\n    return Date.now() - timestamp;\n  }\n}\n","import {Buffer} from 'buffer';\nimport Address from './address';\nimport {MerkleHashTreeFunctionByteLengths} from './integrity';\n\nimport {\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n} from './constants';\n\nexport const createChunkAddressFieldType = (addressingMethod, chunkSize) => {\n  class Bin32ChunkAddress {\n    constructor(value = 0) {\n      this.type = ChunkAddressingMethod.Bin32;\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n\n    rangeByteLength() {\n      const [start, end] = Address.binBounds(this.value);\n      return (end - start + 1) * chunkSize;\n    }\n\n    static from({bin}) {\n      return new Bin32ChunkAddress(bin);\n    }\n  }\n\n  class ChunkRange32ChunkAddress {\n    constructor(start = 0, end = 0) {\n      this.type = ChunkAddressingMethod.ChunkRange32;\n      this.start = start;\n      this.end = end;\n    }\n\n    read(buffer, offset) {\n      this.start = buffer.readUInt32BE(offset);\n      this.end = buffer.readUInt32BE(offset + 4);\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.start, offset);\n      buffer.writeUInt32BE(this.end, offset + 4);\n    }\n\n    rangeByteLength() {\n      return (this.end - this.start + 1) * chunkSize;\n    }\n\n    static from({start, end}) {\n      return new ChunkRange32ChunkAddress(start, end);\n    }\n  }\n\n  switch (addressingMethod) {\n    case ChunkAddressingMethod.Bin32:\n      return Bin32ChunkAddress;\n    case ChunkAddressingMethod.ChunkRange32:\n      return ChunkRange32ChunkAddress;\n    default:\n      throw new Error('unsupported chunk addressing method');\n  }\n};\n\nconst createBufferFieldType = byteLength => {\n  class BufferField {\n    constructor(value = Buffer.alloc(byteLength)) {\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      buffer.copy(this.value, 0, offset, offset + byteLength);\n      return byteLength;\n    }\n\n    byteLength() {\n      return byteLength;\n    }\n\n    write(buffer, offset) {\n      this.value.copy(buffer, offset);\n    }\n  }\n\n  return BufferField;\n};\n\nexport const createLiveSignatureFieldType = (liveSignatureAlgorithm, swarmId) => {\n  const byteLength = swarmId.getLiveSignatureByteLength();\n\n  class LiveSignatureField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = liveSignatureAlgorithm;\n    }\n  }\n\n  return LiveSignatureField;\n};\n\nexport const createIntegrityHashFieldType = merkleHashTreeFunction => {\n  const byteLength = MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction];\n\n  class IntegrityHashField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = merkleHashTreeFunction;\n    }\n  }\n\n  return IntegrityHashField;\n};\n\nexport const createEncoding = (ChunkAddress, IntegrityHash, LiveSignature) => {\n  class Uint8ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt8(offset);\n      return 1;\n    }\n\n    byteLength() {\n      return 1;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt8(this.value, offset);\n    }\n  }\n\n  class Uint32ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n  }\n\n  class VersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.Version;\n    }\n  }\n\n  class MinimumVersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.MinimumVersion;\n    }\n  }\n\n  class SwarmIdentifierProtocolOption {\n    constructor(value = []) {\n      this.type = ProtocolOptions.SwarmIdentifier;\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt16BE(offset);\n      offset += 2;\n\n      this.value = buffer.slice(offset, offset + length);\n\n      return length + 2;\n    }\n\n    byteLength() {\n      return this.value.length + 2;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt16BE(this.value.length, offset);\n      this.value.copy(buffer, offset + 2);\n    }\n  }\n\n  class ContentIntegrityProtectionMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ContentIntegrityProtectionMethod.MerkleHashTree) {\n      super(method);\n      this.type = ProtocolOptions.ContentIntegrityProtectionMethod;\n    }\n  }\n\n  class MerkleHashTreeFunctionProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = MerkleHashTreeFunction.SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.MerkleHashTreeFunction;\n    }\n  }\n\n  class LiveSignatureAlgorithmProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = LiveSignatureAlgorithm.ECDSAP256SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.LiveSignatureAlgorithm;\n    }\n  }\n\n  class ChunkAddressingMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ChunkAddressingMethod.ChunkRange32) {\n      super(method);\n      this.type = ProtocolOptions.ChunkAddressingMethod;\n    }\n  }\n\n  class LiveDiscardWindowProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.LiveDiscardWindow;\n    }\n  }\n\n  class SupportedMessagesProtocolOption {\n    constructor(messageTypes = Object.values(MessageTypes).filter(v => !isNaN(v))) {\n      this.type = ProtocolOptions.SupportedMessages;\n      this.value = {};\n      messageTypes.forEach(type => this.value[type] = true);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt8(offset);\n      offset += 1;\n\n      for (let i = 0; i < length; i ++) {\n        const byte = buffer[offset + i];\n        for (let j = 0; j < 8; j ++) {\n          this.value[i * 8 + j] = Boolean(byte & (1 << 7 - j));\n        }\n      }\n\n      return length + 1;\n    }\n\n    bitmapByteLength() {\n      return Math.ceil(Math.max(...Object.keys(this.value)) / 8) + 1;\n    }\n\n    toBitmap() {\n      const length = this.bitmapByteLength();\n      const buffer = Buffer.alloc(length);\n\n      for (let i = 0; i < length; i ++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j ++) {\n          byte = (byte << 1) | (this.value[i * 8 + j] ? 1 : 0);\n        }\n        buffer.writeUInt8(byte, i);\n      }\n      return buffer;\n    }\n\n    byteLength() {\n      return this.bitmapByteLength() + 1;\n    }\n\n    write(buffer, offset) {\n      const bitmap = this.toBitmap();\n      buffer.writeUInt8(bitmap.length, offset);\n      bitmap.copy(buffer, offset + 1);\n    }\n  }\n\n  class ChunkSizeProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.ChunkSize;\n    }\n  }\n\n  const protocolOptionRecordTypes = {\n    [ProtocolOptions.Version]: VersionProtocolOption,\n    [ProtocolOptions.MinimumVersion]: MinimumVersionProtocolOption,\n    [ProtocolOptions.SwarmIdentifier]: SwarmIdentifierProtocolOption,\n    [ProtocolOptions.ContentIntegrityProtectionMethod]: ContentIntegrityProtectionMethodProtocolOption,\n    [ProtocolOptions.MerkleHashTreeFunction]: MerkleHashTreeFunctionProtocolOption,\n    [ProtocolOptions.LiveSignatureAlgorithm]: LiveSignatureAlgorithmProtocolOption,\n    [ProtocolOptions.ChunkAddressingMethod]: ChunkAddressingMethodProtocolOption,\n    [ProtocolOptions.LiveDiscardWindow]: LiveDiscardWindowProtocolOption,\n    [ProtocolOptions.SupportedMessages]: SupportedMessagesProtocolOption,\n    [ProtocolOptions.ChunkSize]: ChunkSizeProtocolOption,\n  };\n\n  class HandshakeMessage {\n    constructor(channelId = 0, options = []) {\n      this.type = MessageTypes.HANDSHAKE;\n      this.channelId = channelId;\n      this.options = options;\n    }\n\n    read(buffer, offset) {\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(offset);\n      length += 4;\n\n      while (offset + length < buffer.length) {\n        const code = buffer.readUInt8(offset + length);\n        length += 1;\n\n        if (code === ProtocolOptions.EndOption) {\n          break;\n        }\n\n        const RecordType = protocolOptionRecordTypes[code];\n        const option = new RecordType();\n\n        length += option.read(buffer, offset + length);\n        this.options.push(option);\n      }\n\n      return length;\n    }\n\n    byteLength() {\n      return this.options.reduce((length, option) => length + option.byteLength() + 1, 0) + 5;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, offset);\n      length += 4;\n\n      this.options.forEach(option => {\n        buffer.writeUInt8(option.type, offset + length);\n        length += 1;\n\n        option.write(buffer, offset + length);\n        length += option.byteLength();\n      });\n\n      buffer.writeUInt8(ProtocolOptions.EndOption, offset + length);\n      length += 1;\n\n      return length;\n    }\n  }\n\n  class Timestamp {\n    constructor(value = Date.now()) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      const seconds = buffer.readInt32BE(offset);\n      const nanoseconds = buffer.readInt32BE(offset + 4);\n      this.value = seconds * 1e3 + nanoseconds / 1e6;\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeInt32BE(Math.floor(this.value / 1e3), offset);\n      buffer.writeInt32BE((this.value % 1e3) * 1e6, offset + 4);\n    }\n  }\n\n  class DataMessage {\n    constructor(address = new ChunkAddress(), data = [], timestamp = new Timestamp()) {\n      this.type = MessageTypes.DATA;\n      this.address = address;\n      this.data = Buffer.from(data);\n      this.timestamp = timestamp;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n\n      offset += length;\n      const dataLength = Math.min(this.address.rangeByteLength(), buffer.length - offset);\n      this.data = buffer.slice(offset, offset + dataLength);\n\n      return length + dataLength;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.data.length + 8;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.data.copy(buffer, offset + length);\n    }\n  }\n\n  class AddressMessage {\n    constructor(address = new ChunkAddress()) {\n      this.address = address;\n    }\n\n    read(buffer, offset) {\n      return this.address.read(buffer, offset);\n    }\n\n    byteLength() {\n      return this.address.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n    }\n  }\n\n  class AckMessage {\n    constructor(address = new ChunkAddress(), delaySample = new Timestamp()) {\n      this.type = MessageTypes.ACK;\n      this.address = address;\n      this.delaySample = delaySample;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.delaySample.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.delaySample.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.delaySample.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class HaveMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.HAVE;\n    }\n  }\n\n  class IntegrityMessage {\n    constructor(address = new ChunkAddress(), hash = new IntegrityHash()) {\n      this.type = MessageTypes.INTEGRITY;\n      this.address = address;\n      this.hash = hash;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.hash.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.hash.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.hash.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class SignedIntegrityMessage {\n    constructor(\n      address = new ChunkAddress(),\n      timestamp = new Timestamp(),\n      signature = new LiveSignature(),\n    ) {\n      this.type = MessageTypes.SIGNED_INTEGRITY;\n      this.address = address;\n      this.timestamp = timestamp;\n      this.signature = signature;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n      length += this.signature.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.timestamp.byteLength() + this.signature.byteLength();\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.signature.write(buffer, offset + length);\n    }\n  }\n\n  class RequestMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.REQUEST;\n    }\n  }\n\n  class CancelMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.CANCEL;\n    }\n  }\n\n  class EmptyMessage {\n    read() {\n      return 0;\n    }\n\n    byteLength() {\n      return 0;\n    }\n\n    write() {}\n  }\n\n  class ChokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.CHOKE;\n    }\n  }\n\n  class UnchokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.UNCHOKE;\n    }\n  }\n\n  const messageRecordTypes = {\n    [MessageTypes.HANDSHAKE]: HandshakeMessage,\n    [MessageTypes.DATA]: DataMessage,\n    [MessageTypes.ACK]: AckMessage,\n    [MessageTypes.HAVE]: HaveMessage,\n    [MessageTypes.INTEGRITY]: IntegrityMessage,\n    [MessageTypes.SIGNED_INTEGRITY]: SignedIntegrityMessage,\n    [MessageTypes.REQUEST]: RequestMessage,\n    [MessageTypes.CANCEL]: CancelMessage,\n    [MessageTypes.CHOKE]: ChokeMessage,\n    [MessageTypes.UNCHOKE]: UnchokeMessage,\n  };\n\n  class Messages {\n    constructor(values = []) {\n      this.values = values;\n      this.buffer = null;\n      this.offset = 0;\n    }\n\n    static from(values) {\n      if (values instanceof Messages) {\n        return values;\n      }\n      if (Array.isArray(values)) {\n        return new Messages(values);\n      }\n      throw new Error('unable to create Messages from unsupported type');\n    }\n\n    next() {\n      if (this.offset >= this.buffer.length) {\n        return;\n      }\n\n      const messageType = this.buffer.readUInt8(this.offset);\n      this.offset += 1;\n\n      const RecordType = messageRecordTypes[messageType];\n      const message = new RecordType();\n      this.values.push(message);\n\n      this.offset += message.read(this.buffer, this.offset);\n\n      return message;\n    }\n\n    toArray() {\n      // eslint-disable-next-line no-empty\n      while (this.next()) {}\n      return this.values;\n    }\n\n    read(buffer, offset) {\n      this.buffer = buffer;\n      this.offset = offset;\n      return 0;\n    }\n\n    byteLength() {\n      return this.values.reduce((length, message) => length + message.byteLength() + 1, 0);\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.values.forEach(message => {\n        buffer.writeUInt8(message.type, offset + length);\n        length += 1;\n\n        message.write(buffer, offset + length);\n        length += message.byteLength();\n      });\n\n      return length;\n    }\n  }\n\n  class Datagram {\n    constructor(channelId = 0, messages = []) {\n      this.channelId = channelId;\n      this.messages = Messages.from(messages);\n    }\n\n    read(data) {\n      const buffer = Buffer.from(data);\n\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(0);\n      length += 4;\n\n      length += this.messages.read(buffer, length);\n\n      return length;\n    }\n\n    byteLength() {\n      return this.messages.byteLength() + 4;\n    }\n\n    write(buffer) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, 0);\n      length += 4;\n\n      length += this.messages.write(buffer, length);\n\n      return length;\n    }\n\n    toBuffer() {\n      const buffer = Buffer.alloc(this.byteLength());\n      this.write(buffer);\n      return buffer;\n    }\n\n    static from(buffer) {\n      const datagram = new Datagram();\n      datagram.read(buffer);\n      return datagram;\n    }\n  }\n\n  return {\n    VersionProtocolOption,\n    MinimumVersionProtocolOption,\n    SwarmIdentifierProtocolOption,\n    ContentIntegrityProtectionMethodProtocolOption,\n    MerkleHashTreeFunctionProtocolOption,\n    LiveSignatureAlgorithmProtocolOption,\n    ChunkAddressingMethodProtocolOption,\n    LiveDiscardWindowProtocolOption,\n    SupportedMessagesProtocolOption,\n    ChunkSizeProtocolOption,\n    HandshakeMessage,\n    Timestamp,\n    DataMessage,\n    AckMessage,\n    HaveMessage,\n    IntegrityMessage,\n    SignedIntegrityMessage,\n    RequestMessage,\n    CancelMessage,\n    ChokeMessage,\n    UnchokeMessage,\n    Datagram,\n    LiveSignature,\n    IntegrityHash,\n    ChunkAddress,\n  };\n};\n","function createMask(bits) {\n  let mask = 0;\n  for (let i = 0; i < bits; i ++) {\n    mask = (mask << 1) | 1;\n  }\n  return mask;\n}\n\nfunction applyMask(byte, mask, value) {\n  if (value) {\n    return byte | mask;\n  }\n  return byte & (255 ^ mask);\n}\n\nexport default class BitArray {\n  constructor(capacity = 0) {\n    this.offset = 0;\n    this.resize(capacity);\n  }\n\n  // TODO: copy old values..?\n  resize(capacity) {\n    this.capacity = capacity;\n    this.values = new Uint8Array(Math.ceil(capacity / 8));\n  }\n\n  adjustOffset(index) {\n    const {offset} = this;\n    const distance = (index - offset) - this.capacity;\n    if (distance <= 0) {\n      return;\n    }\n\n    this.offset += distance;\n    this.unsafelySetRange(offset + 1, offset + distance + 1, false);\n  }\n\n  getByteIndex(index) {\n    return Math.floor(index / 8) % this.values.length;\n  }\n\n  getBitIndex(index) {\n    return index % 8;\n  }\n\n  getIndexValue(byteIndex, bitIndex) {\n    const byteOffset = this.offset % (this.values.length * 8);\n    const offset = byteIndex < byteOffset\n      ? this.offset + (this.values.length * 8) - byteOffset\n      : this.offset;\n    return offset + (byteIndex * 8 + bitIndex);\n  }\n\n  setRange(start, end, value = true) {\n    if (end - start === 1) {\n      this.set(start, value);\n      return;\n    }\n\n    if (end <= this.offset) {\n      return;\n    }\n    start = Math.max(start, this.offset);\n\n    this.adjustOffset(end);\n    this.unsafelySetRange(start, end, value);\n  }\n\n  unsafelySetRange(start, end, value = true, fillEndByte = false) {\n    if (end - start >= this.capacity) {\n      this.values.fill(value ? 255 : 0);\n      return;\n    }\n\n    const startByteIndex = this.getByteIndex(start);\n    const endByteIndex = this.getByteIndex(end);\n    const startBitIndex = this.getBitIndex(start);\n    const endBitIndex = this.getBitIndex(end);\n\n    if (startByteIndex > endByteIndex) {\n      this.unsafelySetIndexRange(startByteIndex, startBitIndex, this.capacity, 0, value);\n      this.unsafelySetIndexRange(0, 0, endByteIndex, endBitIndex, value);\n      return;\n    }\n\n    this.unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value);\n  }\n\n  unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value) {\n    let startMask = createMask(8 - startBitIndex);\n    let endMask = 255 ^ createMask(8 - endBitIndex);\n\n    if (startByteIndex === endByteIndex) {\n      const mask = startMask & endMask;\n      this.values[startByteIndex] = applyMask(this.values[startByteIndex], mask, value);\n      return;\n    }\n\n    this.values[startByteIndex] = applyMask(this.values[startByteIndex], startMask, value);\n    this.values[endByteIndex] = applyMask(this.values[endByteIndex], endMask, value);\n\n    if (endByteIndex - startByteIndex > 1) {\n      this.values.fill(value ? 255 : 0, startByteIndex + 1, endByteIndex);\n    }\n  }\n\n  unsetRange(start, end) {\n    this.setRange(start, end, false);\n  }\n\n  set(index, value = true) {\n    if (index < this.offset) {\n      return;\n    }\n\n    this.adjustOffset(index);\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    this.values[byteIndex] = applyMask(this.values[byteIndex], mask, value);\n  }\n\n  unset(index) {\n    this.set(index, false);\n  }\n\n  get(index) {\n    if (index <= this.offset || index > this.offset + this.capacity) {\n      return false;\n    }\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    return (this.values[byteIndex] & mask) !== 0;\n  }\n\n  toValueArray() {\n    const values = [];\n    for (let i = 1; i <= this.capacity; i ++) {\n      if (this.get(this.offset + i)) {\n        values.push(this.offset + i);\n      }\n    }\n    return values;\n  }\n\n  min() {\n    for (let i = this.offset; i <= this.offset + this.values.length * 8; i += 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const firstBit = Math.floor(i / 8) * 8;\n        for (let j = firstBit; j < firstBit + 8; j ++) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return Infinity;\n  }\n\n  max() {\n    for (let i = this.values.length * 8 + this.offset; i >= this.offset; i -= 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const lastBit = Math.ceil((i + 1) / 8) * 8;\n        for (let j = lastBit; j > lastBit - 8; j --) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return -Infinity;\n  }\n}\n","export class Flow {\n  constructor() {\n    this.lastVirtualFinish = 0;\n    this.nextVirtualFinish = Infinity;\n    this.queue = [];\n  }\n\n  computeWeight() {\n    return 1;\n  }\n}\n\nexport class Queue {\n  constructor(rate) {\n    this.rate = rate;\n    this.totalQueueSize = 0;\n    this.flows = [];\n  }\n\n  addFlow(flow) {\n    return this.flows.push(flow);\n  }\n\n  removeFlow(flow) {\n    const index = this.flows.indexOf(flow);\n    if (index !== -1) {\n      this.flows.splice(index, 1);\n    }\n  }\n\n  enqueue(flow, size, value) {\n    const weight = flow.computeWeight(this);\n    const rate = this.rate / weight;\n    const virtualFinish = Math.max(Date.now(), flow.lastVirtualFinish) + size / rate;\n\n    flow.queue.push({\n      virtualFinish,\n      size,\n      value,\n    });\n    flow.lastVirtualFinish = virtualFinish;\n    if (flow.queue.length === 1) {\n      flow.nextVirtualFinish = virtualFinish;\n    }\n  }\n\n  getNextScheduledFlow() {\n    let minVirtualFinish = Infinity;\n    let flow = null;\n    for (let i = 0; i < this.flows.length; i ++) {\n      if (this.flows[i].nextVirtualFinish < minVirtualFinish) {\n        flow = this.flows[i];\n        minVirtualFinish = flow.nextVirtualFinish;\n      }\n    }\n\n    return flow;\n  }\n\n  peek() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    return {\n      flow,\n      task: flow.queue[0],\n    };\n  }\n\n  dequeue() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    const task = flow.queue.shift();\n\n    flow.nextVirtualFinish = flow.queue.length !== 0\n      ? flow.queue[0].virtualFinish\n      : Infinity;\n\n    return {flow, task};\n  }\n}\n\nexport default {\n  Queue,\n  Flow,\n};\n","import BitArray from '../bitarray';\nimport Address from './address';\nimport wfq from '../wfq';\nimport EMA from '../ema';\nimport LEDBAT from '../ledbat';\nimport RingBuffer from '../RingBuffer';\nimport fenwick from 'fenwick-tree';\nimport binSearch from '../binSearch';\n// import TinyQeueue from 'tinyqueue';\n\nexport class AvailabilityMap {\n  constructor(capacity) {\n    this.values = new BitArray(capacity);\n  }\n\n  // TODO: ignore very large discard windows from remote peers...\n  setCapacity(capacity) {\n    this.values.resize(capacity);\n  }\n\n  set(address, value) {\n    this.values.setRange(address.start / 2, address.end / 2 + 1, value);\n  }\n\n  get({start, end = start}) {\n    for (let i = start; i <= end; i += 2) {\n      if (!this.values.get(i / 2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  min() {\n    return this.values.min() * 2;\n  }\n\n  max() {\n    return this.values.max() * 2;\n  }\n}\n\nexport class BinRingBuffer extends RingBuffer {\n  advanceLastBin(bin) {\n    super.advanceLastIndex(bin / 2);\n  }\n\n  setRange({start}, values) {\n    for (let i = 0; i < values.length; i ++) {\n      super.set(start / 2 + i, values[i]);\n    }\n  }\n\n  set({bin}, value) {\n    super.set(bin / 2, value);\n  }\n\n  get({bin}) {\n    return super.get(bin / 2);\n  }\n\n  forEach(callback) {\n    for (let i = this.lastIndex - this.capacity; i < this.lastIndex; i ++) {\n      if (callback(this.get(i), i * 2) === false) {\n        break;\n      }\n    }\n  }\n}\n\nexport class ScarcityMap {\n  constructor(capacity) {\n    this.capacity = Math.pow(2, Math.ceil(Math.log2(capacity)));\n    this.left = new Uint32Array(this.capacity).fill(0);\n    this.right = new Uint32Array(this.capacity).fill(0);\n    this.leftOffset = 0;\n    this.leftTotal = 0;\n    this.rightTotal = 0;\n  }\n\n  get rightOffset() {\n    return this.leftOffset + this.capacity;\n  }\n\n  get rolloverThreshold() {\n    return this.leftOffset + this.capacity * 2;\n  }\n\n  get purgeThreshold() {\n    return this.leftOffset + this.capacity * 3;\n  }\n\n  update(index, value) {\n    if (index > this.purgeThreshold) {\n      this.leftOffset = index;\n      this.left.fill(0);\n      this.right.fill(0);\n      this.leftTotal = this.rightTotal = 0;\n    }\n\n    if (index > this.rolloverThreshold) {\n      this.leftOffset += this.capacity;\n      [this.left, this.right] = [this.left, this.right];\n      this.right.fill(0);\n      this.leftTotal = this.rightTotal;\n      this.rightTotal = 0;\n    }\n\n    if (index >= this.rightOffset) {\n      fenwick.update(this.right, index - this.rightOffset, value);\n      this.rightTotal += value;\n    } else if (index >= this.leftOffset) {\n      fenwick.update(this.left, index - this.leftOffset, value);\n      this.leftTotal += value;\n    }\n  }\n\n  query(index) {\n    if (index >= this.rolloverThreshold) {\n      return this.leftTotal + this.rightTotal;\n    } else if (index >= this.rightOffset) {\n      return this.leftTotal + fenwick.query(this.right, index - this.rightOffset);\n    } else if (index >= this.leftOffset) {\n      return fenwick.query(this.left, index - this.leftOffset);\n    }\n    return 0;\n  }\n\n  queryRange(start, end) {\n    return this.query(end) - this.query(start - 1);\n  }\n\n  findSmallValue(fuzz = 0) {\n    const index = binSearch(\n      this.rolloverThreshold - this.leftOffset,\n      (mid, left, right) => {\n        const leftSum = this.queryRange(left, mid - 1);\n        const rightSum = this.queryRange(mid, right);\n\n        if (leftSum === rightSum) return 0;\n        if (leftSum === 0) return 1;\n        if (rightSum === 0) return -1;\n        return (rightSum - leftSum) * (Math.random() < fuzz ? -1 : 1);\n      },\n    );\n\n    return index * 2;\n  }\n}\n\nexport class BinScarcityMap {\n  constructor(capacity) {\n    this.map = new ScarcityMap(capacity);\n  }\n\n  update({bin}, value) {\n    this.map.update(bin / 2, value);\n  }\n\n  findBin() {\n    return this.map.findSmallValue(0.02) * 2;\n  }\n}\n\nexport class RateMeter {\n  constructor(windowMs, sampleWindowMs = 100) {\n    this.firstSampleWindow = Math.floor(Date.now() / sampleWindowMs);\n    this.lastSampleWindow = this.firstSampleWindow;\n    this.windowMs = windowMs;\n    this.sampleWindowMs = sampleWindowMs;\n    this.sum = 0;\n    this.values = new Array(Math.ceil(windowMs / sampleWindowMs));\n\n    this.values.fill(0);\n  }\n\n  adjustSampleWindow() {\n    const sampleWindow = Math.floor(Date.now() / this.sampleWindowMs);\n\n    for (let i = this.lastSampleWindow + 1; i <= sampleWindow; i ++) {\n      const index = i % this.values.length;\n      this.sum -= this.values[index];\n      this.values[index] = 0;\n    }\n    this.lastSampleWindow = sampleWindow;\n  }\n\n  update(value) {\n    this.adjustSampleWindow();\n    this.sum += value;\n    this.values[this.lastSampleWindow % this.values.length] += value;\n  }\n\n  value() {\n    this.adjustSampleWindow();\n    const accumulatedMs = Math.min(\n      (this.lastSampleWindow - this.firstSampleWindow) * this.sampleWindowMs,\n      this.windowMs,\n    );\n    return this.sum / accumulatedMs;\n  }\n}\n\nexport class ChunkRateMeter extends RateMeter {\n  constructor(windowMs = 15000) {\n    super(windowMs);\n    this.lastEndBin = 0;\n  }\n\n  update({start, end}) {\n    if (this.lastHeadBin === 0) {\n      super.update((end - start) / 2);\n    } else if (end > this.lastEndBin) {\n      super.update((end - this.lastEndBin) / 2);\n      this.lastEndBin = end;\n    }\n  }\n}\n\nexport class RequestFlow extends wfq.Flow {\n  constructor(id) {\n    super();\n    this.id = id;\n    this.queueSize = 0;\n  }\n\n  computeWeight(queue) {\n    return this.queueSize / queue.totalQueueSize;\n  }\n}\n\nexport class RequestQueue extends wfq.Queue {\n  constructor(rate) {\n    super(rate);\n    this.totalQueueSize = 0;\n  }\n\n  enqueue(flow, size, value) {\n    this.totalQueueSize += size;\n    flow.queueSize += size;\n    super.enqueue(flow, size, value);\n  }\n\n  cancel(flow, filter) {\n    flow.queue = flow.queue.filter(task => {\n      const remove = filter(task.value);\n\n      if (remove) {\n        this.totalQueueSize -= task.size;\n        flow.queueSize -= task.size;\n      }\n\n      return !remove;\n    });\n  }\n\n  dequeue() {\n    const result = super.dequeue();\n    if (result === null) {\n      return null;\n    }\n\n    this.totalQueueSize -= result.task.size;\n    result.flow.queueSize -= result.task.size;\n\n    return result;\n  }\n}\n\nexport class SchedulerChunkState {\n  constructor(bin) {\n    this.bin = bin;\n    this.reset();\n  }\n\n  reset() {\n    this.availableCopies = 0;\n    this.requestTime = [0, 0];\n    this.requestPeerId = 0;\n\n    this.requested = false;\n    this.received = false;\n    this.verified = false;\n  }\n}\n\nexport class SchedulerChunkRequestMap {\n  constructor() {\n    this.valueByBin = {};\n    this.head = undefined;\n    this.tail = undefined;\n    this.length = 0;\n  }\n\n  insert(address) {\n    const now = Date.now();\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      const value = {\n        address: new Address(i, [i, i]),\n        createdAt: now,\n        next: undefined,\n        prev: undefined,\n      };\n      this.valueByBin[i] = value;\n\n      if (this.head === undefined) {\n        this.head = value;\n      } else {\n        this.tail.next = value;\n      }\n      value.prev = this.tail;\n      this.tail = value;\n\n      this.length ++;\n    }\n  }\n\n  get({bin}) {\n    return this.valueByBin[bin];\n  }\n\n  remove({bin}) {\n    const value = this.valueByBin[bin];\n    if (value === undefined) {\n      return;\n    }\n    delete this.valueByBin[bin];\n\n    if (this.head === value) {\n      this.head = value.next;\n    }\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.prev !== undefined) {\n      value.prev.next = value.next;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = value.prev;\n    }\n\n    this.length --;\n  }\n\n  peek() {\n    return this.head;\n  }\n\n  pop() {\n    if (this.head === undefined) {\n      return;\n    }\n    const value = this.head;\n\n    this.head = value.next;\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = undefined;\n    }\n\n    delete this.valueByBin[value.address.bin];\n\n    this.length --;\n\n    return value;\n  }\n}\n\nexport class SchedulerChunkMap extends BinRingBuffer {\n  createEmptyValue(bin, value) {\n    if (value === undefined) {\n      return new SchedulerChunkState(bin);\n    }\n\n    // put the peer map here and when we advance the bin meme update\n    // the availability map here\n\n    value.reset();\n    return value;\n  }\n}\n\nexport class SchedulerPeerState {\n  constructor(peer, requestFlow) {\n    this.peer = peer;\n    this.requestFlow = requestFlow;\n    this.availableChunks = new AvailabilityMap();\n\n    this.ledbat = new LEDBAT();\n\n    // this.rttMean = new EMA(0.125);\n    // this.rttVar = new EMA(0.25);\n\n    this.rttMean = new EMA(0.05);\n    this.rttVar = new EMA(0.05);\n\n    this.chunkIntervalMean = new EMA(0.25);\n    this.chunkRate = new RateMeter(15000);\n    this.wasteRate = new RateMeter(15000);\n    this.lastChunkTime = null;\n\n    this.requestTimes = new BinRingBuffer();\n\n    this.requestedChunks = new SchedulerChunkRequestMap();\n    this.sentRequests = new SchedulerChunkRequestMap();\n\n    this.timeouts = 0;\n    this.validChunks = 0;\n    this.invalidChunks = 0;\n\n    this.requestQueue = [];\n\n    this.sentChunks = new AvailabilityMap();\n    this.receivedChunks = new AvailabilityMap();\n  }\n}\n\nexport class Scheduler {\n  constructor(chunkSize, clientOptions) {\n    const {\n      liveDiscardWindow,\n      uploadRateLimit,\n    } = clientOptions;\n\n    this.chunkSize = chunkSize;\n    this.liveDiscardWindow = liveDiscardWindow;\n\n    this.peerStates = {};\n    // this.chunkStates = new SchedulerChunkMap(liveDiscardWindow);\n    this.loadedChunks = new AvailabilityMap(liveDiscardWindow);\n    this.peerCount = 0;\n\n    this.chunkRate = new ChunkRateMeter();\n\n    this.requestQueue = new RequestQueue(uploadRateLimit / 1000);\n\n    this.timers = {};\n\n    this.lastExportedBin = -Infinity;\n    this.lastCompletedBin = -Infinity;\n    this.requestedChunks = new AvailabilityMap(liveDiscardWindow);\n\n    // this.scarcityMap = new BinScarcityMap(liveDiscardWindow);\n    // this.binQueue = new TinyQeueue([], (a, b) => {\n    //   return a.bin - b.bin;\n    // });\n\n    // TODO: up/down regulate when we're downloading slower or faster than the\n    // stream's average bit rate?\n    this.priorityBinThreshold = 4;\n    // window.setUrgencyThreshold = v => this.priorityBinThreshold = v;\n\n    this.totalSends = 0;\n    this.totalRequests = 0;\n    this.totalRequestsReceived = 0;\n    this.totalReceived = 0;\n    this.totalAdded = 0;\n    this.totalCancelled = 0;\n    this.ackUnknownSend = 0;\n    this.totalDroppedRequests = 0;\n    this.sendDelay = new EMA(0.05);\n    // setInterval(this.debug.bind(this), 1000);\n\n    this.nextSendTime = 0;\n    this.nextSendTimeout = 0;\n  }\n\n  debug() {\n    console.log('---');\n    Object.values(this.peerStates).forEach((peerState) => {\n      if (!peerState.peer.isReady()) {\n        return;\n      }\n\n      let cto = peerState.ledbat.cto / (peerState.ledbat.cwnd / this.chunkSize);\n      const timeout = Math.min(cto, 1000);\n\n      const availableChunks = peerState.availableChunks;\n\n      const firstLoadedChunk = this.loadedChunks.min();\n      const firstRequestedChunk = this.requestedChunks.min();\n      const startBin = Math.max(\n        availableChunks.min(),\n        isFinite(firstLoadedChunk) ? firstLoadedChunk : -Infinity,\n        isFinite(firstRequestedChunk) ? firstLoadedChunk : -Infinity,\n        this.lastCompletedBin,\n      );\n      const lastAvailableBin = Math.min(availableChunks.max(), startBin + this.liveDiscardWindow * 2);\n\n      const planFor = Math.min(1000, peerState.ledbat.rttMean.value() * 4);\n\n      const dip = peerState.chunkIntervalMean.value() || 0;\n      const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n      const cwnd = firstPlanPick - peerState.sentRequests.length;\n\n      console.log(JSON.stringify({\n        peer_remoteId: peerState.peer.remoteId,\n        peer_localId: peerState.peer.localId,\n        sentRequests: peerState.sentRequests.length,\n        swift_rtt: peerState.rttMean.value(),\n        swift_rttvar: peerState.rttVar.value(),\n        swift_chunkIntervalMean: peerState.chunkIntervalMean.value(),\n        chunkRate: peerState.chunkRate.value(),\n        wasteRate: peerState.wasteRate.value(),\n        swift_cwnd: cwnd,\n        ledbat_cwnd: peerState.ledbat.cwnd,\n        ledbat_cto: peerState.ledbat.cto,\n        ledbat_currentDelay: peerState.ledbat.currentDelay.getMin(),\n        ledbat_baseDelay: peerState.ledbat.baseDelay.getMin(),\n        ledbat_rttMean: peerState.ledbat.rttMean.value(),\n        ledbat_rttVar: peerState.ledbat.rttVar.value(),\n        ledbat_rtt: peerState.ledbat.rtt,\n        ledbat_flightSize: peerState.ledbat.flightSize,\n        // requestedChunks: peerState.requestedChunks,\n        timeouts: peerState.timeouts,\n        validChunks: peerState.validChunks,\n        invalidChunks: peerState.invalidChunks,\n        timeout: timeout,\n        picker_startBin: startBin,\n        picker_lastAvailableBin: lastAvailableBin,\n      }, true, 2));\n    });\n\n    console.log(JSON.stringify({\n      totalSends: this.totalSends,\n      totalRequests: this.totalRequests,\n      totalRequestsReceived: this.totalRequestsReceived,\n      totalDroppedRequests: this.totalDroppedRequests,\n      totalReceived: this.totalReceived,\n      totalAdded: this.totalAdded,\n      totalCancelled: this.totalCancelled,\n      ackUnknownSend: this.ackUnknownSend,\n      minIncompleteBin: this.lastCompletedBin,\n      sendDelay: this.sendDelay.value(),\n      picker_firstLoadedChunk: this.loadedChunks.min(),\n      picker_firstRequestedChunk: this.requestedChunks.min(),\n      chunkRate: this.chunkRate.value(),\n    }, true, 2));\n    // this.totalSends = 0;\n    // this.totalRequests = 0;\n    // this.totalRequestsReceived = 0;\n    // this.totalReceived = 0;\n    // // this.ackUnknownSend = 0;\n    // this.totalAdded = 0;\n    // this.totalCancelled = 0;\n    // this.totalDroppedRequests = 0;\n  }\n\n  update(peerState, update) {\n    if (!peerState.peer.isReady()) {\n      this.timers[peerState.localId] = setTimeout(update, 1000);\n      return;\n    }\n\n    const {\n      availableChunks,\n      ledbat,\n      sentRequests,\n    } = peerState;\n\n    const now = Date.now();\n    // const planFor = ledbat.rttMean.value();\n    // const planFor = ledbat.rttMean.value() * 2 + ledbat.rttVar.value() * 4;\n    const planFor = Math.max(1000, ledbat.rttMean.value() * 4);\n    const timeoutThreshold = now - Math.min(1000, ledbat.cto) * 2;\n\n    const dip = peerState.chunkIntervalMean.value() || 0;\n    const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n    const cwnd = firstPlanPick - sentRequests.length;\n\n    const cancelledRequests = [];\n    while (sentRequests.peek() !== undefined\n      && sentRequests.peek().createdAt < timeoutThreshold) {\n      cancelledRequests.push(sentRequests.pop());\n    }\n\n    if (cancelledRequests.length > 0) {\n      this.totalCancelled += cancelledRequests.length;\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        sentRequests.remove(address);\n      });\n\n      ledbat.onDataLoss(cancelledRequests.length * this.chunkSize);\n      // console.log(cancelledRequests);\n    }\n\n    ledbat.digestDelaySamples();\n\n    const requestAddresses = [];\n\n    const startBin = Math.max(\n      this.loadedChunks.values.offset * 2 + 2,\n      this.requestedChunks.values.offset * 2 + 2,\n      availableChunks.min(),\n      this.lastCompletedBin,\n    );\n    const endBin = Math.min(\n      startBin + this.liveDiscardWindow * 2,\n      availableChunks.max(),\n    );\n    const priorityBinThreshold = this.lastCompletedBin + this.priorityBinThreshold;\n\n    for (let i = startBin; i < endBin && requestAddresses.length < cwnd; i += 2) {\n      const address = new Address(i, [i, i]);\n      if (!this.loadedChunks.get(address)\n        && !this.requestedChunks.get(address)\n        && availableChunks.get(address)) {\n\n        if (address.bin < priorityBinThreshold || Math.random() < 0.1) {\n          requestAddresses.push(address);\n          sentRequests.insert(address);\n          this.requestedChunks.set(address);\n        }\n      }\n    }\n\n    if (this.lastCompletedBin === -Infinity && requestAddresses.length !== 0) {\n      const firstRequestedBin = requestAddresses[0].bin;\n      this.lastCompletedBin = firstRequestedBin;\n      this.lastExportedBin = firstRequestedBin - 2;\n    }\n\n    if (cancelledRequests.length !== 0) {\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        peerState.peer.sendCancel(address);\n      });\n    }\n\n    if (requestAddresses.length !== 0) {\n      this.totalRequests += requestAddresses.length;\n      peerState.peer.sendRequest(...requestAddresses);\n\n      requestAddresses.forEach(address => {\n        if (peerState.requestTimes.get(address) === undefined) {\n          peerState.requestTimes.set(address, now);\n        }\n      });\n    }\n\n    while (ledbat.flightSize < ledbat.cwnd && peerState.requestQueue.length) {\n      const requestedAddress = peerState.requestQueue.shift();\n      if (requestedAddress !== undefined) {\n        const requestedChunk = peerState.requestedChunks.get(requestedAddress);\n        if (requestedChunk !== undefined) {\n          requestedChunk.sentAt = now;\n          peerState.ledbat.addSent(this.chunkSize);\n          peerState.peer.sendChunk(requestedAddress);\n          this.totalSends ++;\n        }\n      }\n\n      peerState.sentChunks.set(requestedAddress);\n\n      // TODO: volunteer bin we have and they don't?\n    }\n\n    peerState.peer.flush();\n    let sendInterval = Math.min(1000, (ledbat.rttMean.value() || 0) / (ledbat.cwnd / this.chunkSize));\n    this.timers[peerState.localId] = setTimeout(update, sendInterval);\n  }\n\n  addPeer(peer) {\n    const {localId} = peer;\n\n    const requestFlow = new RequestFlow(localId);\n    this.requestQueue.addFlow(requestFlow);\n\n    const peerState = new SchedulerPeerState(peer, requestFlow);\n    this.peerStates[localId] = peerState;\n\n    const update = () => this.update(peerState, update);\n    this.timers[localId] = setTimeout(update, 1000);\n  }\n\n  removePeer({localId}) {\n    const peerState = this.peerStates[localId];\n    if (peerState === undefined) {\n      return;\n    }\n\n    const {\n      requestFlow,\n      sentRequests,\n    } = peerState;\n\n    this.requestQueue.removeFlow(requestFlow);\n\n    this.totalCancelled += sentRequests.length;\n    while (sentRequests.length) {\n      const {address} = sentRequests.pop();\n      this.requestedChunks.set(address, false);\n    }\n\n    delete this.peerStates[localId];\n\n    clearTimeout(this.timers[localId]);\n  }\n\n  getPeerState({localId}) {\n    return this.peerStates[localId];\n  }\n\n  getRecentChunks() {\n    // TODO: how to pick this... maybe remote discard window size?\n    // const startBin = this.loadedChunks.max();\n    // const startBin = this.loadedChunks.max() - 32;\n    const startBin = this.lastCompletedBin;\n\n    // bail if no chunks have been loaded yet\n    if (!isFinite(startBin)) {\n      return [];\n    }\n\n    const bins = [];\n\n    const endBin = this.loadedChunks.max();\n    for (let i = startBin; i <= endBin; i += 2) {\n      const address = new Address(i);\n      if (this.loadedChunks.get(address)) {\n        bins.push(address);\n      }\n    }\n\n    return bins;\n  }\n\n  setLiveDiscardWindow(peer, liveDiscardWindow) {\n    this.getPeerState(peer).availableChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).requestTimes.setCapacity(liveDiscardWindow);\n\n    this.getPeerState(peer).sentChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).receivedChunks.setCapacity(liveDiscardWindow);\n  }\n\n  markChunkReceived(peer, address, delaySample) {\n    const now = Date.now();\n\n    this.totalReceived ++;\n\n    const peerState = this.getPeerState(peer);\n    if (peerState === undefined) {\n      return;\n    }\n\n    if (this.loadedChunks.get(address)) {\n      peerState.wasteRate.update(1);\n    }\n\n    const request = peerState.sentRequests.get(address);\n    if (request === undefined) {\n      return;\n    }\n\n    if (peerState.lastChunkTime !== null) {\n      const chunkInterval = now - peerState.lastChunkTime;\n      peerState.chunkIntervalMean.update(chunkInterval);\n    }\n    peerState.lastChunkTime = now;\n    if (!this.loadedChunks.get(address)) {\n      peerState.chunkRate.update(1);\n    }\n\n    const requestTime = peerState.requestTimes.get(address);\n    if (requestTime !== undefined) {\n      peerState.ledbat.addRttSample(now - requestTime);\n    }\n\n    // peerState.rttMean.update(rtt);\n    // peerState.rttVar.update(Math.abs(rtt - peerState.rttMean.value()));\n\n    // TODO: double check LEDBAT to make sure we shouldn't be doing\n    // something here\n\n    peerState.sentRequests.remove(address);\n  }\n\n  markChunkVerified(peer, address) {\n    // this.chunkStates.get(address).verified = true;\n    this.getPeerState(peer).validChunks ++;\n    this.getPeerState(peer).receivedChunks.set(address);\n\n    // this.chunkStates.advanceLastBin(address.end);\n\n    this.chunkRate.update(address);\n    this.loadedChunks.set(address);\n\n    for (let i = this.lastCompletedBin; this.loadedChunks.get(new Address(i, [i, i])); i += 2) {\n      this.lastCompletedBin = i;\n    }\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  getNewCompleteBins() {\n    const nextExportedBin = this.lastExportedBin + 2;\n    if (nextExportedBin <= this.lastCompletedBin) {\n      this.lastExportedBin = this.lastCompletedBin;\n      return [nextExportedBin, this.lastCompletedBin];\n    }\n  }\n\n  markChunkRejected(peer, address) {\n    this.requestedChunks.set(address, false);\n    this.getPeerState(peer).invalidChunks ++;\n  }\n\n  // mark an address available from a peer (HAVE)\n  markChunkAvailable(peer, address) {\n    for (let i = address.start; i <= address.end; i += 2) {\n      const address = new Address(i, [i, i]);\n\n      // this.binQueue.push(address);\n      // this.scarcityMap.update(address, 1);\n\n      if (!this.getPeerState(peer).availableChunks.get(address)) {\n        this.totalAdded ++;\n      }\n    }\n\n    this.getPeerState(peer).availableChunks.set(address);\n  }\n\n  // mark an address where chunks have been manually added ie. by an injector\n  markChunksLoaded(address) {\n    this.loadedChunks.set(address);\n    this.lastCompletedBin = address.start;\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  markSendAcked(peer, address, delaySample) {\n    const peerState = this.getPeerState(peer);\n\n    peerState.ledbat.addDelaySample(delaySample, this.chunkSize);\n\n    const sentChunk = peerState.requestedChunks.get(address);\n    if (sentChunk === undefined) {\n      this.ackUnknownSend ++;\n      return;\n    }\n\n    // TODO: is this necessary?\n    if (sentChunk.sentAt) {\n      peerState.ledbat.addRttSample(Date.now() - sentChunk.sentAt);\n    }\n\n    peerState.requestedChunks.remove(address);\n  }\n\n  enqueueRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      this.totalRequestsReceived ++;\n      peerState.requestQueue.push(new Address(i, [i, i]));\n    }\n\n    peerState.requestedChunks.insert(address);\n  }\n\n  cancelRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n    const requestedChunk = peerState.requestedChunks.get(address);\n    if (requestedChunk && requestedChunk.sentAt) {\n      peerState.ledbat.onDataLoss(this.chunkSize);\n    }\n    peerState.requestedChunks.remove(address);\n\n    // this.requestQueue.cancel(\n    //   this.getPeerState(peer).requestFlow,\n    //   ({bin}) => address.containsBin(bin),\n    // );\n  }\n}\n","import {EventEmitter} from 'events';\nimport once from 'lodash.once';\nimport Address from './address';\nimport SwarmId from './swarmid';\nimport LEDBAT from '../ledbat';\nimport {\n  createChunkAddressFieldType,\n  createLiveSignatureFieldType,\n  createIntegrityHashFieldType,\n  createEncoding,\n} from './encoding';\nimport {\n  MaxChannelId,\n  ProtocolOptions,\n  MessageTypes,\n} from './constants';\nimport {\n  createMerkleHashTreeFunction,\n  createLiveSignatureVerifyFunction,\n  createLiveSignatureSignFunction,\n  createContentIntegrityVerifierFactory,\n} from './integrity';\nimport {\n  BinRingBuffer,\n  Scheduler,\n} from './scheduler';\n\nconst genericEncoding = createEncoding();\n\nconst BUFFER_SIZE = 3e7;\nconst MAX_UPLOAD_RATE = 1e6;\nconst HANDSHAKE_TIMEOUT = 5000;\n\nexport class Swarm extends EventEmitter {\n  constructor(uri, clientOptions) {\n    super();\n\n    const {swarmId} = uri;\n    const {\n      [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n      [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n      [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n      [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n      [ProtocolOptions.ChunkSize]: chunkSize,\n    } = uri.protocolOptions;\n    const {\n      liveDiscardWindow,\n      privateKey,\n    } = clientOptions;\n\n    this.uri = uri;\n\n    this.encoding = createEncoding(\n      createChunkAddressFieldType(chunkAddressingMethod, chunkSize),\n      createIntegrityHashFieldType(merkleHashTreeFunction),\n      createLiveSignatureFieldType(liveSignatureAlgorithm, swarmId),\n    );\n\n    const liveSignatureSignFunction = privateKey !== undefined\n      ? createLiveSignatureSignFunction(liveSignatureAlgorithm, privateKey)\n      : undefined;\n    this.contentIntegrity = createContentIntegrityVerifierFactory(\n      contentIntegrityProtectionMethod,\n      createMerkleHashTreeFunction(merkleHashTreeFunction),\n      createLiveSignatureVerifyFunction(liveSignatureAlgorithm, swarmId),\n      liveSignatureSignFunction,\n      liveDiscardWindow,\n    );\n\n    this.chunkBuffer = new BinRingBuffer(liveDiscardWindow);\n    this.scheduler = new Scheduler(chunkSize, clientOptions);\n\n    this.protocolOptions = [\n      new this.encoding.VersionProtocolOption(),\n      new this.encoding.MinimumVersionProtocolOption(),\n      new this.encoding.SwarmIdentifierProtocolOption(swarmId.toBuffer()),\n      new this.encoding.ContentIntegrityProtectionMethodProtocolOption(contentIntegrityProtectionMethod),\n      new this.encoding.MerkleHashTreeFunctionProtocolOption(merkleHashTreeFunction),\n      new this.encoding.LiveSignatureAlgorithmProtocolOption(liveSignatureAlgorithm),\n      new this.encoding.ChunkAddressingMethodProtocolOption(chunkAddressingMethod),\n      new this.encoding.ChunkSizeProtocolOption(chunkSize),\n      new this.encoding.LiveDiscardWindowProtocolOption(liveDiscardWindow),\n    ];\n  }\n\n  verifyProtocolOptions(protocolOptions) {\n    Object.entries(this.uri.protocolOptions)\n      .forEach(([protocolOption, value]) => {\n        if (protocolOptions[protocolOption] !== value) {\n          const protocolOptionName = ProtocolOptions.name(protocolOption);\n          throw new Error(`invalid peer options: ${protocolOptionName} mismatch`);\n        }\n      });\n  }\n\n  emitNewData() {\n    const newBins = this.scheduler.getNewCompleteBins();\n    if (newBins !== undefined) {\n      const [minNewBin, maxNewBin] = newBins;\n      const chunks = [];\n      for (let i = minNewBin; i <= maxNewBin; i += 2) {\n        const chunk = this.chunkBuffer.get(new Address(i));\n\n        if (chunk === undefined) {\n          // debugger;\n          continue;\n        }\n        chunks.push(chunk);\n      }\n      this.emit('data', chunks);\n    }\n  }\n}\n\nconst PeerState = {\n  CONNECTING: 1,\n  AWAITING_HANDSHAKE: 2,\n  READY: 3,\n  CHOKED: 4,\n  DISCONNECTING: 5,\n  CLOSED: 6,\n};\n\nclass PeerDataHandlerContext {\n  constructor(swarm) {\n    this.swarm = swarm;\n    this.integrityVerifier = null;\n  }\n\n  getContentIntegrityVerifier(address) {\n    if (this.integrityVerifier === null) {\n      this.integrityVerifier = this.swarm.contentIntegrity.createVerifier(address);\n    }\n    return this.integrityVerifier;\n  }\n}\n\n// TODO: disconnect inactive peers\nclass Peer {\n  constructor(swarm, channel, remoteId = 0, localId = Peer.createChannelId()) {\n    this.swarm = swarm;\n    this.channel = channel;\n    this.remoteId = remoteId;\n    this.localId = localId;\n    this.state = PeerState.CONNECTING;\n\n    this.handlers = {\n      [MessageTypes.HANDSHAKE]: this.handleHandshakeMessage.bind(this),\n      [MessageTypes.DATA]: this.handleDataMessage.bind(this),\n      [MessageTypes.HAVE]: this.handleHaveMessage.bind(this),\n      [MessageTypes.ACK]: this.handleAckMessage.bind(this),\n      [MessageTypes.INTEGRITY]: this.handleIntegrityMessage.bind(this),\n      [MessageTypes.SIGNED_INTEGRITY]: this.handleSignedIntegrityMessage.bind(this),\n      [MessageTypes.REQUEST]: this.handleRequestMessage.bind(this),\n      [MessageTypes.CANCEL]: this.handleCancelMessage.bind(this),\n      [MessageTypes.CHOKE]: this.handleChokeMessage.bind(this),\n      [MessageTypes.UNCHOKE]: this.handleUnchokeMessage.bind(this),\n    };\n\n    this.sendBuffer = [];\n\n    this.swarm.scheduler.addPeer(this);\n  }\n\n  static createChannelId() {\n    return Math.round(Math.random() * MaxChannelId);\n  }\n\n  init() {\n    this.sendHandshake();\n    this.flush();\n\n    this.state = PeerState.AWAITING_HANDSHAKE;\n  }\n\n  close() {\n    this.state = PeerState.CLOSED;\n    this.swarm.scheduler.removePeer(this);\n  }\n\n  handleData(data) {\n    const context = new PeerDataHandlerContext(this.swarm);\n    data.messages.toArray().forEach(message => this.handleMessage(message, context));\n  }\n\n  handleMessage(message, context) {\n    const handler = this.handlers[message.type];\n    if (handler === undefined) {\n      throw new Error('unsupported message type');\n    }\n\n    // console.log(MessageTypes.name(message.type), this.remoteId, message);\n    handler(message, context);\n  }\n\n  handleHandshakeMessage(handshake) {\n    const options = handshake.options.reduce((options, {type, value}) => ({...options, [type]: value}), {});\n\n    const liveDiscardWindow = options[ProtocolOptions.LiveDiscardWindow];\n    if (liveDiscardWindow !== undefined) {\n      this.swarm.scheduler.setLiveDiscardWindow(this, liveDiscardWindow);\n    }\n\n    this.swarm.verifyProtocolOptions(options);\n\n    this.remoteId = handshake.channelId;\n\n    // console.log('received handshake message while in state', this.state);\n    if (this.state !== PeerState.READY) {\n      this.sendHandshake();\n      this.swarm.scheduler.getRecentChunks().forEach(address => this.sendHave(address));\n      this.flush();\n    }\n\n    this.state = PeerState.READY;\n  }\n\n  handleDataMessage(message, context) {\n    const address = Address.from(message.address);\n    const delaySample = LEDBAT.computeOneWayDelay(message.timestamp.value);\n\n    this.swarm.scheduler.markChunkReceived(this, address, delaySample);\n\n    const {encoding} = this.swarm;\n    this.channel.send(new encoding.Datagram(\n      this.remoteId,\n      [new encoding.AckMessage(message.address, new encoding.Timestamp(delaySample))],\n    ));\n\n    context.getContentIntegrityVerifier(address).verifyChunk(address, message.data)\n      .then(() => {\n        this.swarm.chunkBuffer.set(address, message.data);\n        this.swarm.scheduler.markChunkVerified(this, address);\n        this.swarm.emitNewData();\n      })\n      .catch((err) => {\n        console.log('error validating chunk', err);\n        this.swarm.scheduler.markChunkRejected(this, address);\n      });\n  }\n\n  handleHaveMessage(message) {\n    this.swarm.scheduler.markChunkAvailable(this, Address.from(message.address));\n  }\n\n  handleAckMessage(message) {\n    const address = Address.from(message.address);\n    this.swarm.scheduler.markChunkAvailable(this, address);\n    this.swarm.scheduler.markSendAcked(this, address, message.delaySample.value);\n  }\n\n  handleIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHash(address, message.hash.value);\n  }\n\n  handleSignedIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHashSignature(address, message.signature.value);\n  }\n\n  handleRequestMessage(message) {\n    this.swarm.scheduler.enqueueRequest(this, Address.from(message.address));\n  }\n\n  handleCancelMessage(message) {\n    this.swarm.scheduler.cancelRequest(this, Address.from(message.address));\n  }\n\n  handleChokeMessage() {\n    this.state = PeerState.CHOKED;\n  }\n\n  handleUnchokeMessage() {\n    this.state = PeerState.READY;\n  }\n\n  isReady() {\n    return this.state === PeerState.READY;\n  }\n\n  isInitialized() {\n    return this.state !== PeerState.CONNECTING && this.state !== PeerState.AWAITING_HANDSHAKE;\n  }\n\n  sendHandshake() {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HandshakeMessage(\n      this.localId,\n      [\n        ...this.swarm.protocolOptions,\n        new encoding.SupportedMessagesProtocolOption(Object.keys(this.handlers)),\n      ],\n    ));\n  }\n\n  sendHave(address) {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HaveMessage(encoding.ChunkAddress.from(address)));\n  }\n\n  sendRequest(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.RequestMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendCancel(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.CancelMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendChunk(address, timestamp) {\n    const chunk = this.swarm.chunkBuffer.get(address);\n    if (chunk === undefined) {\n      return;\n    }\n\n    // TODO: omit signatures for bins the peer has already acked\n    const constituentSignatures = this.swarm.contentIntegrity.getConstituentSignatures(address);\n    if (constituentSignatures === undefined) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n\n    constituentSignatures\n      .reverse()\n      .forEach(({bin, signature}, i) => {\n        const address = encoding.ChunkAddress.from(new Address(bin));\n\n        this.sendBuffer.push(new encoding.IntegrityMessage(\n          address,\n          new encoding.IntegrityHash(signature.getHash()),\n        ));\n\n        if (i === 0) {\n          this.sendBuffer.push(new encoding.SignedIntegrityMessage(\n            address,\n            new encoding.Timestamp(timestamp),\n            new encoding.LiveSignature(signature.getSignatureHash()),\n          ));\n        }\n      });\n\n    this.sendBuffer.push(new encoding.DataMessage(encoding.ChunkAddress.from(address), chunk));\n\n    this.flush();\n  }\n\n  flush() {\n    if (this.sendBuffer.length === 0) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n    try {\n      this.channel.send(new encoding.Datagram(this.remoteId, this.sendBuffer));\n    } catch (e) {\n      console.log('error sending');\n      console.log(this.channel);\n      throw e;\n    }\n    this.sendBuffer = [];\n  }\n}\n\nclass SwarmSet extends EventEmitter {\n  constructor() {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.swarms = {};\n  }\n\n  insert(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] === undefined) {\n      this.swarms[key] = swarm;\n      this.emit('insert', swarm);\n    }\n  }\n\n  remove(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] !== undefined) {\n      delete this.swarms[key];\n      this.emit('remove', swarm);\n    }\n  }\n\n  get(swarmId) {\n    return this.swarms[SwarmSet.swarmIdToKey(swarmId)];\n  }\n\n  toArray() {\n    return Object.values(this.swarms);\n  }\n\n  static swarmIdToKey(swarmId) {\n    return swarmId.toBuffer().toString('base64');\n  }\n}\n\nexport class Client {\n  constructor() {\n    this.channels = [];\n\n    this.swarms = new SwarmSet();\n  }\n\n  publishSwarm(swarm) {\n    this.swarms.insert(swarm);\n  }\n\n  unpublishSwarm(swarm) {\n    this.swarms.remove(swarm);\n  }\n\n  joinSwarm(uri) {\n    const chunkSize = uri.protocolOptions[ProtocolOptions.ChunkSize];\n    const clientOptions = {\n      liveDiscardWindow: Math.ceil(BUFFER_SIZE / chunkSize),\n      uploadRateLimit: MAX_UPLOAD_RATE,\n    };\n\n    const swarm = new Swarm(uri, clientOptions);\n    this.swarms.insert(swarm);\n\n    return swarm;\n  }\n\n  leaveSwarm({id}) {\n    const swarm = this.swarms.get(id);\n    this.swarms.remove(swarm);\n  }\n\n  createChannel(conn) {\n    const channel = new Channel(conn, this.swarms);\n    this.channels.push(channel);\n\n    channel.once('close', () => {\n      const index = this.channels.indexOf(channel);\n      this.channels.splice(index, 1);\n    });\n  }\n}\n\nexport class Channel extends EventEmitter {\n  constructor(conn, swarms) {\n    super();\n\n    this.conn = conn;\n    this.swarms = swarms;\n    this.peers = {};\n\n    this.handleSwarmInsert = this.getOrCreatePeer.bind(this);\n    this.swarms.on('insert', this.handleSwarmInsert);\n\n    const liveSwarms = swarms.toArray();\n    this.conn.addEventListener('open', () => liveSwarms.forEach(this.handleSwarmInsert));\n    this.conn.addEventListener('message', this.handleMessage.bind(this));\n    this.conn.addEventListener('error', err => console.log('connection error:', err));\n    this.conn.addEventListener('close', this.handleClose.bind(this));\n  }\n\n  handleMessage(event) {\n    let data = new genericEncoding.Datagram();\n    try {\n      data.read(event.data);\n    } catch (e) {\n      console.log(event.data);\n      throw e;\n    }\n\n    let peer = this.peers[data.channelId];\n    if (peer === undefined) {\n      if (data.channelId !== 0) {\n        return;\n      }\n\n      let handshake;\n      try {\n        handshake = data.messages.next();\n      } catch (error) {\n        console.log('error decoding mesasge', error);\n        return;\n      }\n      if (handshake === undefined || handshake.type !== MessageTypes.HANDSHAKE) {\n        console.log('rejected new peer without handshake');\n        return;\n      }\n      const swarmId = handshake.options.find(({type}) => type === ProtocolOptions.SwarmIdentifier);\n      if (swarmId === undefined) {\n        // console.log('rejecting new peer with invalid swarm id');\n        return;\n      }\n      const swarm = this.swarms.get(SwarmId.from(swarmId.value));\n      if (swarm === undefined) {\n        // console.log('rejecting new peer requesting unknown swarm');\n        return;\n      }\n\n      peer = this.getOrCreatePeer(swarm);\n    }\n\n    data = new peer.swarm.encoding.Datagram();\n    data.read(event.data);\n    // console.log('RECEIVED', data.messages.toArray());\n    peer.handleData(data);\n  }\n\n  send(data) {\n    if (this.conn.readyState !== 'open') {\n      this.conn.addEventListener('open', () => this.conn.send(data.toBuffer()));\n      return;\n    }\n\n    try {\n      this.conn.send(data.toBuffer());\n    } catch (e) {\n      this.conn.close();\n    }\n  }\n\n  handleClose() {\n    this.swarms.removeListener('insert', this.handleSwarmInsert);\n    Object.values(this.peers).forEach(peer => peer.close());\n    this.emit('close');\n  }\n\n  getOrCreatePeer(swarm) {\n    let peer = Object.values(this.peers).find(p => p.swarm === swarm);\n    return peer || this.createPeer(swarm);\n  }\n\n  createPeer(swarm) {\n    const {peers, swarms} = this;\n\n    const peer = new Peer(swarm, this);\n    peers[peer.localId] = peer;\n    peer.init();\n\n    const destroyPeer = once(() => {\n      delete peers[peer.localId];\n      peer.close();\n\n      swarms.removeListener('remove', handleRemove);\n    });\n    setTimeout(() => {\n      if (!peer.isInitialized()) {\n        destroyPeer();\n      }\n    }, HANDSHAKE_TIMEOUT);\n\n    const handleRemove = removedSwarm => {\n      if (removedSwarm === swarm) {\n        destroyPeer();\n      }\n    };\n    swarms.on('remove', handleRemove);\n\n    return peer;\n  }\n}\n","import URLSafeBase64 from 'urlsafe-base64';\nimport SwarmId from './swarmid';\nimport {ProtocolOptions} from './constants';\n\nconst protocolOptionToKey = {\n  [ProtocolOptions.ContentIntegrityProtectionMethod]: 'x.im',\n  [ProtocolOptions.MerkleHashTreeFunction]: 'x.hf',\n  [ProtocolOptions.LiveSignatureAlgorithm]: 'x.sa',\n  [ProtocolOptions.ChunkAddressingMethod]: 'x.am',\n  [ProtocolOptions.ChunkSize]: 'x.cs',\n};\n\n// TODO: dn with stream name\n// TODO: as to m3u8 url?\nexport default class URI {\n  constructor(swarmId, protocolOptions) {\n    this.swarmId = swarmId;\n    this.protocolOptions = protocolOptions;\n  }\n\n  toString() {\n    const swarmId = URLSafeBase64.encode(this.swarmId.toBuffer());\n    const protocolOptions = Object.entries(this.protocolOptions)\n      .map(([protocolOption, value]) => `${protocolOptionToKey[protocolOption]}=${value}`)\n      .join('&');\n    return `magnet:?xt=urn:ppspp:${swarmId}&${protocolOptions}`;\n  }\n\n  static parse(uriString) {\n    if (!uriString.startsWith('magnet:')) {\n      throw new Error('invalid uri: expected magnet');\n    }\n\n    const args = uriString.substring(8)\n      .split('&')\n      .map(query => {\n        const [key, value] = query.split('=');\n        return [key, decodeURIComponent(value)];\n      });\n\n    const protocolOptions = Object.entries(protocolOptionToKey)\n      .reduce((protocolOptions, [protocolOption, key]) => {\n        const arg = args.find(([argKey]) => argKey === key);\n        if (arg === undefined) {\n          throw new Error(`invalid uri: missing ${key}`);\n        }\n        return {...protocolOptions, [protocolOption]: parseFloat(arg[1])};\n      }, {});\n\n    const xt = args.find(([key, value]) => key === 'xt' && value.startsWith('urn:ppspp:'));\n    if (xt === undefined) {\n      throw new Error('invalid uri: missing suitable xt');\n    }\n    const swarmId = SwarmId.from(URLSafeBase64.decode(xt[1].substring(10)));\n\n    return new URI(swarmId, protocolOptions);\n  }\n}\n","import KBucket from 'k-bucket';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport arrayEqual from 'array-equal';\nimport randomBytes from 'randombytes';\nimport LRU from 'lru-cache';\nimport hexToUint8Array from './hexToUint8Array';\nimport idx from 'idx';\n\nconst SEND_REPLICAS = 2;\nconst MAX_HOPS = 10;\nconst DEFAULT_PEER_REQUEST_COUNT = 10;\nconst NUMBER_OF_NODES_PER_BUCKET = 2;\n\n// TODO: implement get/set\n// TODO: implement connection dump rpc for network debugging\n\nexport class Client extends EventEmitter {\n  constructor(id) {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.id = id;\n\n    // managed/unmanaged?\n    this.channels = new KBucket({\n      numberOfNodesPerKBucket: NUMBER_OF_NODES_PER_BUCKET,\n      localNodeId: this.id,\n    });\n    this.allChannels = new KBucket({\n      numberOfNodesPerKBucket: 100,\n      localNodeId: this.id,\n    });\n\n    this.channels.on('ping', this.handlePing.bind(this));\n    this.channels.on('removed', this.handleRemoved.bind(this));\n    this.channels.on('updated', this.handleUpdated.bind(this));\n    this.channels.on('added', this.handleAdded.bind(this));\n\n    this.knownPeerIds = {};\n    this.channelMap = {};\n\n    this.seenIds = new LRU({max: 1024});\n    this.knownRoutes = new LRU({\n      max: 1024,\n      maxAge: 1000 * 60,\n    });\n    this.callbacks = new LRU({max: 1024});\n\n    this.on('receive.peers.request', this.handlePeersRequest.bind(this));\n    this.on('receive.ping.request', this.handlePingRequest.bind(this));\n    this.on('receive.trace.request', this.handleTraceRequest.bind(this));\n    this.on('receive.callback.response', this.handleCallbackResponse.bind(this));\n\n    this.startPeerRequests();\n  }\n\n  // TODO: this is leaking connections\n  close() {\n    this.stopPeerRequests();\n    this.allChannels.toArray().forEach(({conn}) => conn && conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n\n  startPeerRequests() {\n    let index = 0;\n\n    const next = () => {\n      let ids = Object.keys(this.knownPeerIds);\n\n      for (let retry = 0; retry <= ids.length; retry ++) {\n        if (index >= ids.length) {\n          index = 0;\n        }\n\n        const id = ids[index];\n        index ++;\n\n        if (id) {\n          return id;\n        }\n      }\n    };\n\n    this.peerRequestIvl = setInterval(() => {\n      const id = next();\n      if (id) {\n        this.sendPeerRequest(hexToUint8Array(id));\n      }\n    }, 5000);\n  }\n\n  stopPeerRequests() {\n    clearInterval(this.peerRequestIvl);\n  }\n\n  handlePing(channels, newChannel) {\n    // console.log('ping', channels, newChannel);\n    const PING_TIMEOUT = 10000;\n\n    channels.forEach(channel => {\n      const {id} = channel;\n\n      if (channel.isOpen()) {\n        this.addChannel(channel);\n        return;\n      }\n\n      setTimeout(() => {\n        const channel = this.getChannel(id);\n        if (channel && channel.isOpen()) {\n          this.addChannel(channel);\n          return;\n        }\n\n        this.removeChannel(id);\n        this.addChannel(newChannel);\n      }, PING_TIMEOUT);\n    });\n  }\n\n  addChannel(channel) {\n    this.channels.add(channel);\n    this.allChannels.add(channel);\n  }\n\n  removeChannel(id) {\n    this.channels.remove(id);\n    this.allChannels.remove(id);\n    // delete this.channelMap[arrayBufferToHex(id)];\n  }\n\n  getChannel(id) {\n    return this.channelMap[arrayBufferToHex(id)];\n  }\n\n  handleRemoved(channel) {\n    // console.log('remove', arrayBufferToHex(channel.id));\n    // console.trace();\n    if (channel.conn) {\n      channel.conn.close();\n    }\n    // console.log('handleRemoved', arrayBufferToHex(channel.id));\n  }\n\n  handleUpdated(oldChannel, newChannel) {\n    // console.log('update', {oldChannel, newChannel});\n    // console.log('handleUpdated', arrayBufferToHex(channel.id));\n  }\n\n  handleAdded(channel) {\n    if (channel.conn === undefined) {\n      // console.log('peers.discover', arrayBufferToHex(this.id), arrayBufferToHex(channel.id), this.channels.count());\n      this.emit('peers.discover', channel.id);\n    }\n    // console.log('add');\n    // emit event?\n    // console.log('handleAdded', arrayBufferToHex(channel.id));\n  }\n\n  createChannel(id, conn) {\n    const idHex = arrayBufferToHex(id);\n    const channel = new Channel(id, conn);\n\n    const oldChannel = this.channelMap[idHex];\n    if (oldChannel && oldChannel.conn) {\n      // console.warn('replacing open channel...');\n      oldChannel.conn.close();\n    }\n    this.channelMap[idHex] = channel;\n\n    const messages = [];\n    const bufferMessages = event => messages.push(event);\n    const handleMessage = this.handleMessage.bind(this, channel);\n\n    const handleOpen = () => {\n      // console.log('saw open', idHex);\n      this.addChannel(channel);\n\n      conn.removeEventListener('message', bufferMessages);\n      conn.addEventListener('message', handleMessage);\n      messages.forEach(handleMessage);\n\n      this.sendPeerRequest(id);\n    };\n\n    const handleClose = () => {\n      // console.log('saw close', idHex);\n      conn.removeEventListener('message', bufferMessages);\n      conn.removeEventListener('message', handleMessage);\n      conn.removeEventListener('open', handleOpen);\n\n      if (this.channelMap[idHex] === channel) {\n        this.removeChannel(id);\n        delete this.channelMap[idHex];\n      }\n    };\n\n    conn.addEventListener('message', bufferMessages);\n    conn.addEventListener('open', handleOpen, {once: true});\n    conn.addEventListener('close', handleClose, {once: true});\n  }\n\n  handleMessage(channel, event) {\n    // console.log('handleMessage', event.data);\n\n    channel.lastActive = Date.now();\n\n    let req;\n    try {\n      req = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n    const {type, id} = req;\n\n    if (req.trace) {\n      req.trace.push(arrayBufferToHex(this.id));\n      // console.log('TRACE', req);\n    }\n\n    if (this.seenIds.get(id)) {\n      // console.log('discarding seen message', id);\n      // if (req.trace) {\n      //   console.log('DROPPED', req);\n      // }\n      return;\n    }\n    this.seenIds.set(id, true);\n\n    if (!this.getChannel(channel.id)) {\n      console.warn('receiving channel is not known to dht', arrayBufferToHex(channel.id));\n    }\n\n    this.knownRoutes.set(req.from, channel.id);\n    // this.knownRoutes.set(req.from, arrayBufferToHex(channel.id));\n\n    const to = hexToUint8Array(req.to);\n    if (!arrayEqual(to, this.id)) {\n      this.forwardMessage(to, req);\n      return;\n    }\n\n    // if (req.trace) {\n    //   console.log('DELIVERED', req);\n    // }\n\n    const resCallback = (res={}, callback=null) => {\n      const from = hexToUint8Array(req.from);\n      const data = {re: id, ...res};\n      this.send(from, 'callback.response', data, callback);\n    };\n\n    // console.log(`emit receive.${type}`, req);\n    this.emit(`receive.${type}`, {data: req, callback: resCallback});\n  }\n\n  forwardMessage(to, data) {\n    // console.log('forwarding message', arrayBufferToHex(to), data);\n\n    if (data.hops >= MAX_HOPS) {\n      // console.log('discarding message with too many hops', data.id);\n      return;\n    }\n    data.hops ++;\n\n    this.sendRaw(to, JSON.stringify(data), data.trace);\n  }\n\n  sendPing(to, callback=()=>{}) {\n    this.send(to, 'ping.request', {}, callback);\n  }\n\n  handlePingRequest({data, callback}) {\n    // console.log('PING', data);\n    callback({});\n  }\n\n  handleTraceRequest({data, callback}) {\n    callback(data);\n  }\n\n  handleCallbackResponse({data, callback}) {\n    const reqCallback = this.callbacks.get(data.re);\n    if (reqCallback) {\n      reqCallback(data, callback);\n    } else {\n      // console.warn('<<< callback for %s expired', data.re);\n    }\n  }\n\n  sendPeerRequest(to, count=DEFAULT_PEER_REQUEST_COUNT) {\n    const timeout = setTimeout(() => {\n      delete this.knownPeerIds[arrayBufferToHex(to)];\n    }, 5000);\n    this.send(to, 'peers.request', {count}, res => {\n      clearTimeout(timeout);\n      this.handlePeersResponse(res);\n    });\n  }\n\n  handlePeersRequest({data: {count=DEFAULT_PEER_REQUEST_COUNT, from}, callback}) {\n    // console.log('handlePeersRequest');\n\n    const fromId = hexToUint8Array(from);\n\n    const ids = this.allChannels.closest(fromId)\n      .filter(({conn}) => conn != null)\n      .filter(({id}) => !arrayEqual(id, this.id) && !arrayEqual(id, fromId))\n      .map(({id}) => arrayBufferToHex(id))\n      .slice(0, count);\n    callback({ids});\n  }\n\n  handlePeersResponse(res) {\n    // console.log('handlePeersResponse', res.ids);\n\n    res.ids\n      .map(id => hexToUint8Array(id))\n      .filter(id => !arrayEqual(id, this.id))\n      .filter(id => {\n        const channel = this.getChannel(id);\n        return channel == null || channel.conn == null;\n      })\n      .forEach(id => {\n        // TODO: store peer provenance so we can ignore bad actors?\n        this.knownPeerIds[arrayBufferToHex(id)] = true;\n        this.addChannel(new Channel(id));\n      });\n  }\n\n  send(to, type, data={}, callback=null) {\n    if (typeof data === 'function') {\n      callback = data;\n      data = {};\n    }\n\n    const id = arrayBufferToHex(randomBytes(16));\n    this.seenIds.set(id, true);\n\n    if (callback != null) {\n      this.callbacks.set(id, callback);\n    }\n\n    const message = JSON.stringify({\n      id,\n      type,\n      from: arrayBufferToHex(this.id),\n      to: arrayBufferToHex(to),\n      trace: [arrayBufferToHex(this.id)],\n      hops: 0,\n      ...data,\n    });\n\n    // console.log('formatMessage', message);\n\n    this.sendRaw(to, message);\n  }\n\n  sendRaw(to, message, trace=[]) {\n    let closest = this.allChannels.closest(to)\n      .filter(channel => channel.isOpen())\n      .filter(({idHex}) => trace.indexOf(idHex) === -1)\n      .slice(0, SEND_REPLICAS);\n\n    const knownRoute = this.knownRoutes.get(arrayBufferToHex(to));\n    if (knownRoute) {\n      const channel = this.getChannel(knownRoute);\n      // const channel = this.allChannels.get(knownRoute);\n      if (channel != null && channel.isOpen()) {\n        closest.push(channel);\n      }\n    }\n\n    if (closest.length === 0) {\n      // console.warn(`closest value to ${arrayBufferToHex(to)} does not exist, dropping`, message);\n      return;\n    }\n\n    if (arrayEqual(closest[0].id, to)) {\n      closest = closest.slice(0, 1);\n    }\n    // console.log('send', closest.map(({id}) => arrayBufferToHex(id)), message);\n    // console.log(closest.length, closest.filter(({conn}) => !!conn).length, message);\n    closest.forEach(({id, conn}) => {\n      try {\n        // console.log('buffered amount before send', conn.bufferedAmount);\n        // console.log(message);\n        conn.send(message);\n      } catch (e) {\n        console.log('error sending to peer, closing', arrayBufferToHex(id), e);\n        conn.close();\n      }\n    });\n  }\n}\n\nexport class Channel {\n  constructor(id, conn) {\n    this.id = id;\n    this.idHex = arrayBufferToHex(id);\n    this.vectorClock = Date.now();\n    this.lastPing = Date.now();\n    this.conn = conn;\n\n    // console.log('channel', this);\n  }\n\n  isOpen() {\n    const readyState = idx(this, _ => _.conn.readyState);\n    return readyState === 1 || readyState === 'open';\n  }\n}\n\nexport class SubChannel {\n  constructor(client, peerId, id=arrayBufferToHex(randomBytes(16))) {\n    // console.log('subchannel created', id);\n    this.client = client;\n    this.peerId = peerId;\n    this.id = id;\n    this.readyState = SubChannel.ReadyStates.OPEN;\n    this.onmessage = () => {};\n\n    this.handleMessage = this.handleMessage.bind(this);\n    this.client.on('receive.subchannel.message', this.handleMessage);\n  }\n\n  handleMessage({data: {channelId, data}}) {\n    // console.log('receive.subchannel.message', channelId, this.id, data);\n\n    if (channelId === this.id) {\n      this.onmessage({data});\n    }\n  }\n\n  send(data) {\n    this.client.send(\n      this.peerId,\n      'subchannel.message',\n      {\n        channelId: this.id,\n        data: data,\n      },\n    );\n  }\n\n  close() {\n    this.readyState = SubChannel.ReadyStates.CLOSED;\n    this.client.removeListener('receive.subchannel.message', this.handleMessage);\n  }\n}\n\nSubChannel.ReadyStates = {\n  OPEN: 1,\n  CLOSED: 3,\n};\n","import {EventEmitter} from 'events';\nimport crypto from 'crypto';\nimport {generateKeyPair} from './integrity';\nimport URI from './uri';\nimport {\n  ChunkAddressingMethod,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ProtocolOptions,\n} from './constants';\nimport {Swarm} from '../ppspp';\n\nexport default class Injector {\n  constructor(swarm, chunkSize, chunksPerSignature) {\n    this.swarm = swarm;\n    this.chunkSize = chunkSize;\n    this.chunksPerSignature = chunksPerSignature;\n    this.inputBuffer = [];\n    this.inputBufferSize = 0;\n    this.outputResult = Promise.resolve();\n  }\n\n  appendData(data) {\n    this.inputBuffer.push(data);\n    this.inputBufferSize += data.length;\n\n    const signatureSize = this.chunkSize * this.chunksPerSignature;\n    if (this.inputBufferSize < signatureSize) {\n      return;\n    }\n\n    let buf = Buffer.concat(this.inputBuffer, this.inputBufferSize);\n    while (buf.length > signatureSize) {\n      this.outputChunks(buf.slice(0, signatureSize));\n      buf = buf.slice(signatureSize);\n    }\n\n    this.inputBuffer = [buf];\n    this.inputBufferSize = buf.length;\n  }\n\n  flush() {\n    if (this.inputBufferSize === 0) {\n      return;\n    }\n\n    const signatureSize = this.chunkSize * this.chunksPerSignature;\n    let buf = Buffer.concat(this.inputBuffer, this.inputBufferSize);\n    while (buf.length > 0) {\n      this.outputChunks(buf.slice(0, Math.min(buf.length, signatureSize)));\n      buf = buf.slice(signatureSize);\n    }\n\n    this.inputBuffer = [];\n    this.inputBufferSize = 0;\n  }\n\n  outputChunks(buf) {\n    var chunks = [];\n    for (let i = 0; i < this.chunksPerSignature; i ++) {\n      const offset = i * this.chunkSize;\n      chunks.push(buf.slice(offset, offset + this.chunkSize));\n    }\n\n    this.outputResult = Promise.all([\n      this.swarm.contentIntegrity.appendSubtree(chunks),\n      this.outputResult,\n    ]).then(([subtree]) => {\n      this.swarm.chunkBuffer.setRange(subtree.rootAddress, chunks);\n      this.swarm.scheduler.markChunksLoaded(subtree.rootAddress);\n    });\n  }\n\n  static create(options = {}) {\n    const {\n      chunkSize = 8 * 1024,\n      chunksPerSignature = 64,\n      liveDiscardWindow = Math.ceil(15 * 3500 * 1024 / chunkSize),\n      chunkAddressingMethod = ChunkAddressingMethod.Bin32,\n      contentIntegrityProtectionMethod = ContentIntegrityProtectionMethod.UnifiedMerkleTree,\n      merkleHashTreeFunction = MerkleHashTreeFunction.SHA256,\n      liveSignatureAlgorithm = LiveSignatureAlgorithm.ECDSAP256SHA256,\n    } = options;\n\n    return generateKeyPair(liveSignatureAlgorithm).then(({swarmId, privateKey}) => {\n      const uri = new URI(\n        swarmId,\n        {\n          [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n          [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n          [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n          [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n          [ProtocolOptions.ChunkSize]: chunkSize,\n        }\n      );\n\n      console.log('swarm uri:', uri.toString());\n\n      const clientOptions = {\n        liveDiscardWindow,\n        privateKey,\n        uploadRateLimit: 10e6,\n      };\n\n      return new Swarm(uri, clientOptions);\n    }).then(swarm => new Injector(swarm, chunkSize, chunksPerSignature));\n  }\n}\n\nexport class NoiseInjector extends EventEmitter {\n  constructor(dataRate = 3.5e6 / 8, interval = 250) {\n    super();\n    this.dataRate = dataRate * (interval / 1000);\n    this.interval = interval;\n  }\n\n  start() {\n    const data = Buffer.alloc(this.dataRate);\n    crypto.randomFillSync(data);\n\n    Injector.create().then(injector => {\n      this.intervalId = setInterval(() => injector.appendChunk(data), this.interval);\n      this.injector = injector;\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n","export default function binSearch(max, comparator) {\n  let left = 0;\n  let right = max;\n\n  while (left <= right) {\n    const mid = left + Math.floor((right - left) / 2);\n    const order = comparator(mid, left, right);\n\n    if (order < 0) {\n      left = mid + 1;\n    } else if (order > 0) {\n      right = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(left + 1);\n}\n","import React, {useEffect, useState} from 'react';\nimport classNames from 'classnames';\nimport {useHover} from 'use-events';\nimport {useDebounce} from 'react-use';\n\nimport './PlayButton.scss';\n\nconst PlayButton = ({\n  spin = false,\n  flicker = false,\n  pulse = false,\n  disabled = false,\n  visible = true,\n  blur = false,\n  error = false,\n  onClick = null,\n  idleTimeout = 2000,\n}) => {\n  const [currentVisibility, setCurrentVisibility] = useState(true);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => setCurrentVisibility(visible), 300);\n    return () => clearTimeout(timeout);\n  }, [visible]);\n\n  const [hovering, hoverEventHandlers] = useHover();\n  const [mouseIdle, setMouseIdle] = useState('');\n\n  useDebounce(() => setMouseIdle(hovering), idleTimeout, [hovering]);\n  useEffect(() => {\n    if (!hovering) {\n      setMouseIdle(false);\n    }\n  }, [hovering]);\n\n  const hidden = !visible && !currentVisibility;\n\n  const hoverClasses = classNames({\n    play_button_wrap: true,\n    hovering: mouseIdle,\n    hidden,\n    disabled,\n  });\n\n  const buttonClasses = classNames({\n    play_button: true,\n    clickable: onClick != null && !disabled,\n    exiting: !visible && currentVisibility,\n    hidden,\n    spin,\n    flicker,\n    pulse,\n    blur,\n    error,\n    disabled,\n  });\n\n  return (\n    <div className={hoverClasses}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 926 926\"\n        className={buttonClasses}\n        onClick={disabled ? undefined : onClick}\n        {...hoverEventHandlers}\n      >\n        <g className=\"background\">\n          <circle cx=\"463\" cy=\"463\" r=\"463\"/>\n        </g>\n        <g className=\"network\">\n          <circle cx=\"327\" cy=\"229\" r=\"139\"/>\n          <circle cx=\"732\" cy=\"463\" r=\"139\"/>\n          <circle cx=\"327\" cy=\"697\" r=\"139\"/>\n          <polygon points=\"854 463 269 125 269 801 854 463\"/>\n        </g>\n        <g className=\"button\">\n          <path d=\"M658,524c23-13,23-36,0-50L457,358c-23-13-43-2-43,25V616c0,27,19,38,43,25Z\" transform=\"translate(-45 -36)\"/>\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default PlayButton;\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n"],"sourceRoot":""}