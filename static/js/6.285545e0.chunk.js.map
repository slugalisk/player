{"version":3,"sources":["loopback.js","utils/createRandomId.js","components/Test.js"],"names":["Server","props","arguments","length","undefined","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","this","queue","dhtClient","dht","createRandomId","ppsppClient","ppspp","ConnManager","server","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__","key","value","_this","id","data","type","bootstrapId","arrayBufferToHex","conn","Conn","open","client","createClient","on","_ref","channel","label","createChannel","push","shift","close","Promise","resolve","remote","mediator","Mediator","Client","_EventEmitter","_this2","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","readyState","ReadyStates","CONNECTING","onmessage","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","_this3","OPEN","setImmediate","emit","apply","removeListener","CLOSING","CLOSED","removeAllListeners","EventEmitter","_EventEmitter2","_this4","handleMessage","bind","event","JSON","parse","handleConnection","Error","_ref2","_this5","datachannels","entries","forEach","_ref3","_ref4","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","nextId","send","stringify","_EventEmitter3","_this6","conns","handleDataChannel","once","handleOpen","ClientDataChannel","_this7","sendConnection","closed","_Conn","_this8","crypto__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","crypto__WEBPACK_IMPORTED_MODULE_0___default","n","Uint8Array","crypto","randomFillSync","App","_useState","useState","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","_useState3","_useState4","swarms","setSwarms","_useState5","_useState6","swarmUri","setSwarmUri","useEffect","injector","ChunkedWriteStreamInjector","swarm","uri","publishSwarm","unpublishSwarm","start","bitRate","stop","diagnosticMenus","map","i","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_DiagnosticMenu__WEBPACK_IMPORTED_MODULE_6__","containerClass","concat","onClick","create","then","joinSwarm","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","ChunkedReadStream","d","console","log"],"mappings":"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","file":"static/js/6.285545e0.chunk.js","sourcesContent":["import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport createRandomId from './utils/createRandomId';\n\nexport class Server {\n  constructor(props = {}) {\n    this.queue = [];\n    this.dhtClient = props.dhtClient || new dht.Client(createRandomId());\n    this.ppsppClient = props.ppsppClient || new ppspp.Client();\n  }\n}\n\nexport class ConnManager {\n  constructor(server) {\n    this.server = server;\n  }\n\n  bootstrap() {\n    const id = createRandomId();\n\n    const data = {\n      type: 'bootstrap',\n      bootstrapId: arrayBufferToHex(this.server.dhtClient.id),\n      id: arrayBufferToHex(id),\n    };\n    const conn = Conn.open();\n    const client = this.createClient(conn);\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.server.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.server.ppsppClient.createChannel(channel);\n      }\n    });\n\n    this.server.queue.push(client);\n    if (this.server.queue.length > 6) {\n      this.server.queue.shift().close();\n    }\n    // setTimeout(() => client.close(), Math.random() * 30000);\n\n    return Promise.resolve({data, conn: conn.remote});\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    mediator.on('connection', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Conn extends EventEmitter {\n  constructor(remote) {\n    super();\n\n    this.remote = remote || new Conn(this);\n    this.remote.remote = this;\n\n    this.readyState = this.remote.readyState || Conn.ReadyStates.CONNECTING;\n\n    this.onmessage = () => {};\n  }\n\n  send(data) {\n    if (this.readyState === Conn.ReadyStates.OPEN) {\n      setImmediate(() => {\n        this.remote.emit('message', {data});\n        this.remote.onmessage({data});\n      });\n    }\n  }\n\n  addEventListener(...args) {\n    this.on(...args);\n  }\n\n  removeEventListener(...args) {\n    this.removeListener(...args);\n  }\n\n  static open() {\n    const conn = new Conn();\n    conn.open();\n    conn.remote.open();\n    return conn;\n  }\n\n  open() {\n    this.readyState = Conn.ReadyStates.OPEN;\n    this.remote.readyState = Conn.ReadyStates.OPEN;\n    this.emit('open');\n  }\n\n  close() {\n    this.readyState = Conn.ReadyStates.CLOSING;\n    this.remote.readyState = Conn.ReadyStates.CLOSING;\n\n    this.remote.emit('close');\n    this.emit('close');\n\n    this.readyState = Conn.ReadyStates.CLOSED;\n    this.remote.readyState = Conn.ReadyStates.CLOSED;\n\n    this.removeAllListeners();\n    this.remote.removeAllListeners();\n  }\n}\n\nConn.ReadyStates = {\n  CONNECTING: 'connecting',\n  OPEN: 'open',\n  CLOSING: 'closing',\n  CLOSED: 'closed',\n};\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case 'connection':\n        this.handleConnection(data);\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  handleConnection({id}) {\n    const datachannels = Mediator.datachannels[id];\n    delete Mediator.datachannels[id];\n\n    Object.entries(datachannels).forEach(([label, channel]) => this.emit('datachannel', label, channel));\n    this.emit('open');\n  }\n\n  sendConnection(datachannels) {\n    const id = Mediator.nextId ++;\n    Mediator.datachannels[id] = datachannels;\n\n    this.conn.send(JSON.stringify({\n      type: 'connection',\n      id,\n    }));\n\n    this.emit('open');\n  }\n}\n\nMediator.nextId = 0;\nMediator.datachannels = {};\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.datachannels = {};\n    this.conns = [];\n\n    mediator.on('datachannel', this.handleDataChannel.bind(this));\n    mediator.once('open', this.handleOpen.bind(this));\n  }\n\n  handleDataChannel(label, conn) {\n    const channel = new ClientDataChannel(this, label, conn);\n    this.conns.push(channel);\n    this.emit('datachannel', {label, channel});\n  }\n\n  handleOpen() {\n    setImmediate(() => {\n      this.conns.forEach(conn => conn.open());\n      this.emit('open');\n    });\n  }\n\n  createDataChannel(label) {\n    const channel = new ClientDataChannel(this, label);\n    this.datachannels[label] = channel;\n    this.conns.push(channel);\n    return channel;\n  }\n\n  init() {\n    this.mediator.sendConnection(this.datachannels);\n  }\n\n  close() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n\n    this.conns.forEach(conn => conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n}\n\nexport class ClientDataChannel extends Conn {\n  constructor(client, label, remote) {\n    super(remote);\n\n    this.client = client;\n    this.label = label;\n  }\n}\n","import crypto from 'crypto';\n\nconst createRandomId = () => {\n  const id = new Uint8Array(16);\n  crypto.randomFillSync(id);\n  return id;\n};\n\nexport default createRandomId;\n","import React, {useEffect, useState} from 'react';\nimport {Server, ConnManager} from '../loopback';\nimport {Client} from '../client';\nimport {ChunkedReadStream, ChunkedWriteStreamInjector} from '../chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\n\nimport './App.scss';\n\nconst App = () => {\n  const [server] = useState(new Server());\n  const [swarms, setSwarms] = useState([]);\n  const [swarmUri, setSwarmUri] = useState('');\n\n  useEffect(() => {\n    const injector = new ChunkedWriteStreamInjector();\n\n    injector.on('publish', ({injector: {swarm}}) => {\n      setSwarmUri(swarm.uri);\n      server.ppsppClient.publishSwarm(swarm);\n    });\n\n    injector.on('unpublish', ({injector: {swarm}}) => {\n      server.ppsppClient.unpublishSwarm(swarm);\n    });\n\n    injector.start({\n      bitRate: 9000000,\n    });\n\n    return () => injector.stop();\n  }, []);\n\n  const handleAddPeerClick = () => {\n    Client.create(new ConnManager(server)).then(({ppsppClient}) => {\n      const swarm = ppsppClient.joinSwarm(swarmUri);\n      // console.log(ppsppClient);\n\n      setSwarms([...swarms, swarm]);\n\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', d => console.log(`received ${d.length} bytes`));\n    });\n  };\n\n  const diagnosticMenus = swarms.map((swarm, i) => (\n    <DiagnosticMenu\n      key={i}\n      swarm={swarm}\n      containerClass={`diagnostic-menu--indent-${i}`}\n    />\n  ));\n\n  return (\n    <div>\n      {diagnosticMenus}\n      <button onClick={handleAddPeerClick}>add peer</button>\n    </div>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}