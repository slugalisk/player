{"version":3,"sources":["utils/createRandomId.js","App.js","SwarmPlayer.js","ppspp/injector.js","wrtc.js","compat/ws/index.js","ppspp/constants.js","ppspp/address.js","compat/crypto/index.js","compat/crypto/node.js","compat/crypto/browser.js","compat/ws/node.js","compat/ws/browser.js","compat/wrtc/node.js","compat/wrtc/browser.js","hexToUint8Array.js","Test.js","DhtGraph.js","Router.js","index.js","ppspp/integrity.js","binSearch.js","chunkedStream.js","loopback.js","ppspp/swarmid.js","DiagnosticMenu/index.js","client.js","ema.js","RingBuffer.js","ledbat.js","ppspp/encoding.js","bitarray.js","wfq.js","ppspp/scheduler.js","ppspp/index.js","dht.js","ppspp/uri.js","PlayButton.js","compat/wrtc/index.js"],"names":["crypto__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","crypto__WEBPACK_IMPORTED_MODULE_0___default","n","createRandomId","id","Uint8Array","crypto","randomFillSync","App","props","_useState3","useState","_useState4","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","ppsppClient","setPpsppClient","_useState5","_useState6","swarmUri","setSwarmUri","_useState7","_useState8","injectorType","setInjectorType","_useState9","_useState10","swarm","setSwarm","_useQueryString","queryString","_useState","_useState2","query","setQuery","useEffect","qs","parse","ignoreQueryPrefix","useQueryString","location","search","autoPlay","proto","window","protocol","host","bootstrapAddress","concat","console","log","connManager","ConnManager","Client","create","then","_ref","_ref$bootstrap","bootstrap","joinSwarm","uri","URI","ChunkedReadStream","on","d","length","setImmediate","joinForm","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_DiagnosticMenu__WEBPACK_IMPORTED_MODULE_3__","_SwarmPlayer__WEBPACK_IMPORTED_MODULE_4__","className","onSubmit","e","preventDefault","onChange","target","value","placeholder","defaultValue","_PlayButton__WEBPACK_IMPORTED_MODULE_8__","disabled","onClick","pulse","spin","flicker","blur","Fragment","SwarmPlayer","video","useRef","_useSwarmMediaSource","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","mediaSource","setMediaSource","MediaSource","addEventListener","handleSourceOpen","sourceBuffer","addSourceBuffer","videoSegments","appendBuffer","newSegment","undefined","updating","segment","shift","unshift","push","transmuxer","muxjs","mp4","Transmuxer","initSet","event","type","buf","data","Buffer","from","initSegment","stream","ChunkedFragmentedReadStream","flush","useSwarmMediaSource","played","setPlayed","playing","setPlaying","paused","setPaused","loading","setLoading","_useState11","_useState12","buffering","setBuffering","_useState13","_useState14","volume","setVolume","current","src","URL","createObjectURL","Date","toUTCString","handleEnded","handleComplete","handlePause","handlePlaying","handleCanplay","handleVolumeChange","handleWaiting","play","removeEventListener","_ref2","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","wrap","_context","prev","next","t0","muted","t1","warn","stop","apply","this","arguments","playButton","react__WEBPACK_IMPORTED_MODULE_3___default","visible","_DiagnosticMenu__WEBPACK_IMPORTED_MODULE_6__","ref","Injector","chunkSize","chunksPerSignature","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","inputBuffer","alloc","chunkBuffer","_this","dataOffset","slice","i","Math","min","_loop","subtreeChunks","splice","contentIntegrity","appendSubtree","subtree","setRange","rootAddress","scheduler","markChunksLoaded","options","_options$chunkSize","_options$chunksPerSig","_options$liveDiscardW","liveDiscardWindow","ceil","_options$chunkAddress","chunkAddressingMethod","ChunkAddressingMethod","Bin32","_options$contentInteg","contentIntegrityProtectionMethod","ContentIntegrityProtectionMethod","UnifiedMerkleTree","_options$merkleHashTr","merkleHashTreeFunction","MerkleHashTreeFunction","SHA256","_options$liveSignatur","liveSignatureAlgorithm","LiveSignatureAlgorithm","ECDSAP256SHA256","generateKeyPair","swarmId","privateKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__","ProtocolOptions","ChunkSize","toString","clientOptions","uploadRateLimit","Swarm","EventEmitter","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__","key","Promise","resolve","reject","conn","WebSocket","onmessage","JSON","Error","mediator","Mediator","client","once","close","_EventEmitter","_this2","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","handleMessage","bind","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","emit","RTCSessionDescription","sdp","candidate","RTCIceCandidate","send","readyState","stringify","_EventEmitter2","_this3","initialized","waitingChannels","peerConn","RTCPeerConnection","iceServers","urls","sendIceCandidate","handleDataChannel","handleIceConnectionStateChange","addIceCandidate","_ready","description","setRemoteDescription","createAnswer","catch","_this4","setLocalDescription","sendAnswer","error","_this5","channel","binaryType","resolveWaitingChannel","label","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","ordered","maxRetransmits","createDataChannel","iceConnectionState","_this6","createOffer","offer","sendOffer","module","exports","require","__webpack_exports__","MaxChannelId","Version","MessageTypes","lodash_invert__WEBPACK_IMPORTED_MODULE_0__","lodash_invert__WEBPACK_IMPORTED_MODULE_0___default","MinimumVersion","SwarmIdentifier","LiveDiscardWindow","SupportedMessages","EndOption","RFC7574","None","MerkleHashTree","SignAll","SHA1","SHA224","SHA384","SHA512","RSASHA1","RSASHA256","ECDSAP384SHA384","ByteRange64","ChunkRange32","Bin64","ChunkRange64","HANDSHAKE","DATA","ACK","HAVE","INTEGRITY","PEX_RESv4","PEX_REQ","SIGNED_INTEGRITY","REQUEST","CANCEL","CHOKE","UNCHOKE","PEX_RESv6","PEX_REScert","forEach","enumType","names","invert","name","Address","bin","treeBounds","binBounds","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_treeBounds","start","end","address","r","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0__","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0___default","WebCrypto","ws__WEBPACK_IMPORTED_MODULE_0__","ws__WEBPACK_IMPORTED_MODULE_0___default","ws","wrtc__WEBPACK_IMPORTED_MODULE_0__","hexToUint8Array","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0__","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0___default","v","hexToArrayBuffer","Server","server","slicedToArray","swarms","setSwarms","injector","ChunkedWriteStreamInjector","publishSwarm","unpublishSwarm","diagnosticMenus","map","react_default","DiagnosticMenu","containerClass","_ref3","toConsumableArray","color","scaleOrdinal","schemeCategory10","reduceGraph","graph","objectWithoutProperties","nodes","links","filter","node","source","objectSpread","activity","link","_useGraph","servers","setServers","gen","setGen","_useReducer","useReducer","_useReducer2","dispatchGraphAction","arrayBufferToHex","dhtClient","addNodes","clients","_ref4","newServers","clientsResult","all","Array","fill","firstIndex","serverIndex","floor","random","_ref5","allChannels","toArray","isOpen","oldChannel","newChannel","_ref6","deleteNodes","keys","useGraph","_useGraph2","_useGraph2$","handleNodeClick","setSource","sendPing","useNodePinger","react_force_graph_3d_module","graphData","nodeAutoColorBy","onNodeClick","linkColor","linkWidth","nodeRelSize","nodeVal","count","Router","HashRouter","Switch","Route","exact","path","component","Test","DhtGraph","ReactDOM","render","src_Router","document","getElementById","toUint8Array","MerkleHashTreeFunctionAlgorithms","_MerkleHashTreeFuncti","defineProperty","MerkleHashTreeFunctionByteLengths","_MerkleHashTreeFuncti2","createMerkleHashTreeFunction","algorithm","nullHash","_len","values","_key","every","arrayEqual","subtle","digest","LiveSignatureAlgorithms","_LiveSignatureAlgorit","modulusLength","publicExponent","hash","namedCurve","createLiveSignatureSignFunction","importResult","importKey","sign","createLiveSignatureVerifyFunction","getKeyParams","publicKey","signature","verify","generateKey","keyPair","exportKey","SwarmId","unavailableLiveSignatureSignFunction","createContentIntegrityVerifierFactory","liveSignatureVerifyFunction","liveSignatureSignFunction","Infinity","Signature","verified","classCallCheck","createClass","SignedSignature","verificationResult","getHash","markVerified","verifyHash","compare","signatures","getChunkCount","MerkleHashTreeVerifier","hashTree","regenerator_default","getConstituentHashBins","bins","bfsIndex","stride","parent","branch","containsBin","isRoot","siblingBin","siblingBfsIndex","abrupt","minSize","size","hashes","siblings","rootHashSignature","pow","log2","hashResult","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","siblingSignature","index","verifiedSignature","siblingHash","_iterator","Symbol","iterator","done","err","return","_ref7","UnifiedMerkleHashTree","subtrees","nextStart","chunkCount","_ref8","max","comparator","left","right","mid","order","binSearch","_this5$subtrees$i$roo","storedSubtree","findSubtree","copy","sort","b","pruneSubtrees","removedTree","treeSize","nextAddress","insertSubtree","MerkleHashSubtreeVerifier","getConstituentSignatures","_MerkleHashTreeVerifi","unifiedHashTree","_this7","possibleConstructorReturn","getPrototypeOf","inherits","get","prototype","NoneVerifier","NoneVerifierFactory","DELIMITER","DELIMITER_LENGTH","ChunkedWriteStream","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","buffer","writeUInt32BE","appendData","HEADER_INSTANCE_LENGTH","writer","intervalId","setInterval","write","clearInterval","setTimeout","AbstractChunkedReadStream","handleWarmupSwarmData","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","handleSwarmData","chunkBufferLength","nextDataOffset","nextDataLength","delimiterIndex","indexOf","removeListener","readHeader","offset","instance","readUInt8","readUInt32BE","lastChunkOffset","nextDataEnd","handleData","lastChunkEnd","handleEndData","_AbstractChunkedReadS","firstEmitted","_AbstractChunkedReadS2","chunkSlice","firstChunkStart","chunks","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","queue","dht","ppspp","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__","bootstrapId","Conn","open","createClient","createChannel","remote","ReadyStates","CONNECTING","OPEN","CLOSING","CLOSED","removeAllListeners","handleConnection","datachannels","entries","nextId","_EventEmitter3","conns","handleOpen","ClientDataChannel","sendConnection","closed","_Conn","_this8","isRsaAlgorithm","includes","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","metadataLength","byteLength","writeUInt8","ArrayBuffer","isView","read","ToggleButton","buttonClasses","classNames","diagnostic_menu__toggle_button","diagnostic_menu__toggle_button--expanded","expanded","react__WEBPACK_IMPORTED_MODULE_6___default","Component","defaultProps","formatNumber","isFinite","approx","String","SwarmState","rows","totalSends","totalRequests","totalRequestsReceived","totalDroppedRequests","totalReceived","totalAdded","totalCancelled","ackUnknownSend","lastCompletedBin","loadedChunks","requestedChunks","chunkRate","PeerStateTable","peerState","chunkIntervalMean","wasteRate","ledbat","baseDelay","getMin","currentDelay","rttMean","rttVar","cwnd","cto","flightSize","validChunks","requestQueue","_this$props","startBin","endBin","colSpan","AvailabilityMapChart","availableChunks","sentChunks","receivedChunks","canvas","React","createRef","scratchCanvas","isNaN","height","width","ctx","getContext","scale","scaleLinear","domain","range","fillStyle","fillRect","lastStart","drawImage","PeerState","handleButtonClick","setState","state","table","peer","localId","remoteId","scheduleUpdate","handleUpdate","forceUpdate","requestAnimationFrame","swarmState","peerStates","containerClasses","diagnostic_menu__container","diagnostic_menu__container--expanded","_this$props$swarm$sch","dhtClientId","handlePeersDiscover","handleReceiveConnectRequest","init","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","sub","dhtChannel","ppsppChannel","timeout","channelId","clearTimeout","_ref$data","callback","EMA","alpha","mean","weight","RingBuffer","capacity","setCapacity","lastIndex","createEmptyValue","firstEmptyIndex","advanceLastIndex","set","DelayBuffer","delay","now","TARGET","CURRENT_HISTORY","CURRENT_HISTORY_INTERVAL","BASE_HISTORY","BASE_HISTORY_INTERVAL","INIT_CWND","MSS","COEF_ALPHA","COEF_BETA","LEDBAT","mss","lastDataLoss","lastAckTime","ackSize","bytes","delaySample","update","checkCTO","queuingDelay","abs","offTarget","maxAllowedCwnd","rtt","isEmpty","retransmitting","timestamp","createChunkAddressFieldType","addressingMethod","Bin32ChunkAddress","_Address$binBounds","_Address$binBounds2","ChunkRange32ChunkAddress","createBufferFieldType","BufferField","createLiveSignatureFieldType","getLiveSignatureByteLength","_createBufferFieldTyp","LiveSignatureField","createIntegrityHashFieldType","_createBufferFieldTyp2","IntegrityHashField","createEncoding","ChunkAddress","IntegrityHash","LiveSignature","_protocolOptionRecord","_messageRecordTypes","Uint8ProtocolOption","Uint32ProtocolOption","VersionProtocolOption","_Uint8ProtocolOption","version","MinimumVersionProtocolOption","_Uint8ProtocolOption2","SwarmIdentifierProtocolOption","readUInt16BE","writeUInt16BE","ContentIntegrityProtectionMethodProtocolOption","_Uint8ProtocolOption3","method","MerkleHashTreeFunctionProtocolOption","_Uint8ProtocolOption4","LiveSignatureAlgorithmProtocolOption","_Uint8ProtocolOption5","ChunkAddressingMethodProtocolOption","_Uint8ProtocolOption6","LiveDiscardWindowProtocolOption","_Uint32ProtocolOption","_this9","SupportedMessagesProtocolOption","_this10","messageTypes","byte","j","Boolean","bitmapByteLength","bitmap","toBitmap","ChunkSizeProtocolOption","_Uint32ProtocolOption2","_this11","protocolOptionRecordTypes","HandshakeMessage","code","option","RecordType","reduce","Timestamp","seconds","readInt32BE","nanoseconds","writeInt32BE","DataMessage","dataLength","rangeByteLength","AddressMessage","AckMessage","HaveMessage","_AddressMessage","_this12","IntegrityMessage","SignedIntegrityMessage","RequestMessage","_AddressMessage2","_this13","CancelMessage","_AddressMessage3","_this14","EmptyMessage","ChokeMessage","_EmptyMessage","_this15","UnchokeMessage","_EmptyMessage2","_this16","messageRecordTypes","Messages","messageType","message","isArray","Datagram","messages","datagram","createMask","bits","mask","applyMask","BitArray","resize","distance","unsafelySetRange","byteIndex","bitIndex","byteOffset","adjustOffset","startByteIndex","getByteIndex","endByteIndex","startBitIndex","getBitIndex","endBitIndex","unsafelySetIndexRange","startMask","endMask","firstBit","lastBit","Flow","lastVirtualFinish","nextVirtualFinish","wfq","Queue","rate","totalQueueSize","flows","flow","computeWeight","virtualFinish","minVirtualFinish","getNextScheduledFlow","task","AvailabilityMap","_ref$end","BinRingBuffer","_RingBuffer","esm_get","RateMeter","windowMs","sampleWindowMs","firstSampleWindow","lastSampleWindow","sum","sampleWindow","adjustSampleWindow","accumulatedMs","ChunkRateMeter","_RateMeter","lastEndBin","lastHeadBin","RequestFlow","_wfq$Flow","queueSize","RequestQueue","_wfq$Queue","remove","result","SchedulerChunkState","reset","availableCopies","requestTime","requestPeerId","requested","received","SchedulerChunkRequestMap","valueByBin","head","tail","createdAt","SchedulerChunkMap","_BinRingBuffer","SchedulerPeerState","requestFlow","lastChunkTime","requestTimes","sentRequests","timeouts","invalidChunks","Scheduler","chunkStates","peerCount","timers","lastExportedBin","sendDelay","nextSendTime","nextSendTimeout","isReady","firstLoadedChunk","firstRequestedChunk","lastAvailableBin","planFor","dip","peer_remoteId","peer_localId","swift_rtt","swift_rttvar","swift_chunkIntervalMean","swift_cwnd","ledbat_cwnd","ledbat_cto","ledbat_currentDelay","ledbat_baseDelay","ledbat_rttMean","ledbat_rttVar","ledbat_rtt","ledbat_flightSize","picker_startBin","picker_lastAvailableBin","minIncompleteBin","picker_firstLoadedChunk","picker_firstRequestedChunk","timeoutThreshold","cancelledRequests","peek","pop","onDataLoss","digestDelaySamples","_peerState$peer","requestAddresses","insert","firstRequestedBin","_ref9","sendCancel","sendRequest","requestedAddress","requestedChunk","sentAt","addSent","sendChunk","sendInterval","addFlow","_ref10","removeFlow","_ref11","getPeerState","chunkInterval","addRttSample","_ref12","sendHave","nextExportedBin","advanceLastBin","_ref13","addDelaySample","sentChunk","genericEncoding","_uri$protocolOptions","protocolOptions","encoding","toBuffer","protocolOption","protocolOptionName","newBins","getNewCompleteBins","_newBins","minNewBin","maxNewBin","chunk","AWAITING_HANDSHAKE","READY","CHOKED","DISCONNECTING","PeerDataHandlerContext","integrityVerifier","createVerifier","Peer","_this$handlers","createChannelId","handlers","handleHandshakeMessage","handleDataMessage","handleHaveMessage","handleAckMessage","handleIntegrityMessage","handleSignedIntegrityMessage","handleRequestMessage","handleCancelMessage","handleChokeMessage","handleUnchokeMessage","sendBuffer","addPeer","sendHandshake","removePeer","context","handler","handshake","setLiveDiscardWindow","verifyProtocolOptions","getRecentChunks","computeOneWayDelay","markChunkReceived","getContentIntegrityVerifier","verifyChunk","markChunkVerified","emitNewData","markChunkRejected","markChunkAvailable","markSendAcked","setHash","setHashSignature","enqueueRequest","cancelRequest","addresses","_len2","_key2","constituentSignatures","reverse","getSignatureHash","round","SwarmSet","setMaxListeners","swarmIdToKey","channels","Channel","peers","handleSwarmInsert","getOrCreatePeer","assertThisInitialized","liveSwarms","handleClose","find","p","createPeer","destroyPeer","handleRemove","isInitialized","removedSwarm","NUMBER_OF_NODES_PER_BUCKET","KBucket","numberOfNodesPerKBucket","localNodeId","handlePing","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleRemoved","handleUpdated","handleAdded","knownPeerIds","channelMap","seenIds","LRU","knownRoutes","maxAge","callbacks","handlePeersRequest","handlePingRequest","handleTraceRequest","handleCallbackResponse","startPeerRequests","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","stopPeerRequests","peerRequestIvl","ids","retry","sendPeerRequest","addChannel","getChannel","removeChannel","add","idHex","bufferMessages","req","lastActive","_req","trace","to","res","re","forwardMessage","hops","sendRaw","reqCallback","handlePeersResponse","_ref5$data","_ref5$data$count","fromId","closest","randomBytes","knownRoute","vectorClock","lastPing","idx","_","SubChannel","peerId","_ref11$data","protocolOptionToKey","_protocolOptionToKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","URLSafeBase64","encode","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","join","uriString","startsWith","args","substring","split","_query$split","_query$split2","decodeURIComponent","arg","parseFloat","xt","decode","PlayButton","_ref$spin","_ref$flicker","_ref$pulse","_ref$disabled","_ref$visible","_ref$blur","currentVisibility","setCurrentVisibility","action","hovering","show","hoverState","dispatchHoverAction","hoverClasses","play_button_wrap","play_button","clickable","exiting","hidden","react__WEBPACK_IMPORTED_MODULE_2___default","xmlns","viewBox","onMouseEnter","onMouseLeave","cx","cy","points","transform"],"mappings":"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","file":"static/js/main.a58710b7.chunk.js","sourcesContent":["import crypto from 'crypto';\n\nconst createRandomId = () => {\n  const id = new Uint8Array(16);\n  crypto.randomFillSync(id);\n  return id;\n};\n\nexport default createRandomId;\n","import React, {useEffect, useState} from 'react';\nimport URI from './ppspp/uri';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport SwarmPlayer from './SwarmPlayer';\nimport {Client} from './client';\nimport {ConnManager} from './wrtc';\nimport {ChunkedReadStream} from './chunkedStream';\nimport PlayButton from './PlayButton';\nimport qs from 'qs';\n\nimport './App.css';\n\nconst useQueryString = queryString => {\n  const [query, setQuery] = useState({});\n\n  useEffect(() => {\n    setQuery(qs.parse(queryString, {ignoreQueryPrefix: true}) || {});\n  }, [queryString]);\n\n  return [query];\n};\n\nconst App = props => {\n  const [ppsppClient, setPpsppClient] = useState(null);\n  const [swarmUri, setSwarmUri] = useState('');\n  const [injectorType, setInjectorType] = useState('');\n  const [swarm, setSwarm] = useState(null);\n  const [query] = useQueryString(props.location.search);\n\n  const autoPlay = 'autoplay' in query;\n\n  useEffect(() => {\n    const proto = window.location.protocol === 'https:' ? 'wss' : 'ws';\n    const host = process.env.NODE_ENV === 'development'\n      ? window.location.hostname + ':8080'\n      : window.location.host;\n    const bootstrapAddress = `${proto}://${host}`;\n\n    console.log({bootstrapAddress});\n\n    const connManager = new ConnManager(bootstrapAddress);\n\n    Client.create(connManager).then(({ppsppClient, bootstrap: {swarmUri, injectorType}}) => {\n      setPpsppClient(ppsppClient);\n      setSwarmUri(swarmUri);\n      setInjectorType(injectorType);\n    });\n  }, []);\n\n  const joinSwarm = () => {\n    console.log(swarmUri);\n    const uri = URI.parse(swarmUri);\n    console.log('joining', uri);\n\n    const swarm = ppsppClient.joinSwarm(uri);\n    if (injectorType === 'noise') {\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', d => console.log(`received ${d.length} bytes`));\n    }\n    setSwarm(swarm);\n  };\n\n  useEffect(() => {\n    if (autoPlay && swarmUri) {\n      setImmediate(joinSwarm);\n    }\n  }, [swarmUri, query]);\n\n  const onJoinSubmit = e => {\n    e.preventDefault();\n    joinSwarm();\n  };\n\n  const onInputChange = e => {\n    setSwarmUri(e.target.value);\n  };\n\n  if (swarm) {\n    return injectorType === 'noise'\n      ? <DiagnosticMenu swarm={swarm} />\n      : <SwarmPlayer swarm={swarm} />;\n  }\n\n  let joinForm;\n  if ('show_form' in query) {\n    joinForm = (\n      <form className=\"join-form\" onSubmit={onJoinSubmit}>\n        <input\n          onChange={onInputChange}\n          placeholder=\"Enter Swarm URI\"\n          defaultValue={swarmUri}\n        />\n        <button>Join</button>\n      </form>\n    );\n  } else {\n    joinForm = (\n      <PlayButton\n        disabled={swarmUri === ''}\n        onClick={joinSwarm}\n        pulse={!autoPlay}\n        spin={swarmUri === ''}\n        flicker={autoPlay}\n        blur\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"idle\">\n        {/* <div className=\"scanner\"></div> */}\n        <div className=\"noise\"></div>\n      </div>\n      {joinForm}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React, {useRef, useEffect, useState} from 'react';\nimport muxjs from 'mux.js';\nimport {ChunkedFragmentedReadStream} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport {Buffer} from 'buffer';\nimport PlayButton from './PlayButton';\n\nimport './SwarmPlayer.css';\n\nconst useSwarmMediaSource = swarm => {\n  const [mediaSource, setMediaSource] = useState();\n\n  useEffect(() => {\n    const mediaSource = new MediaSource();\n    setMediaSource(mediaSource);\n\n    mediaSource.addEventListener('sourceopen', () => handleSourceOpen(mediaSource));\n  }, []);\n\n  const handleSourceOpen = mediaSource => {\n    const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"mp4a.40.5,avc1.64001F\"');\n    // sourceBuffer.addEventListener('updatestart', e => console.log(e));\n    // sourceBuffer.addEventListener('updateend', e => console.log(e));\n    sourceBuffer.addEventListener('error', e => console.log(e));\n\n    const videoSegments = [];\n    const appendBuffer = newSegment => {\n      if (newSegment !== undefined && (videoSegments.length !== 0 || sourceBuffer.updating)) {\n        videoSegments.push(newSegment);\n        return;\n      }\n\n      if (sourceBuffer.updating) {\n        return;\n      }\n\n      const segment = newSegment || videoSegments.shift();\n      if (segment === undefined) {\n        return;\n      }\n\n      try {\n        sourceBuffer.appendBuffer(segment);\n      } catch (e) {\n        videoSegments.unshift(segment);\n        setImmediate(appendBuffer);\n      }\n    };\n\n    sourceBuffer.addEventListener('updateend', () => appendBuffer());\n\n    const transmuxer = new muxjs.mp4.Transmuxer();\n    let initSet = false;\n    transmuxer.on('data', event => {\n      if (event.type === 'combined') {\n        const buf = initSet\n          ? event.data\n          : Buffer.concat([Buffer.from(event.initSegment), Buffer.from(event.data)]);\n        initSet = true;\n\n        appendBuffer(buf);\n      } else {\n        console.log('unhandled event', event.type);\n      }\n    });\n\n    const stream = new ChunkedFragmentedReadStream(swarm);\n    stream.on('start', data => transmuxer.push(data));\n    stream.on('data', data => transmuxer.push(data));\n    stream.on('end', data => {\n      transmuxer.push(data);\n      transmuxer.flush();\n    });\n  };\n\n  return [mediaSource];\n};\n\nconst SwarmPlayer = ({swarm}) =>{\n  const video = useRef(null);\n  const [mediaSource] = useSwarmMediaSource(swarm);\n  const [played, setPlayed] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [paused, setPaused] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [buffering, setBuffering] = useState(true);\n  const [volume, setVolume] = useState(null);\n\n  console.log({paused, volume});\n\n  useEffect(() => {\n    if (video.current == null || mediaSource == null) {\n      return;\n    }\n\n    video.current.src = URL.createObjectURL(mediaSource);\n\n    setVolume(video.current.volume);\n\n    video.current.addEventListener('audioprocess', e => console.log(new Date().toUTCString(), 'audioprocess', e));\n    video.current.addEventListener('canplay', e => console.log(new Date().toUTCString(), 'canplay', e));\n    video.current.addEventListener('canplaythrough', e => console.log(new Date().toUTCString(), 'canplaythrough', e));\n    video.current.addEventListener('complete', e => console.log(new Date().toUTCString(), 'complete', e));\n    video.current.addEventListener('durationchange', e => console.log(new Date().toUTCString(), 'durationchange', e));\n    video.current.addEventListener('emptied', e => console.log(new Date().toUTCString(), 'emptied', e));\n    video.current.addEventListener('ended', e => console.log(new Date().toUTCString(), 'ended', e));\n    video.current.addEventListener('loadeddata', e => console.log(new Date().toUTCString(), 'loadeddata', e));\n    video.current.addEventListener('loadedmetadata', e => console.log(new Date().toUTCString(), 'loadedmetadata', e));\n    video.current.addEventListener('pause', e => console.log(new Date().toUTCString(), 'pause', e));\n    video.current.addEventListener('play', e => console.log(new Date().toUTCString(), 'play', e));\n    video.current.addEventListener('playing', e => console.log(new Date().toUTCString(), 'playing', e));\n    video.current.addEventListener('ratechange', e => console.log(new Date().toUTCString(), 'ratechange', e));\n    video.current.addEventListener('seeked', e => console.log(new Date().toUTCString(), 'seeked', e));\n    video.current.addEventListener('seeking', e => console.log(new Date().toUTCString(), 'seeking', e));\n    video.current.addEventListener('stalled', e => console.log(new Date().toUTCString(), 'stalled', e));\n    video.current.addEventListener('suspend', e => console.log(new Date().toUTCString(), 'suspend', e));\n    // video.current.addEventListener('timeupdate', e => console.log(new Date().toUTCString(), 'timeupdate', e));\n    video.current.addEventListener('volumechange', e => console.log(new Date().toUTCString(), 'volumechange', e));\n    video.current.addEventListener('waiting', e => console.log(new Date().toUTCString(), 'waiting', e));\n\n    const handleEnded = () => {\n      setPlaying(false);\n      setLoading(false);\n    };\n\n    const handleComplete = () => {\n      setPlaying(false);\n      setLoading(false);\n    };\n\n    const handlePause = () => {\n      setPlaying(false);\n    };\n\n    const handlePlaying = () => {\n      setPaused(false);\n      setPlaying(true);\n      setPlayed(true);\n    };\n\n    const handleCanplay = () => {\n      setBuffering(false);\n    };\n\n    const handleVolumeChange = () => {\n      setVolume(video.current.volume);\n    };\n\n    const handleWaiting = () => {\n      setPlaying(false);\n      setBuffering(true);\n    };\n\n    video.current.addEventListener('ended', handleEnded);\n    video.current.addEventListener('complete', handleComplete);\n    video.current.addEventListener('pause', handlePause);\n    video.current.addEventListener('playing', handlePlaying);\n    video.current.addEventListener('canplay', handleCanplay);\n    video.current.addEventListener('volumechange', handleVolumeChange);\n    video.current.addEventListener('waiting', handleWaiting);\n\n    play();\n\n    return () => {\n      video.current.removeEventListener('ended', handleEnded);\n      video.current.removeEventListener('complete', handleComplete);\n      video.current.removeEventListener('pause', handlePause);\n      video.current.removeEventListener('playing', handlePlaying);\n      video.current.removeEventListener('canplay', handleCanplay);\n      video.current.removeEventListener('volumechange', handleVolumeChange);\n      video.current.removeEventListener('waiting', handleWaiting);\n    };\n  }, [video, mediaSource]);\n\n  const play = async () => {\n    try {\n      await video.current.play();\n    } catch (e) {\n      video.current.muted = true;\n      try {\n        await video.current.play();\n      } catch (e) {\n        console.warn('error playing video', e);\n      }\n    }\n  };\n\n  // TODO: use a generic loading animation for buffering\n  const playButton = (\n    <PlayButton\n      visible={!playing}\n      onClick={play}\n      blur={!played}\n      flicker={loading && !played}\n      spin={buffering && played}\n      disabled={buffering || !played}\n    />\n  );\n\n  return (\n    <React.Fragment>\n      <DiagnosticMenu swarm={swarm} />\n      <video\n        onClick={e => e.preventDefault()}\n        className=\"swarm-player-video\"\n        ref={video}\n      />\n      {playButton}\n    </React.Fragment>\n  );\n};\n\nexport default SwarmPlayer;\n","import {EventEmitter} from 'events';\nimport crypto from 'crypto';\nimport {generateKeyPair} from './integrity';\nimport URI from './uri';\nimport {\n  ChunkAddressingMethod,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ProtocolOptions,\n} from './constants';\nimport {Swarm} from '../ppspp';\n\nexport default class Injector {\n  constructor(swarm, chunkSize, chunksPerSignature) {\n    this.swarm = swarm;\n    this.chunkSize = chunkSize;\n    this.chunksPerSignature = chunksPerSignature;\n    this.inputBuffer = Buffer.alloc(0);\n    this.chunkBuffer = [];\n  }\n\n  appendData(data) {\n    if (this.inputBuffer.length + data.length < this.chunkSize) {\n      this.inputBuffer = Buffer.concat([this.inputBuffer, data]);\n      return;\n    }\n\n    let dataOffset = 0;\n    if (this.inputBuffer.length > 0) {\n      dataOffset = this.chunkSize - this.inputBuffer.length;\n      this.chunkBuffer.push(Buffer.concat([this.inputBuffer, data.slice(0, dataOffset)], this.chunkSize));\n    }\n\n    for (let i = dataOffset; i + this.chunkSize < data.length; i += this.chunkSize) {\n      this.chunkBuffer.push(data.slice(i, Math.min(data.length, i + this.chunkSize)));\n      dataOffset = i + this.chunkSize;\n    }\n\n    if (dataOffset < data.length) {\n      this.inputBuffer = data.slice(dataOffset);\n    }\n\n    while (this.chunkBuffer.length > this.chunksPerSignature) {\n      const subtreeChunks = this.chunkBuffer.splice(0, this.chunksPerSignature);\n      this.swarm.contentIntegrity.appendSubtree(subtreeChunks).then(subtree => {\n        this.swarm.chunkBuffer.setRange(subtree.rootAddress, subtreeChunks);\n        this.swarm.scheduler.markChunksLoaded(subtree.rootAddress);\n      });\n    }\n  }\n\n  static create(options = {}) {\n    const {\n      chunkSize = 8 * 1024,\n      chunksPerSignature = 64,\n      liveDiscardWindow = Math.ceil(15 * 3500 * 1024 / chunkSize),\n      chunkAddressingMethod = ChunkAddressingMethod.Bin32,\n      contentIntegrityProtectionMethod = ContentIntegrityProtectionMethod.UnifiedMerkleTree,\n      merkleHashTreeFunction = MerkleHashTreeFunction.SHA256,\n      liveSignatureAlgorithm = LiveSignatureAlgorithm.ECDSAP256SHA256,\n    } = options;\n\n    return generateKeyPair(liveSignatureAlgorithm).then(({swarmId, privateKey}) => {\n      const uri = new URI(\n        swarmId,\n        {\n          [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n          [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n          [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n          [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n          [ProtocolOptions.ChunkSize]: chunkSize,\n        }\n      );\n\n      console.log('swarm uri:', uri.toString());\n\n      const clientOptions = {\n        liveDiscardWindow,\n        privateKey,\n        uploadRateLimit: 10e6,\n      };\n\n      return new Swarm(uri, clientOptions);\n    }).then(swarm => new Injector(swarm, chunkSize, chunksPerSignature));\n  }\n}\n\nexport class NoiseInjector extends EventEmitter {\n  constructor(dataRate = 3.5e6 / 8, interval = 250) {\n    super();\n    this.dataRate = dataRate * (interval / 1000);\n    this.interval = interval;\n  }\n\n  start() {\n    const data = Buffer.alloc(this.dataRate);\n    crypto.randomFillSync(data);\n\n    Injector.create().then(injector => {\n      this.intervalId = setInterval(() => injector.appendChunk(data), this.interval);\n      this.injector = injector;\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n","import {EventEmitter} from 'events';\nimport WebSocket from './compat/ws';\nimport {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from './compat/wrtc';\n\nexport class ConnManager {\n  constructor(bootstrapAddress) {\n    this.bootstrapAddress = bootstrapAddress;\n  }\n\n  bootstrap() {\n    return new Promise((resolve, reject) => {\n      const conn = new WebSocket(this.bootstrapAddress);\n      conn.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'bootstrap') {\n          resolve({data, conn});\n        } else {\n          reject(new Error(`expected bootstrap, received: ${event.data}`));\n        }\n      };\n    });\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    // firefox seems to continue generating ice messages after the datachannel\n    // has opened...\n    mediator.once('error', () => conn.close());\n    client.once('open', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    // console.log('mediator message', data);\n\n    switch (data.type) {\n      case 'offer':\n      case 'answer':\n        this.emit('remotedescription', new RTCSessionDescription(data));\n        break;\n      case 'icecandidate':\n        if (data.sdp && data.sdp.candidate) {\n          this.emit('icecandidate', new RTCIceCandidate(data.sdp));\n        }\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  sendOffer(event) {\n    this.send(event);\n  }\n\n  sendAnswer(event) {\n    this.send(event);\n  }\n\n  sendIceCandidate(event) {\n    if (event.candidate) {\n      this.send({\n        type: 'icecandidate',\n        sdp: event.candidate,\n      });\n    }\n  }\n\n  send(event) {\n    if (this.conn.readyState !== 1) {\n      console.log('mediator tried to send after closing its connection');\n      // console.log('send error', this.conn);\n      // console.trace();\n      // this.emit('error', new Error('connection in invalid state'));\n      return;\n    }\n\n    this.conn.send(JSON.stringify(event));\n  }\n}\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.initialized = false;\n    this.waitingChannels = 0;\n\n    this.peerConn = new RTCPeerConnection({\n      iceServers: [{urls: 'stun:stun.l.google.com:19302'}],\n    });\n\n    this.peerConn.addEventListener('icecandidate', candidate => this.mediator.sendIceCandidate(candidate));\n    this.peerConn.addEventListener('datachannel', this.handleDataChannel.bind(this));\n    this.peerConn.addEventListener('iceconnectionstatechange', this.handleIceConnectionStateChange.bind(this));\n\n    mediator.once('error', () => this.peerConn.close());\n    mediator.on('icecandidate', candidate => this.addIceCandidate(candidate));\n\n    this._ready = new Promise((resolve, reject) => {\n      mediator.on('remotedescription', description => {\n        this.peerConn.setRemoteDescription(description)\n          .then(() => {\n            resolve();\n            this.createAnswer();\n          })\n          .catch(reject);\n      });\n    });\n  }\n\n  createAnswer() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n\n    this.peerConn.createAnswer()\n      .then((description) => {\n        this.peerConn.setLocalDescription(description);\n        this.mediator.sendAnswer(description);\n      })\n      .catch(error => console.error(error));\n  }\n\n  addIceCandidate(candidate) {\n    this._ready.then(() => this.peerConn.addIceCandidate(candidate));\n  }\n\n  handleDataChannel(event) {\n    // event.channel.addEventListener('close', e => console.log('< begin close event handlers'));\n    event.channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    event.channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('< received data channel', event);\n    // event.channel.addEventListener('error', e => console.log('< data channel emitted error', e));\n    // event.channel.addEventListener('open', e => console.log('< data channel opened', e));\n    // event.channel.addEventListener('bufferedamountlow', e => console.log('< data channel bufferamountlow', e));\n    // event.channel.addEventListener('close', e => console.log('< data channel closed', e));\n\n    this.emit('datachannel', event);\n  }\n\n  createDataChannel(label, options = {}) {\n    options = {\n      ordered: true,\n      maxRetransmits: 10,\n      ...options,\n    };\n\n    const channel = this.peerConn.createDataChannel(label, options);\n    // channel.addEventListener('close', e => console.log('> begin close event handlers'));\n    channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('> received data channel', {channel});\n    // channel.addEventListener('error', e => console.log('> data channel emitted error', e));\n    // channel.addEventListener('open', e => console.log('> data channel opened', e));\n    // channel.addEventListener('bufferedamountlow', e => console.log('> data channel bufferedamountlow', e));\n    // channel.addEventListener('close', e => console.log('> data channel closed', e));\n\n    return channel;\n  }\n\n  resolveWaitingChannel() {\n    if (-- this.waitingChannels === 0) {\n      this.emit('open');\n    }\n  }\n\n  handleIceConnectionStateChange() {\n    // this seems to be the most reliable way to get connection state in chrome\n    if (this.peerConn.iceConnectionState === 'failed') {\n      this.peerConn.close();\n    }\n  }\n\n  init() {\n    this.peerConn.createOffer()\n      .then(offer => {\n        this.initialized = true;\n        // console.log('initial offer', offer);\n        this.peerConn.setLocalDescription(offer);\n        this.mediator.sendOffer(offer);\n      });\n  }\n\n  close() {\n    // console.log('wrtc client closed');\n    // console.trace();\n    this.peerConn.close();\n    this.emit('close');\n  }\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","import invert from 'lodash.invert';\n\nexport const MaxChannelId = 0xffffffff;\n\nexport const ProtocolOptions = {\n  Version: 0,\n  MinimumVersion: 1,\n  SwarmIdentifier: 2,\n  ContentIntegrityProtectionMethod: 3,\n  MerkleHashTreeFunction: 4,\n  LiveSignatureAlgorithm: 5,\n  ChunkAddressingMethod: 6,\n  LiveDiscardWindow: 7,\n  SupportedMessages: 8,\n  ChunkSize: 9,\n  EndOption: 255,\n};\n\nexport const Version = {\n  RFC7574: 1,\n};\n\nexport const ContentIntegrityProtectionMethod = {\n  None: 0,\n  MerkleHashTree: 1,\n  SignAll: 2,\n  UnifiedMerkleTree: 3,\n};\n\nexport const MerkleHashTreeFunction = {\n  SHA1: 0,\n  SHA224: 1,\n  SHA256: 2,\n  SHA384: 3,\n  SHA512: 4,\n};\n\nexport const LiveSignatureAlgorithm = {\n  RSASHA1: 5,\n  RSASHA256: 8,\n  ECDSAP256SHA256: 13,\n  ECDSAP384SHA384: 14,\n};\n\nexport const ChunkAddressingMethod = {\n  Bin32: 0,\n  ByteRange64: 1,\n  ChunkRange32: 2,\n  Bin64: 3,\n  ChunkRange64: 4,\n};\n\nexport const VariableChunkSize = 0xffffffff;\n\nexport const MessageTypes = {\n  HANDSHAKE: 0,\n  DATA: 1,\n  ACK: 2,\n  HAVE: 3,\n  INTEGRITY: 4,\n  PEX_RESv4: 5,\n  PEX_REQ: 6,\n  SIGNED_INTEGRITY: 7,\n  REQUEST: 8,\n  CANCEL: 9,\n  CHOKE: 10,\n  UNCHOKE: 11,\n  PEX_RESv6: 12,\n  PEX_REScert: 13,\n};\n\n[\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n].forEach(enumType => {\n  const names = invert(enumType);\n  enumType.name = value => names[value] || 'UNDEFINED';\n});\n","import {ChunkAddressingMethod} from './constants';\n\nexport default class Address {\n  constructor(bin = 0, treeBounds = Address.binBounds(bin)) {\n    this.bin = bin;\n    [this.start, this.end] = treeBounds;\n  }\n\n  containsBin(bin) {\n    return this.start <= bin && bin <= this.end;\n  }\n\n  getChunkCount() {\n    return (this.end - this.start) / 2 + 1;\n  }\n\n  static from(address) {\n    if (address instanceof Address) {\n      return address;\n    }\n\n    switch (address.type) {\n      case ChunkAddressingMethod.Bin32:\n        return new Address(address.value);\n      case ChunkAddressingMethod.ChunkRange32: {\n        const {start, end} = address;\n        return new Address((end - start) / 2, [start, end]);\n      }\n      default:\n        throw new Error('unsupported address type');\n    }\n  }\n\n  static binBounds(bin) {\n    return [\n      bin & (bin + 1),\n      (bin | (bin + 1)) - 1,\n    ];\n  }\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","import WebCrypto from 'node-webcrypto-ossl';\n\nmodule.exports = new WebCrypto();\n","module.exports = crypto;\n","import ws from 'ws';\n\nexport default ws;\n","module.exports = WebSocket;\n","import {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from 'wrtc';\n\nmodule.exports = {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n};\n","module.exports = {\n  RTCPeerConnection: window.RTCPeerConnection,\n  RTCSessionDescription: window.RTCSessionDescription,\n  RTCIceCandidate: window.RTCIceCandidate,\n};\n","import hexToArrayBuffer from 'hex-to-array-buffer';\n\nexport default function hexToUint8Array(v) {\n  return new Uint8Array(hexToArrayBuffer(v));\n}\n","import React, {useEffect, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport {ChunkedReadStream, ChunkedWriteStreamInjector} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\n\nimport './App.css';\n\nconst App = () => {\n  const [server] = useState(new Server());\n  const [swarms, setSwarms] = useState([]);\n  const [swarmUri, setSwarmUri] = useState('');\n\n  useEffect(() => {\n    const injector = new ChunkedWriteStreamInjector();\n\n    injector.on('publish', ({swarm}) => {\n      setSwarmUri(swarm.uri);\n      server.ppsppClient.publishSwarm(swarm);\n    });\n\n    injector.on('unpublish', ({swarm}) => {\n      server.ppsppClient.unpublishSwarm(swarm);\n    });\n\n    injector.start();\n\n    return () => injector.stop();\n  }, []);\n\n  const handleAddPeerClick = () => {\n    Client.create(new ConnManager(server)).then(({ppsppClient}) => {\n      const swarm = ppsppClient.joinSwarm(swarmUri);\n      // console.log(ppsppClient);\n\n      setSwarms([...swarms, swarm]);\n\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', d => console.log(`received ${d.length} bytes`));\n    });\n  };\n\n  const diagnosticMenus = swarms.map((swarm, i) => (\n    <DiagnosticMenu\n      key={i}\n      swarm={swarm}\n      containerClass={`diagnostic-menu--indent-${i}`}\n    />\n  ));\n\n  return (\n    <div>\n      {diagnosticMenus}\n      <button onClick={handleAddPeerClick}>add peer</button>\n    </div>\n  );\n};\n\nexport default App;\n","import React, {useEffect, useReducer, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport {schemeCategory10} from 'd3-scale-chromatic';\nimport {scaleOrdinal} from 'd3-scale';\n// import SpriteText from 'three-spritetext';\n// import {Mesh, SphereBufferGeometry, MeshLambertMaterial} from 'three';\n\nimport './App.css';\n\nconst color = scaleOrdinal(schemeCategory10);\n\nconst reduceGraph = (graph, {type, ...data}) => {\n  switch (type) {\n    case 'ADD_NODE':\n      return {\n        nodes: [...graph.nodes, data],\n        links: graph.links,\n      };\n    case 'REMOVE_NODE':\n      return {\n        nodes: graph.nodes.filter(node => node.id !== data.id),\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.id && target.id !== data.id;\n        }),\n      };\n    case 'ADD_LINK':\n      return {\n        nodes: graph.nodes,\n        links: [...graph.links, {...data, activity: 0}],\n      };\n    case 'UPDATE_LINK':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            ...data,\n          };\n        }),\n      };\n    case 'INCR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity + 1,\n          };\n        }),\n      };\n    case 'DECR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity - 1,\n          };\n        }),\n      };\n    case 'REMOVE_LINK':\n      console.log(data);\n      return {\n        nodes: graph.nodes,\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.source || target.id !== data.target;\n        }),\n      };\n    default:\n      return graph;\n  }\n};\n\nconst useGraph = () => {\n  const [servers, setServers] = useState([new Server()]);\n  const [gen, setGen] = useState(1);\n  const [graph, dispatchGraphAction] = useReducer(reduceGraph, {nodes: [], links: []});\n\n  useEffect(() => {\n    const source = arrayBufferToHex(servers[0].dhtClient.id);\n    dispatchGraphAction({\n      type: 'ADD_NODE',\n      id: source,\n      color: '#fff',\n      dhtClient: servers[0].dhtClient,\n    });\n\n    addNodes(3)\n      .then(clients => clients.map(({dhtClient, ppsppClient}) => {\n        return new Server({dhtClient, ppsppClient});\n      }))\n      .then(newServers => setServers([...servers, ...newServers]));\n  }, []);\n\n  const addNodes = (n = 1, props = {}) => {\n    setGen(gen + 1);\n\n    const clientsResult = Promise.all(new Array(n).fill(0).map(() => {\n      const firstIndex = servers.length - 1;\n      const serverIndex = Math.min(firstIndex, 1 + Math.floor(Math.random() * firstIndex));\n      const server = servers[serverIndex];\n      return Client.create(new ConnManager(server));\n    }));\n\n    clientsResult.then(clients => clients.forEach(({dhtClient}) => {\n      // if (Math.random() > 0.5) {\n      //   setTimeout(() => dhtClient.close(), Math.random() * 30000);\n      // }\n\n      const {id, allChannels} = dhtClient;\n      console.log(allChannels);\n\n      const source = arrayBufferToHex(id);\n      dispatchGraphAction({\n        type: 'ADD_NODE',\n        id: source,\n        color: color(gen),\n        dhtClient,\n        ...props,\n      });\n      dhtClient.on('close', () => dispatchGraphAction({\n        type: 'REMOVE_NODE',\n        id: source,\n      }));\n\n      allChannels.toArray().forEach(channel => {\n        if (channel.isOpen()) {\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target: arrayBufferToHex(channel.id),\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n        }\n      });\n\n      // const registerConnObservers = (target, conn) => {\n      //   const handleMessage = () => {\n      //     dispatchGraphAction({type: 'INCR_LINK_ACTIVITY', source, target});\n      //     setTimeout(() => dispatchGraphAction({type: 'DECR_LINK_ACTIVITY', source, target}), 10000);\n      //   };\n\n      //   conn.on('message', handleMessage);\n      //   conn.remote.on('message', handleMessage);\n      // };\n\n      allChannels.on('added',  channel => {\n        if (channel.isOpen()) {\n          const target = arrayBufferToHex(channel.id);\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('updated', (oldChannel, newChannel) => {\n        if (oldChannel.isOpen() !== newChannel.isOpen()) {\n          const target = arrayBufferToHex(newChannel.id);\n          // dispatchGraphAction({\n          //   type: 'UPDATE_LINK',\n          //   source,\n          //   target,\n          //   color: conn ? '#fff' : '#66f',\n          // });\n\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: newChannel.isOpen() ? '#fff' : '#66f',\n          });\n\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('removed', ({id}) => dispatchGraphAction({\n        type: 'REMOVE_LINK',\n        source,\n        target: arrayBufferToHex(id),\n      }));\n    }));\n\n    return clientsResult;\n  };\n\n  const deleteNodes = (n = 1) => {\n    for (let i = 0; i < n; i ++) {\n      const firstIndex = servers.length;\n      const node = graph.nodes[firstIndex + Math.floor(Math.random() * (Object.keys(graph.nodes).length - firstIndex))];\n      if (node) {\n        node.dhtClient.close();\n      }\n    }\n  };\n\n  return [graph, {addNodes, deleteNodes}];\n};\n\nconst useNodePinger = () => {\n  const [source, setSource] = useState(null);\n\n  const handleNodeClick = node => {\n    console.log(node);\n    if (source === null) {\n      setSource(node);\n      console.log('set source', arrayBufferToHex(node.dhtClient.id));\n      return;\n    }\n\n    console.log('pinging %s > %s', arrayBufferToHex(source.dhtClient.id), arrayBufferToHex(node.dhtClient.id));\n    source.dhtClient.sendPing(node.dhtClient.id, (data) => {\n      console.log('received ping response', data);\n    });\n    setSource(null);\n  };\n\n  return handleNodeClick;\n};\n\nconst App = () => {\n  const [graph, {addNodes, deleteNodes}] = useGraph();\n  const handleNodeClick = useNodePinger();\n\n  console.log(graph);\n\n  // useEffect(() => {\n  //   let n = 1;\n  //   const ivl = setInterval(() => {\n  //     addNodes(1, {color: color(n)});\n  //     if (++ n == 50) {\n  //       clearInterval(ivl);\n  //     }\n  //   }, 1000);\n  //   return () => clearInterval(ivl);\n  // }, []);\n\n  return (\n    <div>\n      <div className=\"graph-buttons\">\n        <button onClick={() => addNodes(1)}>add 1 peer</button>\n        <button onClick={() => addNodes(5)}>add 5 peers</button>\n        <button onClick={() => addNodes(10)}>add 10 peers</button>\n        <button onClick={() => deleteNodes(1)}>delete 1 peer</button>\n        <button onClick={() => deleteNodes(5)}>delete 5 peers</button>\n      </div>\n      <ForceGraph3D\n        graphData={graph}\n        nodeAutoColorBy=\"gen\"\n        onNodeClick={handleNodeClick}\n        linkColor={link => link.color}\n        linkWidth={1.5}\n        nodeRelSize={2}\n        nodeVal={node => node.dhtClient.allChannels.count()}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport App from './App';\nimport Test from './Test';\nimport DhtGraph from './DhtGraph';\n\nconst Router = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/test\" component={Test} />\n      <Route exact path=\"/dht-graph\" component={DhtGraph} />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './Router';\n\nimport './index.css';\n\n// if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {\n//   window.addEventListener('load', function() {\n//     navigator.serviceWorker.register('/service-worker.js');\n//   });\n// }\n\nReactDOM.render(<Router />, document.getElementById('root'));\n","import {Buffer} from 'buffer';\nimport arrayEqual from 'array-equal';\nimport binSearch from '../binSearch';\nimport Address from './address';\nimport SwarmId from './swarmid';\n\nimport {\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n} from './constants';\n\nconst crypto = require('../compat/crypto');\n\nconst toUint8Array = data => new Uint8Array(data);\n\nexport const MerkleHashTreeFunctionAlgorithms = {\n  [MerkleHashTreeFunction.SHA1]: 'SHA-1',\n  [MerkleHashTreeFunction.SHA224]: 'SHA-224',\n  [MerkleHashTreeFunction.SHA256]: 'SHA-256',\n  [MerkleHashTreeFunction.SHA384]: 'SHA-384',\n  [MerkleHashTreeFunction.SHA512]: 'SHA-512',\n};\n\nexport const MerkleHashTreeFunctionByteLengths = {\n  [MerkleHashTreeFunction.SHA1]: 20,\n  [MerkleHashTreeFunction.SHA224]: 28,\n  [MerkleHashTreeFunction.SHA256]: 32,\n  [MerkleHashTreeFunction.SHA384]: 48,\n  [MerkleHashTreeFunction.SHA512]: 64,\n};\n\nexport const createMerkleHashTreeFunction = (merkleHashTreeFunction) => {\n  const algorithm = MerkleHashTreeFunctionAlgorithms[merkleHashTreeFunction];\n  if (algorithm === undefined) {\n    throw new Error('invalid merkle hash tree function');\n  }\n\n  const nullHash = new Uint8Array(MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction]);\n\n  return (...values) => {\n    values = values.map(value => value === undefined ? nullHash : value);\n\n    if (values.every(value => arrayEqual(value, nullHash))) {\n      return Promise.resolve(nullHash);\n    }\n\n    if (values.length > 1) {\n      values = new Uint8Array(Buffer.concat(values.map(value => Buffer.from(value))));\n    } else {\n      values = values[0];\n    }\n\n    return crypto.subtle.digest(algorithm, values).then(toUint8Array);\n  };\n};\n\nexport const LiveSignatureAlgorithms = {\n  [LiveSignatureAlgorithm.RSASHA1]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-1'},\n  },\n  [LiveSignatureAlgorithm.RSASHA256]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP256SHA256]: {\n    name: 'ECDSA',\n    namedCurve: 'P-256',\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP384SHA384]: {\n    name: 'ECDSA',\n    namedCurve: 'P-384',\n    hash: {name: 'SHA-384'},\n  },\n};\n\nexport const createLiveSignatureSignFunction = (liveSignatureAlgorithm, privateKey, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  const importResult = crypto.subtle.importKey('pkcs8', privateKey, algorithm, false, ['sign']);\n\n  return data => importResult\n    .then(privateKey => crypto.subtle.sign(algorithm, privateKey, data))\n    .then(toUint8Array);\n};\n\nexport const createLiveSignatureVerifyFunction = (liveSignatureAlgorithm, swarmId, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...swarmId.getKeyParams(),\n    ...algorithm,\n  };\n\n  const publicKey = new Uint8Array(swarmId.publicKey);\n  const importResult = crypto.subtle.importKey('spki', publicKey, algorithm, false, ['verify']);\n\n  return (signature, data) => importResult\n    .then(publicKey => crypto.subtle.verify(algorithm, publicKey, signature, data))\n    .then(toUint8Array);\n};\n\nexport const generateKeyPair = (liveSignatureAlgorithm, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  return crypto.subtle.generateKey(algorithm, true, ['sign', 'verify'])\n    .then(keyPair => Promise.all([\n      crypto.subtle.exportKey('pkcs8', keyPair.privateKey),\n      crypto.subtle.exportKey('spki', keyPair.publicKey),\n    ]))\n    .then(([privateKey, publicKey]) => ({\n      privateKey,\n      publicKey,\n      swarmId: SwarmId.from({\n        ...algorithm,\n        liveSignatureAlgorithm,\n        publicKey,\n      }),\n    }));\n};\n\nconst unavailableLiveSignatureSignFunction = () => Promise.reject('live signature function not available');\n\nexport const createContentIntegrityVerifierFactory = (\n  contentIntegrityProtectionMethod,\n  merkleHashTreeFunction,\n  liveSignatureVerifyFunction,\n  liveSignatureSignFunction = unavailableLiveSignatureSignFunction,\n  liveDiscardWindow = Infinity,\n) => {\n  class Signature {\n    constructor(hash, verified = false) {\n      this.hash = hash;\n      this.verified = verified;\n    }\n\n    markVerified() {\n      this.verified = true;\n    }\n\n    getHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return !this.verified\n        ? Promise.reject('cannot use unverified signature')\n        : Promise.resolve(arrayEqual(this.hash, value));\n    }\n  }\n\n  // TODO: timestamp in hash?\n  class SignedSignature {\n    constructor(signature, hash) {\n      this.signature = signature;\n      this.hash = hash;\n      this.verificationResult = undefined;\n    }\n\n    verifyHash() {\n      if (this.verificationResult === undefined) {\n        this.verificationResult = liveSignatureVerifyFunction(this.hash, this.getHash())\n          .then(() => this.markVerified());\n      }\n      return this.verificationResult;\n    }\n\n    markVerified() {\n      this.signature.markVerified();\n    }\n\n    getHash() {\n      return this.signature.getHash();\n    }\n\n    getSignatureHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return this.verifyHash().then(() => this.signature.compare(value));\n    }\n  }\n\n  class MerkleHashTree {\n    constructor(rootAddress, signatures = new Array(rootAddress.getChunkCount() * 2 - 1)) {\n      this.rootAddress = rootAddress;\n      this.signatures = signatures;\n    }\n\n    createVerifier() {\n      return new MerkleHashTreeVerifier(this);\n    }\n\n    copy(hashTree) {\n      for (let i = 0; i < this.signatures.length; i ++) {\n        if (hashTree.signatures[i] === undefined) {\n          hashTree.signatures[i] = this.signatures[i];\n        }\n      }\n    }\n\n    getChunkCount() {\n      return this.rootAddress.getChunkCount();\n    }\n\n    *getConstituentHashBins({bin}) {\n      if (!this.rootAddress.containsBin(bin)) {\n        throw new Error('bin out of range');\n      }\n\n      const {start} = this.rootAddress;\n      bin -= start;\n\n      const bins = [];\n      let bfsIndex = this.rootAddress.getChunkCount() + bin / 2 - 1;\n      let stride = 2;\n      let parent = bin;\n\n      while (bfsIndex !== 0) {\n        const branch = (bfsIndex & 1) === 1 ? 1 : -1;\n\n        yield {\n          isRoot: false,\n          branch,\n          bin: parent + start,\n          bfsIndex,\n          siblingBin: parent + branch * stride + start,\n          siblingBfsIndex: bfsIndex + branch,\n        };\n\n        bfsIndex = Math.floor((bfsIndex - 1) / 2);\n        parent += branch * stride / 2;\n        stride *= 2;\n      }\n\n      yield {\n        isRoot: true,\n        branch: 0,\n        bin: parent + start,\n        bfsIndex: 0,\n        siblingBin: parent + start,\n        siblingBfsIndex: 0,\n      };\n\n      return bins;\n    }\n\n    getConstituentSignatures(address) {\n      return Array.from(this.getConstituentHashBins(address)).map(({\n        siblingBin,\n        siblingBfsIndex,\n      }) => ({\n        bin: siblingBin,\n        signature: this.signatures[siblingBfsIndex],\n      }));\n    }\n\n    static from(values, rootAddress = new Address(MerkleHashTree.minSize(values.length) - 1)) {\n      const size = rootAddress.getChunkCount();\n      const hashes = new Array(size * 2 - 1);\n      for (let i = 0; i < size; i ++) {\n        hashes[i + size - 1] = merkleHashTreeFunction(values[i]);\n      }\n      for (let i = (size - 1) * 2; i > 0; i -= 2) {\n        hashes[Math.floor(i / 2) - 1] = Promise.all([hashes[i - 1], hashes[i]])\n          .then(siblings => merkleHashTreeFunction(...siblings));\n      }\n\n      return Promise.all(hashes).then(hashes => {\n        const signatures = hashes.map(hash => new Signature(hash, true));\n\n        return liveSignatureSignFunction(hashes[0]).then(rootHashSignature => {\n          signatures[0] = new SignedSignature(\n            signatures[0],\n            rootHashSignature,\n          );\n\n          return new MerkleHashTree(rootAddress, signatures);\n        });\n      });\n    }\n\n    static minSize(size) {\n      return Math.pow(2, Math.ceil(Math.log2(size)));\n    }\n  }\n\n  class MerkleHashTreeVerifier {\n    constructor(hashTree) {\n      this.hashTree = hashTree;\n      this.signatures = {};\n    }\n\n    setHash({bin}, hash) {\n      this.signatures[bin] = new Signature(hash);\n    }\n\n    setHashSignature({bin}, hash) {\n      this.signatures[bin] = new SignedSignature(this.signatures[bin], hash);\n    }\n\n    verifyChunk(address, value) {\n      const signatures = [];\n      let hashResult = merkleHashTreeFunction(value);\n\n      for (let bin of this.hashTree.getConstituentHashBins(address)) {\n        let siblingSignature = this.hashTree.signatures[bin.siblingBfsIndex];\n        if (siblingSignature === undefined) {\n          siblingSignature = this.signatures[bin.siblingBin];\n          signatures.push({\n            index: bin.siblingBfsIndex,\n            signature: siblingSignature,\n          });\n        }\n\n        // if the current branch has already been verified short circuit\n        const verifiedSignature = this.hashTree.signatures[bin.bfsIndex];\n        if (verifiedSignature !== undefined) {\n          hashResult = hashResult.then(hash => verifiedSignature.compare(hash));\n          break;\n        }\n\n        // verify the generated root hash using the one supplied to the verifier\n        if (bin.isRoot) {\n          hashResult = hashResult.then(hash => siblingSignature.compare(hash));\n          break;\n        }\n\n        // chain generating the next parent hash\n        hashResult = hashResult.then(hash => {\n          signatures.push({\n            index: bin.bfsIndex,\n            signature: new Signature(hash),\n          });\n\n          const siblingHash = siblingSignature.getHash();\n          const siblings = bin.branch === 1 ? [hash, siblingHash] : [siblingHash, hash];\n          return merkleHashTreeFunction(...siblings);\n        });\n      }\n\n      return hashResult.then(() => {\n        signatures.forEach(({index, signature}) => {\n          signature.markVerified();\n          this.hashTree.signatures[index] = signature;\n        });\n      });\n    }\n  }\n\n  class UnifiedMerkleHashTree {\n    constructor() {\n      this.subtrees = [];\n      this.nextStart = 0;\n      this.chunkCount = 0;\n    }\n\n    findSubtree({bin}) {\n      const index = binSearch(\n        this.subtrees.length - 1,\n        i => {\n          const {start, end} = this.subtrees[i].rootAddress;\n          return start <= bin && bin <= end ? 0 : start - bin;\n        },\n      );\n\n      return index < 0 ? undefined : this.subtrees[index];\n    }\n\n    insertSubtree(subtree) {\n      const storedSubtree = this.findSubtree(subtree.rootAddress);\n      if (storedSubtree !== undefined) {\n        if (storedSubtree !== subtree) {\n          subtree.copy(storedSubtree);\n        }\n\n        return storedSubtree;\n      }\n\n      this.subtrees.push(subtree);\n      this.subtrees.sort((a, b) => a.rootAddress.start - b.rootAddress.start);\n\n      this.chunkCount += subtree.getChunkCount();\n      this.pruneSubtrees();\n\n      return subtree;\n    }\n\n    pruneSubtrees() {\n      while (this.subtrees.length > 0 && this.chunkCount - this.subtrees[0].getChunkCount() > liveDiscardWindow) {\n        const removedTree = this.subtrees.shift();\n        this.chunkCount -= removedTree.getChunkCount();\n      }\n    }\n\n    appendSubtree(values) {\n      const treeSize = MerkleHashTree.minSize(values.length);\n      const nextAddress = new Address(\n        this.nextStart + treeSize - 1,\n        [this.nextStart, this.nextStart + (treeSize - 1) * 2],\n      );\n\n      this.nextStart += treeSize * 2;\n\n      return MerkleHashTree.from(values, nextAddress)\n        .then(subtree => this.insertSubtree(subtree));\n    }\n\n    createVerifier(address) {\n      let subtree = this.findSubtree(address) || new MerkleHashTree(address);\n      return new MerkleHashSubtreeVerifier(this, subtree);\n    }\n\n    getConstituentSignatures(address) {\n      const subtree = this.findSubtree(address);\n      if (subtree === undefined) {\n        return;\n      }\n\n      return subtree.getConstituentSignatures(address);\n    }\n  }\n\n  class MerkleHashSubtreeVerifier extends MerkleHashTreeVerifier {\n    constructor(unifiedHashTree, subtree) {\n      super(subtree);\n      this.unifiedHashTree = unifiedHashTree;\n    }\n\n    verifyChunk(address, value) {\n      return super.verifyChunk(address, value)\n        .then(this.unifiedHashTree.insertSubtree(this.hashTree));\n    }\n  }\n\n  class NoneVerifier {\n    setHash() {}\n\n    setHashSignature() {}\n\n    verifyChunk() {\n      return Promise.resolve();\n    }\n  }\n\n  class NoneVerifierFactory {\n    createVerifier() {\n      return new NoneVerifier();\n    }\n\n    getConstituentSignatures() {\n      return [];\n    }\n  }\n\n  // TODO: sign all method\n  switch (contentIntegrityProtectionMethod) {\n    case ContentIntegrityProtectionMethod.None:\n      return new NoneVerifierFactory();\n    case ContentIntegrityProtectionMethod.MerkleHashTree:\n      return new MerkleHashTree();\n    case ContentIntegrityProtectionMethod.UnifiedMerkleTree:\n      return new UnifiedMerkleHashTree();\n    default:\n      throw new Error('unsupported content integrity protection method');\n  }\n};\n","export default function binSearch(max, comparator) {\n  let left = 0;\n  let right = max;\n\n  while (left <= right) {\n    const mid = left + Math.floor((right - left) / 2);\n    const order = comparator(mid);\n\n    if (order < 0) {\n      left = mid + 1;\n    } else if (order > 0) {\n      right = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(left + 1);\n}\n","import {EventEmitter} from 'events';\nimport Injector from './ppspp/injector';\n\nconst DELIMITER = Buffer.from('4c93bf00ae13c37e5df3b7a9cea0413521fe1b08a627d065d7180b9d0738c666', 'hex');\nconst DELIMITER_LENGTH = DELIMITER.length;\nconst HEADER_INSTANCE_LENGTH = 37;\n\nexport class ChunkedWriteStream extends EventEmitter {\n  constructor(injector) {\n    super();\n    this.injector = injector;\n  }\n\n  write(buffer) {\n    const length = Buffer.alloc(4);\n    length.writeUInt32BE(buffer.length);\n    this.injector.appendData(Buffer.concat(\n      [\n        DELIMITER,\n        Buffer.from([0]),\n        length,\n        DELIMITER,\n        Buffer.from([1]),\n        length,\n      ],\n      HEADER_INSTANCE_LENGTH * 2,\n    ));\n\n    this.injector.appendData(buffer);\n  }\n}\n\nexport class ChunkedWriteStreamInjector extends EventEmitter {\n  start() {\n    const data = Buffer.alloc(3500000 / 8);\n    data.fill(255);\n\n    Injector.create().then(injector => {\n      this.injector = injector;\n\n      const writer = new ChunkedWriteStream(injector);\n      this.intervalId = setInterval(() => writer.write(data), 1000);\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n\nclass AbstractChunkedReadStream extends EventEmitter {\n  constructor(swarm) {\n    super();\n\n    this.swarm = swarm;\n\n    this.handleWarmupSwarmData = this.handleWarmupSwarmData.bind(this);\n    this.handleSwarmData = this.handleSwarmData.bind(this);\n\n    this.chunkBufferLength = 0;\n    this.nextDataOffset = 0;\n    this.nextDataLength = 0;\n\n    this.swarm.on('data', this.handleWarmupSwarmData);\n  }\n\n  handleWarmupSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const delimiterIndex = data[i].indexOf(DELIMITER);\n      if (delimiterIndex === -1 || delimiterIndex + HEADER_INSTANCE_LENGTH > data[i].length) {\n        continue;\n      }\n\n      this.swarm.removeListener('data', this.handleWarmupSwarmData);\n      this.swarm.on('data', this.handleSwarmData);\n\n      this.readHeader(data[i], delimiterIndex);\n      this.handleSwarmData(data.slice(i));\n\n      break;\n    }\n  }\n\n  readHeader(data, offset) {\n    const instance = data.readUInt8(offset + DELIMITER_LENGTH);\n    this.nextDataOffset = offset + HEADER_INSTANCE_LENGTH * (2 - instance);\n    this.nextDataLength = data.readUInt32BE(offset + DELIMITER_LENGTH + 1);\n  }\n\n  handleSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const lastChunkOffset = this.chunkBufferLength;\n\n      this.chunkBufferLength += data[i].length;\n\n      const nextDataEnd = this.nextDataOffset + this.nextDataLength;\n      if (this.chunkBufferLength < nextDataEnd) {\n        this.handleData(data[i], lastChunkOffset);\n        continue;\n      }\n\n      const lastChunkEnd = nextDataEnd - lastChunkOffset;\n      this.handleEndData(data[i], lastChunkEnd);\n\n      // find the next header or defer to handleWarmupSwarmData if it hasn't arrived\n      if (this.chunkBufferLength - nextDataEnd <= HEADER_INSTANCE_LENGTH) {\n        this.swarm.removeListener('data', this.handleSwarmData);\n        this.swarm.on('data', this.handleWarmupSwarmData);\n\n        this.chunkBufferLength = 0;\n        this.handleWarmupSwarmData(data.slice(i));\n        return;\n      }\n\n      this.chunkBufferLength = 0;\n      this.readHeader(data[i], lastChunkEnd);\n      i--;\n    }\n  }\n}\n\nexport class ChunkedFragmentedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.firstEmitted = false;\n  }\n\n  handleData(data, lastChunkOffset) {\n    if (!this.firstEmitted) {\n      if (this.chunkBufferLength > this.nextDataOffset) {\n        this.emit('start', data.slice(this.nextDataOffset - lastChunkOffset));\n        this.firstEmitted = true;\n      }\n\n      return;\n    }\n\n    this.emit('data', data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.emit('end', data.slice(0, lastChunkEnd));\n    this.firstEmitted = false;\n  }\n}\n\nexport class ChunkedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.chunkBuffer = [];\n  }\n\n  handleData(data) {\n    this.chunkBuffer.push(data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.chunkBuffer.push(data);\n\n    // trim export data range and emit\n    const chunkSlice = this.chunkBuffer.slice();\n\n    chunkSlice[chunkSlice.length - 1] = chunkSlice[chunkSlice.length - 1].slice(0, lastChunkEnd);\n\n    let firstChunkStart = this.nextDataOffset;\n    if (firstChunkStart > chunkSlice[0].length) {\n      firstChunkStart -= chunkSlice[0].length;\n      chunkSlice.shift();\n    }\n    chunkSlice[0] = chunkSlice[0].slice(firstChunkStart);\n\n    this.emit(\n      'data',\n      {\n        chunks: chunkSlice,\n        length: this.nextDataLength,\n      },\n    );\n\n    this.chunkBuffer = [];\n  }\n}\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport createRandomId from './utils/createRandomId';\n\nexport class Server {\n  constructor(props = {}) {\n    this.queue = [];\n    this.dhtClient = props.dhtClient || new dht.Client(createRandomId());\n    this.ppsppClient = props.ppsppClient || new ppspp.Client();\n  }\n}\n\nexport class ConnManager {\n  constructor(server) {\n    this.server = server;\n  }\n\n  bootstrap() {\n    const id = createRandomId();\n\n    const data = {\n      type: 'bootstrap',\n      bootstrapId: arrayBufferToHex(this.server.dhtClient.id),\n      id: arrayBufferToHex(id),\n    };\n    const conn = Conn.open();\n    const client = this.createClient(conn);\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.server.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.server.ppsppClient.createChannel(channel);\n      }\n    });\n\n    this.server.queue.push(client);\n    if (this.server.queue.length > 6) {\n      this.server.queue.shift().close();\n    }\n    // setTimeout(() => client.close(), Math.random() * 30000);\n\n    return Promise.resolve({data, conn: conn.remote});\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    mediator.on('connection', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Conn extends EventEmitter {\n  constructor(remote) {\n    super();\n\n    this.remote = remote || new Conn(this);\n    this.remote.remote = this;\n\n    this.readyState = this.remote.readyState || Conn.ReadyStates.CONNECTING;\n\n    this.onmessage = () => {};\n  }\n\n  send(data) {\n    if (this.readyState === Conn.ReadyStates.OPEN) {\n      setImmediate(() => {\n        this.remote.emit('message', {data});\n        this.remote.onmessage({data});\n      });\n    }\n  }\n\n  addEventListener(...args) {\n    this.on(...args);\n  }\n\n  removeEventListener(...args) {\n    this.removeListener(...args);\n  }\n\n  static open() {\n    const conn = new Conn();\n    conn.open();\n    conn.remote.open();\n    return conn;\n  }\n\n  open() {\n    this.readyState = Conn.ReadyStates.OPEN;\n    this.remote.readyState = Conn.ReadyStates.OPEN;\n    this.emit('open');\n  }\n\n  close() {\n    this.readyState = Conn.ReadyStates.CLOSING;\n    this.remote.readyState = Conn.ReadyStates.CLOSING;\n\n    this.remote.emit('close');\n    this.emit('close');\n\n    this.readyState = Conn.ReadyStates.CLOSED;\n    this.remote.readyState = Conn.ReadyStates.CLOSED;\n\n    this.removeAllListeners();\n    this.remote.removeAllListeners();\n  }\n}\n\nConn.ReadyStates = {\n  CONNECTING: 'connecting',\n  OPEN: 'open',\n  CLOSING: 'closing',\n  CLOSED: 'closed',\n};\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case 'connection':\n        this.handleConnection(data);\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  handleConnection({id}) {\n    const datachannels = Mediator.datachannels[id];\n    delete Mediator.datachannels[id];\n\n    Object.entries(datachannels).forEach(([label, channel]) => this.emit('datachannel', label, channel));\n    this.emit('open');\n  }\n\n  sendConnection(datachannels) {\n    const id = Mediator.nextId ++;\n    Mediator.datachannels[id] = datachannels;\n\n    this.conn.send(JSON.stringify({\n      type: 'connection',\n      id,\n    }));\n\n    this.emit('open');\n  }\n}\n\nMediator.nextId = 0;\nMediator.datachannels = {};\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.datachannels = {};\n    this.conns = [];\n\n    mediator.on('datachannel', this.handleDataChannel.bind(this));\n    mediator.once('open', this.handleOpen.bind(this));\n  }\n\n  handleDataChannel(label, conn) {\n    const channel = new ClientDataChannel(this, label, conn);\n    this.conns.push(channel);\n    this.emit('datachannel', {label, channel});\n  }\n\n  handleOpen() {\n    setImmediate(() => {\n      this.conns.forEach(conn => conn.open());\n      this.emit('open');\n    });\n  }\n\n  createDataChannel(label) {\n    const channel = new ClientDataChannel(this, label);\n    this.datachannels[label] = channel;\n    this.conns.push(channel);\n    return channel;\n  }\n\n  init() {\n    this.mediator.sendConnection(this.datachannels);\n  }\n\n  close() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n\n    this.conns.forEach(conn => conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n}\n\nexport class ClientDataChannel extends Conn {\n  constructor(client, label, remote) {\n    super(remote);\n\n    this.client = client;\n    this.label = label;\n  }\n}\n","import {LiveSignatureAlgorithm} from './constants';\n\nconst isRsaAlgorithm = liveSignatureAlgorithm => {\n  const rsaAlgorithms = [\n    LiveSignatureAlgorithm.RSASHA1,\n    LiveSignatureAlgorithm.RSASHA256,\n  ];\n  return rsaAlgorithms.includes(liveSignatureAlgorithm);\n};\n\nexport default class SwarmId {\n  constructor(\n    liveSignatureAlgorithm,\n    publicKey,\n    publicExponent,\n    modulusLength,\n  ) {\n    this.liveSignatureAlgorithm = liveSignatureAlgorithm;\n    this.publicKey = Buffer.from(publicKey);\n    this.publicExponent = publicExponent;\n    this.modulusLength = modulusLength;\n  }\n\n  getLiveSignatureByteLength() {\n    switch (this.liveSignatureAlgorithm) {\n      case LiveSignatureAlgorithm.RSASHA1:\n      case LiveSignatureAlgorithm.RSASHA256:\n        return this.modulusLength / 8;\n      case LiveSignatureAlgorithm.ECDSAP256SHA256:\n        return 64;\n      case LiveSignatureAlgorithm.ECDSAP384SHA384:\n        return 96;\n      default:\n        throw new Error('unsupported live signature algorithm');\n    }\n  }\n\n  getKeyParams() {\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      return {\n        publicExponent: new Uint8Array(this.publicExponent),\n        modulusLength: this.modulusLength,\n      };\n    }\n    return {};\n  }\n\n  byteLength() {\n    const metadataLength = isRsaAlgorithm(this.liveSignatureAlgorithm) ? 9 : 1;\n    return this.publicKey.length + metadataLength;\n  }\n\n  toBuffer() {\n    const buffer = Buffer.alloc(this.byteLength());\n    let length = 0;\n\n    buffer.writeUInt8(this.liveSignatureAlgorithm, length);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      Buffer.from(this.publicExponent).copy(buffer, length + 4 - this.publicExponent.length);\n      length += 4;\n\n      buffer.writeUInt32BE(this.modulusLength, length);\n      length += 4;\n    }\n\n    this.publicKey.copy(buffer, length);\n\n    return buffer;\n  }\n\n  read(buffer) {\n    let length = 0;\n\n    this.liveSignatureAlgorithm = buffer.readUInt8(0);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      this.publicExponent = buffer.slice(length, length + 4);\n      length += 4;\n\n      this.modulusLength = buffer.readUInt32BE(length);\n      length += 4;\n    }\n\n    this.publicKey = buffer.slice(length);\n  }\n\n  static from(values) {\n    if (ArrayBuffer.isView(values)) {\n      const swarmId = Object.create(SwarmId.prototype);\n      swarmId.read(Buffer.from(values));\n      return swarmId;\n    }\n\n    return new SwarmId(\n      values.liveSignatureAlgorithm,\n      values.publicKey,\n      values.publicExponent,\n      values.modulusLength,\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport approx from 'approximate-number';\nimport {scaleLinear} from 'd3-scale';\n\nimport './index.css';\n\nclass ToggleButton extends Component {\n  static defaultProps = {\n    expanded: false,\n  };\n\n  render() {\n    const buttonClasses = classNames({\n      'diagnostic_menu__toggle_button': true,\n      'diagnostic_menu__toggle_button--expanded': this.props.expanded,\n    });\n\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={buttonClasses}\n      />\n    );\n  }\n}\n\nconst formatNumber = value => isFinite(value) ? approx(value) : String(value);\n\n// TODO: total downloaded\n// TODO: total discarded\n// TODO: upload/download rate\nclass SwarmState extends Component {\n  render() {\n    const {scheduler} = this.props.value;\n\n    const values = [\n      {\n        key: 'totalSends',\n        value: formatNumber(scheduler.totalSends),\n      },\n      {\n        key: 'totalRequests',\n        value: formatNumber(scheduler.totalRequests),\n      },\n      {\n        key: 'totalRequestsReceived',\n        value: formatNumber(scheduler.totalRequestsReceived),\n      },\n      {\n        key: 'totalDroppedRequests',\n        value: formatNumber(scheduler.totalDroppedRequests),\n      },\n      {\n        key: 'totalReceived',\n        value: formatNumber(scheduler.totalReceived),\n      },\n      {\n        key: 'totalAdded',\n        value: formatNumber(scheduler.totalAdded),\n      },\n      {\n        key: 'totalCancelled',\n        value: formatNumber(scheduler.totalCancelled),\n      },\n      {\n        key: 'ackUnknownSend',\n        value: formatNumber(scheduler.ackUnknownSend),\n      },\n      {\n        key: 'lastCompletedBin',\n        value: scheduler.lastCompletedBin,\n      },\n      {\n        key: 'picker.firstLoadedChunk',\n        value: scheduler.loadedChunks.min(),\n      },\n      {\n        key: 'picker.firstRequestedChunk',\n        value: scheduler.requestedChunks.min(),\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(scheduler.chunkRate.value()),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    return (\n      <div className=\"swarm_state__container\">\n        <table>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass PeerStateTable extends Component {\n  render() {\n    const peerState = this.props.value;\n\n    const values = [\n      {\n        key: 'chunkIntervalMean',\n        value: formatNumber(peerState.chunkIntervalMean.value()),\n      },\n      {\n        key: 'wasteRate',\n        value: formatNumber(peerState.wasteRate.value()),\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(peerState.chunkRate.value()),\n      },\n      {\n        key: 'ledbat.baseDelay',\n        value: formatNumber(peerState.ledbat.baseDelay.getMin()),\n      },\n      {\n        key: 'ledbat.currentDelay',\n        value: formatNumber(peerState.ledbat.currentDelay.getMin()),\n      },\n      {\n        key: 'ledbat.rttMean',\n        value: formatNumber(peerState.ledbat.rttMean.value()),\n      },\n      {\n        key: 'ledbat.rttVar',\n        value: formatNumber(peerState.ledbat.rttVar.value()),\n      },\n      {\n        key: 'ledbat.cwnd',\n        value: formatNumber(peerState.ledbat.cwnd),\n      },\n      {\n        key: 'ledbat.cto',\n        value: formatNumber(peerState.ledbat.cto),\n      },\n      {\n        key: 'ledbat.flightSize',\n        value: formatNumber(peerState.ledbat.flightSize),\n      },\n      {\n        key: 'validChunks',\n        value: formatNumber(peerState.validChunks),\n      },\n      {\n        key: 'requestQueue.length',\n        value: formatNumber(peerState.requestQueue.length),\n      },\n      {\n        key: 'requestedChunks.length',\n        value: formatNumber(peerState.requestedChunks.length),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    const {\n      startBin,\n      endBin,\n    } = this.props;\n\n    rows.push(\n      <tr key=\"availableChunks\">\n        <td colSpan=\"2\">\n          Available\n          <AvailabilityMapChart\n            value={this.props.value.availableChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"sentChunks\">\n        <td colSpan=\"2\">\n          Sent\n          <AvailabilityMapChart\n            value={this.props.value.sentChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"receivedChunks\">\n        <td colSpan=\"2\">\n          Received\n          <AvailabilityMapChart\n            value={this.props.value.receivedChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    return (\n      <table>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nclass AvailabilityMapChart extends Component {\n  static defaultProps = {\n    width: 300,\n    height: 20,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.canvas = React.createRef();\n    this.scratchCanvas = document.createElement('canvas');\n  }\n\n  componentDidUpdate() {\n    if (!this.canvas.current) {\n      return;\n    }\n\n    const {value} = this.props;\n    const min = isNaN(this.props.startBin)\n      ? value.min()\n      : this.props.startBin;\n    const max = isNaN(this.props.endBin)\n      ? value.max()\n      : this.props.endBin;\n\n    if (!isFinite(min) || !isFinite(max) || isNaN(min) || isNaN(max)) {\n      return;\n    }\n\n    this.scratchCanvas.height = this.props.height;\n    this.scratchCanvas.width = this.props.width;\n\n    const ctx = this.scratchCanvas.getContext('2d');\n\n    const scale = scaleLinear()\n      .domain([min, max])\n      .range([0, this.props.width]);\n\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, this.props.width, this.props.height);\n\n    ctx.fillStyle = '#ccc';\n\n    let lastStart = -1;\n    for (let i = min; i <= max; i += 2) {\n      if (!value.values.get((i + 2) / 2) || i === max) {\n        if (lastStart !== -1) {\n          ctx.fillRect(scale(lastStart), 0, scale(i) - scale(lastStart), 20);\n\n          lastStart = -1;\n        }\n      } else if (lastStart === -1) {\n        lastStart = i;\n      }\n    }\n\n    this.canvas.current.getContext('2d').drawImage(this.scratchCanvas, 0, 0);\n  }\n\n  render() {\n    return (\n      <canvas\n        height={this.props.height}\n        width={this.props.width}\n        ref={this.canvas}\n      />\n    );\n  }\n}\n\nclass PeerState extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n  }\n\n  render() {\n    let table;\n    if (this.state.expanded) {\n      table = (\n        <PeerStateTable\n          value={this.props.value}\n          startBin={this.props.startBin}\n          endBin={this.props.endBin}\n        />\n      );\n    }\n\n    return (\n      <div className=\"peer_state__container\">\n        <div className=\"peer_state__header\">\n          <ToggleButton\n            onClick={this.handleButtonClick}\n            expanded={this.state.expanded}\n          />\n          <h4 className=\"peer_state__title\">\n            {this.props.value.peer.localId} : {this.props.value.peer.remoteId}\n          </h4>\n        </div>\n        {table}\n      </div>\n    );\n  }\n}\n\nclass DiagnosticMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n\n    this.scheduleUpdate();\n  }\n\n  handleUpdate = () => {\n    if (this.state.expanded) {\n      this.forceUpdate(this.scheduleUpdate);\n    }\n  }\n\n  scheduleUpdate = () => {\n    window.requestAnimationFrame(this.handleUpdate);\n  }\n\n  render() {\n    const containerClasses = classNames(\n      this.props.containerClass,\n      {\n        'diagnostic_menu__container': true,\n        'diagnostic_menu__container--expanded': this.state.expanded,\n      },\n    );\n\n    const {\n      lastCompletedBin,\n      liveDiscardWindow,\n    } = this.props.swarm.scheduler;\n    const startBin = lastCompletedBin - liveDiscardWindow;\n    const endBin = lastCompletedBin + liveDiscardWindow;\n\n    let swarmState;\n    let peerStates;\n    if (this.state.expanded) {\n      swarmState = (\n        <SwarmState\n          value={this.props.swarm}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      );\n\n      peerStates = Object.entries(this.props.swarm.scheduler.peerStates).map(([key, peerState]) => (\n        <PeerState\n          key={key}\n          value={peerState}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      ));\n    }\n\n    return (\n      <div className={containerClasses}>\n        <ToggleButton\n          onClick={this.handleButtonClick}\n          expanded={this.state.expanded}\n        />\n        {swarmState}\n        {peerStates}\n      </div>\n    );\n  }\n}\n\nexport default DiagnosticMenu;\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport hexToUint8Array from './hexToUint8Array';\n\nexport class Client {\n  constructor(connManager, conn, bootstrap) {\n    const dhtClientId = hexToUint8Array(bootstrap.id);\n    const bootstrapId = hexToUint8Array(bootstrap.bootstrapId);\n\n    this.connManager = connManager;\n    this.bootstrap = bootstrap;\n    this.swarmUri = bootstrap.swarmUri;\n\n    const client = connManager.createClient(conn);\n\n    this.dhtClient = new dht.Client(dhtClientId);\n    this.dhtClient.on('peers.discover', this.handlePeersDiscover.bind(this));\n    this.dhtClient.on('receive.connect.request', this.handleReceiveConnectRequest.bind(this));\n    this.dhtClient.createChannel(bootstrapId, client.createDataChannel('dht'));\n\n    this.ppsppClient = new ppspp.Client();\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    client.init();\n  }\n\n  static create(connManager) {\n    return connManager.bootstrap().then(({data, conn}) => {\n      return new Client(connManager, conn, data);\n    });\n  }\n\n  handlePeersDiscover(id) {\n    // console.log('creating client for', ids);\n    const sub = new dht.SubChannel(this.dhtClient, id);\n    const client = this.connManager.createClient(sub);\n\n    const dhtChannel = client.createDataChannel('dht');\n    const ppsppChannel = client.createDataChannel('ppspp');\n\n    const timeout = setTimeout(() => client.close(), 10000);\n    const init = () => {\n      clearTimeout(timeout);\n      client.init();\n    };\n\n    dhtChannel.addEventListener('close', () => client.close());\n\n    this.dhtClient.createChannel(id, dhtChannel);\n    this.ppsppClient.createChannel(ppsppChannel);\n\n    this.dhtClient.send(id, 'connect.request', {channelId: sub.id}, init);\n  }\n\n  handleReceiveConnectRequest({data: {channelId, from}, callback}) {\n    // if (this.dhtClient.channels.count() > 10) {\n    //   return;\n    // }\n\n    // console.log('handleReceiveConnectRequest', {channelId, from, callback});\n    const id = new hexToUint8Array(from);\n    const client = this.connManager.createClient(new dht.SubChannel(this.dhtClient, id, channelId));\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.ppsppClient.createChannel(channel);\n      }\n    });\n\n    callback({});\n  }\n}\n","export default class EMA {\n  constructor(alpha) {\n    this.mean = 0;\n    this.alpha = alpha;\n    this.weight = 1;\n  }\n\n  update(value) {\n    this.mean = this.alpha * value + (1 - this.alpha) * this.mean;\n    this.weight *= this.alpha;\n  }\n\n  set(value) {\n    this.mean = value;\n    this.weight = 0;\n  }\n\n  isEmpty() {\n    return this.weight === 1;\n  }\n\n  value() {\n    return this.mean / (1 - this.weight);\n  }\n}\n","export default class RingBuffer {\n  constructor(capacity) {\n    this.setCapacity(capacity);\n  }\n\n  setCapacity(capacity) {\n    this.capacity = capacity;\n    this.lastIndex = capacity;\n    this.values = new Array(capacity);\n\n    for (let i = 0; i < capacity; i ++) {\n      this.values[i] = this.createEmptyValue(i);\n    }\n  }\n\n  advanceLastIndex(lastIndex) {\n    if (this.lastIndex > lastIndex) {\n      return;\n    }\n\n    let firstEmptyIndex = this.lastIndex;\n    if (lastIndex - firstEmptyIndex > this.capacity) {\n      firstEmptyIndex = lastIndex - this.capacity;\n    }\n    for (let i = firstEmptyIndex; i <= lastIndex; i ++) {\n      const index = i % this.capacity;\n      this.values[index] = this.createEmptyValue(i, this.values[index]);\n    }\n    this.lastIndex = lastIndex + 1;\n  }\n\n  createEmptyValue() {\n    return undefined;\n  }\n\n  set(index, value) {\n    this.advanceLastIndex(index);\n    this.values[index % this.capacity] = value;\n  }\n\n  get(index) {\n    if (index < this.lastIndex - this.capacity || index >= this.lastIndex) {\n      return undefined;\n    }\n    return this.values[index % this.capacity];\n  }\n\n  push(value) {\n    this.set(this.lastIndex, value);\n  }\n}\n","import EMA from './ema';\nimport RingBuffer from './RingBuffer';\n\nclass DelayBuffer extends RingBuffer {\n  constructor(capacity, window) {\n    super(capacity);\n    this.min = Infinity;\n    this.window = window;\n  }\n\n  createEmptyValue() {\n    return Infinity;\n  }\n\n  getMin() {\n    return this.min;\n  }\n\n  update(delay) {\n    const now = Math.floor(Date.now() / this.window);\n\n    if (now >= this.lastIndex) {\n      this.advanceLastIndex(now);\n      this.min = Math.min(...this.values);\n    }\n\n    if (delay < this.get(now)) {\n      this.set(now, delay);\n      this.min = Math.min(this.min, delay);\n    }\n  }\n}\n\n// rfc6817\nconst TARGET = 100;\nconst ALLOWED_INCREASE = 1;\nconst GAIN = 1;\nconst CURRENT_HISTORY = 4;\nconst CURRENT_HISTORY_INTERVAL = 1000;\nconst BASE_HISTORY = 10;\nconst BASE_HISTORY_INTERVAL = 60 * 1000;\nconst INIT_CWND = 2;\nconst MIN_CWND = 2;\n\n// max safe WebRTC data channel message size\nconst MSS = 8 * 1024;\n\n// rfc6298\nconst COEF_G = 1;\nconst COEF_K = 4;\n\n// jacobson, v. \"congestion avoidance and control\"\n// doi: 10.1145/52325.52356\nconst COEF_ALPHA = 0.125;\nconst COEF_BETA = 0.25;\n\nexport default class LEDBAT {\n  constructor(target = TARGET, mss = MSS) {\n    this.target = target;\n    this.mss = mss;\n    this.flightSize = 0;\n\n    // the amount of data that is allowed to be outstanding in an rtt in bytes\n    this.cwnd = INIT_CWND * MSS;\n\n    // the congestion timeout\n    this.cto = 1000;\n    this.currentDelay = new DelayBuffer(CURRENT_HISTORY, CURRENT_HISTORY_INTERVAL);\n    this.baseDelay = new DelayBuffer(BASE_HISTORY, BASE_HISTORY_INTERVAL);\n\n    this.lastDataLoss = 0;\n    this.lastAckTime = Infinity;\n    this.rttMean = new EMA(COEF_ALPHA);\n    this.rttVar = new EMA(COEF_BETA);\n\n    this.ackSize = 0;\n  }\n\n  addSent(bytes) {\n    this.flightSize += bytes;\n  }\n\n  addDelaySample(delaySample, bytes = MSS) {\n    this.currentDelay.update(delaySample);\n    this.baseDelay.update(delaySample);\n\n    this.ackSize += bytes;\n\n    this.lastAckTime = Date.now();\n  }\n\n  digestDelaySamples() {\n    this.checkCTO();\n\n    if (this.ackSize === 0) {\n      return;\n    }\n\n    const queuingDelay = Math.abs(this.currentDelay.getMin() - this.baseDelay.getMin());\n    const offTarget = (this.target - queuingDelay) / this.target;\n    this.cwnd += GAIN * offTarget * this.ackSize * this.mss / this.cwnd;\n\n    const maxAllowedCwnd = this.flightSize + ALLOWED_INCREASE * this.mss;\n    this.cwnd = Math.max(Math.min(this.cwnd, maxAllowedCwnd), MIN_CWND * this.mss);\n\n    this.flightSize = Math.max(0, this.flightSize - this.ackSize);\n    this.ackSize = 0;\n  }\n\n  checkCTO() {\n    if (this.flightSize > 0 && Date.now() - this.cto > this.lastAckTime) {\n      this.cwnd = this.mss;\n      this.cto = 2 * this.cto;\n    }\n  }\n\n  addRttSample(rtt) {\n    if (this.rttMean.isEmpty()) {\n      this.rttMean.set(rtt);\n      this.rttVar.set(rtt / 2);\n    } else {\n      this.rttVar.update(Math.abs(this.rttMean.value() - rtt));\n      this.rttMean.update(rtt);\n    }\n\n    this.cto = this.rttMean.value() + Math.max(COEF_G, COEF_K * this.rttVar.value());\n    if (this.cto < 1000) {\n      this.cto = 1000;\n    }\n  }\n\n  onDataLoss(bytes, retransmitting = false) {\n    const now = Date.now();\n    if (this.lastDataLoss !== 0 && now - this.lastDataLoss < this.rttMean.value()) {\n      return;\n    }\n    this.lastDataLoss = now;\n\n    this.cwnd = Math.min(this.cwnd, Math.max(this.cwnd / 2, MIN_CWND * this.mss));\n\n    if (!retransmitting) {\n      this.flightSize = Math.max(0, this.flightSize - bytes);\n    }\n  }\n\n  static computeOneWayDelay(timestamp) {\n    return Date.now() - timestamp;\n  }\n}\n","import {Buffer} from 'buffer';\nimport Address from './address';\nimport {MerkleHashTreeFunctionByteLengths} from './integrity';\n\nimport {\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n} from './constants';\n\nexport const createChunkAddressFieldType = (addressingMethod, chunkSize) => {\n  class Bin32ChunkAddress {\n    constructor(value = 0) {\n      this.type = ChunkAddressingMethod.Bin32;\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n\n    rangeByteLength() {\n      const [start, end] = Address.binBounds(this.value);\n      return (end - start + 1) * chunkSize;\n    }\n\n    static from({bin}) {\n      return new Bin32ChunkAddress(bin);\n    }\n  }\n\n  class ChunkRange32ChunkAddress {\n    constructor(start = 0, end = 0) {\n      this.type = ChunkAddressingMethod.ChunkRange32;\n      this.start = start;\n      this.end = end;\n    }\n\n    read(buffer, offset) {\n      this.start = buffer.readUInt32BE(offset);\n      this.end = buffer.readUInt32BE(offset + 4);\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.start, offset);\n      buffer.writeUInt32BE(this.end, offset + 4);\n    }\n\n    rangeByteLength() {\n      return (this.end - this.start + 1) * chunkSize;\n    }\n\n    static from({start, end}) {\n      return new ChunkRange32ChunkAddress(start, end);\n    }\n  }\n\n  switch (addressingMethod) {\n    case ChunkAddressingMethod.Bin32:\n      return Bin32ChunkAddress;\n    case ChunkAddressingMethod.ChunkRange32:\n      return ChunkRange32ChunkAddress;\n    default:\n      throw new Error('unsupported chunk addressing method');\n  }\n};\n\nconst createBufferFieldType = byteLength => {\n  class BufferField {\n    constructor(value = Buffer.alloc(byteLength)) {\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      buffer.copy(this.value, 0, offset, offset + byteLength);\n      return byteLength;\n    }\n\n    byteLength() {\n      return byteLength;\n    }\n\n    write(buffer, offset) {\n      this.value.copy(buffer, offset);\n    }\n  }\n\n  return BufferField;\n};\n\nexport const createLiveSignatureFieldType = (liveSignatureAlgorithm, swarmId) => {\n  const byteLength = swarmId.getLiveSignatureByteLength();\n\n  class LiveSignatureField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = liveSignatureAlgorithm;\n    }\n  }\n\n  return LiveSignatureField;\n};\n\nexport const createIntegrityHashFieldType = merkleHashTreeFunction => {\n  const byteLength = MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction];\n\n  class IntegrityHashField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = merkleHashTreeFunction;\n    }\n  }\n\n  return IntegrityHashField;\n};\n\nexport const createEncoding = (ChunkAddress, IntegrityHash, LiveSignature) => {\n  class Uint8ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt8(offset);\n      return 1;\n    }\n\n    byteLength() {\n      return 1;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt8(this.value, offset);\n    }\n  }\n\n  class Uint32ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n  }\n\n  class VersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.Version;\n    }\n  }\n\n  class MinimumVersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.MinimumVersion;\n    }\n  }\n\n  class SwarmIdentifierProtocolOption {\n    constructor(value = []) {\n      this.type = ProtocolOptions.SwarmIdentifier;\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt16BE(offset);\n      offset += 2;\n\n      this.value = buffer.slice(offset, offset + length);\n\n      return length + 2;\n    }\n\n    byteLength() {\n      return this.value.length + 2;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt16BE(this.value.length, offset);\n      this.value.copy(buffer, offset + 2);\n    }\n  }\n\n  class ContentIntegrityProtectionMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ContentIntegrityProtectionMethod.MerkleHashTree) {\n      super(method);\n      this.type = ProtocolOptions.ContentIntegrityProtectionMethod;\n    }\n  }\n\n  class MerkleHashTreeFunctionProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = MerkleHashTreeFunction.SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.MerkleHashTreeFunction;\n    }\n  }\n\n  class LiveSignatureAlgorithmProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = LiveSignatureAlgorithm.ECDSAP256SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.LiveSignatureAlgorithm;\n    }\n  }\n\n  class ChunkAddressingMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ChunkAddressingMethod.ChunkRange32) {\n      super(method);\n      this.type = ProtocolOptions.ChunkAddressingMethod;\n    }\n  }\n\n  class LiveDiscardWindowProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.LiveDiscardWindow;\n    }\n  }\n\n  class SupportedMessagesProtocolOption {\n    constructor(messageTypes = Object.values(MessageTypes).filter(v => !isNaN(v))) {\n      this.type = ProtocolOptions.SupportedMessages;\n      this.value = {};\n      messageTypes.forEach(type => this.value[type] = true);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt8(offset);\n      offset += 1;\n\n      for (let i = 0; i < length; i ++) {\n        const byte = buffer[offset + i];\n        for (let j = 0; j < 8; j ++) {\n          this.value[i * 8 + j] = Boolean(byte & (1 << 7 - j));\n        }\n      }\n\n      return length + 1;\n    }\n\n    bitmapByteLength() {\n      return Math.ceil(Math.max(...Object.keys(this.value)) / 8) + 1;\n    }\n\n    toBitmap() {\n      const length = this.bitmapByteLength();\n      const buffer = Buffer.alloc(length);\n\n      for (let i = 0; i < length; i ++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j ++) {\n          byte = (byte << 1) | (this.value[i * 8 + j] ? 1 : 0);\n        }\n        buffer.writeUInt8(byte, i);\n      }\n      return buffer;\n    }\n\n    byteLength() {\n      return this.bitmapByteLength() + 1;\n    }\n\n    write(buffer, offset) {\n      const bitmap = this.toBitmap();\n      buffer.writeUInt8(bitmap.length, offset);\n      bitmap.copy(buffer, offset + 1);\n    }\n  }\n\n  class ChunkSizeProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.ChunkSize;\n    }\n  }\n\n  const protocolOptionRecordTypes = {\n    [ProtocolOptions.Version]: VersionProtocolOption,\n    [ProtocolOptions.MinimumVersion]: MinimumVersionProtocolOption,\n    [ProtocolOptions.SwarmIdentifier]: SwarmIdentifierProtocolOption,\n    [ProtocolOptions.ContentIntegrityProtectionMethod]: ContentIntegrityProtectionMethodProtocolOption,\n    [ProtocolOptions.MerkleHashTreeFunction]: MerkleHashTreeFunctionProtocolOption,\n    [ProtocolOptions.LiveSignatureAlgorithm]: LiveSignatureAlgorithmProtocolOption,\n    [ProtocolOptions.ChunkAddressingMethod]: ChunkAddressingMethodProtocolOption,\n    [ProtocolOptions.LiveDiscardWindow]: LiveDiscardWindowProtocolOption,\n    [ProtocolOptions.SupportedMessages]: SupportedMessagesProtocolOption,\n    [ProtocolOptions.ChunkSize]: ChunkSizeProtocolOption,\n  };\n\n  class HandshakeMessage {\n    constructor(channelId = 0, options = []) {\n      this.type = MessageTypes.HANDSHAKE;\n      this.channelId = channelId;\n      this.options = options;\n    }\n\n    read(buffer, offset) {\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(offset);\n      length += 4;\n\n      while (offset + length < buffer.length) {\n        const code = buffer.readUInt8(offset + length);\n        length += 1;\n\n        if (code === ProtocolOptions.EndOption) {\n          break;\n        }\n\n        const RecordType = protocolOptionRecordTypes[code];\n        const option = new RecordType();\n\n        length += option.read(buffer, offset + length);\n        this.options.push(option);\n      }\n\n      return length;\n    }\n\n    byteLength() {\n      return this.options.reduce((length, option) => length + option.byteLength() + 1, 0) + 5;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, offset);\n      length += 4;\n\n      this.options.forEach(option => {\n        buffer.writeUInt8(option.type, offset + length);\n        length += 1;\n\n        option.write(buffer, offset + length);\n        length += option.byteLength();\n      });\n\n      buffer.writeUInt8(ProtocolOptions.EndOption, offset + length);\n      length += 1;\n\n      return length;\n    }\n  }\n\n  class Timestamp {\n    constructor(value = Date.now()) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      const seconds = buffer.readInt32BE(offset);\n      const nanoseconds = buffer.readInt32BE(offset + 4);\n      this.value = seconds * 1e3 + nanoseconds / 1e6;\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeInt32BE(Math.floor(this.value / 1e3), offset);\n      buffer.writeInt32BE((this.value % 1e3) * 1e6, offset + 4);\n    }\n  }\n\n  class DataMessage {\n    constructor(address = new ChunkAddress(), data = [], timestamp = new Timestamp()) {\n      this.type = MessageTypes.DATA;\n      this.address = address;\n      this.data = Buffer.from(data);\n      this.timestamp = timestamp;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n\n      offset += length;\n      const dataLength = Math.min(this.address.rangeByteLength(), buffer.length - offset);\n      this.data = buffer.slice(offset, offset + dataLength);\n\n      return length + dataLength;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.data.length + 8;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.data.copy(buffer, offset + length);\n    }\n  }\n\n  class AddressMessage {\n    constructor(address = new ChunkAddress()) {\n      this.address = address;\n    }\n\n    read(buffer, offset) {\n      return this.address.read(buffer, offset);\n    }\n\n    byteLength() {\n      return this.address.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n    }\n  }\n\n  class AckMessage {\n    constructor(address = new ChunkAddress(), delaySample = new Timestamp()) {\n      this.type = MessageTypes.ACK;\n      this.address = address;\n      this.delaySample = delaySample;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.delaySample.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.delaySample.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.delaySample.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class HaveMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.HAVE;\n    }\n  }\n\n  class IntegrityMessage {\n    constructor(address = new ChunkAddress(), hash = new IntegrityHash()) {\n      this.type = MessageTypes.INTEGRITY;\n      this.address = address;\n      this.hash = hash;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.hash.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.hash.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.hash.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class SignedIntegrityMessage {\n    constructor(\n      address = new ChunkAddress(),\n      timestamp = new Timestamp(),\n      signature = new LiveSignature(),\n    ) {\n      this.type = MessageTypes.SIGNED_INTEGRITY;\n      this.address = address;\n      this.timestamp = timestamp;\n      this.signature = signature;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n      length += this.signature.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.timestamp.byteLength() + this.signature.byteLength();\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.signature.write(buffer, offset + length);\n    }\n  }\n\n  class RequestMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.REQUEST;\n    }\n  }\n\n  class CancelMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.CANCEL;\n    }\n  }\n\n  class EmptyMessage {\n    read() {\n      return 0;\n    }\n\n    byteLength() {\n      return 0;\n    }\n\n    write() {}\n  }\n\n  class ChokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.CHOKE;\n    }\n  }\n\n  class UnchokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.UNCHOKE;\n    }\n  }\n\n  const messageRecordTypes = {\n    [MessageTypes.HANDSHAKE]: HandshakeMessage,\n    [MessageTypes.DATA]: DataMessage,\n    [MessageTypes.ACK]: AckMessage,\n    [MessageTypes.HAVE]: HaveMessage,\n    [MessageTypes.INTEGRITY]: IntegrityMessage,\n    [MessageTypes.SIGNED_INTEGRITY]: SignedIntegrityMessage,\n    [MessageTypes.REQUEST]: RequestMessage,\n    [MessageTypes.CANCEL]: CancelMessage,\n    [MessageTypes.CHOKE]: ChokeMessage,\n    [MessageTypes.UNCHOKE]: UnchokeMessage,\n  };\n\n  class Messages {\n    constructor(values = []) {\n      this.values = values;\n      this.buffer = null;\n      this.offset = 0;\n    }\n\n    static from(values) {\n      if (values instanceof Messages) {\n        return values;\n      }\n      if (Array.isArray(values)) {\n        return new Messages(values);\n      }\n      throw new Error('unable to create Messages from unsupported type');\n    }\n\n    next() {\n      if (this.offset >= this.buffer.length) {\n        return;\n      }\n\n      const messageType = this.buffer.readUInt8(this.offset);\n      this.offset += 1;\n\n      const RecordType = messageRecordTypes[messageType];\n      const message = new RecordType();\n      this.values.push(message);\n\n      this.offset += message.read(this.buffer, this.offset);\n\n      return message;\n    }\n\n    toArray() {\n      // eslint-disable-next-line no-empty\n      while (this.next()) {}\n      return this.values;\n    }\n\n    read(buffer, offset) {\n      this.buffer = buffer;\n      this.offset = offset;\n      return 0;\n    }\n\n    byteLength() {\n      return this.values.reduce((length, message) => length + message.byteLength() + 1, 0);\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.values.forEach(message => {\n        buffer.writeUInt8(message.type, offset + length);\n        length += 1;\n\n        message.write(buffer, offset + length);\n        length += message.byteLength();\n      });\n\n      return length;\n    }\n  }\n\n  class Datagram {\n    constructor(channelId = 0, messages = []) {\n      this.channelId = channelId;\n      this.messages = Messages.from(messages);\n    }\n\n    read(data) {\n      const buffer = Buffer.from(data);\n\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(0);\n      length += 4;\n\n      length += this.messages.read(buffer, length);\n\n      return length;\n    }\n\n    byteLength() {\n      return this.messages.byteLength() + 4;\n    }\n\n    write(buffer) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, 0);\n      length += 4;\n\n      length += this.messages.write(buffer, length);\n\n      return length;\n    }\n\n    toBuffer() {\n      const buffer = Buffer.alloc(this.byteLength());\n      this.write(buffer);\n      return buffer;\n    }\n\n    static from(buffer) {\n      const datagram = new Datagram();\n      datagram.read(buffer);\n      return datagram;\n    }\n  }\n\n  return {\n    VersionProtocolOption,\n    MinimumVersionProtocolOption,\n    SwarmIdentifierProtocolOption,\n    ContentIntegrityProtectionMethodProtocolOption,\n    MerkleHashTreeFunctionProtocolOption,\n    LiveSignatureAlgorithmProtocolOption,\n    ChunkAddressingMethodProtocolOption,\n    LiveDiscardWindowProtocolOption,\n    SupportedMessagesProtocolOption,\n    ChunkSizeProtocolOption,\n    HandshakeMessage,\n    Timestamp,\n    DataMessage,\n    AckMessage,\n    HaveMessage,\n    IntegrityMessage,\n    SignedIntegrityMessage,\n    RequestMessage,\n    CancelMessage,\n    ChokeMessage,\n    UnchokeMessage,\n    Datagram,\n    LiveSignature,\n    IntegrityHash,\n    ChunkAddress,\n  };\n};\n","function createMask(bits) {\n  let mask = 0;\n  for (let i = 0; i < bits; i ++) {\n    mask = (mask << 1) | 1;\n  }\n  return mask;\n}\n\nfunction applyMask(byte, mask, value) {\n  if (value) {\n    return byte | mask;\n  }\n  return byte & (255 ^ mask);\n}\n\nexport default class BitArray {\n  constructor(capacity = 0) {\n    this.offset = 0;\n    this.resize(capacity);\n  }\n\n  // TODO: copy old values..?\n  resize(capacity) {\n    this.capacity = capacity;\n    this.values = new Uint8Array(Math.ceil(capacity / 8));\n  }\n\n  adjustOffset(index) {\n    const {offset} = this;\n    const distance = (index - offset) - this.capacity;\n    if (distance <= 0) {\n      return;\n    }\n\n    this.offset += distance;\n    this.unsafelySetRange(offset + 1, offset + distance + 1, false);\n  }\n\n  getByteIndex(index) {\n    return Math.floor(index / 8) % this.values.length;\n  }\n\n  getBitIndex(index) {\n    return index % 8;\n  }\n\n  getIndexValue(byteIndex, bitIndex) {\n    const byteOffset = this.offset % (this.values.length * 8);\n    const offset = byteIndex < byteOffset\n      ? this.offset + (this.values.length * 8) - byteOffset\n      : this.offset;\n    return offset + (byteIndex * 8 + bitIndex);\n  }\n\n  setRange(start, end, value = true) {\n    if (end - start === 1) {\n      this.set(start, value);\n      return;\n    }\n\n    if (end <= this.offset) {\n      return;\n    }\n    start = Math.max(start, this.offset);\n\n    this.adjustOffset(end);\n    this.unsafelySetRange(start, end, value);\n  }\n\n  unsafelySetRange(start, end, value = true, fillEndByte = false) {\n    if (end - start >= this.capacity) {\n      this.values.fill(value ? 255 : 0);\n      return;\n    }\n\n    const startByteIndex = this.getByteIndex(start);\n    const endByteIndex = this.getByteIndex(end);\n    const startBitIndex = this.getBitIndex(start);\n    const endBitIndex = this.getBitIndex(end);\n\n    if (startByteIndex > endByteIndex) {\n      this.unsafelySetIndexRange(startByteIndex, startBitIndex, this.capacity, 0, value);\n      this.unsafelySetIndexRange(0, 0, endByteIndex, endBitIndex, value);\n      return;\n    }\n\n    this.unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value);\n  }\n\n  unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value) {\n    let startMask = createMask(8 - startBitIndex);\n    let endMask = 255 ^ createMask(8 - endBitIndex);\n\n    if (startByteIndex === endByteIndex) {\n      const mask = startMask & endMask;\n      this.values[startByteIndex] = applyMask(this.values[startByteIndex], mask, value);\n      return;\n    }\n\n    this.values[startByteIndex] = applyMask(this.values[startByteIndex], startMask, value);\n    this.values[endByteIndex] = applyMask(this.values[endByteIndex], endMask, value);\n\n    if (endByteIndex - startByteIndex > 1) {\n      this.values.fill(value ? 255 : 0, startByteIndex + 1, endByteIndex);\n    }\n  }\n\n  unsetRange(start, end) {\n    this.setRange(start, end, false);\n  }\n\n  set(index, value = true) {\n    if (index < this.offset) {\n      return;\n    }\n\n    this.adjustOffset(index);\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    this.values[byteIndex] = applyMask(this.values[byteIndex], mask, value);\n  }\n\n  unset(index) {\n    this.set(index, false);\n  }\n\n  get(index) {\n    if (index <= this.offset || index > this.offset + this.capacity) {\n      return false;\n    }\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    return (this.values[byteIndex] & mask) !== 0;\n  }\n\n  toValueArray() {\n    const values = [];\n    for (let i = 1; i <= this.capacity; i ++) {\n      if (this.get(this.offset + i)) {\n        values.push(this.offset + i);\n      }\n    }\n    return values;\n  }\n\n  min() {\n    for (let i = this.offset; i <= this.offset + this.capacity; i += 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const firstBit = Math.floor(i / 8) * 8;\n        for (let j = firstBit; j < firstBit + 8; j ++) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return Infinity;\n  }\n\n  max() {\n    for (let i = this.capacity + this.offset; i >= this.offset; i -= 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const lastBit = Math.ceil(i / 8) * 8 + 1;\n        for (let j = lastBit; j > lastBit - 8; j --) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return -Infinity;\n  }\n}\n","export class Flow {\n  constructor() {\n    this.lastVirtualFinish = 0;\n    this.nextVirtualFinish = Infinity;\n    this.queue = [];\n  }\n\n  computeWeight() {\n    return 1;\n  }\n}\n\nexport class Queue {\n  constructor(rate) {\n    this.rate = rate;\n    this.totalQueueSize = 0;\n    this.flows = [];\n  }\n\n  addFlow(flow) {\n    return this.flows.push(flow);\n  }\n\n  removeFlow(flow) {\n    const index = this.flows.indexOf(flow);\n    if (index !== -1) {\n      this.flows.splice(index, 1);\n    }\n  }\n\n  enqueue(flow, size, value) {\n    const weight = flow.computeWeight(this);\n    const rate = this.rate / weight;\n    const virtualFinish = Math.max(Date.now(), flow.lastVirtualFinish) + size / rate;\n\n    flow.queue.push({\n      virtualFinish,\n      size,\n      value,\n    });\n    flow.lastVirtualFinish = virtualFinish;\n    if (flow.queue.length === 1) {\n      flow.nextVirtualFinish = virtualFinish;\n    }\n  }\n\n  getNextScheduledFlow() {\n    let minVirtualFinish = Infinity;\n    let flow = null;\n    for (let i = 0; i < this.flows.length; i ++) {\n      if (this.flows[i].nextVirtualFinish < minVirtualFinish) {\n        flow = this.flows[i];\n        minVirtualFinish = flow.nextVirtualFinish;\n      }\n    }\n\n    return flow;\n  }\n\n  peek() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    return {\n      flow,\n      task: flow.queue[0],\n    };\n  }\n\n  dequeue() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    const task = flow.queue.shift();\n\n    flow.nextVirtualFinish = flow.queue.length !== 0\n      ? flow.queue[0].virtualFinish\n      : Infinity;\n\n    return {flow, task};\n  }\n}\n\nexport default {\n  Queue,\n  Flow,\n};\n","import BitArray from '../bitarray';\nimport Address from './address';\nimport wfq from '../wfq';\nimport EMA from '../ema';\nimport LEDBAT from '../ledbat';\nimport RingBuffer from '../RingBuffer';\n\nexport class AvailabilityMap {\n  constructor(capacity) {\n    this.values = new BitArray(capacity);\n  }\n\n  // TODO: ignore very large discard windows from remote peers...\n  setCapacity(capacity) {\n    this.values.resize(capacity);\n  }\n\n  set(address, value) {\n    this.values.setRange(address.start / 2, address.end / 2 + 1, value);\n  }\n\n  get({start, end = start}) {\n    for (let i = start; i <= end; i += 2) {\n      if (!this.values.get(i / 2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  min() {\n    return this.values.min() * 2;\n  }\n\n  max() {\n    return this.values.max() * 2;\n  }\n}\n\nexport class BinRingBuffer extends RingBuffer {\n  advanceLastBin(bin) {\n    super.advanceLastIndex(bin / 2);\n  }\n\n  setRange({start}, values) {\n    for (let i = 0; i < values.length; i ++) {\n      super.set(start / 2 + i, values[i]);\n    }\n  }\n\n  set({bin}, value) {\n    super.set(bin / 2, value);\n  }\n\n  get({bin}) {\n    return super.get(bin / 2);\n  }\n\n  forEach(callback) {\n    for (let i = this.lastIndex - this.capacity; i < this.lastIndex; i ++) {\n      if (callback(this.get(i), i * 2) === false) {\n        break;\n      }\n    }\n  }\n}\n\nexport class RateMeter {\n  constructor(windowMs, sampleWindowMs = 100) {\n    this.firstSampleWindow = Math.floor(Date.now() / sampleWindowMs);\n    this.lastSampleWindow = this.firstSampleWindow;\n    this.windowMs = windowMs;\n    this.sampleWindowMs = sampleWindowMs;\n    this.sum = 0;\n    this.values = new Array(Math.ceil(windowMs / sampleWindowMs));\n\n    this.values.fill(0);\n  }\n\n  adjustSampleWindow() {\n    const sampleWindow = Math.floor(Date.now() / this.sampleWindowMs);\n\n    for (let i = this.lastSampleWindow + 1; i <= sampleWindow; i ++) {\n      const index = i % this.values.length;\n      this.sum -= this.values[index];\n      this.values[index] = 0;\n    }\n    this.lastSampleWindow = sampleWindow;\n  }\n\n  update(value) {\n    this.adjustSampleWindow();\n    this.sum += value;\n    this.values[this.lastSampleWindow % this.values.length] += value;\n  }\n\n  value() {\n    this.adjustSampleWindow();\n    const accumulatedMs = Math.min(\n      (this.lastSampleWindow - this.firstSampleWindow) * this.sampleWindowMs,\n      this.windowMs,\n    );\n    return this.sum / accumulatedMs;\n  }\n}\n\nexport class ChunkRateMeter extends RateMeter {\n  constructor(windowMs = 15000) {\n    super(windowMs);\n    this.lastEndBin = 0;\n  }\n\n  update({start, end}) {\n    if (this.lastHeadBin === 0) {\n      super.update((end - start) / 2);\n    } else if (end > this.lastEndBin) {\n      super.update((end - this.lastEndBin) / 2);\n      this.lastEndBin = end;\n    }\n  }\n}\n\nexport class RequestFlow extends wfq.Flow {\n  constructor(id) {\n    super();\n    this.id = id;\n    this.queueSize = 0;\n  }\n\n  computeWeight(queue) {\n    return this.queueSize / queue.totalQueueSize;\n  }\n}\n\nexport class RequestQueue extends wfq.Queue {\n  constructor(rate) {\n    super(rate);\n    this.totalQueueSize = 0;\n  }\n\n  enqueue(flow, size, value) {\n    this.totalQueueSize += size;\n    flow.queueSize += size;\n    super.enqueue(flow, size, value);\n  }\n\n  cancel(flow, filter) {\n    flow.queue = flow.queue.filter(task => {\n      const remove = filter(task.value);\n\n      if (remove) {\n        this.totalQueueSize -= task.size;\n        flow.queueSize -= task.size;\n      }\n\n      return !remove;\n    });\n  }\n\n  dequeue() {\n    const result = super.dequeue();\n    if (result === null) {\n      return null;\n    }\n\n    this.totalQueueSize -= result.task.size;\n    result.flow.queueSize -= result.task.size;\n\n    return result;\n  }\n}\n\nexport class SchedulerChunkState {\n  constructor(bin) {\n    this.bin = bin;\n    this.reset();\n  }\n\n  reset() {\n    this.availableCopies = 0;\n    this.requestTime = [0, 0];\n    this.requestPeerId = 0;\n\n    this.requested = false;\n    this.received = false;\n    this.verified = false;\n  }\n}\n\nexport class SchedulerChunkRequestMap {\n  constructor() {\n    this.valueByBin = {};\n    this.head = undefined;\n    this.tail = undefined;\n    this.length = 0;\n  }\n\n  insert(address) {\n    const now = Date.now();\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      const value = {\n        address: new Address(i),\n        createdAt: now,\n        next: undefined,\n        prev: undefined,\n      };\n      this.valueByBin[i] = value;\n\n      if (this.head === undefined) {\n        this.head = value;\n      } else {\n        this.tail.next = value;\n      }\n      value.prev = this.tail;\n      this.tail = value;\n\n      this.length ++;\n    }\n  }\n\n  get({bin}) {\n    return this.valueByBin[bin];\n  }\n\n  remove({bin}) {\n    const value = this.valueByBin[bin];\n    if (value === undefined) {\n      return;\n    }\n    delete this.valueByBin[bin];\n\n    if (this.head === value) {\n      this.head = value.next;\n    }\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.prev !== undefined) {\n      value.prev.next = value.next;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = value.prev;\n    }\n\n    this.length --;\n  }\n\n  peek() {\n    return this.head;\n  }\n\n  pop() {\n    if (this.head === undefined) {\n      return;\n    }\n    const value = this.head;\n\n    this.head = value.next;\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = undefined;\n    }\n\n    delete this.valueByBin[value.address.bin];\n\n    this.length --;\n\n    return value;\n  }\n}\n\nexport class SchedulerChunkMap extends BinRingBuffer {\n  createEmptyValue(bin, value) {\n    if (value === undefined) {\n      return new SchedulerChunkState(bin);\n    }\n\n    // put the peer map here and when we advance the bin meme update\n    // the availability map here\n\n    value.reset();\n    return value;\n  }\n}\n\nexport class SchedulerPeerState {\n  constructor(peer, requestFlow) {\n    this.peer = peer;\n    this.requestFlow = requestFlow;\n    this.availableChunks = new AvailabilityMap();\n\n    this.ledbat = new LEDBAT();\n\n    // this.rttMean = new EMA(0.125);\n    // this.rttVar = new EMA(0.25);\n\n    this.rttMean = new EMA(0.05);\n    this.rttVar = new EMA(0.05);\n\n    this.chunkIntervalMean = new EMA(0.25);\n    this.chunkRate = new RateMeter(15000);\n    this.wasteRate = new RateMeter(15000);\n    this.lastChunkTime = null;\n\n    this.requestTimes = new BinRingBuffer();\n\n    this.requestedChunks = new SchedulerChunkRequestMap();\n    this.sentRequests = new SchedulerChunkRequestMap();\n\n    this.timeouts = 0;\n    this.validChunks = 0;\n    this.invalidChunks = 0;\n\n    this.requestQueue = [];\n\n    this.sentChunks = new AvailabilityMap();\n    this.receivedChunks = new AvailabilityMap();\n  }\n}\n\nexport class Scheduler {\n  constructor(chunkSize, clientOptions) {\n    const {\n      liveDiscardWindow,\n      uploadRateLimit,\n    } = clientOptions;\n\n    this.chunkSize = chunkSize;\n    this.liveDiscardWindow = liveDiscardWindow;\n\n    // where are we in the buffer\n\n    // how rare is a chunk\n    // how urgently is a chunk needed\n\n    // high/mid/low priority time bands\n\n    // high performance/reliability peers\n    // expected performance per peer\n\n    // request timeout/cancel\n    // send timeout/cancel?\n\n    // average stream bit rate\n    // position in available window\n    // position in theoretical window\n\n    // minimum needed bin\n\n    this.peerStates = {};\n    this.chunkStates = new SchedulerChunkMap(liveDiscardWindow);\n    this.loadedChunks = new AvailabilityMap(liveDiscardWindow);\n    this.peerCount = 0;\n\n    this.chunkRate = new ChunkRateMeter();\n\n    this.requestQueue = new RequestQueue(uploadRateLimit / 1000);\n\n    // this.update = this.update.bind(this);\n    // setTimeout(this.update, 0);\n\n    this.timers = {};\n\n    this.lastExportedBin = -Infinity;\n    this.lastCompletedBin = -Infinity;\n    this.requestedChunks = new AvailabilityMap(liveDiscardWindow);\n\n    this.totalSends = 0;\n    this.totalRequests = 0;\n    this.totalRequestsReceived = 0;\n    this.totalReceived = 0;\n    this.totalAdded = 0;\n    this.totalCancelled = 0;\n    this.ackUnknownSend = 0;\n    this.totalDroppedRequests = 0;\n    this.sendDelay = new EMA(0.05);\n    // setInterval(this.debug.bind(this), 1000);\n\n    this.nextSendTime = 0;\n    this.nextSendTimeout = 0;\n  }\n\n  debug() {\n    console.log('---');\n    Object.values(this.peerStates).forEach((peerState) => {\n      if (!peerState.peer.isReady()) {\n        return;\n      }\n\n      let cto = peerState.ledbat.cto / (peerState.ledbat.cwnd / this.chunkSize);\n      const timeout = Math.ceil(Math.min(cto, 1000));\n\n      const availableChunks = peerState.availableChunks;\n\n      const firstLoadedChunk = this.loadedChunks.min();\n      const firstRequestedChunk = this.requestedChunks.min();\n      const startBin = Math.max(\n        availableChunks.min(),\n        isFinite(firstLoadedChunk) ? firstLoadedChunk : -Infinity,\n        isFinite(firstRequestedChunk) ? firstLoadedChunk : -Infinity,\n        this.lastCompletedBin,\n      );\n      const lastAvailableBin = Math.min(availableChunks.max(), startBin + this.liveDiscardWindow * 2);\n\n      const planFor = Math.min(1000, peerState.ledbat.rttMean.value() * 4);\n\n      const dip = peerState.chunkIntervalMean.value() || 0;\n      const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n      const cwnd = firstPlanPick - peerState.sentRequests.length;\n\n      console.log(JSON.stringify({\n        peer_remoteId: peerState.peer.remoteId,\n        peer_localId: peerState.peer.localId,\n        sentRequests: peerState.sentRequests.length,\n        swift_rtt: peerState.rttMean.value(),\n        swift_rttvar: peerState.rttVar.value(),\n        swift_chunkIntervalMean: peerState.chunkIntervalMean.value(),\n        chunkRate: peerState.chunkRate.value(),\n        wasteRate: peerState.wasteRate.value(),\n        swift_cwnd: cwnd,\n        ledbat_cwnd: peerState.ledbat.cwnd,\n        ledbat_cto: peerState.ledbat.cto,\n        ledbat_currentDelay: peerState.ledbat.currentDelay.getMin(),\n        ledbat_baseDelay: peerState.ledbat.baseDelay.getMin(),\n        ledbat_rttMean: peerState.ledbat.rttMean.value(),\n        ledbat_rttVar: peerState.ledbat.rttVar.value(),\n        ledbat_rtt: peerState.ledbat.rtt,\n        ledbat_flightSize: peerState.ledbat.flightSize,\n        // requestedChunks: peerState.requestedChunks,\n        timeouts: peerState.timeouts,\n        validChunks: peerState.validChunks,\n        invalidChunks: peerState.invalidChunks,\n        timeout: timeout,\n        picker_startBin: startBin,\n        picker_lastAvailableBin: lastAvailableBin,\n      }, true, 2));\n    });\n\n    console.log(JSON.stringify({\n      totalSends: this.totalSends,\n      totalRequests: this.totalRequests,\n      totalRequestsReceived: this.totalRequestsReceived,\n      totalDroppedRequests: this.totalDroppedRequests,\n      totalReceived: this.totalReceived,\n      totalAdded: this.totalAdded,\n      totalCancelled: this.totalCancelled,\n      ackUnknownSend: this.ackUnknownSend,\n      minIncompleteBin: this.lastCompletedBin,\n      sendDelay: this.sendDelay.value(),\n      picker_firstLoadedChunk: this.loadedChunks.min(),\n      picker_firstRequestedChunk: this.requestedChunks.min(),\n      chunkRate: this.chunkRate.value(),\n    }, true, 2));\n    // this.totalSends = 0;\n    // this.totalRequests = 0;\n    // this.totalRequestsReceived = 0;\n    // this.totalReceived = 0;\n    // // this.ackUnknownSend = 0;\n    // this.totalAdded = 0;\n    // this.totalCancelled = 0;\n    // this.totalDroppedRequests = 0;\n  }\n\n  update(peerState, update) {\n    if (!peerState.peer.isReady()) {\n      this.timers[peerState.localId] = setTimeout(update, 1000);\n      return;\n    }\n\n    const {\n      availableChunks,\n      ledbat,\n      sentRequests,\n    } = peerState;\n\n    const now = Date.now();\n    // const planFor = ledbat.rttMean.value();\n    // const planFor = ledbat.rttMean.value() * 2 + ledbat.rttVar.value() * 4;\n    const planFor = Math.max(1000, ledbat.rttMean.value() * 4);\n    const timeoutThreshold = now - ledbat.cto * 2;\n\n    const dip = peerState.chunkIntervalMean.value() || 0;\n    const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n    const cwnd = firstPlanPick - sentRequests.length;\n\n    const cancelledRequests = [];\n    while (sentRequests.peek() !== undefined\n      && sentRequests.peek().createdAt < timeoutThreshold) {\n      cancelledRequests.push(sentRequests.pop());\n    }\n\n    if (cancelledRequests.length > 0) {\n      this.totalCancelled += cancelledRequests.length;\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        sentRequests.remove(address);\n      });\n\n      // TODO: this is for ack timeout\n      ledbat.onDataLoss(cancelledRequests.length * this.chunkSize);\n      // console.log(cancelledRequests);\n    }\n\n    ledbat.digestDelaySamples();\n\n    const startBin = Math.max(\n      this.loadedChunks.values.offset * 2 + 2,\n      this.requestedChunks.values.offset * 2 + 2,\n      availableChunks.min(),\n      this.lastCompletedBin,\n    );\n    const endBin = Math.min(\n      startBin + this.liveDiscardWindow * 2,\n      availableChunks.max(),\n    );\n    const requestAddresses = [];\n    for (let i = startBin; i < endBin && requestAddresses.length < cwnd; i += 2) {\n      const address = new Address(i);\n      if (!this.loadedChunks.get(address)\n        && !this.requestedChunks.get(address)\n        && availableChunks.get(address)) {\n\n        if (Math.random() < 0.05) {\n          requestAddresses.push(address);\n          sentRequests.insert(address);\n          this.requestedChunks.set(address);\n        }\n      }\n    }\n    if (this.lastCompletedBin === -Infinity && requestAddresses.length !== 0) {\n      const firstRequestedBin = requestAddresses[0].bin;\n      this.lastCompletedBin = firstRequestedBin;\n      this.lastExportedBin = firstRequestedBin - 2;\n    }\n\n    if (cancelledRequests.length !== 0) {\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        peerState.peer.sendCancel(address);\n      });\n    }\n\n    if (requestAddresses.length !== 0) {\n      this.totalRequests += requestAddresses.length;\n      peerState.peer.sendRequest(...requestAddresses);\n\n      requestAddresses.forEach(address => {\n        if (peerState.requestTimes.get(address) === undefined) {\n          peerState.requestTimes.set(address, now);\n        }\n      });\n    }\n\n    while (ledbat.flightSize < ledbat.cwnd && peerState.requestQueue.length) {\n      const requestedAddress = peerState.requestQueue.shift();\n      if (requestedAddress !== undefined) {\n        const requestedChunk = peerState.requestedChunks.get(requestedAddress);\n        if (requestedChunk !== undefined) {\n          requestedChunk.sentAt = now;\n          peerState.ledbat.addSent(this.chunkSize);\n          peerState.peer.sendChunk(requestedAddress);\n          this.totalSends ++;\n        }\n      }\n\n      peerState.sentChunks.set(requestedAddress);\n\n      // TODO: volunteer bin we have and they don't?\n    }\n\n    peerState.peer.flush();\n    let sendInterval = Math.min(1000, (ledbat.rttMean.value() || 0) / (ledbat.cwnd / this.chunkSize));\n    this.timers[peerState.localId] = setTimeout(update, sendInterval);\n  }\n\n  addPeer(peer) {\n    const {localId} = peer;\n\n    const requestFlow = new RequestFlow(localId);\n    this.requestQueue.addFlow(requestFlow);\n\n    const peerState = new SchedulerPeerState(peer, requestFlow);\n    this.peerStates[localId] = peerState;\n\n    const update = () => this.update(peerState, update);\n    this.timers[localId] = setTimeout(update, 1000);\n  }\n\n  removePeer({localId}) {\n    const peerState = this.peerStates[localId];\n    if (peerState === undefined) {\n      return;\n    }\n\n    const {\n      requestFlow,\n      sentRequests,\n    } = peerState;\n\n    this.requestQueue.removeFlow(requestFlow);\n\n    this.totalCancelled += sentRequests.length;\n    while (sentRequests.length) {\n      const {address} = sentRequests.pop();\n      this.requestedChunks.set(address, false);\n    }\n\n    delete this.peerStates[localId];\n\n    clearTimeout(this.timers[localId]);\n  }\n\n  getPeerState({localId}) {\n    return this.peerStates[localId];\n  }\n\n  getRecentChunks() {\n    // TODO: how to pick this... maybe remote discard window size?\n    const startBin = this.loadedChunks.max() - 64;\n\n    // bail if no chunks have been loaded yet\n    if (!isFinite(startBin)) {\n      return [];\n    }\n\n    const bins = [];\n\n    const endBin = this.loadedChunks.max();\n    for (let i = startBin; i <= endBin; i += 2) {\n      const address = new Address(i);\n      if (this.loadedChunks.get(address)) {\n        bins.push(address);\n      }\n    }\n\n    return bins;\n  }\n\n  setLiveDiscardWindow(peer, liveDiscardWindow) {\n    this.getPeerState(peer).availableChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).requestTimes.setCapacity(liveDiscardWindow);\n\n    this.getPeerState(peer).sentChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).receivedChunks.setCapacity(liveDiscardWindow);\n  }\n\n  markChunkReceived(peer, address, delaySample) {\n    const now = Date.now();\n\n    this.totalReceived ++;\n\n    const peerState = this.getPeerState(peer);\n    if (peerState === undefined) {\n      return;\n    }\n\n    if (this.loadedChunks.get(address)) {\n      peerState.wasteRate.update(1);\n    }\n\n    const request = peerState.sentRequests.get(address);\n    if (request === undefined) {\n      return;\n    }\n\n    if (peerState.lastChunkTime !== null) {\n      const chunkInterval = now - peerState.lastChunkTime;\n      peerState.chunkIntervalMean.update(chunkInterval);\n    }\n    peerState.lastChunkTime = now;\n    if (!this.loadedChunks.get(address)) {\n      peerState.chunkRate.update(1);\n    }\n\n    const requestTime = peerState.requestTimes.get(address);\n    if (requestTime !== undefined) {\n      peerState.ledbat.addRttSample(now - requestTime);\n    }\n\n    // peerState.rttMean.update(rtt);\n    // peerState.rttVar.update(Math.abs(rtt - peerState.rttMean.value()));\n\n    // TODO: double check LEDBAT to make sure we shouldn't be doing\n    // something here\n\n    peerState.sentRequests.remove(address);\n  }\n\n  markChunkVerified(peer, address) {\n    // this.chunkStates.get(address).verified = true;\n    this.getPeerState(peer).validChunks ++;\n    this.getPeerState(peer).receivedChunks.set(address);\n\n    // this.chunkStates.advanceLastBin(address.end);\n\n    this.chunkRate.update(address);\n    this.loadedChunks.set(address);\n\n    for (let i = this.lastCompletedBin; this.loadedChunks.get(new Address(i)); i += 2) {\n      this.lastCompletedBin = i;\n    }\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  getNewCompleteBins() {\n    const nextExportedBin = this.lastExportedBin + 2;\n    if (nextExportedBin <= this.lastCompletedBin) {\n      this.lastExportedBin = this.lastCompletedBin;\n      return [nextExportedBin, this.lastCompletedBin];\n    }\n  }\n\n  markChunkRejected(peer, address) {\n    this.requestedChunks.set(address, false);\n    this.getPeerState(peer).invalidChunks ++;\n  }\n\n  markChunkAvailable(peer, address) {\n    for (let i = address.start; i <= address.end; i += 2) {\n      if (!this.getPeerState(peer).availableChunks.get(new Address(i))) {\n        this.totalAdded ++;\n      }\n    }\n\n    this.getPeerState(peer).availableChunks.set(address);\n  }\n\n  markChunksLoaded(address) {\n    this.chunkStates.advanceLastBin(address.end);\n    this.loadedChunks.set(address);\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  markSendAcked(peer, address, delaySample) {\n    const peerState = this.getPeerState(peer);\n\n    peerState.ledbat.addDelaySample(delaySample, this.chunkSize);\n\n    const sentChunk = peerState.requestedChunks.get(address);\n    if (sentChunk === undefined) {\n      this.ackUnknownSend ++;\n      return;\n    }\n\n    // TODO: is this necessary?\n    if (sentChunk.sentAt) {\n      peerState.ledbat.addRttSample(Date.now() - sentChunk.sentAt);\n    }\n\n    peerState.requestedChunks.remove(address);\n  }\n\n  enqueueRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      this.totalRequestsReceived ++;\n      peerState.requestQueue.push(new Address(i));\n    }\n\n    peerState.requestedChunks.insert(address);\n  }\n\n  cancelRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n    const requestedChunk = peerState.requestedChunks.get(address);\n    if (requestedChunk && requestedChunk.sentAt) {\n      peerState.ledbat.onDataLoss(this.chunkSize);\n    }\n    peerState.requestedChunks.remove(address);\n\n    // this.requestQueue.cancel(\n    //   this.getPeerState(peer).requestFlow,\n    //   ({bin}) => address.containsBin(bin),\n    // );\n  }\n}\n","import {EventEmitter} from 'events';\nimport once from 'lodash.once';\nimport Address from './address';\nimport SwarmId from './swarmid';\nimport LEDBAT from '../ledbat';\nimport {\n  createChunkAddressFieldType,\n  createLiveSignatureFieldType,\n  createIntegrityHashFieldType,\n  createEncoding,\n} from './encoding';\nimport {\n  MaxChannelId,\n  ProtocolOptions,\n  MessageTypes,\n} from './constants';\nimport {\n  createMerkleHashTreeFunction,\n  createLiveSignatureVerifyFunction,\n  createLiveSignatureSignFunction,\n  createContentIntegrityVerifierFactory,\n} from './integrity';\nimport {\n  BinRingBuffer,\n  Scheduler,\n} from './scheduler';\n\nconst genericEncoding = createEncoding();\n\nconst BUFFER_SIZE = 3e7;\nconst MAX_UPLOAD_RATE = 1e6;\nconst HANDSHAKE_TIMEOUT = 5000;\n\nexport class Swarm extends EventEmitter {\n  constructor(uri, clientOptions) {\n    super();\n\n    const {swarmId} = uri;\n    const {\n      [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n      [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n      [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n      [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n      [ProtocolOptions.ChunkSize]: chunkSize,\n    } = uri.protocolOptions;\n    const {\n      liveDiscardWindow,\n      privateKey,\n    } = clientOptions;\n\n    this.uri = uri;\n\n    this.encoding = createEncoding(\n      createChunkAddressFieldType(chunkAddressingMethod, chunkSize),\n      createIntegrityHashFieldType(merkleHashTreeFunction),\n      createLiveSignatureFieldType(liveSignatureAlgorithm, swarmId),\n    );\n\n    const liveSignatureSignFunction = privateKey !== undefined\n      ? createLiveSignatureSignFunction(liveSignatureAlgorithm, privateKey)\n      : undefined;\n    this.contentIntegrity = createContentIntegrityVerifierFactory(\n      contentIntegrityProtectionMethod,\n      createMerkleHashTreeFunction(merkleHashTreeFunction),\n      createLiveSignatureVerifyFunction(liveSignatureAlgorithm, swarmId),\n      liveSignatureSignFunction,\n      liveDiscardWindow,\n    );\n\n    this.chunkBuffer = new BinRingBuffer(liveDiscardWindow);\n    this.scheduler = new Scheduler(chunkSize, clientOptions);\n\n    this.protocolOptions = [\n      new this.encoding.VersionProtocolOption(),\n      new this.encoding.MinimumVersionProtocolOption(),\n      new this.encoding.SwarmIdentifierProtocolOption(swarmId.toBuffer()),\n      new this.encoding.ContentIntegrityProtectionMethodProtocolOption(contentIntegrityProtectionMethod),\n      new this.encoding.MerkleHashTreeFunctionProtocolOption(merkleHashTreeFunction),\n      new this.encoding.LiveSignatureAlgorithmProtocolOption(liveSignatureAlgorithm),\n      new this.encoding.ChunkAddressingMethodProtocolOption(chunkAddressingMethod),\n      new this.encoding.ChunkSizeProtocolOption(chunkSize),\n      new this.encoding.LiveDiscardWindowProtocolOption(liveDiscardWindow),\n    ];\n  }\n\n  verifyProtocolOptions(protocolOptions) {\n    Object.entries(this.uri.protocolOptions)\n      .forEach(([protocolOption, value]) => {\n        if (protocolOptions[protocolOption] !== value) {\n          const protocolOptionName = ProtocolOptions.name(protocolOption);\n          throw new Error(`invalid peer options: ${protocolOptionName} mismatch`);\n        }\n      });\n  }\n\n  emitNewData() {\n    const newBins = this.scheduler.getNewCompleteBins();\n    if (newBins !== undefined) {\n      const [minNewBin, maxNewBin] = newBins;\n      const chunks = [];\n      for (let i = minNewBin; i <= maxNewBin; i += 2) {\n        const chunk = this.chunkBuffer.get(new Address(i));\n        if (chunk === undefined) {\n          debugger;\n        }\n        chunks.push(chunk);\n      }\n      this.emit('data', chunks);\n    }\n  }\n}\n\nconst PeerState = {\n  CONNECTING: 1,\n  AWAITING_HANDSHAKE: 2,\n  READY: 3,\n  CHOKED: 4,\n  DISCONNECTING: 5,\n  CLOSED: 6,\n};\n\nclass PeerDataHandlerContext {\n  constructor(swarm) {\n    this.swarm = swarm;\n    this.integrityVerifier = null;\n  }\n\n  getContentIntegrityVerifier(address) {\n    if (this.integrityVerifier === null) {\n      this.integrityVerifier = this.swarm.contentIntegrity.createVerifier(address);\n    }\n    return this.integrityVerifier;\n  }\n}\n\n// TODO: disconnect inactive peers\nclass Peer {\n  constructor(swarm, channel, remoteId = 0, localId = Peer.createChannelId()) {\n    this.swarm = swarm;\n    this.channel = channel;\n    this.remoteId = remoteId;\n    this.localId = localId;\n    this.state = PeerState.CONNECTING;\n\n    this.handlers = {\n      [MessageTypes.HANDSHAKE]: this.handleHandshakeMessage.bind(this),\n      [MessageTypes.DATA]: this.handleDataMessage.bind(this),\n      [MessageTypes.HAVE]: this.handleHaveMessage.bind(this),\n      [MessageTypes.ACK]: this.handleAckMessage.bind(this),\n      [MessageTypes.INTEGRITY]: this.handleIntegrityMessage.bind(this),\n      [MessageTypes.SIGNED_INTEGRITY]: this.handleSignedIntegrityMessage.bind(this),\n      [MessageTypes.REQUEST]: this.handleRequestMessage.bind(this),\n      [MessageTypes.CANCEL]: this.handleCancelMessage.bind(this),\n      [MessageTypes.CHOKE]: this.handleChokeMessage.bind(this),\n      [MessageTypes.UNCHOKE]: this.handleUnchokeMessage.bind(this),\n    };\n\n    this.sendBuffer = [];\n\n    this.swarm.scheduler.addPeer(this);\n  }\n\n  static createChannelId() {\n    return Math.round(Math.random() * MaxChannelId);\n  }\n\n  init() {\n    this.sendHandshake();\n    this.flush();\n\n    this.state = PeerState.AWAITING_HANDSHAKE;\n  }\n\n  close() {\n    this.state = PeerState.CLOSED;\n    this.swarm.scheduler.removePeer(this);\n  }\n\n  handleData(data) {\n    const context = new PeerDataHandlerContext(this.swarm);\n    data.messages.toArray().forEach(message => this.handleMessage(message, context));\n  }\n\n  handleMessage(message, context) {\n    const handler = this.handlers[message.type];\n    if (handler === undefined) {\n      throw new Error('unsupported message type');\n    }\n\n    // console.log(MessageTypes.name(message.type), this.remoteId, message);\n    handler(message, context);\n  }\n\n  handleHandshakeMessage(handshake) {\n    const options = handshake.options.reduce((options, {type, value}) => ({...options, [type]: value}), {});\n\n    const liveDiscardWindow = options[ProtocolOptions.LiveDiscardWindow];\n    if (liveDiscardWindow !== undefined) {\n      this.swarm.scheduler.setLiveDiscardWindow(this, liveDiscardWindow);\n    }\n\n    this.swarm.verifyProtocolOptions(options);\n\n    this.remoteId = handshake.channelId;\n\n    // console.log('received handshake message while in state', this.state);\n    if (this.state !== PeerState.READY) {\n      this.sendHandshake();\n      this.swarm.scheduler.getRecentChunks().forEach(address => this.sendHave(address));\n      this.flush();\n    }\n\n    this.state = PeerState.READY;\n  }\n\n  handleDataMessage(message, context) {\n    const address = Address.from(message.address);\n    const delaySample = LEDBAT.computeOneWayDelay(message.timestamp.value);\n\n    this.swarm.scheduler.markChunkReceived(this, address, delaySample);\n\n    const {encoding} = this.swarm;\n    this.channel.send(new encoding.Datagram(\n      this.remoteId,\n      [new encoding.AckMessage(message.address, new encoding.Timestamp(delaySample))],\n    ));\n\n    context.getContentIntegrityVerifier(address).verifyChunk(address, message.data)\n      .then(() => {\n        this.swarm.chunkBuffer.set(address, message.data);\n        this.swarm.scheduler.markChunkVerified(this, address);\n        this.swarm.emitNewData();\n      })\n      .catch((err) => {\n        console.log('error validating chunk', err);\n        this.swarm.scheduler.markChunkRejected(this, address);\n      });\n  }\n\n  handleHaveMessage(message) {\n    this.swarm.scheduler.markChunkAvailable(this, Address.from(message.address));\n  }\n\n  handleAckMessage(message) {\n    const address = Address.from(message.address);\n    this.swarm.scheduler.markChunkAvailable(this, address);\n    this.swarm.scheduler.markSendAcked(this, address, message.delaySample.value);\n  }\n\n  handleIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHash(address, message.hash.value);\n  }\n\n  handleSignedIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHashSignature(address, message.signature.value);\n  }\n\n  handleRequestMessage(message) {\n    this.swarm.scheduler.enqueueRequest(this, Address.from(message.address));\n  }\n\n  handleCancelMessage(message) {\n    this.swarm.scheduler.cancelRequest(this, Address.from(message.address));\n  }\n\n  handleChokeMessage() {\n    this.state = PeerState.CHOKED;\n  }\n\n  handleUnchokeMessage() {\n    this.state = PeerState.READY;\n  }\n\n  isReady() {\n    return this.state === PeerState.READY;\n  }\n\n  isInitialized() {\n    return this.state !== PeerState.CONNECTING && this.state !== PeerState.AWAITING_HANDSHAKE;\n  }\n\n  sendHandshake() {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HandshakeMessage(\n      this.localId,\n      [\n        ...this.swarm.protocolOptions,\n        new encoding.SupportedMessagesProtocolOption(Object.keys(this.handlers)),\n      ],\n    ));\n  }\n\n  sendHave(address) {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HaveMessage(encoding.ChunkAddress.from(address)));\n  }\n\n  sendRequest(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.RequestMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendCancel(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.CancelMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendChunk(address, timestamp) {\n    const chunk = this.swarm.chunkBuffer.get(address);\n    if (chunk === undefined) {\n      return;\n    }\n\n    // TODO: omit signatures for bins the peer has already acked\n    const constituentSignatures = this.swarm.contentIntegrity.getConstituentSignatures(address);\n    if (constituentSignatures === undefined) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n\n    constituentSignatures\n      .reverse()\n      .forEach(({bin, signature}, i) => {\n        const address = encoding.ChunkAddress.from(new Address(bin));\n\n        this.sendBuffer.push(new encoding.IntegrityMessage(\n          address,\n          new encoding.IntegrityHash(signature.getHash()),\n        ));\n\n        if (i === 0) {\n          this.sendBuffer.push(new encoding.SignedIntegrityMessage(\n            address,\n            new encoding.Timestamp(timestamp),\n            new encoding.LiveSignature(signature.getSignatureHash()),\n          ));\n        }\n      });\n\n    this.sendBuffer.push(new encoding.DataMessage(encoding.ChunkAddress.from(address), chunk));\n\n    this.flush();\n  }\n\n  flush() {\n    if (this.sendBuffer.length === 0) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n    try {\n      this.channel.send(new encoding.Datagram(this.remoteId, this.sendBuffer));\n    } catch (e) {\n      console.log('error sending');\n      console.log(this.channel);\n      throw e;\n    }\n    this.sendBuffer = [];\n  }\n}\n\nclass SwarmSet extends EventEmitter {\n  constructor() {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.swarms = {};\n  }\n\n  insert(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] === undefined) {\n      this.swarms[key] = swarm;\n      this.emit('insert', swarm);\n    }\n  }\n\n  remove(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] !== undefined) {\n      delete this.swarms[key];\n      this.emit('remove', swarm);\n    }\n  }\n\n  get(swarmId) {\n    return this.swarms[SwarmSet.swarmIdToKey(swarmId)];\n  }\n\n  toArray() {\n    return Object.values(this.swarms);\n  }\n\n  static swarmIdToKey(swarmId) {\n    return swarmId.toBuffer().toString('base64');\n  }\n}\n\nexport class Client {\n  constructor() {\n    this.channels = [];\n\n    this.swarms = new SwarmSet();\n  }\n\n  publishSwarm(swarm) {\n    this.swarms.insert(swarm);\n  }\n\n  unpublishSwarm(swarm) {\n    this.swarms.remove(swarm);\n  }\n\n  joinSwarm(uri) {\n    const chunkSize = uri.protocolOptions[ProtocolOptions.ChunkSize];\n    const clientOptions = {\n      liveDiscardWindow: Math.ceil(BUFFER_SIZE / chunkSize),\n      uploadRateLimit: MAX_UPLOAD_RATE,\n    };\n\n    const swarm = new Swarm(uri, clientOptions);\n    this.swarms.insert(swarm);\n\n    return swarm;\n  }\n\n  createChannel(conn) {\n    const channel = new Channel(conn, this.swarms);\n    this.channels.push(channel);\n\n    channel.once('close', () => {\n      const index = this.channels.indexOf(channel);\n      this.channels.splice(index, 1);\n    });\n  }\n}\n\nexport class Channel extends EventEmitter {\n  constructor(conn, swarms) {\n    super();\n\n    this.conn = conn;\n    this.swarms = swarms;\n    this.peers = {};\n\n    this.handleSwarmInsert = this.getOrCreatePeer.bind(this);\n    this.swarms.on('insert', this.handleSwarmInsert);\n\n    const liveSwarms = swarms.toArray();\n    this.conn.addEventListener('open', () => liveSwarms.forEach(this.handleSwarmInsert));\n    this.conn.addEventListener('message', this.handleMessage.bind(this));\n    this.conn.addEventListener('error', err => console.log('connection error:', err));\n    this.conn.addEventListener('close', this.handleClose.bind(this));\n  }\n\n  handleMessage(event) {\n    let data = new genericEncoding.Datagram();\n    try {\n      data.read(event.data);\n    } catch (e) {\n      console.log(event.data);\n      throw e;\n    }\n\n    let peer = this.peers[data.channelId];\n    if (peer === undefined) {\n      if (data.channelId !== 0) {\n        return;\n      }\n\n      let handshake;\n      try {\n        handshake = data.messages.next();\n      } catch (error) {\n        console.log('error decoding mesasge', error);\n        return;\n      }\n      if (handshake === undefined || handshake.type !== MessageTypes.HANDSHAKE) {\n        console.log('rejected new peer without handshake');\n        return;\n      }\n      const swarmId = handshake.options.find(({type}) => type === ProtocolOptions.SwarmIdentifier);\n      if (swarmId === undefined) {\n        // console.log('rejecting new peer with invalid swarm id');\n        return;\n      }\n      const swarm = this.swarms.get(SwarmId.from(swarmId.value));\n      if (swarm === undefined) {\n        // console.log('rejecting new peer requesting unknown swarm');\n        return;\n      }\n\n      peer = this.getOrCreatePeer(swarm);\n    }\n\n    data = new peer.swarm.encoding.Datagram();\n    data.read(event.data);\n    // console.log('RECEIVED', data.messages.toArray());\n    peer.handleData(data);\n  }\n\n  send(data) {\n    if (this.conn.readyState !== 'open') {\n      this.conn.addEventListener('open', () => this.conn.send(data.toBuffer()));\n      return;\n    }\n\n    try {\n      this.conn.send(data.toBuffer());\n    } catch (e) {\n      this.conn.close();\n    }\n  }\n\n  handleClose() {\n    this.swarms.removeListener('insert', this.handleSwarmInsert);\n    Object.values(this.peers).forEach(peer => peer.close());\n    this.emit('close');\n  }\n\n  getOrCreatePeer(swarm) {\n    let peer = Object.values(this.peers).find(p => p.swarm === swarm);\n    return peer || this.createPeer(swarm);\n  }\n\n  createPeer(swarm) {\n    const {peers, swarms} = this;\n\n    const peer = new Peer(swarm, this);\n    peers[peer.localId] = peer;\n    peer.init();\n\n    const destroyPeer = once(() => {\n      delete peers[peer.localId];\n      peer.close();\n\n      swarms.removeListener('remove', handleRemove);\n    });\n    setTimeout(() => {\n      if (!peer.isInitialized()) {\n        destroyPeer();\n      }\n    }, HANDSHAKE_TIMEOUT);\n\n    const handleRemove = removedSwarm => {\n      if (removedSwarm === swarm) {\n        destroyPeer();\n      }\n    };\n    swarms.on('remove', handleRemove);\n\n    return peer;\n  }\n}\n","import KBucket from 'k-bucket';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport arrayEqual from 'array-equal';\nimport randomBytes from 'randombytes';\nimport LRU from 'lru-cache';\nimport hexToUint8Array from './hexToUint8Array';\nimport idx from 'idx';\n\nconst SEND_REPLICAS = 2;\nconst MAX_HOPS = 10;\nconst DEFAULT_PEER_REQUEST_COUNT = 10;\nconst NUMBER_OF_NODES_PER_BUCKET = 2;\n\n// TODO: implement get/set\n// TODO: implement connection dump rpc for network debugging\n\nexport class Client extends EventEmitter {\n  constructor(id) {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.id = id;\n\n    // managed/unmanaged?\n    this.channels = new KBucket({\n      numberOfNodesPerKBucket: NUMBER_OF_NODES_PER_BUCKET,\n      localNodeId: this.id,\n    });\n    this.allChannels = new KBucket({\n      numberOfNodesPerKBucket: 100,\n      localNodeId: this.id,\n    });\n\n    this.channels.on('ping', this.handlePing.bind(this));\n    this.channels.on('removed', this.handleRemoved.bind(this));\n    this.channels.on('updated', this.handleUpdated.bind(this));\n    this.channels.on('added', this.handleAdded.bind(this));\n\n    this.knownPeerIds = {};\n    this.channelMap = {};\n\n    this.seenIds = new LRU({max: 1024});\n    this.knownRoutes = new LRU({\n      max: 1024,\n      maxAge: 1000 * 60,\n    });\n    this.callbacks = new LRU({max: 1024});\n\n    this.on('receive.peers.request', this.handlePeersRequest.bind(this));\n    this.on('receive.ping.request', this.handlePingRequest.bind(this));\n    this.on('receive.trace.request', this.handleTraceRequest.bind(this));\n    this.on('receive.callback.response', this.handleCallbackResponse.bind(this));\n\n    this.startPeerRequests();\n  }\n\n  // TODO: this is leaking connections\n  close() {\n    this.stopPeerRequests();\n    this.allChannels.toArray().forEach(({conn}) => conn && conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n\n  startPeerRequests() {\n    let index = 0;\n\n    const next = () => {\n      let ids = Object.keys(this.knownPeerIds);\n\n      for (let retry = 0; retry <= ids.length; retry ++) {\n        if (index >= ids.length) {\n          index = 0;\n        }\n\n        const id = ids[index];\n        index ++;\n\n        if (id) {\n          return id;\n        }\n      }\n    };\n\n    this.peerRequestIvl = setInterval(() => {\n      const id = next();\n      if (id) {\n        this.sendPeerRequest(hexToUint8Array(id));\n      }\n    }, 5000);\n  }\n\n  stopPeerRequests() {\n    clearInterval(this.peerRequestIvl);\n  }\n\n  handlePing(channels, newChannel) {\n    // console.log('ping', channels, newChannel);\n    const PING_TIMEOUT = 10000;\n\n    channels.forEach(channel => {\n      const {id} = channel;\n\n      if (channel.isOpen()) {\n        this.addChannel(channel);\n        return;\n      }\n\n      setTimeout(() => {\n        const channel = this.getChannel(id);\n        if (channel && channel.isOpen()) {\n          this.addChannel(channel);\n          return;\n        }\n\n        this.removeChannel(id);\n        this.addChannel(newChannel);\n      }, PING_TIMEOUT);\n    });\n  }\n\n  addChannel(channel) {\n    this.channels.add(channel);\n    this.allChannels.add(channel);\n  }\n\n  removeChannel(id) {\n    this.channels.remove(id);\n    this.allChannels.remove(id);\n    // delete this.channelMap[arrayBufferToHex(id)];\n  }\n\n  getChannel(id) {\n    return this.channelMap[arrayBufferToHex(id)];\n  }\n\n  handleRemoved(channel) {\n    // console.log('remove', arrayBufferToHex(channel.id));\n    // console.trace();\n    if (channel.conn) {\n      channel.conn.close();\n    }\n    // console.log('handleRemoved', arrayBufferToHex(channel.id));\n  }\n\n  handleUpdated(oldChannel, newChannel) {\n    // console.log('update', {oldChannel, newChannel});\n    // console.log('handleUpdated', arrayBufferToHex(channel.id));\n  }\n\n  handleAdded(channel) {\n    if (channel.conn === undefined) {\n      // console.log('peers.discover', arrayBufferToHex(this.id), arrayBufferToHex(channel.id), this.channels.count());\n      this.emit('peers.discover', channel.id);\n    }\n    // console.log('add');\n    // emit event?\n    // console.log('handleAdded', arrayBufferToHex(channel.id));\n  }\n\n  createChannel(id, conn) {\n    const idHex = arrayBufferToHex(id);\n    const channel = new Channel(id, conn);\n\n    const oldChannel = this.channelMap[idHex];\n    if (oldChannel && oldChannel.conn) {\n      // console.warn('replacing open channel...');\n      oldChannel.conn.close();\n    }\n    this.channelMap[idHex] = channel;\n\n    const messages = [];\n    const bufferMessages = event => messages.push(event);\n    const handleMessage = this.handleMessage.bind(this, channel);\n\n    const handleOpen = () => {\n      // console.log('saw open', idHex);\n      this.addChannel(channel);\n\n      conn.removeEventListener('message', bufferMessages);\n      conn.addEventListener('message', handleMessage);\n      messages.forEach(handleMessage);\n\n      this.sendPeerRequest(id);\n    };\n\n    const handleClose = () => {\n      // console.log('saw close', idHex);\n      conn.removeEventListener('message', bufferMessages);\n      conn.removeEventListener('message', handleMessage);\n      conn.removeEventListener('open', handleOpen);\n\n      if (this.channelMap[idHex] === channel) {\n        this.removeChannel(id);\n        delete this.channelMap[idHex];\n      }\n    };\n\n    conn.addEventListener('message', bufferMessages);\n    conn.addEventListener('open', handleOpen, {once: true});\n    conn.addEventListener('close', handleClose, {once: true});\n  }\n\n  handleMessage(channel, event) {\n    // console.log('handleMessage', event.data);\n\n    channel.lastActive = Date.now();\n\n    let req;\n    try {\n      req = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n    const {type, id} = req;\n\n    if (req.trace) {\n      req.trace.push(arrayBufferToHex(this.id));\n      // console.log('TRACE', req);\n    }\n\n    if (this.seenIds.get(id)) {\n      // console.log('discarding seen message', id);\n      // if (req.trace) {\n      //   console.log('DROPPED', req);\n      // }\n      return;\n    }\n    this.seenIds.set(id, true);\n\n    if (!this.getChannel(channel.id)) {\n      console.warn('receiving channel is not known to dht', arrayBufferToHex(channel.id));\n    }\n\n    this.knownRoutes.set(req.from, channel.id);\n    // this.knownRoutes.set(req.from, arrayBufferToHex(channel.id));\n\n    const to = hexToUint8Array(req.to);\n    if (!arrayEqual(to, this.id)) {\n      this.forwardMessage(to, req);\n      return;\n    }\n\n    // if (req.trace) {\n    //   console.log('DELIVERED', req);\n    // }\n\n    const resCallback = (res={}, callback=null) => {\n      const from = hexToUint8Array(req.from);\n      const data = {re: id, ...res};\n      this.send(from, 'callback.response', data, callback);\n    };\n\n    // console.log(`emit receive.${type}`, req);\n    this.emit(`receive.${type}`, {data: req, callback: resCallback});\n  }\n\n  forwardMessage(to, data) {\n    // console.log('forwarding message', arrayBufferToHex(to), data);\n\n    if (data.hops >= MAX_HOPS) {\n      // console.log('discarding message with too many hops', data.id);\n      return;\n    }\n    data.hops ++;\n\n    this.sendRaw(to, JSON.stringify(data), data.trace);\n  }\n\n  sendPing(to, callback=()=>{}) {\n    this.send(to, 'ping.request', {}, callback);\n  }\n\n  handlePingRequest({data, callback}) {\n    // console.log('PING', data);\n    callback({});\n  }\n\n  handleTraceRequest({data, callback}) {\n    callback(data);\n  }\n\n  handleCallbackResponse({data, callback}) {\n    const reqCallback = this.callbacks.get(data.re);\n    if (reqCallback) {\n      reqCallback(data, callback);\n    } else {\n      // console.warn('<<< callback for %s expired', data.re);\n    }\n  }\n\n  sendPeerRequest(to, count=DEFAULT_PEER_REQUEST_COUNT) {\n    const timeout = setTimeout(() => {\n      delete this.knownPeerIds[arrayBufferToHex(to)];\n    }, 5000);\n    this.send(to, 'peers.request', {count}, res => {\n      clearTimeout(timeout);\n      this.handlePeersResponse(res);\n    });\n  }\n\n  handlePeersRequest({data: {count=DEFAULT_PEER_REQUEST_COUNT, from}, callback}) {\n    // console.log('handlePeersRequest');\n\n    const fromId = hexToUint8Array(from);\n\n    const ids = this.allChannels.closest(fromId)\n      .filter(({conn}) => conn != null)\n      .filter(({id}) => !arrayEqual(id, this.id) && !arrayEqual(id, fromId))\n      .map(({id}) => arrayBufferToHex(id))\n      .slice(0, count);\n    callback({ids});\n  }\n\n  handlePeersResponse(res) {\n    // console.log('handlePeersResponse', res.ids);\n\n    res.ids\n      .map(id => hexToUint8Array(id))\n      .filter(id => !arrayEqual(id, this.id))\n      .filter(id => {\n        const channel = this.getChannel(id);\n        return channel == null || channel.conn == null;\n      })\n      .forEach(id => {\n        // TODO: store peer provenance so we can ignore bad actors?\n        this.knownPeerIds[arrayBufferToHex(id)] = true;\n        this.addChannel(new Channel(id));\n      });\n  }\n\n  send(to, type, data={}, callback=null) {\n    if (typeof data === 'function') {\n      callback = data;\n      data = {};\n    }\n\n    const id = arrayBufferToHex(randomBytes(16));\n    this.seenIds.set(id, true);\n\n    if (callback != null) {\n      this.callbacks.set(id, callback);\n    }\n\n    const message = JSON.stringify({\n      id,\n      type,\n      from: arrayBufferToHex(this.id),\n      to: arrayBufferToHex(to),\n      trace: [arrayBufferToHex(this.id)],\n      hops: 0,\n      ...data,\n    });\n\n    // console.log('formatMessage', message);\n\n    this.sendRaw(to, message);\n  }\n\n  sendRaw(to, message, trace=[]) {\n    let closest = this.allChannels.closest(to)\n      .filter(channel => channel.isOpen())\n      .filter(({idHex}) => trace.indexOf(idHex) === -1)\n      .slice(0, SEND_REPLICAS);\n\n    const knownRoute = this.knownRoutes.get(arrayBufferToHex(to));\n    if (knownRoute) {\n      const channel = this.getChannel(knownRoute);\n      // const channel = this.allChannels.get(knownRoute);\n      if (channel != null && channel.isOpen()) {\n        closest.push(channel);\n      }\n    }\n\n    if (closest.length === 0) {\n      // console.warn(`closest value to ${arrayBufferToHex(to)} does not exist, dropping`, message);\n      return;\n    }\n\n    if (arrayEqual(closest[0].id, to)) {\n      closest = closest.slice(0, 1);\n    }\n    // console.log('send', closest.map(({id}) => arrayBufferToHex(id)), message);\n    // console.log(closest.length, closest.filter(({conn}) => !!conn).length, message);\n    closest.forEach(({id, conn}) => {\n      try {\n        // console.log('buffered amount before send', conn.bufferedAmount);\n        // console.log(message);\n        conn.send(message);\n      } catch (e) {\n        console.log('error sending to peer, closing', arrayBufferToHex(id), e);\n        conn.close();\n      }\n    });\n  }\n}\n\nexport class Channel {\n  constructor(id, conn) {\n    this.id = id;\n    this.idHex = arrayBufferToHex(id);\n    this.vectorClock = Date.now();\n    this.lastPing = Date.now();\n    this.conn = conn;\n\n    // console.log('channel', this);\n  }\n\n  isOpen() {\n    const readyState = idx(this, _ => _.conn.readyState);\n    return readyState === 1 || readyState === 'open';\n  }\n}\n\nexport class SubChannel {\n  constructor(client, peerId, id=arrayBufferToHex(randomBytes(16))) {\n    // console.log('subchannel created', id);\n    this.client = client;\n    this.peerId = peerId;\n    this.id = id;\n    this.readyState = SubChannel.ReadyStates.OPEN;\n    this.onmessage = () => {};\n\n    this.handleMessage = this.handleMessage.bind(this);\n    this.client.on('receive.subchannel.message', this.handleMessage);\n  }\n\n  handleMessage({data: {channelId, data}}) {\n    // console.log('receive.subchannel.message', channelId, this.id, data);\n\n    if (channelId === this.id) {\n      this.onmessage({data});\n    }\n  }\n\n  send(data) {\n    this.client.send(\n      this.peerId,\n      'subchannel.message',\n      {\n        channelId: this.id,\n        data: data,\n      },\n    );\n  }\n\n  close() {\n    this.readyState = SubChannel.ReadyStates.CLOSED;\n    this.client.removeListener('receive.subchannel.message', this.handleMessage);\n  }\n}\n\nSubChannel.ReadyStates = {\n  OPEN: 1,\n  CLOSED: 3,\n};\n","import URLSafeBase64 from 'urlsafe-base64';\nimport SwarmId from './swarmid';\nimport {ProtocolOptions} from './constants';\n\nconst protocolOptionToKey = {\n  [ProtocolOptions.ContentIntegrityProtectionMethod]: 'x.im',\n  [ProtocolOptions.MerkleHashTreeFunction]: 'x.hf',\n  [ProtocolOptions.LiveSignatureAlgorithm]: 'x.sa',\n  [ProtocolOptions.ChunkAddressingMethod]: 'x.am',\n  [ProtocolOptions.ChunkSize]: 'x.cs',\n};\n\n// TODO: dn with stream name\n// TODO: as to m3u8 url?\nexport default class URI {\n  constructor(swarmId, protocolOptions) {\n    this.swarmId = swarmId;\n    this.protocolOptions = protocolOptions;\n  }\n\n  toString() {\n    const swarmId = URLSafeBase64.encode(this.swarmId.toBuffer());\n    const protocolOptions = Object.entries(this.protocolOptions)\n      .map(([protocolOption, value]) => `${protocolOptionToKey[protocolOption]}=${value}`)\n      .join('&');\n    return `magnet:?xt=urn:ppspp:${swarmId}&${protocolOptions}`;\n  }\n\n  static parse(uriString) {\n    if (!uriString.startsWith('magnet:')) {\n      throw new Error('invalid uri: expected magnet');\n    }\n\n    const args = uriString.substring(8)\n      .split('&')\n      .map(query => {\n        const [key, value] = query.split('=');\n        return [key, decodeURIComponent(value)];\n      });\n\n    const protocolOptions = Object.entries(protocolOptionToKey)\n      .reduce((protocolOptions, [protocolOption, key]) => {\n        const arg = args.find(([argKey]) => argKey === key);\n        if (arg === undefined) {\n          throw new Error(`invalid uri: missing ${key}`);\n        }\n        return {...protocolOptions, [protocolOption]: parseFloat(arg[1])};\n      }, {});\n\n    const xt = args.find(([key, value]) => key === 'xt' && value.startsWith('urn:ppspp:'));\n    if (xt === undefined) {\n      throw new Error('invalid uri: missing suitable xt');\n    }\n    const swarmId = SwarmId.from(URLSafeBase64.decode(xt[1].substring(10)));\n\n    return new URI(swarmId, protocolOptions);\n  }\n}\n","import React, {useEffect, useState, useReducer} from 'react';\nimport classNames from 'classnames';\n\nimport './PlayButton.scss';\n\nconst PlayButton = ({\n  spin=false,\n  flicker=false,\n  pulse=false,\n  disabled=false,\n  visible=true,\n  blur=false,\n  onClick,\n}) => {\n  const [currentVisibility, setCurrentVisibility] = useState(true);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => setCurrentVisibility(visible), 300);\n    return () => clearTimeout(timeout);\n  }, [visible]);\n\n  const [hoverState, dispatchHoverAction] = useReducer((state, action) => {\n    switch (action.type) {\n      case 'ENTER':\n        return {\n          ...state,\n          index: state.index + 1,\n          hovering: true,\n          show: false,\n        };\n      case 'LEAVE':\n        return {\n          ...state,\n          hovering: false,\n          show: false,\n        };\n      case 'TIMEOUT':\n        return state.hovering && state.index === action.index\n          ? {\n            ...state,\n            show: true,\n          }\n          : state;\n      default:\n        return state;\n    }\n  }, {index: 0});\n  const handleMouseEnter = () => dispatchHoverAction({type: 'ENTER'});\n  const handleMouseLeave = () => dispatchHoverAction({type: 'LEAVE'});\n\n  useEffect(() => {\n    if (hoverState.hovering) {\n      const timeout = setTimeout(() => dispatchHoverAction({\n        type: 'TIMEOUT',\n        index: hoverState.index,\n      }), 3000);\n      return () => clearTimeout(timeout);\n    }\n  }, [hoverState]);\n\n  const hoverClasses = classNames({\n    play_button_wrap: true,\n    hovering: hoverState.show,\n    disabled,\n  });\n\n  const buttonClasses = classNames({\n    play_button: true,\n    clickable: onClick != null && !disabled,\n    exiting: !visible && currentVisibility,\n    hidden: !visible && !currentVisibility,\n    spin,\n    flicker,\n    pulse,\n    blur,\n    disabled,\n  });\n\n  return (\n    <div className={hoverClasses}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 927 927\"\n        className={buttonClasses}\n        onClick={disabled ? undefined : onClick}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <g className=\"background\">\n          <circle cx=\"463\" cy=\"463\" r=\"463\"/>\n        </g>\n        <g className=\"network\">\n          <circle cx=\"327\" cy=\"229\" r=\"139\"/>\n          <circle cx=\"732\" cy=\"463\" r=\"139\"/>\n          <circle cx=\"327\" cy=\"697\" r=\"139\"/>\n          <polygon points=\"854 463 269 125 269 801 854 463\"/>\n        </g>\n        <g className=\"button\">\n          <path d=\"M658,524c23-13,23-36,0-50L457,358c-23-13-43-2-43,25V616c0,27,19,38,43,25Z\" transform=\"translate(-45 -36)\"/>\n        </g>\n    </svg>\n    </div>\n\n  );\n};\n\nexport default PlayButton;\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n"],"sourceRoot":""}