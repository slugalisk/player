{"version":3,"sources":["ppspp/constants.js","components/App.js","components/DiagnosticMenu/index.js","chunkedStream.js","client.js","ppspp/address.js","ppspp/injector.js","wrtc.js","compat/ws/index.js","hooks/useQuery.js","hooks/useSwarmMediaSource.js","hooks/useVideo.js","components/VideoVolume.js","components/VideoControls.js","components/VideoPlayer.js","hexToUint8Array.js","ppspp/integrity.js","compat/crypto/index.js","compat/crypto/node.js","compat/crypto/browser.js","compat/ws/node.js","compat/ws/browser.js","compat/wrtc/node.js","compat/wrtc/browser.js","components/Router.js","index.js","ppspp/swarmid.js","components/PlayButton.js","ema.js","RingBuffer.js","ledbat.js","ppspp/encoding.js","bitarray.js","wfq.js","ppspp/scheduler.js","ppspp/index.js","dht.js","ppspp/uri.js","binSearch.js","compat/wrtc/index.js"],"names":["__webpack_require__","d","__webpack_exports__","MaxChannelId","ProtocolOptions","Version","ContentIntegrityProtectionMethod","MerkleHashTreeFunction","LiveSignatureAlgorithm","ChunkAddressingMethod","MessageTypes","lodash_invert__WEBPACK_IMPORTED_MODULE_0__","lodash_invert__WEBPACK_IMPORTED_MODULE_0___default","n","MinimumVersion","SwarmIdentifier","LiveDiscardWindow","SupportedMessages","ChunkSize","EndOption","RFC7574","None","MerkleHashTree","SignAll","UnifiedMerkleTree","SHA1","SHA224","SHA256","SHA384","SHA512","RSASHA1","RSASHA256","ECDSAP256SHA256","ECDSAP384SHA384","Bin32","ByteRange64","ChunkRange32","Bin64","ChunkRange64","HANDSHAKE","DATA","ACK","HAVE","INTEGRITY","PEX_RESv4","PEX_REQ","SIGNED_INTEGRITY","REQUEST","CANCEL","CHOKE","UNCHOKE","PEX_RESv6","PEX_REScert","forEach","enumType","names","invert","name","value","NoiseLogger","React","lazy","e","then","bind","PubSubLogger","App","_ref2","location","params","match","_ref2$clientTimeoutMs","clientTimeoutMs","query","useQuery","search","autoPlay","bootstrapAddress","bootstrap","proto","window","protocol","host","concat","getDefaultBootstrapAddress","swarmName","clientTimeout","useTimeout","_useAsync","useAsync","Client","create","ConnManager","clientLoading","loading","clientError","error","client","_useSwarm","ppsppClient","arguments","length","undefined","_useState","useState","_useState2","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","swarm","setSwarm","uri","joinSwarm","URI","parse","useSwarm","_useSwarm2","swarmDesc","swarms","find","desc","useEffect","setImmediate","Component","application/octet-stream","application/json","video/mpeg-ts","VideoPlayer","contentType","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","className","_PlayButton__WEBPACK_IMPORTED_MODULE_5__","disabled","onClick","pulse","flicker","blur","ToggleButton","buttonClasses","classNames","diagnostic_menu__toggle_button","diagnostic_menu__toggle_button--expanded","this","props","expanded","react__WEBPACK_IMPORTED_MODULE_6___default","defaultProps","formatNumber","isFinite","approx","String","SwarmState","scheduler","rows","key","totalSends","totalRequests","totalRequestsReceived","totalDroppedRequests","totalReceived","totalAdded","totalCancelled","ackUnknownSend","lastCompletedBin","loadedChunks","min","requestedChunks","chunkRate","map","_ref","PeerStateTable","peerState","chunkIntervalMean","wasteRate","ledbat","baseDelay","getMin","currentDelay","rttMean","rttVar","cwnd","cto","flightSize","validChunks","requestQueue","_this$props","startBin","endBin","push","colSpan","AvailabilityMapChart","availableChunks","sentChunks","receivedChunks","_this","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","canvas","createRef","scratchCanvas","document","current","isNaN","max","height","width","ctx","getContext","scale","scaleLinear","domain","range","fillStyle","fillRect","lastStart","i","values","get","drawImage","ref","PeerState","_this2","handleButtonClick","setState","state","table","peer","localId","remoteId","DiagnosticMenu","_this3","scheduleUpdate","handleUpdate","forceUpdate","requestAnimationFrame","swarmState","peerStates","containerClasses","containerClass","diagnostic_menu__container","diagnostic_menu__container--expanded","_this$props$swarm$sch","liveDiscardWindow","entries","_ref3","_ref4","DELIMITER","Buffer","from","DELIMITER_LENGTH","ChunkedWriteStream","_EventEmitter","injector","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","buffer","alloc","writeUInt32BE","appendData","HEADER_INSTANCE_LENGTH","flush","EventEmitter","ChunkedWriteStreamInjector","_EventEmitter2","apply","_ref$name","_ref$bitRate","bitRate","injectorOptions","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","data","fill","Injector","writer","intervalId","setInterval","write","emit","done","clearInterval","setTimeout","AbstractChunkedReadStream","handleWarmupSwarmData","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","handleSwarmData","chunkBufferLength","nextDataOffset","nextDataLength","on","nextChunkOffset","delimiterIndex","indexOf","removeListener","readHeader","slice","offset","instance","readUInt8","readUInt32BE","lastChunkOffset","nextDataEnd","handleData","lastChunkEnd","handleEndData","ChunkedFragmentedReadStream","_AbstractChunkedReadS","_this4","firstEmitted","ChunkedReadStream","_AbstractChunkedReadS2","_this5","chunkBuffer","chunkSlice","firstChunkStart","shift","chunks","connManager","conn","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","dhtClientId","hexToUint8Array","id","bootstrapId","swarmUri","createClient","dhtClient","dht","handlePeersDiscover","handleReceiveConnectRequest","createChannel","createDataChannel","ppspp","init","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","sub","dhtChannel","ppsppChannel","timeout","close","addEventListener","send","channelId","clearTimeout","_ref$data","callback","channel","label","Address","bin","treeBounds","binBounds","_treeBounds","start","end","address","type","Error","chunkSize","chunksPerSignature","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__","inputBuffer","inputBufferSize","outputResult","Promise","resolve","signatureSize","buf","outputChunks","Math","all","contentIntegrity","appendSubtree","subtree","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_4__","setRange","rootAddress","markChunksLoaded","options","_options$chunkSize","_options$chunksPerSig","_options$liveDiscardW","ceil","_options$chunkAddress","chunkAddressingMethod","_options$contentInteg","contentIntegrityProtectionMethod","_options$merkleHashTr","merkleHashTreeFunction","_options$liveSignatur","liveSignatureAlgorithm","generateKeyPair","swarmId","privateKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__","console","log","toString","clientOptions","uploadRateLimit","Swarm","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__","reject","WebSocket","onerror","onmessage","event","JSON","mediator","Mediator","once","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","handleMessage","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","RTCSessionDescription","sdp","candidate","RTCIceCandidate","readyState","stringify","initialized","waitingChannels","peerConn","RTCPeerConnection","iceServers","urls","sendIceCandidate","handleDataChannel","handleIceConnectionStateChange","addIceCandidate","_ready","description","setRemoteDescription","createAnswer","catch","setLocalDescription","sendAnswer","binaryType","resolveWaitingChannel","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","ordered","maxRetransmits","iceConnectionState","_this6","createOffer","offer","sendOffer","module","exports","require","react__WEBPACK_IMPORTED_MODULE_0__","qs__WEBPACK_IMPORTED_MODULE_1__","qs__WEBPACK_IMPORTED_MODULE_1___default","queryString","useMemo","qs","ignoreQueryPrefix","useSwarmMediaSource","mediaSource","MediaSource","handleSourceOpen","sourceBuffer","addSourceBuffer","videoSegments","appendBuffer","newSegment","updating","segment","unshift","transmuxer","muxjs","mp4","Transmuxer","initSet","initSegment","stream","useVideo","useRef","slicedToArray","loaded","setLoaded","_useState3","_useState4","playing","setPlaying","_useState5","_useState6","paused","setPaused","_useState7","_useState8","ended","setEnded","_useState9","_useState10","waiting","setWaiting","_useState11","_useState12","muted","setMuted","_useState13","_useState14","volume","setVolume","_useState15","_useState16","savedVolume","setSavedVolume","_useState17","_useState18","setReadyState","Date","toUTCString","play","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","t1","warn","stop","onEnded","onPause","onPlaying","onCanPlay","onCanPlayThrough","onVolumeChange","onWaiting","onDurationChange","onLoadedMetadata","onLoadedData","pause","mute","unmute","Handle","_ref$domain","_ref$handle","handle","percent","getHandleProps","react_default","assign","role","aria-valuemin","aria-valuemax","aria-valuenow","style","left","Track","source","target","getTrackProps","VideoVolume","onUpdate","dragging","setDragging","sliderClassNames","video_volume__slider","es","mode","step","onSlideStart","onSlideEnd","getRailProps","_ref5","handles","VideoVolume_Handle","right","_ref6","tracks","_ref7","VideoVolume_Track","VideoControls","fullscreenButton","fullscreen","toggleFullscreen","visible","playButton","index_es","volumeIcons","VolumeOff","VolumeMute","VolumeDown","VolumeUp","VolumeIcon","fullscreenEnabled","Icon","FullscreenExit","Fullscreen","controlsClassName","swarm_player__controls","components_VideoVolume","SwarmPlayer","_useVideo","indexSwarm","_useVideo2","videoState","videoProps","videoControls","src","URL","createObjectURL","controlsVisible","setControlsVisible","lastActive","setLastActive","useDebounce","_useFullscreen","useFullscreen","_useFullscreen2","isFullscreen","PlayButton","spin","onMouseMove","now","onMouseOut","preventDefault","components_VideoControls","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0__","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0___default","v","Uint8Array","hexToArrayBuffer","crypto","toUint8Array","MerkleHashTreeFunctionAlgorithms","_MerkleHashTreeFuncti","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_10__","MerkleHashTreeFunctionByteLengths","_MerkleHashTreeFuncti2","createMerkleHashTreeFunction","algorithm","nullHash","_len","Array","_key","every","arrayEqual","subtle","digest","LiveSignatureAlgorithms","_LiveSignatureAlgorit","modulusLength","publicExponent","hash","namedCurve","createLiveSignatureSignFunction","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_9__","importResult","importKey","sign","createLiveSignatureVerifyFunction","getKeyParams","publicKey","signature","verify","generateKey","keyPair","exportKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_8__","SwarmId","unavailableLiveSignatureSignFunction","createContentIntegrityVerifierFactory","liveSignatureVerifyFunction","liveSignatureSignFunction","Infinity","Signature","verified","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__","SignedSignature","verificationResult","getHash","markVerified","verifyHash","compare","signatures","getChunkCount","contains","MerkleHashTreeVerifier","hashTree","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default","getConstituentHashBins","bfsIndex","stride","parent","branch","containsBin","isRoot","siblingBin","siblingBfsIndex","floor","minSize","size","hashes","siblings","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__","rootHashSignature","pow","log2","hashResult","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","siblingSignature","index","verifiedSignature","siblingHash","_iterator","Symbol","iterator","err","return","UnifiedMerkleHashTree","subtrees","nextStart","chunkCount","_ref8","binSearch","_this5$subtrees$i$roo","storedSubtree","findSubtree","copy","sort","b","pruneSubtrees","removedTree","treeSize","nextAddress","insertSubtree","MerkleHashSubtreeVerifier","getConstituentSignatures","_MerkleHashTreeVerifi","unifiedHashTree","_this7","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__","prototype","NoneVerifier","NoneVerifierFactory","r","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0__","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0___default","WebCrypto","ws__WEBPACK_IMPORTED_MODULE_0__","ws__WEBPACK_IMPORTED_MODULE_0___default","ws","wrtc__WEBPACK_IMPORTED_MODULE_0__","Test","DhtGraph","Router","HashRouter","react","fallback","Switch","Route","exact","path","component","Redirect","to","ReactDOM","render","components_Router","getElementById","isRsaAlgorithm","includes","metadataLength","byteLength","writeUInt8","ArrayBuffer","isView","read","_ref$spin","_ref$flicker","_ref$pulse","_ref$disabled","_ref$visible","_ref$blur","_ref$error","_ref$onClick","_ref$idleTimeout","idleTimeout","currentVisibility","setCurrentVisibility","_useHover","useHover","_useHover2","hovering","hoverEventHandlers","mouseIdle","setMouseIdle","hidden","hoverClasses","play_button_wrap","play_button","clickable","exiting","xmlns","viewBox","cx","cy","points","transform","EMA","alpha","classCallCheck","mean","weight","RingBuffer","capacity","setCapacity","lastIndex","createEmptyValue","firstEmptyIndex","advanceLastIndex","set","firstIndex","DelayBuffer","possibleConstructorReturn","getPrototypeOf","delay","toConsumableArray","TARGET","CURRENT_HISTORY","CURRENT_HISTORY_INTERVAL","BASE_HISTORY","BASE_HISTORY_INTERVAL","INIT_CWND","MSS","COEF_ALPHA","COEF_BETA","LEDBAT","mss","lastDataLoss","lastAckTime","ackSize","bytes","delaySample","update","checkCTO","queuingDelay","abs","offTarget","maxAllowedCwnd","rtt","isEmpty","retransmitting","timestamp","createChunkAddressFieldType","addressingMethod","Bin32ChunkAddress","createClass","_Address$binBounds","_Address$binBounds2","ChunkRange32ChunkAddress","createBufferFieldType","BufferField","createLiveSignatureFieldType","getLiveSignatureByteLength","_createBufferFieldTyp","LiveSignatureField","inherits","createIntegrityHashFieldType","_createBufferFieldTyp2","IntegrityHashField","createEncoding","ChunkAddress","IntegrityHash","LiveSignature","_protocolOptionRecord","_messageRecordTypes","Uint8ProtocolOption","Uint32ProtocolOption","VersionProtocolOption","_Uint8ProtocolOption","version","MinimumVersionProtocolOption","_Uint8ProtocolOption2","SwarmIdentifierProtocolOption","readUInt16BE","writeUInt16BE","ContentIntegrityProtectionMethodProtocolOption","_Uint8ProtocolOption3","method","MerkleHashTreeFunctionProtocolOption","_Uint8ProtocolOption4","LiveSignatureAlgorithmProtocolOption","_Uint8ProtocolOption5","ChunkAddressingMethodProtocolOption","_Uint8ProtocolOption6","_this8","LiveDiscardWindowProtocolOption","_Uint32ProtocolOption","_this9","SupportedMessagesProtocolOption","_this10","messageTypes","filter","byte","j","Boolean","keys","bitmapByteLength","bitmap","toBitmap","ChunkSizeProtocolOption","_Uint32ProtocolOption2","_this11","protocolOptionRecordTypes","defineProperty","HandshakeMessage","code","option","RecordType","reduce","Timestamp","seconds","readInt32BE","nanoseconds","writeInt32BE","DataMessage","dataLength","rangeByteLength","AddressMessage","AckMessage","HaveMessage","_AddressMessage","_this12","IntegrityMessage","SignedIntegrityMessage","RequestMessage","_AddressMessage2","_this13","CancelMessage","_AddressMessage3","_this14","EmptyMessage","ChokeMessage","_EmptyMessage","_this15","UnchokeMessage","_EmptyMessage2","_this16","messageRecordTypes","Messages","messageType","message","isArray","Datagram","messages","datagram","createMask","bits","mask","applyMask","BitArray","resize","distance","unsafelySetRange","byteIndex","bitIndex","byteOffset","adjustOffset","startByteIndex","getByteIndex","endByteIndex","startBitIndex","getBitIndex","endBitIndex","unsafelySetIndexRange","startMask","endMask","firstBit","lastBit","Flow","lastVirtualFinish","nextVirtualFinish","queue","wfq","Queue","rate","totalQueueSize","flows","flow","splice","computeWeight","virtualFinish","minVirtualFinish","getNextScheduledFlow","task","AvailabilityMap","_ref$end","BinRingBuffer","_RingBuffer","esm_get","RateMeter","windowMs","sampleWindowMs","firstSampleWindow","lastSampleWindow","sum","sampleWindow","adjustSampleWindow","accumulatedMs","ChunkRateMeter","_RateMeter","lastEndBin","lastHeadBin","RequestFlow","_wfq$Flow","queueSize","RequestQueue","_wfq$Queue","remove","result","SchedulerChunkRequestMap","valueByBin","head","tail","createdAt","_ref9","SchedulerPeerState","requestFlow","lastChunkTime","requestTimes","sentRequests","timeouts","invalidChunks","Scheduler","peerCount","timers","lastExportedBin","priorityBinThreshold","sendDelay","nextSendTime","nextSendTimeout","isReady","firstLoadedChunk","firstRequestedChunk","lastAvailableBin","planFor","dip","peer_remoteId","peer_localId","swift_rtt","swift_rttvar","swift_chunkIntervalMean","swift_cwnd","ledbat_cwnd","ledbat_cto","ledbat_currentDelay","ledbat_baseDelay","ledbat_rttMean","ledbat_rttVar","ledbat_rtt","ledbat_flightSize","picker_startBin","picker_lastAvailableBin","minIncompleteBin","picker_firstLoadedChunk","picker_firstRequestedChunk","timeoutThreshold","cancelledRequests","peek","pop","_ref10","onDataLoss","digestDelaySamples","_peerState$peer","requestAddresses","random","insert","firstRequestedBin","_ref11","sendCancel","sendRequest","requestedAddress","requestedChunk","sentAt","addSent","sendChunk","sendInterval","addFlow","_ref12","removeFlow","_ref13","bins","getPeerState","chunkInterval","requestTime","addRttSample","_ref14","sendHave","nextExportedBin","_ref15","addDelaySample","sentChunk","genericEncoding","_uri$protocolOptions","protocolOptions","encoding","toBuffer","protocolOption","protocolOptionName","newBins","getNewCompleteBins","_newBins","minNewBin","maxNewBin","chunk","CONNECTING","AWAITING_HANDSHAKE","READY","CHOKED","DISCONNECTING","CLOSED","PeerDataHandlerContext","integrityVerifier","createVerifier","Peer","_this$handlers","createChannelId","handlers","handleHandshakeMessage","handleDataMessage","handleHaveMessage","handleAckMessage","handleIntegrityMessage","handleSignedIntegrityMessage","handleRequestMessage","handleCancelMessage","handleChokeMessage","handleUnchokeMessage","sendBuffer","addPeer","sendHandshake","removePeer","context","toArray","handler","handshake","objectSpread","setLiveDiscardWindow","verifyProtocolOptions","getRecentChunks","computeOneWayDelay","markChunkReceived","getContentIntegrityVerifier","verifyChunk","markChunkVerified","emitNewData","markChunkRejected","markChunkAvailable","markSendAcked","setHash","setHashSignature","enqueueRequest","cancelRequest","addresses","_len2","_key2","constituentSignatures","reverse","getSignatureHash","round","SwarmSet","setMaxListeners","swarmIdToKey","channels","Channel","_EventEmitter3","peers","handleSwarmInsert","getOrCreatePeer","assertThisInitialized","liveSwarms","handleClose","p","createPeer","destroyPeer","handleRemove","isInitialized","removedSwarm","NUMBER_OF_NODES_PER_BUCKET","KBucket","numberOfNodesPerKBucket","localNodeId","allChannels","handlePing","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleRemoved","handleUpdated","handleAdded","knownPeerIds","channelMap","seenIds","LRU","knownRoutes","maxAge","callbacks","handlePeersRequest","handlePingRequest","handleTraceRequest","handleCallbackResponse","startPeerRequests","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","stopPeerRequests","removeAllListeners","peerRequestIvl","ids","retry","sendPeerRequest","newChannel","isOpen","addChannel","getChannel","removeChannel","add","arrayBufferToHex","oldChannel","idHex","bufferMessages","handleOpen","removeEventListener","req","_req","trace","res","re","forwardMessage","hops","sendRaw","reqCallback","count","handlePeersResponse","_ref5$data","_ref5$data$count","fromId","closest","randomBytes","knownRoute","vectorClock","lastPing","idx","_","SubChannel","peerId","ReadyStates","OPEN","_ref11$data","protocolOptionToKey","_protocolOptionToKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__","URLSafeBase64","encode","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","join","uriString","startsWith","args","substring","split","_query$split","_query$split2","decodeURIComponent","arg","parseFloat","xt","decode","comparator","mid","order"],"mappings":"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","file":"static/js/main.17900e7e.chunk.js","sourcesContent":["import invert from 'lodash.invert';\n\nexport const MaxChannelId = 0xffffffff;\n\nexport const ProtocolOptions = {\n  Version: 0,\n  MinimumVersion: 1,\n  SwarmIdentifier: 2,\n  ContentIntegrityProtectionMethod: 3,\n  MerkleHashTreeFunction: 4,\n  LiveSignatureAlgorithm: 5,\n  ChunkAddressingMethod: 6,\n  LiveDiscardWindow: 7,\n  SupportedMessages: 8,\n  ChunkSize: 9,\n  EndOption: 255,\n};\n\nexport const Version = {\n  RFC7574: 1,\n};\n\nexport const ContentIntegrityProtectionMethod = {\n  None: 0,\n  MerkleHashTree: 1,\n  SignAll: 2,\n  UnifiedMerkleTree: 3,\n};\n\nexport const MerkleHashTreeFunction = {\n  SHA1: 0,\n  SHA224: 1,\n  SHA256: 2,\n  SHA384: 3,\n  SHA512: 4,\n};\n\nexport const LiveSignatureAlgorithm = {\n  RSASHA1: 5,\n  RSASHA256: 8,\n  ECDSAP256SHA256: 13,\n  ECDSAP384SHA384: 14,\n};\n\nexport const ChunkAddressingMethod = {\n  Bin32: 0,\n  ByteRange64: 1,\n  ChunkRange32: 2,\n  Bin64: 3,\n  ChunkRange64: 4,\n};\n\nexport const VariableChunkSize = 0xffffffff;\n\nexport const MessageTypes = {\n  HANDSHAKE: 0,\n  DATA: 1,\n  ACK: 2,\n  HAVE: 3,\n  INTEGRITY: 4,\n  PEX_RESv4: 5,\n  PEX_REQ: 6,\n  SIGNED_INTEGRITY: 7,\n  REQUEST: 8,\n  CANCEL: 9,\n  CHOKE: 10,\n  UNCHOKE: 11,\n  PEX_RESv6: 12,\n  PEX_REScert: 13,\n};\n\n[\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n].forEach(enumType => {\n  const names = invert(enumType);\n  enumType.name = value => names[value] || 'UNDEFINED';\n});\n","import React, {useEffect, useState} from 'react';\nimport URI from '../ppspp/uri';\nimport {Client} from '../client';\nimport {ConnManager} from '../wrtc';\nimport PlayButton from './PlayButton';\nimport {useTimeout, useAsync} from 'react-use';\nimport useQuery from '../hooks/useQuery';\nimport VideoPlayer from './VideoPlayer';\n\nimport './App.scss';\n\nconst NoiseLogger = React.lazy(() => import('./NoiseLogger'));\nconst PubSubLogger = React.lazy(() => import('./PubSubLogger'));\n\nconst getDefaultBootstrapAddress = () => {\n  const proto = window.location.protocol === 'https:' ? 'wss' : 'ws';\n  const host = process.env.NODE_ENV === 'development'\n    ? window.location.hostname + ':8080'\n    : window.location.host;\n  return `${proto}://${host}`;\n};\n\nconst useSwarm = ({ppsppClient} = {}) => {\n  const [swarm, setSwarm] = useState(null);\n  const join = uri => setSwarm(ppsppClient.joinSwarm(URI.parse(uri)));\n  return [swarm, join];\n};\n\nconst App = ({\n  location,\n  match: {params},\n  clientTimeoutMs = 5000,\n}) => {\n  const query = useQuery(location.search);\n  const autoPlay = 'autoplay' in query;\n  const bootstrapAddress = query.bootstrap || getDefaultBootstrapAddress();\n  const swarmName = params.name;\n\n  const clientTimeout = useTimeout(clientTimeoutMs);\n  const {\n    loading: clientLoading,\n    error: clientError,\n    value: client,\n  } = useAsync(() =>  Client.create(new ConnManager(bootstrapAddress)), []);\n\n  const [swarm, joinSwarm] = useSwarm(client);\n\n  const swarmDesc = client?.bootstrap.swarms.find(desc => desc.name === swarmName);\n  const error = clientError || (autoPlay && clientTimeout) || !(clientLoading || swarmDesc);\n\n  useEffect(() => {\n    if (autoPlay && swarmDesc) {\n      setImmediate(() => joinSwarm(swarmDesc.uri));\n    }\n  }, [autoPlay, swarmDesc]);\n\n  if (swarm) {\n    const Component = {\n      'application/octet-stream': NoiseLogger,\n      'application/json': PubSubLogger,\n      'video/mpeg-ts': VideoPlayer,\n    }[swarmDesc.contentType];\n\n    return (\n      <Component swarm={swarm} />\n    );\n  }\n\n  return (\n    <>\n      <div className=\"idle\">\n        <div className=\"noise\"></div>\n      </div>\n      <PlayButton\n        disabled={clientLoading || autoPlay || error}\n        onClick={() => joinSwarm(swarmDesc.uri)}\n        pulse={!clientLoading && !autoPlay}\n        flicker={clientLoading || autoPlay}\n        error={error}\n        blur\n      />\n    </>\n  );\n};\n\nexport default App;\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport approx from 'approximate-number';\nimport {scaleLinear} from 'd3-scale';\n\nimport './index.css';\n\nclass ToggleButton extends Component {\n  static defaultProps = {\n    expanded: false,\n  };\n\n  render() {\n    const buttonClasses = classNames({\n      'diagnostic_menu__toggle_button': true,\n      'diagnostic_menu__toggle_button--expanded': this.props.expanded,\n    });\n\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={buttonClasses}\n      />\n    );\n  }\n}\n\nconst formatNumber = value => isFinite(value) ? approx(value) : String(value);\n\n// TODO: total downloaded\n// TODO: total discarded\n// TODO: upload/download rate\nclass SwarmState extends Component {\n  render() {\n    const {scheduler} = this.props.value;\n\n    const values = [\n      {\n        key: 'totalSends',\n        value: formatNumber(scheduler.totalSends),\n      },\n      {\n        key: 'totalRequests',\n        value: formatNumber(scheduler.totalRequests),\n      },\n      {\n        key: 'totalRequestsReceived',\n        value: formatNumber(scheduler.totalRequestsReceived),\n      },\n      {\n        key: 'totalDroppedRequests',\n        value: formatNumber(scheduler.totalDroppedRequests),\n      },\n      {\n        key: 'totalReceived',\n        value: formatNumber(scheduler.totalReceived),\n      },\n      {\n        key: 'totalAdded',\n        value: formatNumber(scheduler.totalAdded),\n      },\n      {\n        key: 'totalCancelled',\n        value: formatNumber(scheduler.totalCancelled),\n      },\n      {\n        key: 'ackUnknownSend',\n        value: formatNumber(scheduler.ackUnknownSend),\n      },\n      {\n        key: 'lastCompletedBin',\n        value: scheduler.lastCompletedBin,\n      },\n      {\n        key: 'picker.firstLoadedChunk',\n        value: scheduler.loadedChunks.min(),\n      },\n      {\n        key: 'picker.firstRequestedChunk',\n        value: scheduler.requestedChunks.min(),\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(scheduler.chunkRate.value() * 1000) + '/s',\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    return (\n      <div className=\"swarm_state__container\">\n        <table>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass PeerStateTable extends Component {\n  render() {\n    const peerState = this.props.value;\n\n    const values = [\n      {\n        key: 'chunkIntervalMean',\n        value: formatNumber(peerState.chunkIntervalMean.value()),\n      },\n      {\n        key: 'wasteRate',\n        value: formatNumber(peerState.wasteRate.value() * 1000) + '/s',\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(peerState.chunkRate.value() * 1000) + '/s',\n      },\n      {\n        key: 'ledbat.baseDelay',\n        value: formatNumber(peerState.ledbat.baseDelay.getMin()),\n      },\n      {\n        key: 'ledbat.currentDelay',\n        value: formatNumber(peerState.ledbat.currentDelay.getMin()),\n      },\n      {\n        key: 'ledbat.rttMean',\n        value: formatNumber(peerState.ledbat.rttMean.value()),\n      },\n      {\n        key: 'ledbat.rttVar',\n        value: formatNumber(peerState.ledbat.rttVar.value()),\n      },\n      {\n        key: 'ledbat.cwnd',\n        value: formatNumber(peerState.ledbat.cwnd),\n      },\n      {\n        key: 'ledbat.cto',\n        value: formatNumber(peerState.ledbat.cto),\n      },\n      {\n        key: 'ledbat.flightSize',\n        value: formatNumber(peerState.ledbat.flightSize),\n      },\n      {\n        key: 'validChunks',\n        value: formatNumber(peerState.validChunks),\n      },\n      {\n        key: 'requestQueue.length',\n        value: formatNumber(peerState.requestQueue.length),\n      },\n      {\n        key: 'requestedChunks.length',\n        value: formatNumber(peerState.requestedChunks.length),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    const {\n      startBin,\n      endBin,\n    } = this.props;\n\n    rows.push(\n      <tr key=\"availableChunks\">\n        <td colSpan=\"2\">\n          Available\n          <AvailabilityMapChart\n            value={this.props.value.availableChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"sentChunks\">\n        <td colSpan=\"2\">\n          Sent\n          <AvailabilityMapChart\n            value={this.props.value.sentChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"receivedChunks\">\n        <td colSpan=\"2\">\n          Received\n          <AvailabilityMapChart\n            value={this.props.value.receivedChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    return (\n      <table>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nclass AvailabilityMapChart extends Component {\n  static defaultProps = {\n    width: 300,\n    height: 20,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.canvas = React.createRef();\n    this.scratchCanvas = document.createElement('canvas');\n  }\n\n  componentDidUpdate() {\n    if (!this.canvas.current) {\n      return;\n    }\n\n    const {value} = this.props;\n    const min = isNaN(this.props.startBin)\n      ? value.min()\n      : this.props.startBin;\n    const max = isNaN(this.props.endBin)\n      ? value.max()\n      : this.props.endBin;\n\n    if (!isFinite(min) || !isFinite(max) || isNaN(min) || isNaN(max)) {\n      return;\n    }\n\n    this.scratchCanvas.height = this.props.height;\n    this.scratchCanvas.width = this.props.width;\n\n    const ctx = this.scratchCanvas.getContext('2d');\n\n    const scale = scaleLinear()\n      .domain([min, max])\n      .range([0, this.props.width]);\n\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, this.props.width, this.props.height);\n\n    ctx.fillStyle = '#ccc';\n\n    let lastStart = -1;\n    for (let i = min; i <= max; i += 2) {\n      if (!value.values.get((i + 2) / 2) || i === max) {\n        if (lastStart !== -1) {\n          ctx.fillRect(scale(lastStart), 0, scale(i) - scale(lastStart), 20);\n\n          lastStart = -1;\n        }\n      } else if (lastStart === -1) {\n        lastStart = i;\n      }\n    }\n\n    this.canvas.current.getContext('2d').drawImage(this.scratchCanvas, 0, 0);\n  }\n\n  render() {\n    return (\n      <canvas\n        height={this.props.height}\n        width={this.props.width}\n        ref={this.canvas}\n      />\n    );\n  }\n}\n\nclass PeerState extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n  }\n\n  render() {\n    let table;\n    if (this.state.expanded) {\n      table = (\n        <PeerStateTable\n          value={this.props.value}\n          startBin={this.props.startBin}\n          endBin={this.props.endBin}\n        />\n      );\n    }\n\n    return (\n      <div className=\"peer_state__container\">\n        <div className=\"peer_state__header\">\n          <ToggleButton\n            onClick={this.handleButtonClick}\n            expanded={this.state.expanded}\n          />\n          <h4 className=\"peer_state__title\">\n            {this.props.value.peer.localId} : {this.props.value.peer.remoteId}\n          </h4>\n        </div>\n        {table}\n      </div>\n    );\n  }\n}\n\nclass DiagnosticMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n\n    this.scheduleUpdate();\n  }\n\n  handleUpdate = () => {\n    if (this.state.expanded) {\n      this.forceUpdate(this.scheduleUpdate);\n    }\n  }\n\n  scheduleUpdate = () => {\n    window.requestAnimationFrame(this.handleUpdate);\n  }\n\n  render() {\n    const containerClasses = classNames(\n      this.props.containerClass,\n      {\n        'diagnostic_menu__container': true,\n        'diagnostic_menu__container--expanded': this.state.expanded,\n      },\n    );\n\n    const {\n      lastCompletedBin,\n      liveDiscardWindow,\n    } = this.props.swarm.scheduler;\n    const startBin = lastCompletedBin - liveDiscardWindow;\n    const endBin = lastCompletedBin + liveDiscardWindow;\n\n    let swarmState;\n    let peerStates;\n    if (this.state.expanded) {\n      swarmState = (\n        <SwarmState\n          value={this.props.swarm}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      );\n\n      peerStates = Object.entries(this.props.swarm.scheduler.peerStates).map(([key, peerState]) => (\n        <PeerState\n          key={key}\n          value={peerState}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      ));\n    }\n\n    return (\n      <div className={containerClasses}>\n        <ToggleButton\n          onClick={this.handleButtonClick}\n          expanded={this.state.expanded}\n        />\n        {swarmState}\n        {peerStates}\n      </div>\n    );\n  }\n}\n\nexport default DiagnosticMenu;\n","import {EventEmitter} from 'events';\nimport Injector from './ppspp/injector';\n\nconst DELIMITER = Buffer.from('4c93bf00ae13c37e5df3b7a9cea0413521fe1b08a627d065d7180b9d0738c666', 'hex');\nconst DELIMITER_LENGTH = DELIMITER.length;\nconst HEADER_INSTANCE_LENGTH = 37;\n\nexport class ChunkedWriteStream extends EventEmitter {\n  constructor(injector) {\n    super();\n    this.injector = injector;\n  }\n\n  write(buffer) {\n    const length = Buffer.alloc(4);\n    length.writeUInt32BE(buffer.length);\n    this.injector.appendData(Buffer.concat(\n      [\n        DELIMITER,\n        Buffer.from([0]),\n        length,\n        DELIMITER,\n        Buffer.from([1]),\n        length,\n      ],\n      HEADER_INSTANCE_LENGTH * 2,\n    ));\n\n    this.injector.appendData(buffer);\n  }\n\n  flush() {\n    this.injector.flush();\n  }\n}\n\nexport class ChunkedWriteStreamInjector extends EventEmitter {\n  start({\n    name = 'chunked-stream',\n    bitRate = 3500000,\n    ...injectorOptions\n  } = {}) {\n    this.name = name;\n\n    const data = Buffer.alloc(bitRate / 8);\n    data.fill(255);\n\n    Injector.create(injectorOptions).then(injector => {\n      this.injector = injector;\n\n      const writer = new ChunkedWriteStream(injector);\n      this.intervalId = setInterval(() => writer.write(data), 1000);\n      this.emit('publish', {\n        name,\n        contentType: 'application/octet-stream',\n        injector,\n      });\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', {name: this.name, injector: this.injector});\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n\nclass AbstractChunkedReadStream extends EventEmitter {\n  constructor(swarm) {\n    super();\n\n    this.swarm = swarm;\n\n    this.handleWarmupSwarmData = this.handleWarmupSwarmData.bind(this);\n    this.handleSwarmData = this.handleSwarmData.bind(this);\n\n    this.chunkBufferLength = 0;\n    this.nextDataOffset = 0;\n    this.nextDataLength = 0;\n\n    this.swarm.on('data', this.handleWarmupSwarmData);\n  }\n\n  handleWarmupSwarmData(data, offset = 0) {\n    let nextChunkOffset = offset;\n\n    for (let i = 0; i < data.length; i ++) {\n      const delimiterIndex = data[i].indexOf(DELIMITER, nextChunkOffset);\n      nextChunkOffset = 0;\n      if (delimiterIndex === -1 || delimiterIndex + HEADER_INSTANCE_LENGTH > data[i].length) {\n        continue;\n      }\n\n      this.swarm.removeListener('data', this.handleWarmupSwarmData);\n      this.swarm.on('data', this.handleSwarmData);\n\n      this.readHeader(data[i], delimiterIndex);\n      this.handleSwarmData(data.slice(i));\n\n      break;\n    }\n  }\n\n  readHeader(data, offset) {\n    const instance = data.readUInt8(offset + DELIMITER_LENGTH);\n    this.nextDataOffset = offset + HEADER_INSTANCE_LENGTH * (2 - instance);\n    this.nextDataLength = data.readUInt32BE(offset + DELIMITER_LENGTH + 1);\n  }\n\n  handleSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const lastChunkOffset = this.chunkBufferLength;\n\n      this.chunkBufferLength += data[i].length;\n\n      const nextDataEnd = this.nextDataOffset + this.nextDataLength;\n      if (this.chunkBufferLength < nextDataEnd) {\n        this.handleData(data[i], lastChunkOffset);\n        continue;\n      }\n\n      const lastChunkEnd = nextDataEnd - lastChunkOffset;\n      this.handleEndData(data[i], lastChunkEnd);\n\n      // find the next header or defer to handleWarmupSwarmData if it hasn't arrived\n      if (this.chunkBufferLength - nextDataEnd <= HEADER_INSTANCE_LENGTH) {\n        this.swarm.removeListener('data', this.handleSwarmData);\n        this.swarm.on('data', this.handleWarmupSwarmData);\n\n        this.chunkBufferLength = 0;\n        this.handleWarmupSwarmData(data.slice(i), lastChunkEnd);\n        return;\n      }\n\n      this.chunkBufferLength = 0;\n      this.readHeader(data[i], lastChunkEnd);\n      i--;\n    }\n  }\n}\n\nexport class ChunkedFragmentedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.firstEmitted = false;\n  }\n\n  handleData(data, lastChunkOffset) {\n    if (!this.firstEmitted) {\n      if (this.chunkBufferLength > this.nextDataOffset) {\n        this.emit('start', data.slice(this.nextDataOffset - lastChunkOffset));\n        this.firstEmitted = true;\n      }\n\n      return;\n    }\n\n    this.emit('data', data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.emit('end', data.slice(0, lastChunkEnd));\n    this.firstEmitted = false;\n  }\n}\n\nexport class ChunkedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.chunkBuffer = [];\n  }\n\n  handleData(data) {\n    this.chunkBuffer.push(data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.chunkBuffer.push(data);\n\n    // trim export data range and emit\n    const chunkSlice = this.chunkBuffer.slice();\n\n    chunkSlice[chunkSlice.length - 1] = chunkSlice[chunkSlice.length - 1].slice(0, lastChunkEnd);\n\n    let firstChunkStart = this.nextDataOffset;\n    if (firstChunkStart >= chunkSlice[0].length) {\n      firstChunkStart -= chunkSlice[0].length;\n      chunkSlice.shift();\n    }\n    chunkSlice[0] = chunkSlice[0].slice(firstChunkStart);\n\n    this.emit(\n      'data',\n      {\n        chunks: chunkSlice,\n        length: this.nextDataLength,\n      },\n    );\n\n    this.chunkBuffer = [];\n  }\n}\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport hexToUint8Array from './hexToUint8Array';\n\nexport class Client {\n  constructor(connManager, conn, bootstrap) {\n    const dhtClientId = hexToUint8Array(bootstrap.id);\n    const bootstrapId = hexToUint8Array(bootstrap.bootstrapId);\n\n    this.connManager = connManager;\n    this.bootstrap = bootstrap;\n    this.swarmUri = bootstrap.swarmUri;\n\n    const client = connManager.createClient(conn);\n\n    this.dhtClient = new dht.Client(dhtClientId);\n    this.dhtClient.on('peers.discover', this.handlePeersDiscover.bind(this));\n    this.dhtClient.on('receive.connect.request', this.handleReceiveConnectRequest.bind(this));\n    this.dhtClient.createChannel(bootstrapId, client.createDataChannel('dht'));\n\n    this.ppsppClient = new ppspp.Client();\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    client.init();\n  }\n\n  static create(connManager) {\n    return connManager.bootstrap().then(({data, conn}) => {\n      return new Client(connManager, conn, data);\n    });\n  }\n\n  handlePeersDiscover(id) {\n    // console.log('creating client for', ids);\n    const sub = new dht.SubChannel(this.dhtClient, id);\n    const client = this.connManager.createClient(sub);\n\n    const dhtChannel = client.createDataChannel('dht');\n    const ppsppChannel = client.createDataChannel('ppspp');\n\n    const timeout = setTimeout(() => client.close(), 10000);\n    const init = () => {\n      clearTimeout(timeout);\n      client.init();\n    };\n\n    dhtChannel.addEventListener('close', () => client.close());\n\n    this.dhtClient.createChannel(id, dhtChannel);\n    this.ppsppClient.createChannel(ppsppChannel);\n\n    this.dhtClient.send(id, 'connect.request', {channelId: sub.id}, init);\n  }\n\n  handleReceiveConnectRequest({data: {channelId, from}, callback}) {\n    // if (this.dhtClient.channels.count() > 10) {\n    //   return;\n    // }\n\n    // console.log('handleReceiveConnectRequest', {channelId, from, callback});\n    const id = new hexToUint8Array(from);\n    const client = this.connManager.createClient(new dht.SubChannel(this.dhtClient, id, channelId));\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.ppsppClient.createChannel(channel);\n      }\n    });\n\n    callback({});\n  }\n}\n","import {ChunkAddressingMethod} from './constants';\n\nexport default class Address {\n  constructor(bin = 0, treeBounds = Address.binBounds(bin)) {\n    this.bin = bin;\n    [this.start, this.end] = treeBounds;\n  }\n\n  containsBin(bin) {\n    return this.start <= bin && bin <= this.end;\n  }\n\n  getChunkCount() {\n    return (this.end - this.start) / 2 + 1;\n  }\n\n  static from(address) {\n    if (address instanceof Address) {\n      return address;\n    }\n\n    switch (address.type) {\n      case ChunkAddressingMethod.Bin32:\n        return new Address(address.value);\n      case ChunkAddressingMethod.ChunkRange32: {\n        const {start, end} = address;\n        return new Address((end - start) / 2, [start, end]);\n      }\n      default:\n        throw new Error('unsupported address type');\n    }\n  }\n\n  static binBounds(bin) {\n    return [\n      bin & (bin + 1),\n      (bin | (bin + 1)) - 1,\n    ];\n  }\n}\n","import {EventEmitter} from 'events';\nimport crypto from 'crypto';\nimport {generateKeyPair} from './integrity';\nimport URI from './uri';\nimport {\n  ChunkAddressingMethod,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ProtocolOptions,\n} from './constants';\nimport {Swarm} from '../ppspp';\n\nexport default class Injector {\n  constructor(swarm, chunkSize, chunksPerSignature) {\n    this.swarm = swarm;\n    this.chunkSize = chunkSize;\n    this.chunksPerSignature = chunksPerSignature;\n    this.inputBuffer = [];\n    this.inputBufferSize = 0;\n    this.outputResult = Promise.resolve();\n  }\n\n  appendData(data) {\n    this.inputBuffer.push(data);\n    this.inputBufferSize += data.length;\n\n    const signatureSize = this.chunkSize * this.chunksPerSignature;\n    if (this.inputBufferSize < signatureSize) {\n      return;\n    }\n\n    let buf = Buffer.concat(this.inputBuffer, this.inputBufferSize);\n    while (buf.length > signatureSize) {\n      this.outputChunks(buf.slice(0, signatureSize));\n      buf = buf.slice(signatureSize);\n    }\n\n    this.inputBuffer = [buf];\n    this.inputBufferSize = buf.length;\n  }\n\n  flush() {\n    if (this.inputBufferSize === 0) {\n      return;\n    }\n\n    const signatureSize = this.chunkSize * this.chunksPerSignature;\n    let buf = Buffer.concat(this.inputBuffer, this.inputBufferSize);\n    while (buf.length > 0) {\n      this.outputChunks(buf.slice(0, Math.min(buf.length, signatureSize)));\n      buf = buf.slice(signatureSize);\n    }\n\n    this.inputBuffer = [];\n    this.inputBufferSize = 0;\n  }\n\n  outputChunks(buf) {\n    var chunks = [];\n    for (let i = 0; i < this.chunksPerSignature; i ++) {\n      const offset = i * this.chunkSize;\n      chunks.push(buf.slice(offset, offset + this.chunkSize));\n    }\n\n    this.outputResult = Promise.all([\n      this.swarm.contentIntegrity.appendSubtree(chunks),\n      this.outputResult,\n    ]).then(([subtree]) => {\n      this.swarm.chunkBuffer.setRange(subtree.rootAddress, chunks);\n      this.swarm.scheduler.markChunksLoaded(subtree.rootAddress);\n    });\n  }\n\n  static create(options = {}) {\n    const {\n      chunkSize = 8 * 1024,\n      chunksPerSignature = 64,\n      liveDiscardWindow = Math.ceil(15 * 3500 * 1024 / chunkSize),\n      chunkAddressingMethod = ChunkAddressingMethod.Bin32,\n      contentIntegrityProtectionMethod = ContentIntegrityProtectionMethod.UnifiedMerkleTree,\n      merkleHashTreeFunction = MerkleHashTreeFunction.SHA256,\n      liveSignatureAlgorithm = LiveSignatureAlgorithm.ECDSAP256SHA256,\n    } = options;\n\n    return generateKeyPair(liveSignatureAlgorithm).then(({swarmId, privateKey}) => {\n      const uri = new URI(\n        swarmId,\n        {\n          [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n          [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n          [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n          [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n          [ProtocolOptions.ChunkSize]: chunkSize,\n        }\n      );\n\n      console.log('swarm uri:', uri.toString());\n\n      const clientOptions = {\n        liveDiscardWindow,\n        privateKey,\n        uploadRateLimit: 10e6,\n      };\n\n      return new Swarm(uri, clientOptions);\n    }).then(swarm => new Injector(swarm, chunkSize, chunksPerSignature));\n  }\n}\n\nexport class NoiseInjector extends EventEmitter {\n  constructor(dataRate = 3.5e6 / 8, interval = 250) {\n    super();\n    this.dataRate = dataRate * (interval / 1000);\n    this.interval = interval;\n  }\n\n  start() {\n    const data = Buffer.alloc(this.dataRate);\n    crypto.randomFillSync(data);\n\n    Injector.create().then(injector => {\n      this.intervalId = setInterval(() => injector.appendChunk(data), this.interval);\n      this.injector = injector;\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n","import {EventEmitter} from 'events';\nimport WebSocket from './compat/ws';\nimport {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from './compat/wrtc';\n\nexport class ConnManager {\n  constructor(bootstrapAddress) {\n    this.bootstrapAddress = bootstrapAddress;\n  }\n\n  bootstrap() {\n    return new Promise((resolve, reject) => {\n      const conn = new WebSocket(this.bootstrapAddress);\n      conn.onerror = reject;\n      conn.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'bootstrap') {\n          resolve({data, conn});\n        } else {\n          reject(new Error(`expected bootstrap, received: ${event.data}`));\n        }\n      };\n    });\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    // firefox seems to continue generating ice messages after the datachannel\n    // has opened...\n    mediator.once('error', () => conn.close());\n    client.once('open', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    // console.log('mediator message', data);\n\n    switch (data.type) {\n      case 'offer':\n      case 'answer':\n        this.emit('remotedescription', new RTCSessionDescription(data));\n        break;\n      case 'icecandidate':\n        if (data.sdp && data.sdp.candidate) {\n          this.emit('icecandidate', new RTCIceCandidate(data.sdp));\n        }\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  sendOffer(event) {\n    this.send(event);\n  }\n\n  sendAnswer(event) {\n    this.send(event);\n  }\n\n  sendIceCandidate(event) {\n    if (event.candidate) {\n      this.send({\n        type: 'icecandidate',\n        sdp: event.candidate,\n      });\n    }\n  }\n\n  send(event) {\n    if (this.conn.readyState !== 1) {\n      console.log('mediator tried to send after closing its connection');\n      // console.log('send error', this.conn);\n      // console.trace();\n      // this.emit('error', new Error('connection in invalid state'));\n      return;\n    }\n\n    this.conn.send(JSON.stringify(event));\n  }\n}\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.initialized = false;\n    this.waitingChannels = 0;\n\n    this.peerConn = new RTCPeerConnection({\n      iceServers: [{urls: 'stun:stun.l.google.com:19302'}],\n    });\n\n    this.peerConn.addEventListener('icecandidate', candidate => this.mediator.sendIceCandidate(candidate));\n    this.peerConn.addEventListener('datachannel', this.handleDataChannel.bind(this));\n    this.peerConn.addEventListener('iceconnectionstatechange', this.handleIceConnectionStateChange.bind(this));\n\n    mediator.once('error', () => this.peerConn.close());\n    mediator.on('icecandidate', candidate => this.addIceCandidate(candidate));\n\n    this._ready = new Promise((resolve, reject) => {\n      mediator.on('remotedescription', description => {\n        this.peerConn.setRemoteDescription(description)\n          .then(() => {\n            resolve();\n            this.createAnswer();\n          })\n          .catch(reject);\n      });\n    });\n  }\n\n  createAnswer() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n\n    this.peerConn.createAnswer()\n      .then((description) => {\n        this.peerConn.setLocalDescription(description);\n        this.mediator.sendAnswer(description);\n      })\n      .catch(error => console.error(error));\n  }\n\n  addIceCandidate(candidate) {\n    this._ready.then(() => this.peerConn.addIceCandidate(candidate));\n  }\n\n  handleDataChannel(event) {\n    // event.channel.addEventListener('close', e => console.log('< begin close event handlers'));\n    event.channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    event.channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('< received data channel', event);\n    // event.channel.addEventListener('error', e => console.log('< data channel emitted error', e));\n    // event.channel.addEventListener('open', e => console.log('< data channel opened', e));\n    // event.channel.addEventListener('bufferedamountlow', e => console.log('< data channel bufferamountlow', e));\n    // event.channel.addEventListener('close', e => console.log('< data channel closed', e));\n\n    this.emit('datachannel', event);\n  }\n\n  createDataChannel(label, options = {}) {\n    options = {\n      ordered: true,\n      maxRetransmits: 10,\n      ...options,\n    };\n\n    const channel = this.peerConn.createDataChannel(label, options);\n    // channel.addEventListener('close', e => console.log('> begin close event handlers'));\n    channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('> received data channel', {channel});\n    // channel.addEventListener('error', e => console.log('> data channel emitted error', e));\n    // channel.addEventListener('open', e => console.log('> data channel opened', e));\n    // channel.addEventListener('bufferedamountlow', e => console.log('> data channel bufferedamountlow', e));\n    // channel.addEventListener('close', e => console.log('> data channel closed', e));\n\n    return channel;\n  }\n\n  resolveWaitingChannel() {\n    if (-- this.waitingChannels === 0) {\n      this.emit('open');\n    }\n  }\n\n  handleIceConnectionStateChange() {\n    // this seems to be the most reliable way to get connection state in chrome\n    if (this.peerConn.iceConnectionState === 'failed') {\n      this.peerConn.close();\n    }\n  }\n\n  init() {\n    this.peerConn.createOffer()\n      .then(offer => {\n        this.initialized = true;\n        // console.log('initial offer', offer);\n        this.peerConn.setLocalDescription(offer);\n        this.mediator.sendOffer(offer);\n      });\n  }\n\n  close() {\n    // console.log('wrtc client closed');\n    // console.trace();\n    this.peerConn.close();\n    this.emit('close');\n  }\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","\n\nimport {useMemo} from 'react';\nimport qs from 'qs';\n\nconst useQuery = queryString => useMemo(() => {\n  return qs.parse(queryString, {ignoreQueryPrefix: true}) || {};\n}, [queryString]);\n\nexport default useQuery;\n","import {useState} from 'react';\nimport muxjs from 'mux.js';\nimport {ChunkedFragmentedReadStream} from '../chunkedStream';\nimport {Buffer} from 'buffer';\n\nconst useSwarmMediaSource = swarm => {\n  const [mediaSource] = useState(() => {\n    const mediaSource = new MediaSource();\n    mediaSource.addEventListener('sourceopen', handleSourceOpen);\n    return mediaSource;\n  }, []);\n\n  function handleSourceOpen() {\n    const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"mp4a.40.5,avc1.64001F\"');\n    // sourceBuffer.addEventListener('updatestart', e => console.log(e));\n    // sourceBuffer.addEventListener('updateend', e => console.log(e));\n    sourceBuffer.addEventListener('error', e => console.log(e));\n\n    const videoSegments = [];\n    const appendBuffer = newSegment => {\n      if (newSegment !== undefined && (videoSegments.length !== 0 || sourceBuffer.updating)) {\n        videoSegments.push(newSegment);\n        return;\n      }\n\n      if (sourceBuffer.updating) {\n        return;\n      }\n\n      const segment = newSegment || videoSegments.shift();\n      if (segment === undefined) {\n        return;\n      }\n\n      try {\n        sourceBuffer.appendBuffer(segment);\n      } catch (e) {\n        videoSegments.unshift(segment);\n        setImmediate(appendBuffer);\n      }\n    };\n\n    sourceBuffer.addEventListener('updateend', () => appendBuffer());\n\n    const transmuxer = new muxjs.mp4.Transmuxer();\n    let initSet = false;\n    transmuxer.on('data', event => {\n      if (event.type === 'combined') {\n        const buf = initSet\n          ? event.data\n          : Buffer.concat([Buffer.from(event.initSegment), Buffer.from(event.data)]);\n        initSet = true;\n\n        appendBuffer(buf);\n      } else {\n        console.log('unhandled event', event.type);\n      }\n    });\n\n    const stream = new ChunkedFragmentedReadStream(swarm);\n    stream.on('start', data => transmuxer.push(data));\n    stream.on('data', data => transmuxer.push(data));\n    stream.on('end', data => {\n      transmuxer.push(data);\n      transmuxer.flush();\n    });\n  }\n\n  return mediaSource;\n};\n\nexport default useSwarmMediaSource;\n","import {useEffect, useRef, useState} from 'react';\n\nexport const VideoReadyState = {\n  // No information is available about the media resource.\n  HAVE_NOTHING: 0,\n  // Enough of the media resource has been retrieved that the metadata attributes\n  // are initialized. Seeking will no longer raise an exception.\n  HAVE_METADATA: 1,\n  // Data is available for the current playback position, but not enough to\n  // actually play more than one frame.\n  HAVE_CURRENT_DATA: 2,\n  // Data for the current playback position as well as for at least a little\n  // bit of time into the future is available (in other words, at least two frames of video, for example).\n  HAVE_FUTURE_DATA: 3,\n  // Enough data is available—and the download rate is high enough—that the\n  // media can be played through to the end without interruption.\n  HAVE_ENOUGH_DATA: 4,\n};\n\nconst useVideo = () => {\n  const ref = useRef();\n  const [loaded, setLoaded] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [paused, setPaused] = useState(false);\n  const [ended, setEnded] = useState(true);\n  const [waiting, setWaiting] = useState(true);\n  const [muted, setMuted] = useState(null);\n  const [volume, setVolume] = useState(null);\n  const [savedVolume, setSavedVolume] = useState(null);\n  const [readyState, setReadyState] = useState(0);\n\n  useEffect(() => {\n    if (ref.current == null) {\n      return;\n    }\n\n    setMuted(ref.current.muted);\n    setVolume(ref.current.volume);\n    setPaused(ref.current.paused);\n    setReadyState(ref.current.readyState);\n\n    console.log(ref);\n\n    ref.current.addEventListener('audioprocess', e => console.log(new Date().toUTCString(), 'audioprocess', e));\n    ref.current.addEventListener('canplay', e => console.log(new Date().toUTCString(), 'canplay', e));\n    ref.current.addEventListener('canplaythrough', e => console.log(new Date().toUTCString(), 'canplaythrough', e));\n    ref.current.addEventListener('complete', e => console.log(new Date().toUTCString(), 'complete', e));\n    ref.current.addEventListener('durationchange', e => console.log(new Date().toUTCString(), 'durationchange', e));\n    ref.current.addEventListener('emptied', e => console.log(new Date().toUTCString(), 'emptied', e));\n    ref.current.addEventListener('ended', e => console.log(new Date().toUTCString(), 'ended', e));\n    ref.current.addEventListener('loadeddata', e => console.log(new Date().toUTCString(), 'loadeddata', e));\n    ref.current.addEventListener('loadedmetadata', e => console.log(new Date().toUTCString(), 'loadedmetadata', e));\n    ref.current.addEventListener('pause', e => console.log(new Date().toUTCString(), 'pause', e));\n    ref.current.addEventListener('play', e => console.log(new Date().toUTCString(), 'play', e));\n    ref.current.addEventListener('playing', e => console.log(new Date().toUTCString(), 'playing', e));\n    ref.current.addEventListener('ratechange', e => console.log(new Date().toUTCString(), 'ratechange', e));\n    ref.current.addEventListener('seeked', e => console.log(new Date().toUTCString(), 'seeked', e));\n    ref.current.addEventListener('seeking', e => console.log(new Date().toUTCString(), 'seeking', e));\n    ref.current.addEventListener('stalled', e => console.log(new Date().toUTCString(), 'stalled', e));\n    ref.current.addEventListener('suspend', e => console.log(new Date().toUTCString(), 'suspend', e));\n    // ref.current.addEventListener('timeupdate', e => console.log(new Date().toUTCString(), 'timeupdate', e));\n    ref.current.addEventListener('volumechange', e => console.log(new Date().toUTCString(), 'volumechange', e));\n    ref.current.addEventListener('waiting', e => console.log(new Date().toUTCString(), 'waiting', e));\n    ref.current.addEventListener('readystatechange', e => console.log(new Date().toUTCString(), 'readystatechange', e));\n  }, [ref]);\n\n  const onEnded = () => {\n    setPlaying(false);\n    setEnded(false);\n    setWaiting(false);\n  };\n\n  const onPause = () => {\n    setPlaying(false);\n    setPaused(true);\n  };\n\n  const onPlaying = () => {\n    setPaused(false);\n    setPlaying(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onCanPlay = () => {\n    setWaiting(false);\n    setLoaded(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onCanPlayThrough = () => {\n    setWaiting(false);\n    setLoaded(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onVolumeChange = () => {\n    setVolume(ref.current.volume);\n  };\n\n  const onWaiting = () => {\n    setPlaying(false);\n    setWaiting(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onDurationChange = () => {\n    setReadyState(ref.current.readyState);\n  };\n\n  const onLoadedMetadata = (e) => {\n    setReadyState(ref.current.readyState);\n  };\n\n  const onLoadedData = () => {\n    setReadyState(ref.current.readyState);\n  };\n\n  // const onTimeUpdate = () => {\n  //   console.log({\n  //     buffered: ref.current.buffered,\n  //     seekable: ref.current.seekable,\n  //   });\n  // };\n\n  const play = async () => {\n    try {\n      await ref.current.play();\n    } catch (e) {\n      ref.current.muted = true;\n      try {\n        await ref.current.play();\n      } catch (e) {\n        console.warn('error playing video', e);\n      }\n    }\n  };\n\n  const mute = () => {\n    setSavedVolume(ref.current.volume);\n    ref.current.volume = 0;\n  };\n\n  const unmute = () => {\n    ref.current.volume = savedVolume || 0.5;\n  };\n\n  return [\n    {\n      readyState,\n      loaded,\n      playing,\n      paused,\n      ended,\n      waiting,\n      muted,\n      volume,\n    },\n    {\n      ref,\n      onEnded,\n      onPause,\n      onPlaying,\n      onCanPlay,\n      onCanPlayThrough,\n      onVolumeChange,\n      onWaiting,\n      onDurationChange,\n      onLoadedMetadata,\n      onLoadedData,\n      // onTimeUpdate,\n    },\n    {\n      play,\n      pause: () => ref.current && ref.current.pause(),\n      setVolume: volume => ref.current && (ref.current.volume = volume),\n      mute,\n      unmute,\n    },\n  ];\n};\n\nexport default useVideo;\n","import React, {useState} from 'react';\nimport {Slider, Rail, Handles, Tracks} from 'react-compound-slider';\nimport classNames from 'classnames';\n\nexport const Handle = ({\n  domain: [min, max],\n  handle: {id, value, percent},\n  getHandleProps,\n}) => (\n  <div\n    role=\"slider\"\n    aria-valuemin={min}\n    aria-valuemax={max}\n    aria-valuenow={value}\n    style={{left: `${percent}%`}}\n    className=\"video_volume__handle\"\n    {...getHandleProps(id)}\n  />\n);\n\nexport const Track = ({source, target, getTrackProps}) => (\n  <div\n    className=\"video_volume__track\"\n    style={{\n      left: `${source.percent}%`,\n      width: `${target.percent - source.percent}%`,\n    }}\n    {...getTrackProps()}\n  />\n);\n\nconst VideoVolume = ({\n  value,\n  onUpdate,\n}) => {\n  const [dragging, setDragging] = useState(false);\n\n  const sliderClassNames = classNames({\n    video_volume__slider: true,\n    dragging,\n  });\n\n  return (\n    <Slider\n      mode={1}\n      step={0.01}\n      className={sliderClassNames}\n      domain={[0, 1]}\n      onUpdate={onUpdate}\n      onSlideStart={() => setDragging(true)}\n      onSlideEnd={() => setDragging(false)}\n      values={[value]}\n    >\n      <Rail>\n        {({getRailProps}) => <div className=\"video_volume__rail\" {...getRailProps()} />}\n      </Rail>\n      <Handles>\n        {({handles, getHandleProps}) => (\n          <div>\n            {handles.map(handle => (\n              <Handle\n                key={handle.id}\n                handle={handle}\n                domain={[0, 1]}\n                getHandleProps={getHandleProps}\n              />\n            ))}\n          </div>\n        )}\n      </Handles>\n      <Tracks right={false}>\n        {({tracks, getTrackProps}) => (\n          <div>\n            {tracks.map(({id, source, target}) => (\n              <Track\n                key={id}\n                source={source}\n                target={target}\n                getTrackProps={getTrackProps}\n              />\n            ))}\n          </div>\n        )}\n      </Tracks>\n    </Slider>\n  );\n};\n\nexport default VideoVolume;\n","import React from 'react';\nimport VideoVolume from './VideoVolume';\nimport classNames from 'classnames';\nimport {\n  Pause,\n  PlayArrow,\n  VolumeOff,\n  VolumeMute,\n  VolumeDown,\n  VolumeUp,\n  Fullscreen,\n  FullscreenExit,\n} from '@material-ui/icons';\n\nimport './VideoPlayer.scss';\n\nconst VideoControls = ({\n  playing,\n  pause,\n  play,\n  volume,\n  unmute,\n  mute,\n  fullscreen,\n  toggleFullscreen,\n  visible,\n  setVolume,\n}) => {\n  const playButton = playing\n    ? <Pause onClick={pause} />\n    : <PlayArrow onClick={play} />;\n\n  const volumeIcons = [\n    VolumeOff,\n    VolumeMute,\n    VolumeDown,\n    VolumeUp,\n  ];\n  const VolumeIcon = volumeIcons[Math.ceil(volume * (volumeIcons.length - 1))];\n  const handleVolumeClick = () => volume === 0 ? unmute() : mute();\n\n  let fullscreenButton;\n  if (document.fullscreenEnabled) {\n    const Icon = fullscreen ? FullscreenExit : Fullscreen;\n    fullscreenButton = (\n      <div className=\"settings\">\n        <Icon onClick={toggleFullscreen} />\n      </div>\n    );\n  }\n\n  const controlsClassName = classNames({\n    swarm_player__controls: true,\n    visible: visible,\n  });\n\n  return (\n    <div className={controlsClassName}>\n      <div className=\"swarm_player__controls__group\">\n        <div className=\"play\">\n          {playButton}\n        </div>\n        <div className=\"volume\">\n          <VolumeIcon onClick={handleVolumeClick} className=\"mute_button\" />\n          <VideoVolume onUpdate={setVolume} value={volume} />\n        </div>\n      </div>\n      <div className=\"swarm_player__controls__group\">\n        {fullscreenButton}\n      </div>\n    </div>\n  );\n};\n\nexport default VideoControls;\n","import React, {useEffect, useRef, useState} from 'react';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport PlayButton from './PlayButton';\nimport useSwarmMediaSource from '../hooks/useSwarmMediaSource';\nimport useVideo from '../hooks/useVideo';\nimport {useDebounce} from 'react-use';\nimport useFullscreen from 'use-fullscreen';\nimport {Loop} from '@material-ui/icons';\nimport VideoControls from './VideoControls';\n\nimport './VideoPlayer.scss';\n\nconst SwarmPlayer = ({swarm, indexSwarm}) => {\n  const [videoState, videoProps, videoControls] = useVideo();\n  const mediaSource = useSwarmMediaSource(swarm);\n\n  useEffect(() => {\n    if (videoProps.ref.current != null && mediaSource != null) {\n      videoProps.ref.current.src = URL.createObjectURL(mediaSource);\n      videoControls.play();\n    }\n  }, [videoProps.ref, mediaSource]);\n\n  const [controlsVisible, setControlsVisible] = useState(false);\n  const [lastActive, setLastActive] = useState(false);\n\n  useDebounce(() => setControlsVisible(false), 5000, [lastActive]);\n\n  const handleMouseMove = () => {\n    setControlsVisible(true);\n    setLastActive(Date.now());\n  };\n\n  const handleMouseOut = () => setControlsVisible(false);\n\n  const ref = useRef();\n  const [isFullscreen, toggleFullscreen] = useFullscreen();\n\n  const playButton = (videoState.waiting && videoState.loaded) ? (\n    <div className=\"swarm_player__waiting_spinner\">\n      <Loop />\n    </div>\n  ) : (\n    <PlayButton\n      visible={!videoState.playing}\n      onClick={videoControls.play}\n      flicker={videoState.ended && !videoState.loaded}\n      spin={videoState.waiting && videoState.loaded}\n      disabled={videoState.waiting || !videoState.loaded}\n      blur={true}\n    />\n  );\n\n  return (\n    <div\n      onMouseMove={handleMouseMove}\n      onMouseOut={handleMouseOut}\n      ref={ref}\n    >\n      {/* <DiagnosticMenu swarm={indexSwarm} containerClass=\"diagnostic-menu--indent-1\" /> */}\n      <DiagnosticMenu swarm={swarm} />\n      <video\n        onClick={e => e.preventDefault()}\n        className=\"swarm_player__video\"\n        {...videoProps}\n      />\n      {playButton}\n      <VideoControls\n        {...videoState}\n        {...videoControls}\n        visible={controlsVisible}\n        fullscreen={isFullscreen}\n        toggleFullscreen={() => toggleFullscreen(ref.current)}\n      />\n    </div>\n  );\n};\n\nexport default SwarmPlayer;\n","import hexToArrayBuffer from 'hex-to-array-buffer';\n\nexport default function hexToUint8Array(v) {\n  return new Uint8Array(hexToArrayBuffer(v));\n}\n","import {Buffer} from 'buffer';\nimport arrayEqual from 'array-equal';\nimport binSearch from '../binSearch';\nimport Address from './address';\nimport SwarmId from './swarmid';\n\nimport {\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n} from './constants';\n\nconst crypto = require('../compat/crypto');\n\nconst toUint8Array = data => new Uint8Array(data);\n\nexport const MerkleHashTreeFunctionAlgorithms = {\n  [MerkleHashTreeFunction.SHA1]: 'SHA-1',\n  [MerkleHashTreeFunction.SHA224]: 'SHA-224',\n  [MerkleHashTreeFunction.SHA256]: 'SHA-256',\n  [MerkleHashTreeFunction.SHA384]: 'SHA-384',\n  [MerkleHashTreeFunction.SHA512]: 'SHA-512',\n};\n\nexport const MerkleHashTreeFunctionByteLengths = {\n  [MerkleHashTreeFunction.SHA1]: 20,\n  [MerkleHashTreeFunction.SHA224]: 28,\n  [MerkleHashTreeFunction.SHA256]: 32,\n  [MerkleHashTreeFunction.SHA384]: 48,\n  [MerkleHashTreeFunction.SHA512]: 64,\n};\n\nexport const createMerkleHashTreeFunction = (merkleHashTreeFunction) => {\n  const algorithm = MerkleHashTreeFunctionAlgorithms[merkleHashTreeFunction];\n  if (algorithm === undefined) {\n    throw new Error('invalid merkle hash tree function');\n  }\n\n  const nullHash = new Uint8Array(MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction]);\n\n  return (...values) => {\n    values = values.map(value => value === undefined ? nullHash : value);\n\n    if (values.every(value => arrayEqual(value, nullHash))) {\n      return Promise.resolve(nullHash);\n    }\n\n    if (values.length > 1) {\n      values = new Uint8Array(Buffer.concat(values.map(value => Buffer.from(value))));\n    } else {\n      values = values[0];\n    }\n\n    return crypto.subtle.digest(algorithm, values).then(toUint8Array);\n  };\n};\n\nexport const LiveSignatureAlgorithms = {\n  [LiveSignatureAlgorithm.RSASHA1]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-1'},\n  },\n  [LiveSignatureAlgorithm.RSASHA256]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP256SHA256]: {\n    name: 'ECDSA',\n    namedCurve: 'P-256',\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP384SHA384]: {\n    name: 'ECDSA',\n    namedCurve: 'P-384',\n    hash: {name: 'SHA-384'},\n  },\n};\n\nexport const createLiveSignatureSignFunction = (liveSignatureAlgorithm, privateKey, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  const importResult = crypto.subtle.importKey('pkcs8', privateKey, algorithm, false, ['sign']);\n\n  return data => importResult\n    .then(privateKey => crypto.subtle.sign(algorithm, privateKey, data))\n    .then(toUint8Array);\n};\n\nexport const createLiveSignatureVerifyFunction = (liveSignatureAlgorithm, swarmId, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...swarmId.getKeyParams(),\n    ...algorithm,\n  };\n\n  const publicKey = new Uint8Array(swarmId.publicKey);\n  const importResult = crypto.subtle.importKey('spki', publicKey, algorithm, false, ['verify']);\n\n  return (signature, data) => importResult\n    .then(publicKey => crypto.subtle.verify(algorithm, publicKey, signature, data))\n    .then(toUint8Array);\n};\n\nexport const generateKeyPair = (liveSignatureAlgorithm, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  return crypto.subtle.generateKey(algorithm, true, ['sign', 'verify'])\n    .then(keyPair => Promise.all([\n      crypto.subtle.exportKey('pkcs8', keyPair.privateKey),\n      crypto.subtle.exportKey('spki', keyPair.publicKey),\n    ]))\n    .then(([privateKey, publicKey]) => ({\n      privateKey,\n      publicKey,\n      swarmId: SwarmId.from({\n        ...algorithm,\n        liveSignatureAlgorithm,\n        publicKey,\n      }),\n    }));\n};\n\nconst unavailableLiveSignatureSignFunction = () => Promise.reject('live signature function not available');\n\nexport const createContentIntegrityVerifierFactory = (\n  contentIntegrityProtectionMethod,\n  merkleHashTreeFunction,\n  liveSignatureVerifyFunction,\n  liveSignatureSignFunction = unavailableLiveSignatureSignFunction,\n  liveDiscardWindow = Infinity,\n) => {\n  class Signature {\n    constructor(hash, verified = false) {\n      this.hash = hash;\n      this.verified = verified;\n    }\n\n    markVerified() {\n      this.verified = true;\n    }\n\n    getHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return !this.verified\n        ? Promise.reject('cannot use unverified signature')\n        : Promise.resolve(arrayEqual(this.hash, value));\n    }\n  }\n\n  // TODO: timestamp in hash?\n  class SignedSignature {\n    constructor(signature, hash) {\n      this.signature = signature;\n      this.hash = hash;\n      this.verificationResult = undefined;\n    }\n\n    verifyHash() {\n      if (this.verificationResult === undefined) {\n        this.verificationResult = liveSignatureVerifyFunction(this.hash, this.getHash())\n          .then(() => this.markVerified());\n      }\n      return this.verificationResult;\n    }\n\n    markVerified() {\n      this.signature.markVerified();\n    }\n\n    getHash() {\n      return this.signature.getHash();\n    }\n\n    getSignatureHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return this.verifyHash().then(() => this.signature.compare(value));\n    }\n  }\n\n  class MerkleHashTree {\n    constructor(rootAddress = new Address(0), signatures = new Array(rootAddress.getChunkCount() * 2 - 1)) {\n      this.rootAddress = rootAddress;\n      this.signatures = signatures;\n    }\n\n    createVerifier(address) {\n      if (address.contains(this.rootAddress)) {\n        const {signatures} = this;\n\n        this.rootAddress = address;\n        this.signatures = new Array(address.getChunkCount() * 2 - 1);\n\n        for (let i = 0; i < signatures.length; i ++) {\n          if (signatures[i] !== undefined) {\n            this.signatures[i] = signatures[i];\n          }\n        }\n      }\n\n      return new MerkleHashTreeVerifier(this);\n    }\n\n    copy(hashTree) {\n      for (let i = 0; i < this.signatures.length; i ++) {\n        if (hashTree.signatures[i] === undefined) {\n          hashTree.signatures[i] = this.signatures[i];\n        }\n      }\n    }\n\n    getChunkCount() {\n      return this.rootAddress.getChunkCount();\n    }\n\n    *getConstituentHashBins({bin}) {\n      if (!this.rootAddress.containsBin(bin)) {\n        throw new Error('bin out of range');\n      }\n\n      const {start} = this.rootAddress;\n      bin -= start;\n\n      let bfsIndex = this.rootAddress.getChunkCount() + bin / 2 - 1;\n      let stride = 2;\n      let parent = bin;\n\n      while (bfsIndex !== 0) {\n        const branch = (bfsIndex & 1) === 1 ? 1 : -1;\n\n        yield {\n          isRoot: false,\n          branch,\n          bin: parent + start,\n          bfsIndex,\n          siblingBin: parent + branch * stride + start,\n          siblingBfsIndex: bfsIndex + branch,\n        };\n\n        bfsIndex = Math.floor((bfsIndex - 1) / 2);\n        parent += branch * stride / 2;\n        stride *= 2;\n      }\n\n      yield {\n        isRoot: true,\n        branch: 0,\n        bin: parent + start,\n        bfsIndex: 0,\n        siblingBin: parent + start,\n        siblingBfsIndex: 0,\n      };\n    }\n\n    getConstituentSignatures(address) {\n      return Array.from(this.getConstituentHashBins(address)).map(({\n        siblingBin,\n        siblingBfsIndex,\n      }) => ({\n        bin: siblingBin,\n        signature: this.signatures[siblingBfsIndex],\n      }));\n    }\n\n    static from(values, rootAddress = new Address(MerkleHashTree.minSize(values.length) - 1)) {\n      const size = rootAddress.getChunkCount();\n      const hashes = new Array(size * 2 - 1);\n      for (let i = 0; i < size; i ++) {\n        hashes[i + size - 1] = merkleHashTreeFunction(values[i]);\n      }\n      for (let i = (size - 1) * 2; i > 0; i -= 2) {\n        hashes[Math.floor(i / 2) - 1] = Promise.all([hashes[i - 1], hashes[i]])\n          .then(siblings => merkleHashTreeFunction(...siblings));\n      }\n\n      return Promise.all(hashes).then(hashes => {\n        const signatures = hashes.map(hash => new Signature(hash, true));\n\n        return liveSignatureSignFunction(hashes[0]).then(rootHashSignature => {\n          signatures[0] = new SignedSignature(\n            signatures[0],\n            rootHashSignature,\n          );\n\n          return new MerkleHashTree(rootAddress, signatures);\n        });\n      });\n    }\n\n    static minSize(size) {\n      return Math.pow(2, Math.ceil(Math.log2(size)));\n    }\n  }\n\n  class MerkleHashTreeVerifier {\n    constructor(hashTree) {\n      this.hashTree = hashTree;\n      this.signatures = {};\n    }\n\n    setHash({bin}, hash) {\n      this.signatures[bin] = new Signature(hash);\n    }\n\n    setHashSignature({bin}, hash) {\n      this.signatures[bin] = new SignedSignature(this.signatures[bin], hash);\n    }\n\n    verifyChunk(address, value) {\n      const signatures = [];\n      let hashResult = merkleHashTreeFunction(value);\n\n      for (let bin of this.hashTree.getConstituentHashBins(address)) {\n        let siblingSignature = this.hashTree.signatures[bin.siblingBfsIndex];\n        if (siblingSignature === undefined) {\n          siblingSignature = this.signatures[bin.siblingBin];\n          signatures.push({\n            index: bin.siblingBfsIndex,\n            signature: siblingSignature,\n          });\n        }\n\n        // if the current branch has already been verified short circuit\n        const verifiedSignature = this.hashTree.signatures[bin.bfsIndex];\n        if (verifiedSignature !== undefined) {\n          hashResult = hashResult.then(hash => verifiedSignature.compare(hash));\n          break;\n        }\n\n        // verify the generated root hash using the one supplied to the verifier\n        if (bin.isRoot) {\n          hashResult = hashResult.then(hash => siblingSignature.compare(hash));\n          break;\n        }\n\n        // chain generating the next parent hash\n        hashResult = hashResult.then(hash => {\n          signatures.push({\n            index: bin.bfsIndex,\n            signature: new Signature(hash),\n          });\n\n          const siblingHash = siblingSignature.getHash();\n          return bin.branch === 1\n            ? merkleHashTreeFunction(hash, siblingHash)\n            : merkleHashTreeFunction(siblingHash, hash);\n        });\n      }\n\n      return hashResult.then(() => {\n        signatures.forEach(({index, signature}) => {\n          signature.markVerified();\n          this.hashTree.signatures[index] = signature;\n        });\n      });\n    }\n  }\n\n  class UnifiedMerkleHashTree {\n    constructor() {\n      this.subtrees = [];\n      this.nextStart = 0;\n      this.chunkCount = 0;\n    }\n\n    findSubtree({bin}) {\n      const index = binSearch(\n        this.subtrees.length - 1,\n        i => {\n          const {start, end} = this.subtrees[i].rootAddress;\n          return start <= bin && bin <= end ? 0 : start - bin;\n        },\n      );\n\n      return index < 0 ? undefined : this.subtrees[index];\n    }\n\n    insertSubtree(subtree) {\n      const storedSubtree = this.findSubtree(subtree.rootAddress);\n      if (storedSubtree !== undefined) {\n        if (storedSubtree !== subtree) {\n          subtree.copy(storedSubtree);\n        }\n\n        return storedSubtree;\n      }\n\n      this.subtrees.push(subtree);\n      this.subtrees.sort((a, b) => a.rootAddress.start - b.rootAddress.start);\n\n      this.chunkCount += subtree.getChunkCount();\n      this.pruneSubtrees();\n\n      return subtree;\n    }\n\n    pruneSubtrees() {\n      while (this.subtrees.length > 0 && this.chunkCount - this.subtrees[0].getChunkCount() > liveDiscardWindow) {\n        const removedTree = this.subtrees.shift();\n        this.chunkCount -= removedTree.getChunkCount();\n      }\n    }\n\n    appendSubtree(values) {\n      const treeSize = MerkleHashTree.minSize(values.length);\n      const nextAddress = new Address(\n        this.nextStart + treeSize - 1,\n        [this.nextStart, this.nextStart + (treeSize - 1) * 2],\n      );\n\n      this.nextStart += treeSize * 2;\n\n      return MerkleHashTree.from(values, nextAddress)\n        .then(subtree => this.insertSubtree(subtree));\n    }\n\n    createVerifier(address) {\n      let subtree = this.findSubtree(address) || new MerkleHashTree(address);\n      return new MerkleHashSubtreeVerifier(this, subtree);\n    }\n\n    getConstituentSignatures(address) {\n      const subtree = this.findSubtree(address);\n      if (subtree === undefined) {\n        return;\n      }\n\n      return subtree.getConstituentSignatures(address);\n    }\n  }\n\n  class MerkleHashSubtreeVerifier extends MerkleHashTreeVerifier {\n    constructor(unifiedHashTree, subtree) {\n      super(subtree);\n      this.unifiedHashTree = unifiedHashTree;\n    }\n\n    verifyChunk(address, value) {\n      return super.verifyChunk(address, value)\n        .then(this.unifiedHashTree.insertSubtree(this.hashTree));\n    }\n  }\n\n  class NoneVerifier {\n    setHash() {}\n\n    setHashSignature() {}\n\n    verifyChunk() {\n      return Promise.resolve();\n    }\n  }\n\n  class NoneVerifierFactory {\n    createVerifier() {\n      return new NoneVerifier();\n    }\n\n    getConstituentSignatures() {\n      return [];\n    }\n  }\n\n  // TODO: sign all method\n  switch (contentIntegrityProtectionMethod) {\n    case ContentIntegrityProtectionMethod.None:\n      return new NoneVerifierFactory();\n    case ContentIntegrityProtectionMethod.MerkleHashTree:\n      return new MerkleHashTree();\n    case ContentIntegrityProtectionMethod.UnifiedMerkleTree:\n      return new UnifiedMerkleHashTree();\n    default:\n      throw new Error('unsupported content integrity protection method');\n  }\n};\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","import WebCrypto from 'node-webcrypto-ossl';\n\nmodule.exports = new WebCrypto();\n","module.exports = crypto;\n","import ws from 'ws';\n\nexport default ws;\n","module.exports = WebSocket;\n","import {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from 'wrtc';\n\nmodule.exports = {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n};\n","module.exports = {\n  RTCPeerConnection: window.RTCPeerConnection,\n  RTCSessionDescription: window.RTCSessionDescription,\n  RTCIceCandidate: window.RTCIceCandidate,\n};\n","import React, {Suspense, lazy} from 'react';\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport App from './App';\nimport PlayButton from './PlayButton';\n\nconst Test = lazy(() => import('./Test'));\nconst DhtGraph = lazy(() => import('./DhtGraph'));\n\nconsole.log({App, Test, DhtGraph});\n\nconst Router = () => (\n  <HashRouter>\n    <Suspense fallback={<PlayButton disabled={true} flicker={true} blur />}>\n      <Switch>\n        <Route exact path=\"/test\" component={props => <Test {...props} />} />\n        <Route exact path=\"/dht-graph\" component={props => <DhtGraph {...props} />} />\n        <Route exact path=\"/:name([\\w\\-]*)\" component={App} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </Suspense>\n  </HashRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './components/Router';\n\nimport './index.css';\n\n// if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {\n//   window.addEventListener('load', function() {\n//     navigator.serviceWorker.register('/service-worker.js');\n//   });\n// }\n\nReactDOM.render(<Router />, document.getElementById('root'));\n","import {LiveSignatureAlgorithm} from './constants';\n\nconst isRsaAlgorithm = liveSignatureAlgorithm => {\n  const rsaAlgorithms = [\n    LiveSignatureAlgorithm.RSASHA1,\n    LiveSignatureAlgorithm.RSASHA256,\n  ];\n  return rsaAlgorithms.includes(liveSignatureAlgorithm);\n};\n\nexport default class SwarmId {\n  constructor(\n    liveSignatureAlgorithm,\n    publicKey,\n    publicExponent,\n    modulusLength,\n  ) {\n    this.liveSignatureAlgorithm = liveSignatureAlgorithm;\n    this.publicKey = Buffer.from(publicKey);\n    this.publicExponent = publicExponent;\n    this.modulusLength = modulusLength;\n  }\n\n  getLiveSignatureByteLength() {\n    switch (this.liveSignatureAlgorithm) {\n      case LiveSignatureAlgorithm.RSASHA1:\n      case LiveSignatureAlgorithm.RSASHA256:\n        return this.modulusLength / 8;\n      case LiveSignatureAlgorithm.ECDSAP256SHA256:\n        return 64;\n      case LiveSignatureAlgorithm.ECDSAP384SHA384:\n        return 96;\n      default:\n        throw new Error('unsupported live signature algorithm');\n    }\n  }\n\n  getKeyParams() {\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      return {\n        publicExponent: new Uint8Array(this.publicExponent),\n        modulusLength: this.modulusLength,\n      };\n    }\n    return {};\n  }\n\n  byteLength() {\n    const metadataLength = isRsaAlgorithm(this.liveSignatureAlgorithm) ? 9 : 1;\n    return this.publicKey.length + metadataLength;\n  }\n\n  toBuffer() {\n    const buffer = Buffer.alloc(this.byteLength());\n    let length = 0;\n\n    buffer.writeUInt8(this.liveSignatureAlgorithm, length);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      Buffer.from(this.publicExponent).copy(buffer, length + 4 - this.publicExponent.length);\n      length += 4;\n\n      buffer.writeUInt32BE(this.modulusLength, length);\n      length += 4;\n    }\n\n    this.publicKey.copy(buffer, length);\n\n    return buffer;\n  }\n\n  read(buffer) {\n    let length = 0;\n\n    this.liveSignatureAlgorithm = buffer.readUInt8(0);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      this.publicExponent = buffer.slice(length, length + 4);\n      length += 4;\n\n      this.modulusLength = buffer.readUInt32BE(length);\n      length += 4;\n    }\n\n    this.publicKey = buffer.slice(length);\n  }\n\n  static from(values) {\n    if (ArrayBuffer.isView(values)) {\n      const swarmId = Object.create(SwarmId.prototype);\n      swarmId.read(Buffer.from(values));\n      return swarmId;\n    }\n\n    return new SwarmId(\n      values.liveSignatureAlgorithm,\n      values.publicKey,\n      values.publicExponent,\n      values.modulusLength,\n    );\n  }\n}\n","import React, {useEffect, useState} from 'react';\nimport classNames from 'classnames';\nimport {useHover} from 'use-events';\nimport {useDebounce} from 'react-use';\n\nimport './PlayButton.scss';\n\nconst PlayButton = ({\n  spin = false,\n  flicker = false,\n  pulse = false,\n  disabled = false,\n  visible = true,\n  blur = false,\n  error = false,\n  onClick = null,\n  idleTimeout = 2000,\n}) => {\n  const [currentVisibility, setCurrentVisibility] = useState(true);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => setCurrentVisibility(visible), 300);\n    return () => clearTimeout(timeout);\n  }, [visible]);\n\n  const [hovering, hoverEventHandlers] = useHover();\n  const [mouseIdle, setMouseIdle] = useState('');\n\n  useDebounce(() => setMouseIdle(hovering), idleTimeout, [hovering]);\n  useEffect(() => {\n    if (!hovering) {\n      setMouseIdle(false);\n    }\n  }, [hovering]);\n\n  const hidden = !visible && !currentVisibility;\n\n  const hoverClasses = classNames({\n    play_button_wrap: true,\n    hovering: mouseIdle,\n    hidden,\n    disabled,\n  });\n\n  const buttonClasses = classNames({\n    play_button: true,\n    clickable: onClick != null && !disabled,\n    exiting: !visible && currentVisibility,\n    hidden,\n    spin,\n    flicker,\n    pulse,\n    blur,\n    error,\n    disabled,\n  });\n\n  return (\n    <div className={hoverClasses}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 926 926\"\n        className={buttonClasses}\n        onClick={disabled ? undefined : onClick}\n        {...hoverEventHandlers}\n      >\n        <g className=\"background\">\n          <circle cx=\"463\" cy=\"463\" r=\"463\"/>\n        </g>\n        <g className=\"network\">\n          <circle cx=\"327\" cy=\"229\" r=\"139\"/>\n          <circle cx=\"732\" cy=\"463\" r=\"139\"/>\n          <circle cx=\"327\" cy=\"697\" r=\"139\"/>\n          <polygon points=\"854 463 269 125 269 801 854 463\"/>\n        </g>\n        <g className=\"button\">\n          <path d=\"M658,524c23-13,23-36,0-50L457,358c-23-13-43-2-43,25V616c0,27,19,38,43,25Z\" transform=\"translate(-45 -36)\"/>\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default PlayButton;\n","export default class EMA {\n  constructor(alpha) {\n    this.mean = 0;\n    this.alpha = alpha;\n    this.weight = 1;\n  }\n\n  update(value) {\n    this.mean = this.alpha * value + (1 - this.alpha) * this.mean;\n    this.weight *= this.alpha;\n  }\n\n  set(value) {\n    this.mean = value;\n    this.weight = 0;\n  }\n\n  isEmpty() {\n    return this.weight === 1;\n  }\n\n  value() {\n    return this.mean / (1 - this.weight);\n  }\n}\n","export default class RingBuffer {\n  constructor(capacity) {\n    this.setCapacity(capacity);\n  }\n\n  setCapacity(capacity) {\n    this.capacity = capacity;\n    this.lastIndex = capacity;\n    this.values = new Array(capacity);\n\n    for (let i = 0; i < capacity; i ++) {\n      this.values[i] = this.createEmptyValue(i);\n    }\n  }\n\n  advanceLastIndex(lastIndex) {\n    if (this.lastIndex > lastIndex) {\n      return;\n    }\n\n    let firstEmptyIndex = this.lastIndex;\n    if (lastIndex - firstEmptyIndex > this.capacity) {\n      firstEmptyIndex = lastIndex - this.capacity;\n    }\n    for (let i = firstEmptyIndex; i <= lastIndex; i ++) {\n      const index = i % this.capacity;\n      this.values[index] = this.createEmptyValue(i, this.values[index]);\n    }\n    this.lastIndex = lastIndex + 1;\n  }\n\n  createEmptyValue() {\n    return undefined;\n  }\n\n  set(index, value) {\n    this.advanceLastIndex(index);\n    this.values[index % this.capacity] = value;\n  }\n\n  push(value) {\n    this.set(this.lastIndex, value);\n  }\n\n  get firstIndex() {\n    return this.lastIndex - this.capacity;\n  }\n\n  get(index) {\n    if (index < this.firstIndex || index >= this.lastIndex) {\n      return this.createEmptyValue(index);\n    }\n    return this.values[index % this.capacity];\n  }\n}\n","import EMA from './ema';\nimport RingBuffer from './RingBuffer';\n\nclass DelayBuffer extends RingBuffer {\n  constructor(capacity, window) {\n    super(capacity);\n    this.min = Infinity;\n    this.window = window;\n  }\n\n  createEmptyValue() {\n    return Infinity;\n  }\n\n  getMin() {\n    return this.min;\n  }\n\n  update(delay) {\n    const now = Math.floor(Date.now() / this.window);\n\n    if (now >= this.lastIndex) {\n      this.advanceLastIndex(now);\n      this.min = Math.min(...this.values);\n    }\n\n    if (delay < this.get(now)) {\n      this.set(now, delay);\n      this.min = Math.min(this.min, delay);\n    }\n  }\n}\n\n// rfc6817\nconst TARGET = 100;\nconst ALLOWED_INCREASE = 1;\nconst GAIN = 1;\nconst CURRENT_HISTORY = 4;\nconst CURRENT_HISTORY_INTERVAL = 1000;\nconst BASE_HISTORY = 10;\nconst BASE_HISTORY_INTERVAL = 60 * 1000;\nconst INIT_CWND = 2;\nconst MIN_CWND = 2;\n\n// max safe WebRTC data channel message size\nconst MSS = 8 * 1024;\n\n// rfc6298\nconst COEF_G = 1;\nconst COEF_K = 4;\n\n// jacobson, v. \"congestion avoidance and control\"\n// doi: 10.1145/52325.52356\nconst COEF_ALPHA = 0.125;\nconst COEF_BETA = 0.25;\n\nexport default class LEDBAT {\n  constructor(target = TARGET, mss = MSS) {\n    this.target = target;\n    this.mss = mss;\n    this.flightSize = 0;\n\n    // the amount of data that is allowed to be outstanding in an rtt in bytes\n    this.cwnd = INIT_CWND * MSS;\n\n    // the congestion timeout\n    this.cto = 1000;\n    this.currentDelay = new DelayBuffer(CURRENT_HISTORY, CURRENT_HISTORY_INTERVAL);\n    this.baseDelay = new DelayBuffer(BASE_HISTORY, BASE_HISTORY_INTERVAL);\n\n    this.lastDataLoss = 0;\n    this.lastAckTime = Infinity;\n    this.rttMean = new EMA(COEF_ALPHA);\n    this.rttVar = new EMA(COEF_BETA);\n\n    this.ackSize = 0;\n  }\n\n  addSent(bytes) {\n    this.flightSize += bytes;\n  }\n\n  addDelaySample(delaySample, bytes = MSS) {\n    this.currentDelay.update(delaySample);\n    this.baseDelay.update(delaySample);\n\n    this.ackSize += bytes;\n\n    this.lastAckTime = Date.now();\n  }\n\n  digestDelaySamples() {\n    this.checkCTO();\n\n    if (this.ackSize === 0) {\n      return;\n    }\n\n    const queuingDelay = Math.abs(this.currentDelay.getMin() - this.baseDelay.getMin());\n    const offTarget = (this.target - queuingDelay) / this.target;\n    this.cwnd += GAIN * offTarget * this.ackSize * this.mss / this.cwnd;\n\n    const maxAllowedCwnd = this.flightSize + ALLOWED_INCREASE * this.mss;\n    this.cwnd = Math.max(Math.min(this.cwnd, maxAllowedCwnd), MIN_CWND * this.mss);\n\n    this.flightSize = Math.max(0, this.flightSize - this.ackSize);\n    this.ackSize = 0;\n  }\n\n  checkCTO() {\n    if (this.flightSize > 0 && Date.now() - this.cto > this.lastAckTime) {\n      this.cwnd = this.mss;\n      this.cto = 2 * this.cto;\n    }\n  }\n\n  addRttSample(rtt) {\n    if (this.rttMean.isEmpty()) {\n      this.rttMean.set(rtt);\n      this.rttVar.set(rtt / 2);\n    } else {\n      this.rttVar.update(Math.abs(this.rttMean.value() - rtt));\n      this.rttMean.update(rtt);\n    }\n\n    this.cto = this.rttMean.value() + Math.max(COEF_G, COEF_K * this.rttVar.value());\n    if (this.cto < 1000) {\n      this.cto = 1000;\n    }\n  }\n\n  onDataLoss(bytes, retransmitting = false) {\n    const now = Date.now();\n    if (this.lastDataLoss !== 0 && now - this.lastDataLoss < this.rttMean.value()) {\n      return;\n    }\n    this.lastDataLoss = now;\n\n    this.cwnd = Math.min(this.cwnd, Math.max(this.cwnd / 2, MIN_CWND * this.mss));\n\n    if (!retransmitting) {\n      this.flightSize = Math.max(0, this.flightSize - bytes);\n    }\n  }\n\n  static computeOneWayDelay(timestamp) {\n    return Date.now() - timestamp;\n  }\n}\n","import {Buffer} from 'buffer';\nimport Address from './address';\nimport {MerkleHashTreeFunctionByteLengths} from './integrity';\n\nimport {\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n} from './constants';\n\nexport const createChunkAddressFieldType = (addressingMethod, chunkSize) => {\n  class Bin32ChunkAddress {\n    constructor(value = 0) {\n      this.type = ChunkAddressingMethod.Bin32;\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n\n    rangeByteLength() {\n      const [start, end] = Address.binBounds(this.value);\n      return (end - start + 1) * chunkSize;\n    }\n\n    static from({bin}) {\n      return new Bin32ChunkAddress(bin);\n    }\n  }\n\n  class ChunkRange32ChunkAddress {\n    constructor(start = 0, end = 0) {\n      this.type = ChunkAddressingMethod.ChunkRange32;\n      this.start = start;\n      this.end = end;\n    }\n\n    read(buffer, offset) {\n      this.start = buffer.readUInt32BE(offset);\n      this.end = buffer.readUInt32BE(offset + 4);\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.start, offset);\n      buffer.writeUInt32BE(this.end, offset + 4);\n    }\n\n    rangeByteLength() {\n      return (this.end - this.start + 1) * chunkSize;\n    }\n\n    static from({start, end}) {\n      return new ChunkRange32ChunkAddress(start, end);\n    }\n  }\n\n  switch (addressingMethod) {\n    case ChunkAddressingMethod.Bin32:\n      return Bin32ChunkAddress;\n    case ChunkAddressingMethod.ChunkRange32:\n      return ChunkRange32ChunkAddress;\n    default:\n      throw new Error('unsupported chunk addressing method');\n  }\n};\n\nconst createBufferFieldType = byteLength => {\n  class BufferField {\n    constructor(value = Buffer.alloc(byteLength)) {\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      buffer.copy(this.value, 0, offset, offset + byteLength);\n      return byteLength;\n    }\n\n    byteLength() {\n      return byteLength;\n    }\n\n    write(buffer, offset) {\n      this.value.copy(buffer, offset);\n    }\n  }\n\n  return BufferField;\n};\n\nexport const createLiveSignatureFieldType = (liveSignatureAlgorithm, swarmId) => {\n  const byteLength = swarmId.getLiveSignatureByteLength();\n\n  class LiveSignatureField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = liveSignatureAlgorithm;\n    }\n  }\n\n  return LiveSignatureField;\n};\n\nexport const createIntegrityHashFieldType = merkleHashTreeFunction => {\n  const byteLength = MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction];\n\n  class IntegrityHashField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = merkleHashTreeFunction;\n    }\n  }\n\n  return IntegrityHashField;\n};\n\nexport const createEncoding = (ChunkAddress, IntegrityHash, LiveSignature) => {\n  class Uint8ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt8(offset);\n      return 1;\n    }\n\n    byteLength() {\n      return 1;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt8(this.value, offset);\n    }\n  }\n\n  class Uint32ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n  }\n\n  class VersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.Version;\n    }\n  }\n\n  class MinimumVersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.MinimumVersion;\n    }\n  }\n\n  class SwarmIdentifierProtocolOption {\n    constructor(value = []) {\n      this.type = ProtocolOptions.SwarmIdentifier;\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt16BE(offset);\n      offset += 2;\n\n      this.value = buffer.slice(offset, offset + length);\n\n      return length + 2;\n    }\n\n    byteLength() {\n      return this.value.length + 2;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt16BE(this.value.length, offset);\n      this.value.copy(buffer, offset + 2);\n    }\n  }\n\n  class ContentIntegrityProtectionMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ContentIntegrityProtectionMethod.MerkleHashTree) {\n      super(method);\n      this.type = ProtocolOptions.ContentIntegrityProtectionMethod;\n    }\n  }\n\n  class MerkleHashTreeFunctionProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = MerkleHashTreeFunction.SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.MerkleHashTreeFunction;\n    }\n  }\n\n  class LiveSignatureAlgorithmProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = LiveSignatureAlgorithm.ECDSAP256SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.LiveSignatureAlgorithm;\n    }\n  }\n\n  class ChunkAddressingMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ChunkAddressingMethod.ChunkRange32) {\n      super(method);\n      this.type = ProtocolOptions.ChunkAddressingMethod;\n    }\n  }\n\n  class LiveDiscardWindowProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.LiveDiscardWindow;\n    }\n  }\n\n  class SupportedMessagesProtocolOption {\n    constructor(messageTypes = Object.values(MessageTypes).filter(v => !isNaN(v))) {\n      this.type = ProtocolOptions.SupportedMessages;\n      this.value = {};\n      messageTypes.forEach(type => this.value[type] = true);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt8(offset);\n      offset += 1;\n\n      for (let i = 0; i < length; i ++) {\n        const byte = buffer[offset + i];\n        for (let j = 0; j < 8; j ++) {\n          this.value[i * 8 + j] = Boolean(byte & (1 << 7 - j));\n        }\n      }\n\n      return length + 1;\n    }\n\n    bitmapByteLength() {\n      return Math.ceil(Math.max(...Object.keys(this.value)) / 8) + 1;\n    }\n\n    toBitmap() {\n      const length = this.bitmapByteLength();\n      const buffer = Buffer.alloc(length);\n\n      for (let i = 0; i < length; i ++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j ++) {\n          byte = (byte << 1) | (this.value[i * 8 + j] ? 1 : 0);\n        }\n        buffer.writeUInt8(byte, i);\n      }\n      return buffer;\n    }\n\n    byteLength() {\n      return this.bitmapByteLength() + 1;\n    }\n\n    write(buffer, offset) {\n      const bitmap = this.toBitmap();\n      buffer.writeUInt8(bitmap.length, offset);\n      bitmap.copy(buffer, offset + 1);\n    }\n  }\n\n  class ChunkSizeProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.ChunkSize;\n    }\n  }\n\n  const protocolOptionRecordTypes = {\n    [ProtocolOptions.Version]: VersionProtocolOption,\n    [ProtocolOptions.MinimumVersion]: MinimumVersionProtocolOption,\n    [ProtocolOptions.SwarmIdentifier]: SwarmIdentifierProtocolOption,\n    [ProtocolOptions.ContentIntegrityProtectionMethod]: ContentIntegrityProtectionMethodProtocolOption,\n    [ProtocolOptions.MerkleHashTreeFunction]: MerkleHashTreeFunctionProtocolOption,\n    [ProtocolOptions.LiveSignatureAlgorithm]: LiveSignatureAlgorithmProtocolOption,\n    [ProtocolOptions.ChunkAddressingMethod]: ChunkAddressingMethodProtocolOption,\n    [ProtocolOptions.LiveDiscardWindow]: LiveDiscardWindowProtocolOption,\n    [ProtocolOptions.SupportedMessages]: SupportedMessagesProtocolOption,\n    [ProtocolOptions.ChunkSize]: ChunkSizeProtocolOption,\n  };\n\n  class HandshakeMessage {\n    constructor(channelId = 0, options = []) {\n      this.type = MessageTypes.HANDSHAKE;\n      this.channelId = channelId;\n      this.options = options;\n    }\n\n    read(buffer, offset) {\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(offset);\n      length += 4;\n\n      while (offset + length < buffer.length) {\n        const code = buffer.readUInt8(offset + length);\n        length += 1;\n\n        if (code === ProtocolOptions.EndOption) {\n          break;\n        }\n\n        const RecordType = protocolOptionRecordTypes[code];\n        const option = new RecordType();\n\n        length += option.read(buffer, offset + length);\n        this.options.push(option);\n      }\n\n      return length;\n    }\n\n    byteLength() {\n      return this.options.reduce((length, option) => length + option.byteLength() + 1, 0) + 5;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, offset);\n      length += 4;\n\n      this.options.forEach(option => {\n        buffer.writeUInt8(option.type, offset + length);\n        length += 1;\n\n        option.write(buffer, offset + length);\n        length += option.byteLength();\n      });\n\n      buffer.writeUInt8(ProtocolOptions.EndOption, offset + length);\n      length += 1;\n\n      return length;\n    }\n  }\n\n  class Timestamp {\n    constructor(value = Date.now()) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      const seconds = buffer.readInt32BE(offset);\n      const nanoseconds = buffer.readInt32BE(offset + 4);\n      this.value = seconds * 1e3 + nanoseconds / 1e6;\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeInt32BE(Math.floor(this.value / 1e3), offset);\n      buffer.writeInt32BE((this.value % 1e3) * 1e6, offset + 4);\n    }\n  }\n\n  class DataMessage {\n    constructor(address = new ChunkAddress(), data = [], timestamp = new Timestamp()) {\n      this.type = MessageTypes.DATA;\n      this.address = address;\n      this.data = Buffer.from(data);\n      this.timestamp = timestamp;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n\n      offset += length;\n      const dataLength = Math.min(this.address.rangeByteLength(), buffer.length - offset);\n      this.data = buffer.slice(offset, offset + dataLength);\n\n      return length + dataLength;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.data.length + 8;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.data.copy(buffer, offset + length);\n    }\n  }\n\n  class AddressMessage {\n    constructor(address = new ChunkAddress()) {\n      this.address = address;\n    }\n\n    read(buffer, offset) {\n      return this.address.read(buffer, offset);\n    }\n\n    byteLength() {\n      return this.address.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n    }\n  }\n\n  class AckMessage {\n    constructor(address = new ChunkAddress(), delaySample = new Timestamp()) {\n      this.type = MessageTypes.ACK;\n      this.address = address;\n      this.delaySample = delaySample;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.delaySample.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.delaySample.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.delaySample.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class HaveMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.HAVE;\n    }\n  }\n\n  class IntegrityMessage {\n    constructor(address = new ChunkAddress(), hash = new IntegrityHash()) {\n      this.type = MessageTypes.INTEGRITY;\n      this.address = address;\n      this.hash = hash;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.hash.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.hash.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.hash.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class SignedIntegrityMessage {\n    constructor(\n      address = new ChunkAddress(),\n      timestamp = new Timestamp(),\n      signature = new LiveSignature(),\n    ) {\n      this.type = MessageTypes.SIGNED_INTEGRITY;\n      this.address = address;\n      this.timestamp = timestamp;\n      this.signature = signature;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n      length += this.signature.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.timestamp.byteLength() + this.signature.byteLength();\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.signature.write(buffer, offset + length);\n    }\n  }\n\n  class RequestMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.REQUEST;\n    }\n  }\n\n  class CancelMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.CANCEL;\n    }\n  }\n\n  class EmptyMessage {\n    read() {\n      return 0;\n    }\n\n    byteLength() {\n      return 0;\n    }\n\n    write() {}\n  }\n\n  class ChokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.CHOKE;\n    }\n  }\n\n  class UnchokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.UNCHOKE;\n    }\n  }\n\n  const messageRecordTypes = {\n    [MessageTypes.HANDSHAKE]: HandshakeMessage,\n    [MessageTypes.DATA]: DataMessage,\n    [MessageTypes.ACK]: AckMessage,\n    [MessageTypes.HAVE]: HaveMessage,\n    [MessageTypes.INTEGRITY]: IntegrityMessage,\n    [MessageTypes.SIGNED_INTEGRITY]: SignedIntegrityMessage,\n    [MessageTypes.REQUEST]: RequestMessage,\n    [MessageTypes.CANCEL]: CancelMessage,\n    [MessageTypes.CHOKE]: ChokeMessage,\n    [MessageTypes.UNCHOKE]: UnchokeMessage,\n  };\n\n  class Messages {\n    constructor(values = []) {\n      this.values = values;\n      this.buffer = null;\n      this.offset = 0;\n    }\n\n    static from(values) {\n      if (values instanceof Messages) {\n        return values;\n      }\n      if (Array.isArray(values)) {\n        return new Messages(values);\n      }\n      throw new Error('unable to create Messages from unsupported type');\n    }\n\n    next() {\n      if (this.offset >= this.buffer.length) {\n        return;\n      }\n\n      const messageType = this.buffer.readUInt8(this.offset);\n      this.offset += 1;\n\n      const RecordType = messageRecordTypes[messageType];\n      const message = new RecordType();\n      this.values.push(message);\n\n      this.offset += message.read(this.buffer, this.offset);\n\n      return message;\n    }\n\n    toArray() {\n      // eslint-disable-next-line no-empty\n      while (this.next()) {}\n      return this.values;\n    }\n\n    read(buffer, offset) {\n      this.buffer = buffer;\n      this.offset = offset;\n      return 0;\n    }\n\n    byteLength() {\n      return this.values.reduce((length, message) => length + message.byteLength() + 1, 0);\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.values.forEach(message => {\n        buffer.writeUInt8(message.type, offset + length);\n        length += 1;\n\n        message.write(buffer, offset + length);\n        length += message.byteLength();\n      });\n\n      return length;\n    }\n  }\n\n  class Datagram {\n    constructor(channelId = 0, messages = []) {\n      this.channelId = channelId;\n      this.messages = Messages.from(messages);\n    }\n\n    read(data) {\n      const buffer = Buffer.from(data);\n\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(0);\n      length += 4;\n\n      length += this.messages.read(buffer, length);\n\n      return length;\n    }\n\n    byteLength() {\n      return this.messages.byteLength() + 4;\n    }\n\n    write(buffer) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, 0);\n      length += 4;\n\n      length += this.messages.write(buffer, length);\n\n      return length;\n    }\n\n    toBuffer() {\n      const buffer = Buffer.alloc(this.byteLength());\n      this.write(buffer);\n      return buffer;\n    }\n\n    static from(buffer) {\n      const datagram = new Datagram();\n      datagram.read(buffer);\n      return datagram;\n    }\n  }\n\n  return {\n    VersionProtocolOption,\n    MinimumVersionProtocolOption,\n    SwarmIdentifierProtocolOption,\n    ContentIntegrityProtectionMethodProtocolOption,\n    MerkleHashTreeFunctionProtocolOption,\n    LiveSignatureAlgorithmProtocolOption,\n    ChunkAddressingMethodProtocolOption,\n    LiveDiscardWindowProtocolOption,\n    SupportedMessagesProtocolOption,\n    ChunkSizeProtocolOption,\n    HandshakeMessage,\n    Timestamp,\n    DataMessage,\n    AckMessage,\n    HaveMessage,\n    IntegrityMessage,\n    SignedIntegrityMessage,\n    RequestMessage,\n    CancelMessage,\n    ChokeMessage,\n    UnchokeMessage,\n    Datagram,\n    LiveSignature,\n    IntegrityHash,\n    ChunkAddress,\n  };\n};\n","function createMask(bits) {\n  let mask = 0;\n  for (let i = 0; i < bits; i ++) {\n    mask = (mask << 1) | 1;\n  }\n  return mask;\n}\n\nfunction applyMask(byte, mask, value) {\n  if (value) {\n    return byte | mask;\n  }\n  return byte & (255 ^ mask);\n}\n\nexport default class BitArray {\n  constructor(capacity = 0) {\n    this.offset = 0;\n    this.resize(capacity);\n  }\n\n  // TODO: copy old values..?\n  resize(capacity) {\n    this.capacity = capacity;\n    this.values = new Uint8Array(Math.ceil(capacity / 8));\n  }\n\n  adjustOffset(index) {\n    const {offset} = this;\n    const distance = (index - offset) - this.capacity;\n    if (distance <= 0) {\n      return;\n    }\n\n    this.offset += distance;\n    this.unsafelySetRange(offset + 1, offset + distance + 1, false);\n  }\n\n  getByteIndex(index) {\n    return Math.floor(index / 8) % this.values.length;\n  }\n\n  getBitIndex(index) {\n    return index % 8;\n  }\n\n  getIndexValue(byteIndex, bitIndex) {\n    const byteOffset = this.offset % (this.values.length * 8);\n    const offset = byteIndex < byteOffset\n      ? this.offset + (this.values.length * 8) - byteOffset\n      : this.offset;\n    return offset + (byteIndex * 8 + bitIndex);\n  }\n\n  setRange(start, end, value = true) {\n    if (end - start === 1) {\n      this.set(start, value);\n      return;\n    }\n\n    if (end <= this.offset) {\n      return;\n    }\n    start = Math.max(start, this.offset);\n\n    this.adjustOffset(end);\n    this.unsafelySetRange(start, end, value);\n  }\n\n  unsafelySetRange(start, end, value = true, fillEndByte = false) {\n    if (end - start >= this.capacity) {\n      this.values.fill(value ? 255 : 0);\n      return;\n    }\n\n    const startByteIndex = this.getByteIndex(start);\n    const endByteIndex = this.getByteIndex(end);\n    const startBitIndex = this.getBitIndex(start);\n    const endBitIndex = this.getBitIndex(end);\n\n    if (startByteIndex > endByteIndex) {\n      this.unsafelySetIndexRange(startByteIndex, startBitIndex, this.capacity, 0, value);\n      this.unsafelySetIndexRange(0, 0, endByteIndex, endBitIndex, value);\n      return;\n    }\n\n    this.unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value);\n  }\n\n  unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value) {\n    let startMask = createMask(8 - startBitIndex);\n    let endMask = 255 ^ createMask(8 - endBitIndex);\n\n    if (startByteIndex === endByteIndex) {\n      const mask = startMask & endMask;\n      this.values[startByteIndex] = applyMask(this.values[startByteIndex], mask, value);\n      return;\n    }\n\n    this.values[startByteIndex] = applyMask(this.values[startByteIndex], startMask, value);\n    this.values[endByteIndex] = applyMask(this.values[endByteIndex], endMask, value);\n\n    if (endByteIndex - startByteIndex > 1) {\n      this.values.fill(value ? 255 : 0, startByteIndex + 1, endByteIndex);\n    }\n  }\n\n  unsetRange(start, end) {\n    this.setRange(start, end, false);\n  }\n\n  set(index, value = true) {\n    if (index < this.offset) {\n      return;\n    }\n\n    this.adjustOffset(index);\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    this.values[byteIndex] = applyMask(this.values[byteIndex], mask, value);\n  }\n\n  unset(index) {\n    this.set(index, false);\n  }\n\n  get(index) {\n    if (index <= this.offset || index > this.offset + this.capacity) {\n      return false;\n    }\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    return (this.values[byteIndex] & mask) !== 0;\n  }\n\n  toValueArray() {\n    const values = [];\n    for (let i = 1; i <= this.capacity; i ++) {\n      if (this.get(this.offset + i)) {\n        values.push(this.offset + i);\n      }\n    }\n    return values;\n  }\n\n  min() {\n    for (let i = this.offset; i <= this.offset + this.values.length * 8; i += 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const firstBit = Math.floor(i / 8) * 8;\n        for (let j = firstBit; j < firstBit + 8; j ++) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return Infinity;\n  }\n\n  max() {\n    for (let i = this.values.length * 8 + this.offset; i >= this.offset; i -= 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const lastBit = Math.ceil((i + 1) / 8) * 8;\n        for (let j = lastBit; j > lastBit - 8; j --) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return -Infinity;\n  }\n}\n","export class Flow {\n  constructor() {\n    this.lastVirtualFinish = 0;\n    this.nextVirtualFinish = Infinity;\n    this.queue = [];\n  }\n\n  computeWeight() {\n    return 1;\n  }\n}\n\nexport class Queue {\n  constructor(rate) {\n    this.rate = rate;\n    this.totalQueueSize = 0;\n    this.flows = [];\n  }\n\n  addFlow(flow) {\n    return this.flows.push(flow);\n  }\n\n  removeFlow(flow) {\n    const index = this.flows.indexOf(flow);\n    if (index !== -1) {\n      this.flows.splice(index, 1);\n    }\n  }\n\n  enqueue(flow, size, value) {\n    const weight = flow.computeWeight(this);\n    const rate = this.rate / weight;\n    const virtualFinish = Math.max(Date.now(), flow.lastVirtualFinish) + size / rate;\n\n    flow.queue.push({\n      virtualFinish,\n      size,\n      value,\n    });\n    flow.lastVirtualFinish = virtualFinish;\n    if (flow.queue.length === 1) {\n      flow.nextVirtualFinish = virtualFinish;\n    }\n  }\n\n  getNextScheduledFlow() {\n    let minVirtualFinish = Infinity;\n    let flow = null;\n    for (let i = 0; i < this.flows.length; i ++) {\n      if (this.flows[i].nextVirtualFinish < minVirtualFinish) {\n        flow = this.flows[i];\n        minVirtualFinish = flow.nextVirtualFinish;\n      }\n    }\n\n    return flow;\n  }\n\n  peek() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    return {\n      flow,\n      task: flow.queue[0],\n    };\n  }\n\n  dequeue() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    const task = flow.queue.shift();\n\n    flow.nextVirtualFinish = flow.queue.length !== 0\n      ? flow.queue[0].virtualFinish\n      : Infinity;\n\n    return {flow, task};\n  }\n}\n\nexport default {\n  Queue,\n  Flow,\n};\n","import BitArray from '../bitarray';\nimport Address from './address';\nimport wfq from '../wfq';\nimport EMA from '../ema';\nimport LEDBAT from '../ledbat';\nimport RingBuffer from '../RingBuffer';\nimport fenwick from 'fenwick-tree';\nimport binSearch from '../binSearch';\n// import TinyQeueue from 'tinyqueue';\n\nexport class AvailabilityMap {\n  constructor(capacity) {\n    this.values = new BitArray(capacity);\n  }\n\n  // TODO: ignore very large discard windows from remote peers...\n  setCapacity(capacity) {\n    this.values.resize(capacity);\n  }\n\n  set(address, value) {\n    this.values.setRange(address.start / 2, address.end / 2 + 1, value);\n  }\n\n  get({start, end = start}) {\n    for (let i = start; i <= end; i += 2) {\n      if (!this.values.get(i / 2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  min() {\n    return this.values.min() * 2;\n  }\n\n  max() {\n    return this.values.max() * 2;\n  }\n}\n\nexport class BinRingBuffer extends RingBuffer {\n  advanceLastBin(bin) {\n    super.advanceLastIndex(bin / 2);\n  }\n\n  setRange({start}, values) {\n    for (let i = 0; i < values.length; i ++) {\n      super.set(start / 2 + i, values[i]);\n    }\n  }\n\n  set({bin}, value) {\n    super.set(bin / 2, value);\n  }\n\n  get({bin}) {\n    return super.get(bin / 2);\n  }\n\n  forEach(callback) {\n    for (let i = this.lastIndex - this.capacity; i < this.lastIndex; i ++) {\n      if (callback(this.get(i), i * 2) === false) {\n        break;\n      }\n    }\n  }\n}\n\nexport class ScarcityMap {\n  constructor(capacity) {\n    this.capacity = Math.pow(2, Math.ceil(Math.log2(capacity)));\n    this.left = new Uint32Array(this.capacity).fill(0);\n    this.right = new Uint32Array(this.capacity).fill(0);\n    this.leftOffset = 0;\n    this.leftTotal = 0;\n    this.rightTotal = 0;\n  }\n\n  get rightOffset() {\n    return this.leftOffset + this.capacity;\n  }\n\n  get rolloverThreshold() {\n    return this.leftOffset + this.capacity * 2;\n  }\n\n  get purgeThreshold() {\n    return this.leftOffset + this.capacity * 3;\n  }\n\n  update(index, value) {\n    if (index > this.purgeThreshold) {\n      this.leftOffset = index;\n      this.left.fill(0);\n      this.right.fill(0);\n      this.leftTotal = this.rightTotal = 0;\n    }\n\n    if (index > this.rolloverThreshold) {\n      this.leftOffset += this.capacity;\n      [this.left, this.right] = [this.left, this.right];\n      this.right.fill(0);\n      this.leftTotal = this.rightTotal;\n      this.rightTotal = 0;\n    }\n\n    if (index >= this.rightOffset) {\n      fenwick.update(this.right, index - this.rightOffset, value);\n      this.rightTotal += value;\n    } else if (index >= this.leftOffset) {\n      fenwick.update(this.left, index - this.leftOffset, value);\n      this.leftTotal += value;\n    }\n  }\n\n  query(index) {\n    if (index >= this.rolloverThreshold) {\n      return this.leftTotal + this.rightTotal;\n    } else if (index >= this.rightOffset) {\n      return this.leftTotal + fenwick.query(this.right, index - this.rightOffset);\n    } else if (index >= this.leftOffset) {\n      return fenwick.query(this.left, index - this.leftOffset);\n    }\n    return 0;\n  }\n\n  queryRange(start, end) {\n    return this.query(end) - this.query(start - 1);\n  }\n\n  findSmallValue(fuzz = 0) {\n    const index = binSearch(\n      this.rolloverThreshold - this.leftOffset,\n      (mid, left, right) => {\n        const leftSum = this.queryRange(left, mid - 1);\n        const rightSum = this.queryRange(mid, right);\n\n        if (leftSum === rightSum) return 0;\n        if (leftSum === 0) return 1;\n        if (rightSum === 0) return -1;\n        return (rightSum - leftSum) * (Math.random() < fuzz ? -1 : 1);\n      },\n    );\n\n    return index * 2;\n  }\n}\n\nexport class BinScarcityMap {\n  constructor(capacity) {\n    this.map = new ScarcityMap(capacity);\n  }\n\n  update({bin}, value) {\n    this.map.update(bin / 2, value);\n  }\n\n  findBin() {\n    return this.map.findSmallValue(0.02) * 2;\n  }\n}\n\nexport class RateMeter {\n  constructor(windowMs, sampleWindowMs = 100) {\n    this.firstSampleWindow = Math.floor(Date.now() / sampleWindowMs);\n    this.lastSampleWindow = this.firstSampleWindow;\n    this.windowMs = windowMs;\n    this.sampleWindowMs = sampleWindowMs;\n    this.sum = 0;\n    this.values = new Array(Math.ceil(windowMs / sampleWindowMs));\n\n    this.values.fill(0);\n  }\n\n  adjustSampleWindow() {\n    const sampleWindow = Math.floor(Date.now() / this.sampleWindowMs);\n\n    for (let i = this.lastSampleWindow + 1; i <= sampleWindow; i ++) {\n      const index = i % this.values.length;\n      this.sum -= this.values[index];\n      this.values[index] = 0;\n    }\n    this.lastSampleWindow = sampleWindow;\n  }\n\n  update(value) {\n    this.adjustSampleWindow();\n    this.sum += value;\n    this.values[this.lastSampleWindow % this.values.length] += value;\n  }\n\n  value() {\n    this.adjustSampleWindow();\n    const accumulatedMs = Math.min(\n      (this.lastSampleWindow - this.firstSampleWindow) * this.sampleWindowMs,\n      this.windowMs,\n    );\n    return this.sum / accumulatedMs;\n  }\n}\n\nexport class ChunkRateMeter extends RateMeter {\n  constructor(windowMs = 15000) {\n    super(windowMs);\n    this.lastEndBin = 0;\n  }\n\n  update({start, end}) {\n    if (this.lastHeadBin === 0) {\n      super.update((end - start) / 2);\n    } else if (end > this.lastEndBin) {\n      super.update((end - this.lastEndBin) / 2);\n      this.lastEndBin = end;\n    }\n  }\n}\n\nexport class RequestFlow extends wfq.Flow {\n  constructor(id) {\n    super();\n    this.id = id;\n    this.queueSize = 0;\n  }\n\n  computeWeight(queue) {\n    return this.queueSize / queue.totalQueueSize;\n  }\n}\n\nexport class RequestQueue extends wfq.Queue {\n  constructor(rate) {\n    super(rate);\n    this.totalQueueSize = 0;\n  }\n\n  enqueue(flow, size, value) {\n    this.totalQueueSize += size;\n    flow.queueSize += size;\n    super.enqueue(flow, size, value);\n  }\n\n  cancel(flow, filter) {\n    flow.queue = flow.queue.filter(task => {\n      const remove = filter(task.value);\n\n      if (remove) {\n        this.totalQueueSize -= task.size;\n        flow.queueSize -= task.size;\n      }\n\n      return !remove;\n    });\n  }\n\n  dequeue() {\n    const result = super.dequeue();\n    if (result === null) {\n      return null;\n    }\n\n    this.totalQueueSize -= result.task.size;\n    result.flow.queueSize -= result.task.size;\n\n    return result;\n  }\n}\n\nexport class SchedulerChunkState {\n  constructor(bin) {\n    this.bin = bin;\n    this.reset();\n  }\n\n  reset() {\n    this.availableCopies = 0;\n    this.requestTime = [0, 0];\n    this.requestPeerId = 0;\n\n    this.requested = false;\n    this.received = false;\n    this.verified = false;\n  }\n}\n\nexport class SchedulerChunkRequestMap {\n  constructor() {\n    this.valueByBin = {};\n    this.head = undefined;\n    this.tail = undefined;\n    this.length = 0;\n  }\n\n  insert(address) {\n    const now = Date.now();\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      const value = {\n        address: new Address(i, [i, i]),\n        createdAt: now,\n        next: undefined,\n        prev: undefined,\n      };\n      this.valueByBin[i] = value;\n\n      if (this.head === undefined) {\n        this.head = value;\n      } else {\n        this.tail.next = value;\n      }\n      value.prev = this.tail;\n      this.tail = value;\n\n      this.length ++;\n    }\n  }\n\n  get({bin}) {\n    return this.valueByBin[bin];\n  }\n\n  remove({bin}) {\n    const value = this.valueByBin[bin];\n    if (value === undefined) {\n      return;\n    }\n    delete this.valueByBin[bin];\n\n    if (this.head === value) {\n      this.head = value.next;\n    }\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.prev !== undefined) {\n      value.prev.next = value.next;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = value.prev;\n    }\n\n    this.length --;\n  }\n\n  peek() {\n    return this.head;\n  }\n\n  pop() {\n    if (this.head === undefined) {\n      return;\n    }\n    const value = this.head;\n\n    this.head = value.next;\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = undefined;\n    }\n\n    delete this.valueByBin[value.address.bin];\n\n    this.length --;\n\n    return value;\n  }\n}\n\nexport class SchedulerChunkMap extends BinRingBuffer {\n  createEmptyValue(bin, value) {\n    if (value === undefined) {\n      return new SchedulerChunkState(bin);\n    }\n\n    // put the peer map here and when we advance the bin meme update\n    // the availability map here\n\n    value.reset();\n    return value;\n  }\n}\n\nexport class SchedulerPeerState {\n  constructor(peer, requestFlow) {\n    this.peer = peer;\n    this.requestFlow = requestFlow;\n    this.availableChunks = new AvailabilityMap();\n\n    this.ledbat = new LEDBAT();\n\n    // this.rttMean = new EMA(0.125);\n    // this.rttVar = new EMA(0.25);\n\n    this.rttMean = new EMA(0.05);\n    this.rttVar = new EMA(0.05);\n\n    this.chunkIntervalMean = new EMA(0.25);\n    this.chunkRate = new RateMeter(15000);\n    this.wasteRate = new RateMeter(15000);\n    this.lastChunkTime = null;\n\n    this.requestTimes = new BinRingBuffer();\n\n    this.requestedChunks = new SchedulerChunkRequestMap();\n    this.sentRequests = new SchedulerChunkRequestMap();\n\n    this.timeouts = 0;\n    this.validChunks = 0;\n    this.invalidChunks = 0;\n\n    this.requestQueue = [];\n\n    this.sentChunks = new AvailabilityMap();\n    this.receivedChunks = new AvailabilityMap();\n  }\n}\n\nexport class Scheduler {\n  constructor(chunkSize, clientOptions) {\n    const {\n      liveDiscardWindow,\n      uploadRateLimit,\n    } = clientOptions;\n\n    this.chunkSize = chunkSize;\n    this.liveDiscardWindow = liveDiscardWindow;\n\n    this.peerStates = {};\n    // this.chunkStates = new SchedulerChunkMap(liveDiscardWindow);\n    this.loadedChunks = new AvailabilityMap(liveDiscardWindow);\n    this.peerCount = 0;\n\n    this.chunkRate = new ChunkRateMeter();\n\n    this.requestQueue = new RequestQueue(uploadRateLimit / 1000);\n\n    this.timers = {};\n\n    this.lastExportedBin = -Infinity;\n    this.lastCompletedBin = -Infinity;\n    this.requestedChunks = new AvailabilityMap(liveDiscardWindow);\n\n    // this.scarcityMap = new BinScarcityMap(liveDiscardWindow);\n    // this.binQueue = new TinyQeueue([], (a, b) => {\n    //   return a.bin - b.bin;\n    // });\n\n    // TODO: up/down regulate when we're downloading slower or faster than the\n    // stream's average bit rate?\n    this.priorityBinThreshold = 4;\n    // window.setUrgencyThreshold = v => this.priorityBinThreshold = v;\n\n    this.totalSends = 0;\n    this.totalRequests = 0;\n    this.totalRequestsReceived = 0;\n    this.totalReceived = 0;\n    this.totalAdded = 0;\n    this.totalCancelled = 0;\n    this.ackUnknownSend = 0;\n    this.totalDroppedRequests = 0;\n    this.sendDelay = new EMA(0.05);\n    // setInterval(this.debug.bind(this), 1000);\n\n    this.nextSendTime = 0;\n    this.nextSendTimeout = 0;\n  }\n\n  debug() {\n    console.log('---');\n    Object.values(this.peerStates).forEach((peerState) => {\n      if (!peerState.peer.isReady()) {\n        return;\n      }\n\n      let cto = peerState.ledbat.cto / (peerState.ledbat.cwnd / this.chunkSize);\n      const timeout = Math.min(cto, 1000);\n\n      const availableChunks = peerState.availableChunks;\n\n      const firstLoadedChunk = this.loadedChunks.min();\n      const firstRequestedChunk = this.requestedChunks.min();\n      const startBin = Math.max(\n        availableChunks.min(),\n        isFinite(firstLoadedChunk) ? firstLoadedChunk : -Infinity,\n        isFinite(firstRequestedChunk) ? firstLoadedChunk : -Infinity,\n        this.lastCompletedBin,\n      );\n      const lastAvailableBin = Math.min(availableChunks.max(), startBin + this.liveDiscardWindow * 2);\n\n      const planFor = Math.min(1000, peerState.ledbat.rttMean.value() * 4);\n\n      const dip = peerState.chunkIntervalMean.value() || 0;\n      const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n      const cwnd = firstPlanPick - peerState.sentRequests.length;\n\n      console.log(JSON.stringify({\n        peer_remoteId: peerState.peer.remoteId,\n        peer_localId: peerState.peer.localId,\n        sentRequests: peerState.sentRequests.length,\n        swift_rtt: peerState.rttMean.value(),\n        swift_rttvar: peerState.rttVar.value(),\n        swift_chunkIntervalMean: peerState.chunkIntervalMean.value(),\n        chunkRate: peerState.chunkRate.value(),\n        wasteRate: peerState.wasteRate.value(),\n        swift_cwnd: cwnd,\n        ledbat_cwnd: peerState.ledbat.cwnd,\n        ledbat_cto: peerState.ledbat.cto,\n        ledbat_currentDelay: peerState.ledbat.currentDelay.getMin(),\n        ledbat_baseDelay: peerState.ledbat.baseDelay.getMin(),\n        ledbat_rttMean: peerState.ledbat.rttMean.value(),\n        ledbat_rttVar: peerState.ledbat.rttVar.value(),\n        ledbat_rtt: peerState.ledbat.rtt,\n        ledbat_flightSize: peerState.ledbat.flightSize,\n        // requestedChunks: peerState.requestedChunks,\n        timeouts: peerState.timeouts,\n        validChunks: peerState.validChunks,\n        invalidChunks: peerState.invalidChunks,\n        timeout: timeout,\n        picker_startBin: startBin,\n        picker_lastAvailableBin: lastAvailableBin,\n      }, true, 2));\n    });\n\n    console.log(JSON.stringify({\n      totalSends: this.totalSends,\n      totalRequests: this.totalRequests,\n      totalRequestsReceived: this.totalRequestsReceived,\n      totalDroppedRequests: this.totalDroppedRequests,\n      totalReceived: this.totalReceived,\n      totalAdded: this.totalAdded,\n      totalCancelled: this.totalCancelled,\n      ackUnknownSend: this.ackUnknownSend,\n      minIncompleteBin: this.lastCompletedBin,\n      sendDelay: this.sendDelay.value(),\n      picker_firstLoadedChunk: this.loadedChunks.min(),\n      picker_firstRequestedChunk: this.requestedChunks.min(),\n      chunkRate: this.chunkRate.value(),\n    }, true, 2));\n    // this.totalSends = 0;\n    // this.totalRequests = 0;\n    // this.totalRequestsReceived = 0;\n    // this.totalReceived = 0;\n    // // this.ackUnknownSend = 0;\n    // this.totalAdded = 0;\n    // this.totalCancelled = 0;\n    // this.totalDroppedRequests = 0;\n  }\n\n  update(peerState, update) {\n    if (!peerState.peer.isReady()) {\n      this.timers[peerState.localId] = setTimeout(update, 1000);\n      return;\n    }\n\n    const {\n      availableChunks,\n      ledbat,\n      sentRequests,\n    } = peerState;\n\n    const now = Date.now();\n    // const planFor = ledbat.rttMean.value();\n    // const planFor = ledbat.rttMean.value() * 2 + ledbat.rttVar.value() * 4;\n    const planFor = Math.max(1000, ledbat.rttMean.value() * 4);\n    const timeoutThreshold = now - Math.min(1000, ledbat.cto) * 2;\n\n    const dip = peerState.chunkIntervalMean.value() || 0;\n    const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n    const cwnd = firstPlanPick - sentRequests.length;\n\n    const cancelledRequests = [];\n    while (sentRequests.peek() !== undefined\n      && sentRequests.peek().createdAt < timeoutThreshold) {\n      cancelledRequests.push(sentRequests.pop());\n    }\n\n    if (cancelledRequests.length > 0) {\n      this.totalCancelled += cancelledRequests.length;\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        sentRequests.remove(address);\n      });\n\n      ledbat.onDataLoss(cancelledRequests.length * this.chunkSize);\n      // console.log(cancelledRequests);\n    }\n\n    ledbat.digestDelaySamples();\n\n    const requestAddresses = [];\n\n    const startBin = Math.max(\n      this.loadedChunks.values.offset * 2 + 2,\n      this.requestedChunks.values.offset * 2 + 2,\n      availableChunks.min(),\n      this.lastCompletedBin,\n    );\n    const endBin = Math.min(\n      startBin + this.liveDiscardWindow * 2,\n      availableChunks.max(),\n    );\n    const priorityBinThreshold = this.lastCompletedBin + this.priorityBinThreshold;\n\n    for (let i = startBin; i < endBin && requestAddresses.length < cwnd; i += 2) {\n      const address = new Address(i, [i, i]);\n      if (!this.loadedChunks.get(address)\n        && !this.requestedChunks.get(address)\n        && availableChunks.get(address)) {\n\n        if (address.bin < priorityBinThreshold || Math.random() < 0.1) {\n          requestAddresses.push(address);\n          sentRequests.insert(address);\n          this.requestedChunks.set(address);\n        }\n      }\n    }\n\n    if (this.lastCompletedBin === -Infinity && requestAddresses.length !== 0) {\n      const firstRequestedBin = requestAddresses[0].bin;\n      this.lastCompletedBin = firstRequestedBin;\n      this.lastExportedBin = firstRequestedBin - 2;\n    }\n\n    if (cancelledRequests.length !== 0) {\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        peerState.peer.sendCancel(address);\n      });\n    }\n\n    if (requestAddresses.length !== 0) {\n      this.totalRequests += requestAddresses.length;\n      peerState.peer.sendRequest(...requestAddresses);\n\n      requestAddresses.forEach(address => {\n        if (peerState.requestTimes.get(address) === undefined) {\n          peerState.requestTimes.set(address, now);\n        }\n      });\n    }\n\n    while (ledbat.flightSize < ledbat.cwnd && peerState.requestQueue.length) {\n      const requestedAddress = peerState.requestQueue.shift();\n      if (requestedAddress !== undefined) {\n        const requestedChunk = peerState.requestedChunks.get(requestedAddress);\n        if (requestedChunk !== undefined) {\n          requestedChunk.sentAt = now;\n          peerState.ledbat.addSent(this.chunkSize);\n          peerState.peer.sendChunk(requestedAddress);\n          this.totalSends ++;\n        }\n      }\n\n      peerState.sentChunks.set(requestedAddress);\n\n      // TODO: volunteer bin we have and they don't?\n    }\n\n    peerState.peer.flush();\n    let sendInterval = Math.min(1000, (ledbat.rttMean.value() || 0) / (ledbat.cwnd / this.chunkSize));\n    this.timers[peerState.localId] = setTimeout(update, sendInterval);\n  }\n\n  addPeer(peer) {\n    const {localId} = peer;\n\n    const requestFlow = new RequestFlow(localId);\n    this.requestQueue.addFlow(requestFlow);\n\n    const peerState = new SchedulerPeerState(peer, requestFlow);\n    this.peerStates[localId] = peerState;\n\n    const update = () => this.update(peerState, update);\n    this.timers[localId] = setTimeout(update, 1000);\n  }\n\n  removePeer({localId}) {\n    const peerState = this.peerStates[localId];\n    if (peerState === undefined) {\n      return;\n    }\n\n    const {\n      requestFlow,\n      sentRequests,\n    } = peerState;\n\n    this.requestQueue.removeFlow(requestFlow);\n\n    this.totalCancelled += sentRequests.length;\n    while (sentRequests.length) {\n      const {address} = sentRequests.pop();\n      this.requestedChunks.set(address, false);\n    }\n\n    delete this.peerStates[localId];\n\n    clearTimeout(this.timers[localId]);\n  }\n\n  getPeerState({localId}) {\n    return this.peerStates[localId];\n  }\n\n  getRecentChunks() {\n    // TODO: how to pick this... maybe remote discard window size?\n    // const startBin = this.loadedChunks.max();\n    // const startBin = this.loadedChunks.max() - 32;\n    const startBin = this.lastCompletedBin - 32;\n\n    // bail if no chunks have been loaded yet\n    if (!isFinite(startBin)) {\n      return [];\n    }\n\n    const bins = [];\n\n    const endBin = this.loadedChunks.max();\n    for (let i = startBin; i <= endBin; i += 2) {\n      const address = new Address(i);\n      if (this.loadedChunks.get(address)) {\n        bins.push(address);\n      }\n    }\n\n    return bins;\n  }\n\n  setLiveDiscardWindow(peer, liveDiscardWindow) {\n    this.getPeerState(peer).availableChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).requestTimes.setCapacity(liveDiscardWindow);\n\n    this.getPeerState(peer).sentChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).receivedChunks.setCapacity(liveDiscardWindow);\n  }\n\n  markChunkReceived(peer, address, delaySample) {\n    const now = Date.now();\n\n    this.totalReceived ++;\n\n    const peerState = this.getPeerState(peer);\n    if (peerState === undefined) {\n      return;\n    }\n\n    if (this.loadedChunks.get(address)) {\n      peerState.wasteRate.update(1);\n    }\n\n    const request = peerState.sentRequests.get(address);\n    if (request === undefined) {\n      return;\n    }\n\n    if (peerState.lastChunkTime !== null) {\n      const chunkInterval = now - peerState.lastChunkTime;\n      peerState.chunkIntervalMean.update(chunkInterval);\n    }\n    peerState.lastChunkTime = now;\n    if (!this.loadedChunks.get(address)) {\n      peerState.chunkRate.update(1);\n    }\n\n    const requestTime = peerState.requestTimes.get(address);\n    if (requestTime !== undefined) {\n      peerState.ledbat.addRttSample(now - requestTime);\n    }\n\n    // peerState.rttMean.update(rtt);\n    // peerState.rttVar.update(Math.abs(rtt - peerState.rttMean.value()));\n\n    // TODO: double check LEDBAT to make sure we shouldn't be doing\n    // something here\n\n    peerState.sentRequests.remove(address);\n  }\n\n  markChunkVerified(peer, address) {\n    // this.chunkStates.get(address).verified = true;\n    this.getPeerState(peer).validChunks ++;\n    this.getPeerState(peer).receivedChunks.set(address);\n\n    // this.chunkStates.advanceLastBin(address.end);\n\n    this.chunkRate.update(address);\n    this.loadedChunks.set(address);\n\n    for (let i = this.lastCompletedBin; this.loadedChunks.get(new Address(i, [i, i])); i += 2) {\n      this.lastCompletedBin = i;\n    }\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  getNewCompleteBins() {\n    const nextExportedBin = this.lastExportedBin + 2;\n    if (nextExportedBin <= this.lastCompletedBin) {\n      this.lastExportedBin = this.lastCompletedBin;\n      return [nextExportedBin, this.lastCompletedBin];\n    }\n  }\n\n  markChunkRejected(peer, address) {\n    this.requestedChunks.set(address, false);\n    this.getPeerState(peer).invalidChunks ++;\n  }\n\n  // mark an address available from a peer (HAVE)\n  markChunkAvailable(peer, address) {\n    for (let i = address.start; i <= address.end; i += 2) {\n      const address = new Address(i, [i, i]);\n\n      // this.binQueue.push(address);\n      // this.scarcityMap.update(address, 1);\n\n      if (!this.getPeerState(peer).availableChunks.get(address)) {\n        this.totalAdded ++;\n      }\n    }\n\n    this.getPeerState(peer).availableChunks.set(address);\n  }\n\n  // mark an address where chunks have been manually added ie. by an injector\n  markChunksLoaded(address) {\n    this.loadedChunks.set(address);\n    this.lastCompletedBin = address.start;\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  markSendAcked(peer, address, delaySample) {\n    const peerState = this.getPeerState(peer);\n\n    peerState.ledbat.addDelaySample(delaySample, this.chunkSize);\n\n    const sentChunk = peerState.requestedChunks.get(address);\n    if (sentChunk === undefined) {\n      this.ackUnknownSend ++;\n      return;\n    }\n\n    // TODO: is this necessary?\n    if (sentChunk.sentAt) {\n      peerState.ledbat.addRttSample(Date.now() - sentChunk.sentAt);\n    }\n\n    peerState.requestedChunks.remove(address);\n  }\n\n  enqueueRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      this.totalRequestsReceived ++;\n      peerState.requestQueue.push(new Address(i, [i, i]));\n    }\n\n    peerState.requestedChunks.insert(address);\n  }\n\n  cancelRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n    const requestedChunk = peerState.requestedChunks.get(address);\n    if (requestedChunk && requestedChunk.sentAt) {\n      peerState.ledbat.onDataLoss(this.chunkSize);\n    }\n    peerState.requestedChunks.remove(address);\n\n    // this.requestQueue.cancel(\n    //   this.getPeerState(peer).requestFlow,\n    //   ({bin}) => address.containsBin(bin),\n    // );\n  }\n}\n","import {EventEmitter} from 'events';\nimport once from 'lodash.once';\nimport Address from './address';\nimport SwarmId from './swarmid';\nimport LEDBAT from '../ledbat';\nimport {\n  createChunkAddressFieldType,\n  createLiveSignatureFieldType,\n  createIntegrityHashFieldType,\n  createEncoding,\n} from './encoding';\nimport {\n  MaxChannelId,\n  ProtocolOptions,\n  MessageTypes,\n} from './constants';\nimport {\n  createMerkleHashTreeFunction,\n  createLiveSignatureVerifyFunction,\n  createLiveSignatureSignFunction,\n  createContentIntegrityVerifierFactory,\n} from './integrity';\nimport {\n  BinRingBuffer,\n  Scheduler,\n} from './scheduler';\n\nconst genericEncoding = createEncoding();\n\nconst BUFFER_SIZE = 3e7;\nconst MAX_UPLOAD_RATE = 1e6;\nconst HANDSHAKE_TIMEOUT = 5000;\n\nexport class Swarm extends EventEmitter {\n  constructor(uri, clientOptions) {\n    super();\n\n    const {swarmId} = uri;\n    const {\n      [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n      [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n      [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n      [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n      [ProtocolOptions.ChunkSize]: chunkSize,\n    } = uri.protocolOptions;\n    const {\n      liveDiscardWindow,\n      privateKey,\n    } = clientOptions;\n\n    this.uri = uri;\n\n    this.encoding = createEncoding(\n      createChunkAddressFieldType(chunkAddressingMethod, chunkSize),\n      createIntegrityHashFieldType(merkleHashTreeFunction),\n      createLiveSignatureFieldType(liveSignatureAlgorithm, swarmId),\n    );\n\n    const liveSignatureSignFunction = privateKey !== undefined\n      ? createLiveSignatureSignFunction(liveSignatureAlgorithm, privateKey)\n      : undefined;\n    this.contentIntegrity = createContentIntegrityVerifierFactory(\n      contentIntegrityProtectionMethod,\n      createMerkleHashTreeFunction(merkleHashTreeFunction),\n      createLiveSignatureVerifyFunction(liveSignatureAlgorithm, swarmId),\n      liveSignatureSignFunction,\n      liveDiscardWindow,\n    );\n\n    this.chunkBuffer = new BinRingBuffer(liveDiscardWindow);\n    this.scheduler = new Scheduler(chunkSize, clientOptions);\n\n    this.protocolOptions = [\n      new this.encoding.VersionProtocolOption(),\n      new this.encoding.MinimumVersionProtocolOption(),\n      new this.encoding.SwarmIdentifierProtocolOption(swarmId.toBuffer()),\n      new this.encoding.ContentIntegrityProtectionMethodProtocolOption(contentIntegrityProtectionMethod),\n      new this.encoding.MerkleHashTreeFunctionProtocolOption(merkleHashTreeFunction),\n      new this.encoding.LiveSignatureAlgorithmProtocolOption(liveSignatureAlgorithm),\n      new this.encoding.ChunkAddressingMethodProtocolOption(chunkAddressingMethod),\n      new this.encoding.ChunkSizeProtocolOption(chunkSize),\n      new this.encoding.LiveDiscardWindowProtocolOption(liveDiscardWindow),\n    ];\n  }\n\n  verifyProtocolOptions(protocolOptions) {\n    Object.entries(this.uri.protocolOptions)\n      .forEach(([protocolOption, value]) => {\n        if (protocolOptions[protocolOption] !== value) {\n          const protocolOptionName = ProtocolOptions.name(protocolOption);\n          throw new Error(`invalid peer options: ${protocolOptionName} mismatch`);\n        }\n      });\n  }\n\n  emitNewData() {\n    const newBins = this.scheduler.getNewCompleteBins();\n    if (newBins !== undefined) {\n      const [minNewBin, maxNewBin] = newBins;\n      const chunks = [];\n      for (let i = minNewBin; i <= maxNewBin; i += 2) {\n        const chunk = this.chunkBuffer.get(new Address(i));\n\n        if (chunk === undefined) {\n          // debugger;\n          continue;\n        }\n        chunks.push(chunk);\n      }\n      this.emit('data', chunks);\n    }\n  }\n}\n\nconst PeerState = {\n  CONNECTING: 1,\n  AWAITING_HANDSHAKE: 2,\n  READY: 3,\n  CHOKED: 4,\n  DISCONNECTING: 5,\n  CLOSED: 6,\n};\n\nclass PeerDataHandlerContext {\n  constructor(swarm) {\n    this.swarm = swarm;\n    this.integrityVerifier = null;\n  }\n\n  getContentIntegrityVerifier(address) {\n    if (this.integrityVerifier === null) {\n      this.integrityVerifier = this.swarm.contentIntegrity.createVerifier(address);\n    }\n    return this.integrityVerifier;\n  }\n}\n\n// TODO: disconnect inactive peers\nclass Peer {\n  constructor(swarm, channel, remoteId = 0, localId = Peer.createChannelId()) {\n    this.swarm = swarm;\n    this.channel = channel;\n    this.remoteId = remoteId;\n    this.localId = localId;\n    this.state = PeerState.CONNECTING;\n\n    this.handlers = {\n      [MessageTypes.HANDSHAKE]: this.handleHandshakeMessage.bind(this),\n      [MessageTypes.DATA]: this.handleDataMessage.bind(this),\n      [MessageTypes.HAVE]: this.handleHaveMessage.bind(this),\n      [MessageTypes.ACK]: this.handleAckMessage.bind(this),\n      [MessageTypes.INTEGRITY]: this.handleIntegrityMessage.bind(this),\n      [MessageTypes.SIGNED_INTEGRITY]: this.handleSignedIntegrityMessage.bind(this),\n      [MessageTypes.REQUEST]: this.handleRequestMessage.bind(this),\n      [MessageTypes.CANCEL]: this.handleCancelMessage.bind(this),\n      [MessageTypes.CHOKE]: this.handleChokeMessage.bind(this),\n      [MessageTypes.UNCHOKE]: this.handleUnchokeMessage.bind(this),\n    };\n\n    this.sendBuffer = [];\n\n    this.swarm.scheduler.addPeer(this);\n  }\n\n  static createChannelId() {\n    return Math.round(Math.random() * MaxChannelId);\n  }\n\n  init() {\n    this.sendHandshake();\n    this.flush();\n\n    this.state = PeerState.AWAITING_HANDSHAKE;\n  }\n\n  close() {\n    this.state = PeerState.CLOSED;\n    this.swarm.scheduler.removePeer(this);\n  }\n\n  handleData(data) {\n    const context = new PeerDataHandlerContext(this.swarm);\n    data.messages.toArray().forEach(message => this.handleMessage(message, context));\n  }\n\n  handleMessage(message, context) {\n    const handler = this.handlers[message.type];\n    if (handler === undefined) {\n      throw new Error('unsupported message type');\n    }\n\n    // console.log(MessageTypes.name(message.type), this.remoteId, message);\n    handler(message, context);\n  }\n\n  handleHandshakeMessage(handshake) {\n    const options = handshake.options.reduce((options, {type, value}) => ({...options, [type]: value}), {});\n\n    const liveDiscardWindow = options[ProtocolOptions.LiveDiscardWindow];\n    if (liveDiscardWindow !== undefined) {\n      this.swarm.scheduler.setLiveDiscardWindow(this, liveDiscardWindow);\n    }\n\n    this.swarm.verifyProtocolOptions(options);\n\n    this.remoteId = handshake.channelId;\n\n    // console.log('received handshake message while in state', this.state);\n    if (this.state !== PeerState.READY) {\n      this.sendHandshake();\n      this.swarm.scheduler.getRecentChunks().forEach(address => this.sendHave(address));\n      this.flush();\n    }\n\n    this.state = PeerState.READY;\n  }\n\n  handleDataMessage(message, context) {\n    const address = Address.from(message.address);\n    const delaySample = LEDBAT.computeOneWayDelay(message.timestamp.value);\n\n    this.swarm.scheduler.markChunkReceived(this, address, delaySample);\n\n    const {encoding} = this.swarm;\n    this.channel.send(new encoding.Datagram(\n      this.remoteId,\n      [new encoding.AckMessage(message.address, new encoding.Timestamp(delaySample))],\n    ));\n\n    context.getContentIntegrityVerifier(address).verifyChunk(address, message.data)\n      .then(() => {\n        this.swarm.chunkBuffer.set(address, message.data);\n        this.swarm.scheduler.markChunkVerified(this, address);\n        this.swarm.emitNewData();\n      })\n      .catch((err) => {\n        console.log('error validating chunk', err);\n        this.swarm.scheduler.markChunkRejected(this, address);\n      });\n  }\n\n  handleHaveMessage(message) {\n    this.swarm.scheduler.markChunkAvailable(this, Address.from(message.address));\n  }\n\n  handleAckMessage(message) {\n    const address = Address.from(message.address);\n    this.swarm.scheduler.markChunkAvailable(this, address);\n    this.swarm.scheduler.markSendAcked(this, address, message.delaySample.value);\n  }\n\n  handleIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHash(address, message.hash.value);\n  }\n\n  handleSignedIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHashSignature(address, message.signature.value);\n  }\n\n  handleRequestMessage(message) {\n    this.swarm.scheduler.enqueueRequest(this, Address.from(message.address));\n  }\n\n  handleCancelMessage(message) {\n    this.swarm.scheduler.cancelRequest(this, Address.from(message.address));\n  }\n\n  handleChokeMessage() {\n    this.state = PeerState.CHOKED;\n  }\n\n  handleUnchokeMessage() {\n    this.state = PeerState.READY;\n  }\n\n  isReady() {\n    return this.state === PeerState.READY;\n  }\n\n  isInitialized() {\n    return this.state !== PeerState.CONNECTING && this.state !== PeerState.AWAITING_HANDSHAKE;\n  }\n\n  sendHandshake() {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HandshakeMessage(\n      this.localId,\n      [\n        ...this.swarm.protocolOptions,\n        new encoding.SupportedMessagesProtocolOption(Object.keys(this.handlers)),\n      ],\n    ));\n  }\n\n  sendHave(address) {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HaveMessage(encoding.ChunkAddress.from(address)));\n  }\n\n  sendRequest(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.RequestMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendCancel(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.CancelMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendChunk(address, timestamp) {\n    const chunk = this.swarm.chunkBuffer.get(address);\n    if (chunk === undefined) {\n      return;\n    }\n\n    // TODO: omit signatures for bins the peer has already acked\n    const constituentSignatures = this.swarm.contentIntegrity.getConstituentSignatures(address);\n    if (constituentSignatures === undefined) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n\n    constituentSignatures\n      .reverse()\n      .forEach(({bin, signature}, i) => {\n        const address = encoding.ChunkAddress.from(new Address(bin));\n\n        this.sendBuffer.push(new encoding.IntegrityMessage(\n          address,\n          new encoding.IntegrityHash(signature.getHash()),\n        ));\n\n        if (i === 0) {\n          this.sendBuffer.push(new encoding.SignedIntegrityMessage(\n            address,\n            new encoding.Timestamp(timestamp),\n            new encoding.LiveSignature(signature.getSignatureHash()),\n          ));\n        }\n      });\n\n    this.sendBuffer.push(new encoding.DataMessage(encoding.ChunkAddress.from(address), chunk));\n\n    this.flush();\n  }\n\n  flush() {\n    if (this.sendBuffer.length === 0) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n    try {\n      this.channel.send(new encoding.Datagram(this.remoteId, this.sendBuffer));\n    } catch (e) {\n      console.log('error sending');\n      console.log(this.channel);\n      throw e;\n    }\n    this.sendBuffer = [];\n  }\n}\n\nclass SwarmSet extends EventEmitter {\n  constructor() {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.swarms = {};\n  }\n\n  insert(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] === undefined) {\n      this.swarms[key] = swarm;\n      this.emit('insert', swarm);\n    }\n  }\n\n  remove(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] !== undefined) {\n      delete this.swarms[key];\n      this.emit('remove', swarm);\n    }\n  }\n\n  get(swarmId) {\n    return this.swarms[SwarmSet.swarmIdToKey(swarmId)];\n  }\n\n  toArray() {\n    return Object.values(this.swarms);\n  }\n\n  static swarmIdToKey(swarmId) {\n    return swarmId.toBuffer().toString('base64');\n  }\n}\n\nexport class Client {\n  constructor() {\n    this.channels = [];\n\n    this.swarms = new SwarmSet();\n  }\n\n  publishSwarm(swarm) {\n    this.swarms.insert(swarm);\n  }\n\n  unpublishSwarm(swarm) {\n    this.swarms.remove(swarm);\n  }\n\n  joinSwarm(uri) {\n    const chunkSize = uri.protocolOptions[ProtocolOptions.ChunkSize];\n    const clientOptions = {\n      liveDiscardWindow: Math.ceil(BUFFER_SIZE / chunkSize),\n      uploadRateLimit: MAX_UPLOAD_RATE,\n    };\n\n    const swarm = new Swarm(uri, clientOptions);\n    this.swarms.insert(swarm);\n\n    return swarm;\n  }\n\n  leaveSwarm({id}) {\n    const swarm = this.swarms.get(id);\n    this.swarms.remove(swarm);\n  }\n\n  createChannel(conn) {\n    const channel = new Channel(conn, this.swarms);\n    this.channels.push(channel);\n\n    channel.once('close', () => {\n      const index = this.channels.indexOf(channel);\n      this.channels.splice(index, 1);\n    });\n  }\n}\n\nexport class Channel extends EventEmitter {\n  constructor(conn, swarms) {\n    super();\n\n    this.conn = conn;\n    this.swarms = swarms;\n    this.peers = {};\n\n    this.handleSwarmInsert = this.getOrCreatePeer.bind(this);\n    this.swarms.on('insert', this.handleSwarmInsert);\n\n    const liveSwarms = swarms.toArray();\n    this.conn.addEventListener('open', () => liveSwarms.forEach(this.handleSwarmInsert));\n    this.conn.addEventListener('message', this.handleMessage.bind(this));\n    this.conn.addEventListener('error', err => console.log('connection error:', err));\n    this.conn.addEventListener('close', this.handleClose.bind(this));\n  }\n\n  handleMessage(event) {\n    let data = new genericEncoding.Datagram();\n    try {\n      data.read(event.data);\n    } catch (e) {\n      console.log(event.data);\n      throw e;\n    }\n\n    let peer = this.peers[data.channelId];\n    if (peer === undefined) {\n      if (data.channelId !== 0) {\n        return;\n      }\n\n      let handshake;\n      try {\n        handshake = data.messages.next();\n      } catch (error) {\n        console.log('error decoding mesasge', error);\n        return;\n      }\n      if (handshake === undefined || handshake.type !== MessageTypes.HANDSHAKE) {\n        console.log('rejected new peer without handshake');\n        return;\n      }\n      const swarmId = handshake.options.find(({type}) => type === ProtocolOptions.SwarmIdentifier);\n      if (swarmId === undefined) {\n        // console.log('rejecting new peer with invalid swarm id');\n        return;\n      }\n      const swarm = this.swarms.get(SwarmId.from(swarmId.value));\n      if (swarm === undefined) {\n        // console.log('rejecting new peer requesting unknown swarm');\n        return;\n      }\n\n      peer = this.getOrCreatePeer(swarm);\n    }\n\n    data = new peer.swarm.encoding.Datagram();\n    data.read(event.data);\n    // console.log('RECEIVED', data.messages.toArray());\n    peer.handleData(data);\n  }\n\n  send(data) {\n    if (this.conn.readyState !== 'open') {\n      this.conn.addEventListener('open', () => this.conn.send(data.toBuffer()));\n      return;\n    }\n\n    try {\n      this.conn.send(data.toBuffer());\n    } catch (e) {\n      this.conn.close();\n    }\n  }\n\n  handleClose() {\n    this.swarms.removeListener('insert', this.handleSwarmInsert);\n    Object.values(this.peers).forEach(peer => peer.close());\n    this.emit('close');\n  }\n\n  getOrCreatePeer(swarm) {\n    let peer = Object.values(this.peers).find(p => p.swarm === swarm);\n    return peer || this.createPeer(swarm);\n  }\n\n  createPeer(swarm) {\n    const {peers, swarms} = this;\n\n    const peer = new Peer(swarm, this);\n    peers[peer.localId] = peer;\n    peer.init();\n\n    const destroyPeer = once(() => {\n      delete peers[peer.localId];\n      peer.close();\n\n      swarms.removeListener('remove', handleRemove);\n    });\n    setTimeout(() => {\n      if (!peer.isInitialized()) {\n        destroyPeer();\n      }\n    }, HANDSHAKE_TIMEOUT);\n\n    const handleRemove = removedSwarm => {\n      if (removedSwarm === swarm) {\n        destroyPeer();\n      }\n    };\n    swarms.on('remove', handleRemove);\n\n    return peer;\n  }\n}\n","import KBucket from 'k-bucket';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport arrayEqual from 'array-equal';\nimport randomBytes from 'randombytes';\nimport LRU from 'lru-cache';\nimport hexToUint8Array from './hexToUint8Array';\nimport idx from 'idx';\n\nconst SEND_REPLICAS = 2;\nconst MAX_HOPS = 10;\nconst DEFAULT_PEER_REQUEST_COUNT = 10;\nconst NUMBER_OF_NODES_PER_BUCKET = 2;\n\n// TODO: implement get/set\n// TODO: implement connection dump rpc for network debugging\n\nexport class Client extends EventEmitter {\n  constructor(id) {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.id = id;\n\n    // managed/unmanaged?\n    this.channels = new KBucket({\n      numberOfNodesPerKBucket: NUMBER_OF_NODES_PER_BUCKET,\n      localNodeId: this.id,\n    });\n    this.allChannels = new KBucket({\n      numberOfNodesPerKBucket: 100,\n      localNodeId: this.id,\n    });\n\n    this.channels.on('ping', this.handlePing.bind(this));\n    this.channels.on('removed', this.handleRemoved.bind(this));\n    this.channels.on('updated', this.handleUpdated.bind(this));\n    this.channels.on('added', this.handleAdded.bind(this));\n\n    this.knownPeerIds = {};\n    this.channelMap = {};\n\n    this.seenIds = new LRU({max: 1024});\n    this.knownRoutes = new LRU({\n      max: 1024,\n      maxAge: 1000 * 60,\n    });\n    this.callbacks = new LRU({max: 1024});\n\n    this.on('receive.peers.request', this.handlePeersRequest.bind(this));\n    this.on('receive.ping.request', this.handlePingRequest.bind(this));\n    this.on('receive.trace.request', this.handleTraceRequest.bind(this));\n    this.on('receive.callback.response', this.handleCallbackResponse.bind(this));\n\n    this.startPeerRequests();\n  }\n\n  // TODO: this is leaking connections\n  close() {\n    this.stopPeerRequests();\n    this.allChannels.toArray().forEach(({conn}) => conn && conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n\n  startPeerRequests() {\n    let index = 0;\n\n    const next = () => {\n      let ids = Object.keys(this.knownPeerIds);\n\n      for (let retry = 0; retry <= ids.length; retry ++) {\n        if (index >= ids.length) {\n          index = 0;\n        }\n\n        const id = ids[index];\n        index ++;\n\n        if (id) {\n          return id;\n        }\n      }\n    };\n\n    this.peerRequestIvl = setInterval(() => {\n      const id = next();\n      if (id) {\n        this.sendPeerRequest(hexToUint8Array(id));\n      }\n    }, 5000);\n  }\n\n  stopPeerRequests() {\n    clearInterval(this.peerRequestIvl);\n  }\n\n  handlePing(channels, newChannel) {\n    // console.log('ping', channels, newChannel);\n    const PING_TIMEOUT = 10000;\n\n    channels.forEach(channel => {\n      const {id} = channel;\n\n      if (channel.isOpen()) {\n        this.addChannel(channel);\n        return;\n      }\n\n      setTimeout(() => {\n        const channel = this.getChannel(id);\n        if (channel && channel.isOpen()) {\n          this.addChannel(channel);\n          return;\n        }\n\n        this.removeChannel(id);\n        this.addChannel(newChannel);\n      }, PING_TIMEOUT);\n    });\n  }\n\n  addChannel(channel) {\n    this.channels.add(channel);\n    this.allChannels.add(channel);\n  }\n\n  removeChannel(id) {\n    this.channels.remove(id);\n    this.allChannels.remove(id);\n    // delete this.channelMap[arrayBufferToHex(id)];\n  }\n\n  getChannel(id) {\n    return this.channelMap[arrayBufferToHex(id)];\n  }\n\n  handleRemoved(channel) {\n    // console.log('remove', arrayBufferToHex(channel.id));\n    // console.trace();\n    if (channel.conn) {\n      channel.conn.close();\n    }\n    // console.log('handleRemoved', arrayBufferToHex(channel.id));\n  }\n\n  handleUpdated(oldChannel, newChannel) {\n    // console.log('update', {oldChannel, newChannel});\n    // console.log('handleUpdated', arrayBufferToHex(channel.id));\n  }\n\n  handleAdded(channel) {\n    if (channel.conn === undefined) {\n      // console.log('peers.discover', arrayBufferToHex(this.id), arrayBufferToHex(channel.id), this.channels.count());\n      this.emit('peers.discover', channel.id);\n    }\n    // console.log('add');\n    // emit event?\n    // console.log('handleAdded', arrayBufferToHex(channel.id));\n  }\n\n  createChannel(id, conn) {\n    const idHex = arrayBufferToHex(id);\n    const channel = new Channel(id, conn);\n\n    const oldChannel = this.channelMap[idHex];\n    if (oldChannel && oldChannel.conn) {\n      // console.warn('replacing open channel...');\n      oldChannel.conn.close();\n    }\n    this.channelMap[idHex] = channel;\n\n    const messages = [];\n    const bufferMessages = event => messages.push(event);\n    const handleMessage = this.handleMessage.bind(this, channel);\n\n    const handleOpen = () => {\n      // console.log('saw open', idHex);\n      this.addChannel(channel);\n\n      conn.removeEventListener('message', bufferMessages);\n      conn.addEventListener('message', handleMessage);\n      messages.forEach(handleMessage);\n\n      this.sendPeerRequest(id);\n    };\n\n    const handleClose = () => {\n      // console.log('saw close', idHex);\n      conn.removeEventListener('message', bufferMessages);\n      conn.removeEventListener('message', handleMessage);\n      conn.removeEventListener('open', handleOpen);\n\n      if (this.channelMap[idHex] === channel) {\n        this.removeChannel(id);\n        delete this.channelMap[idHex];\n      }\n    };\n\n    conn.addEventListener('message', bufferMessages);\n    conn.addEventListener('open', handleOpen, {once: true});\n    conn.addEventListener('close', handleClose, {once: true});\n  }\n\n  handleMessage(channel, event) {\n    // console.log('handleMessage', event.data);\n\n    channel.lastActive = Date.now();\n\n    let req;\n    try {\n      req = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n    const {type, id} = req;\n\n    if (req.trace) {\n      req.trace.push(arrayBufferToHex(this.id));\n      // console.log('TRACE', req);\n    }\n\n    if (this.seenIds.get(id)) {\n      // console.log('discarding seen message', id);\n      // if (req.trace) {\n      //   console.log('DROPPED', req);\n      // }\n      return;\n    }\n    this.seenIds.set(id, true);\n\n    if (!this.getChannel(channel.id)) {\n      console.warn('receiving channel is not known to dht', arrayBufferToHex(channel.id));\n    }\n\n    this.knownRoutes.set(req.from, channel.id);\n    // this.knownRoutes.set(req.from, arrayBufferToHex(channel.id));\n\n    const to = hexToUint8Array(req.to);\n    if (!arrayEqual(to, this.id)) {\n      this.forwardMessage(to, req);\n      return;\n    }\n\n    // if (req.trace) {\n    //   console.log('DELIVERED', req);\n    // }\n\n    const resCallback = (res={}, callback=null) => {\n      const from = hexToUint8Array(req.from);\n      const data = {re: id, ...res};\n      this.send(from, 'callback.response', data, callback);\n    };\n\n    // console.log(`emit receive.${type}`, req);\n    this.emit(`receive.${type}`, {data: req, callback: resCallback});\n  }\n\n  forwardMessage(to, data) {\n    // console.log('forwarding message', arrayBufferToHex(to), data);\n\n    if (data.hops >= MAX_HOPS) {\n      // console.log('discarding message with too many hops', data.id);\n      return;\n    }\n    data.hops ++;\n\n    this.sendRaw(to, JSON.stringify(data), data.trace);\n  }\n\n  sendPing(to, callback=()=>{}) {\n    this.send(to, 'ping.request', {}, callback);\n  }\n\n  handlePingRequest({data, callback}) {\n    // console.log('PING', data);\n    callback({});\n  }\n\n  handleTraceRequest({data, callback}) {\n    callback(data);\n  }\n\n  handleCallbackResponse({data, callback}) {\n    const reqCallback = this.callbacks.get(data.re);\n    if (reqCallback) {\n      reqCallback(data, callback);\n    } else {\n      // console.warn('<<< callback for %s expired', data.re);\n    }\n  }\n\n  sendPeerRequest(to, count=DEFAULT_PEER_REQUEST_COUNT) {\n    const timeout = setTimeout(() => {\n      delete this.knownPeerIds[arrayBufferToHex(to)];\n    }, 5000);\n    this.send(to, 'peers.request', {count}, res => {\n      clearTimeout(timeout);\n      this.handlePeersResponse(res);\n    });\n  }\n\n  handlePeersRequest({data: {count=DEFAULT_PEER_REQUEST_COUNT, from}, callback}) {\n    // console.log('handlePeersRequest');\n\n    const fromId = hexToUint8Array(from);\n\n    const ids = this.allChannels.closest(fromId)\n      .filter(({conn}) => conn != null)\n      .filter(({id}) => !arrayEqual(id, this.id) && !arrayEqual(id, fromId))\n      .map(({id}) => arrayBufferToHex(id))\n      .slice(0, count);\n    callback({ids});\n  }\n\n  handlePeersResponse(res) {\n    // console.log('handlePeersResponse', res.ids);\n\n    res.ids\n      .map(id => hexToUint8Array(id))\n      .filter(id => !arrayEqual(id, this.id))\n      .filter(id => {\n        const channel = this.getChannel(id);\n        return channel == null || channel.conn == null;\n      })\n      .forEach(id => {\n        // TODO: store peer provenance so we can ignore bad actors?\n        this.knownPeerIds[arrayBufferToHex(id)] = true;\n        this.addChannel(new Channel(id));\n      });\n  }\n\n  send(to, type, data={}, callback=null) {\n    if (typeof data === 'function') {\n      callback = data;\n      data = {};\n    }\n\n    const id = arrayBufferToHex(randomBytes(16));\n    this.seenIds.set(id, true);\n\n    if (callback != null) {\n      this.callbacks.set(id, callback);\n    }\n\n    const message = JSON.stringify({\n      id,\n      type,\n      from: arrayBufferToHex(this.id),\n      to: arrayBufferToHex(to),\n      trace: [arrayBufferToHex(this.id)],\n      hops: 0,\n      ...data,\n    });\n\n    // console.log('formatMessage', message);\n\n    this.sendRaw(to, message);\n  }\n\n  sendRaw(to, message, trace=[]) {\n    let closest = this.allChannels.closest(to)\n      .filter(channel => channel.isOpen())\n      .filter(({idHex}) => trace.indexOf(idHex) === -1)\n      .slice(0, SEND_REPLICAS);\n\n    const knownRoute = this.knownRoutes.get(arrayBufferToHex(to));\n    if (knownRoute) {\n      const channel = this.getChannel(knownRoute);\n      // const channel = this.allChannels.get(knownRoute);\n      if (channel != null && channel.isOpen()) {\n        closest.push(channel);\n      }\n    }\n\n    if (closest.length === 0) {\n      // console.warn(`closest value to ${arrayBufferToHex(to)} does not exist, dropping`, message);\n      return;\n    }\n\n    if (arrayEqual(closest[0].id, to)) {\n      closest = closest.slice(0, 1);\n    }\n    // console.log('send', closest.map(({id}) => arrayBufferToHex(id)), message);\n    // console.log(closest.length, closest.filter(({conn}) => !!conn).length, message);\n    closest.forEach(({id, conn}) => {\n      try {\n        // console.log('buffered amount before send', conn.bufferedAmount);\n        // console.log(message);\n        conn.send(message);\n      } catch (e) {\n        console.log('error sending to peer, closing', arrayBufferToHex(id), e);\n        conn.close();\n      }\n    });\n  }\n}\n\nexport class Channel {\n  constructor(id, conn) {\n    this.id = id;\n    this.idHex = arrayBufferToHex(id);\n    this.vectorClock = Date.now();\n    this.lastPing = Date.now();\n    this.conn = conn;\n\n    // console.log('channel', this);\n  }\n\n  isOpen() {\n    const readyState = idx(this, _ => _.conn.readyState);\n    return readyState === 1 || readyState === 'open';\n  }\n}\n\nexport class SubChannel {\n  constructor(client, peerId, id=arrayBufferToHex(randomBytes(16))) {\n    // console.log('subchannel created', id);\n    this.client = client;\n    this.peerId = peerId;\n    this.id = id;\n    this.readyState = SubChannel.ReadyStates.OPEN;\n    this.onmessage = () => {};\n\n    this.handleMessage = this.handleMessage.bind(this);\n    this.client.on('receive.subchannel.message', this.handleMessage);\n  }\n\n  handleMessage({data: {channelId, data}}) {\n    // console.log('receive.subchannel.message', channelId, this.id, data);\n\n    if (channelId === this.id) {\n      this.onmessage({data});\n    }\n  }\n\n  send(data) {\n    this.client.send(\n      this.peerId,\n      'subchannel.message',\n      {\n        channelId: this.id,\n        data: data,\n      },\n    );\n  }\n\n  close() {\n    this.readyState = SubChannel.ReadyStates.CLOSED;\n    this.client.removeListener('receive.subchannel.message', this.handleMessage);\n  }\n}\n\nSubChannel.ReadyStates = {\n  OPEN: 1,\n  CLOSED: 3,\n};\n","import URLSafeBase64 from 'urlsafe-base64';\nimport SwarmId from './swarmid';\nimport {ProtocolOptions} from './constants';\n\nconst protocolOptionToKey = {\n  [ProtocolOptions.ContentIntegrityProtectionMethod]: 'x.im',\n  [ProtocolOptions.MerkleHashTreeFunction]: 'x.hf',\n  [ProtocolOptions.LiveSignatureAlgorithm]: 'x.sa',\n  [ProtocolOptions.ChunkAddressingMethod]: 'x.am',\n  [ProtocolOptions.ChunkSize]: 'x.cs',\n};\n\n// TODO: dn with stream name\n// TODO: as to m3u8 url?\nexport default class URI {\n  constructor(swarmId, protocolOptions) {\n    this.swarmId = swarmId;\n    this.protocolOptions = protocolOptions;\n  }\n\n  toString() {\n    const swarmId = URLSafeBase64.encode(this.swarmId.toBuffer());\n    const protocolOptions = Object.entries(this.protocolOptions)\n      .map(([protocolOption, value]) => `${protocolOptionToKey[protocolOption]}=${value}`)\n      .join('&');\n    return `magnet:?xt=urn:ppspp:${swarmId}&${protocolOptions}`;\n  }\n\n  static parse(uriString) {\n    if (!uriString.startsWith('magnet:')) {\n      throw new Error('invalid uri: expected magnet');\n    }\n\n    const args = uriString.substring(8)\n      .split('&')\n      .map(query => {\n        const [key, value] = query.split('=');\n        return [key, decodeURIComponent(value)];\n      });\n\n    const protocolOptions = Object.entries(protocolOptionToKey)\n      .reduce((protocolOptions, [protocolOption, key]) => {\n        const arg = args.find(([argKey]) => argKey === key);\n        if (arg === undefined) {\n          throw new Error(`invalid uri: missing ${key}`);\n        }\n        return {...protocolOptions, [protocolOption]: parseFloat(arg[1])};\n      }, {});\n\n    const xt = args.find(([key, value]) => key === 'xt' && value.startsWith('urn:ppspp:'));\n    if (xt === undefined) {\n      throw new Error('invalid uri: missing suitable xt');\n    }\n    const swarmId = SwarmId.from(URLSafeBase64.decode(xt[1].substring(10)));\n\n    return new URI(swarmId, protocolOptions);\n  }\n}\n","export default function binSearch(max, comparator) {\n  let left = 0;\n  let right = max;\n\n  while (left <= right) {\n    const mid = left + Math.floor((right - left) / 2);\n    const order = comparator(mid, left, right);\n\n    if (order < 0) {\n      left = mid + 1;\n    } else if (order > 0) {\n      right = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(left + 1);\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n"],"sourceRoot":""}