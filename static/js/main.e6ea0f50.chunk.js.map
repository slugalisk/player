{"version":3,"sources":["ppspp/constants.js","ppspp/injector.js","ppspp/webcrypto.js","ppspp/address.js","ppspp/crypto.js","DiagnosticMenu/index.js","client.js","wrtc.js","App.js","Test.js","DhtGraph.js","Router.js","index.js","hexToUint8Array.js","ppspp/integrity.js","binSearch.js","loopback.js","ppspp/swarmid.js","ema.js","RingBuffer.js","ledbat.js","ppspp/encoding.js","bitarray.js","wfq.js","ppspp/scheduler.js","ppspp/index.js","dht.js","chunkedStream.js","ppspp/uri.js","utils/createRandomId.js"],"names":["__webpack_require__","d","__webpack_exports__","MaxChannelId","ProtocolOptions","Version","ContentIntegrityProtectionMethod","MerkleHashTreeFunction","LiveSignatureAlgorithm","ChunkAddressingMethod","MessageTypes","lodash_invert__WEBPACK_IMPORTED_MODULE_0__","lodash_invert__WEBPACK_IMPORTED_MODULE_0___default","n","MinimumVersion","SwarmIdentifier","LiveDiscardWindow","SupportedMessages","ChunkSize","EndOption","RFC7574","None","MerkleHashTree","SignAll","UnifiedMerkleTree","SHA1","SHA224","SHA256","SHA384","SHA512","RSASHA1","RSASHA256","ECDSAP256SHA256","ECDSAP384SHA384","Bin32","ByteRange64","ChunkRange32","Bin64","ChunkRange64","HANDSHAKE","DATA","ACK","HAVE","INTEGRITY","PEX_RESv4","PEX_REQ","SIGNED_INTEGRITY","REQUEST","CANCEL","CHOKE","UNCHOKE","PEX_RESv6","PEX_REScert","forEach","enumType","names","invert","name","value","Injector","swarm","chunkSize","chunksPerSignature","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","this","inputBuffer","Buffer","alloc","chunkBuffer","data","_this","length","concat","dataOffset","push","slice","i","Math","min","_loop","subtreeChunks","splice","contentIntegrity","appendSubtree","then","subtree","setRange","rootAddress","scheduler","markChunksLoaded","options","arguments","undefined","_options$chunkSize","_options$chunksPerSig","_options$liveDiscardW","liveDiscardWindow","ceil","_options$chunkAddress","chunkAddressingMethod","_options$contentInteg","contentIntegrityProtectionMethod","_options$merkleHashTr","merkleHashTreeFunction","_options$liveSignatur","liveSignatureAlgorithm","generateKeyPair","_ref","_ref2","swarmId","privateKey","uri","URI","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__","console","log","toString","clientOptions","uploadRateLimit","Swarm","EventEmitter","r","module","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0__","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0___default","exports","WebCrypto","Address","bin","treeBounds","binBounds","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_treeBounds","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","start","end","address","type","Error","window","crypto","ToggleButton","buttonClasses","classNames","diagnostic_menu__toggle_button","diagnostic_menu__toggle_button--expanded","props","expanded","react_default","a","createElement","onClick","className","Component","defaultProps","SwarmState","rows","key","totalSends","totalRequests","totalRequestsReceived","totalDroppedRequests","totalReceived","totalAdded","totalCancelled","ackUnknownSend","lastCompletedBin","loadedChunks","requestedChunks","chunkRate","map","PeerStateTable","peerState","chunkIntervalMean","wasteRate","ledbat","baseDelay","getMin","currentDelay","rttMean","rttVar","cwnd","cto","flightSize","validChunks","requestQueue","String","_this$props","startBin","endBin","colSpan","DiagnosticMenu_AvailabilityMapChart","availableChunks","sentChunks","receivedChunks","AvailabilityMapChart","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","canvas","React","createRef","current","isNaN","max","isFinite","ctx","getContext","scale","scaleLinear","domain","range","fillStyle","fillRect","lastStart","values","get","height","width","ref","PeerState","_this2","handleButtonClick","setState","state","table","DiagnosticMenu_PeerStateTable","DiagnosticMenu_ToggleButton","peer","localId","remoteId","DiagnosticMenu","_this3","scheduleUpdate","handleUpdate","forceUpdate","requestAnimationFrame","swarmState","peerStates","containerClasses","containerClass","diagnostic_menu__container","diagnostic_menu__container--expanded","_this$props$swarm$sch","DiagnosticMenu_SwarmState","entries","_ref3","_ref4","slicedToArray","DiagnosticMenu_PeerState","Client","connManager","dhtClientId","bootstrapId","conn","swarmUri","client","createClient","dhtClient","dht","on","handlePeersDiscover","bind","handleReceiveConnectRequest","createChannel","createDataChannel","ppsppClient","ppspp","init","createClass","id","sub","timeout","setTimeout","close","send","channelId","clearTimeout","_ref$data","from","callback","hexToUint8Array","channel","label","bootstrap","WebSocket","require","ConnManager","bootstrapAddress","Promise","resolve","reject","onmessage","event","JSON","parse","mediator","Mediator","once","_EventEmitter","handleMessage","assertThisInitialized","inherits","emit","RTCSessionDescription","sdp","candidate","RTCIceCandidate","readyState","stringify","_EventEmitter2","initialized","waitingChannels","peerConn","RTCPeerConnection","iceServers","urls","addEventListener","sendIceCandidate","handleDataChannel","addIceCandidate","_ready","description","setRemoteDescription","createAnswer","catch","_this4","setLocalDescription","sendAnswer","error","_this5","e","binaryType","resolveWaitingChannel","objectSpread","ordered","maxRetransmits","_this6","createOffer","offer","sendOffer","App","_useState","useState","_useState2","setPpsppClient","_useState3","_useState4","setSwarmUri","_useState5","_useState6","setSwarm","useEffect","proto","location","protocol","host","create","src_DiagnosticMenu_0","Fragment","onSubmit","preventDefault","joinSwarm","ChunkedReadStream","onChange","target","placeholder","defaultValue","Server","server","swarms","setSwarms","injector","ChunkedWriteStreamInjector","publishSwarm","unpublishSwarm","stop","diagnosticMenus","toConsumableArray","color","scaleOrdinal","schemeCategory10","reduceGraph","graph","objectWithoutProperties","nodes","links","filter","node","source","activity","link","_useGraph","servers","setServers","gen","setGen","_useReducer","useReducer","_useReducer2","dispatchGraphAction","arrayBufferToHex","addNodes","clients","newServers","clientsResult","all","Array","fill","firstIndex","serverIndex","floor","random","_ref5","allChannels","toArray","isOpen","oldChannel","newChannel","_ref6","deleteNodes","keys","useGraph","_useGraph2","_useGraph2$","handleNodeClick","setSource","sendPing","useNodePinger","react_force_graph_3d_module","graphData","nodeAutoColorBy","onNodeClick","linkColor","linkWidth","nodeRelSize","nodeVal","count","Router","HashRouter","Switch","Route","exact","path","component","Test","DhtGraph","ReactDOM","render","src_Router","document","getElementById","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0__","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0___default","v","Uint8Array","hexToArrayBuffer","toUint8Array","MerkleHashTreeFunctionAlgorithms","_MerkleHashTreeFuncti","defineProperty","MerkleHashTreeFunctionByteLengths","_MerkleHashTreeFuncti2","createMerkleHashTreeFunction","algorithm","nullHash","_len","_key","every","arrayEqual","subtle","digest","LiveSignatureAlgorithms","_LiveSignatureAlgorit","modulusLength","publicExponent","hash","namedCurve","createLiveSignatureSignFunction","importResult","importKey","sign","createLiveSignatureVerifyFunction","getKeyParams","publicKey","signature","verify","generateKey","keyPair","exportKey","SwarmId","unavailableLiveSignatureSignFunction","createContentIntegrityVerifierFactory","liveSignatureVerifyFunction","liveSignatureSignFunction","Infinity","Signature","verified","SignedSignature","verificationResult","getHash","markVerified","verifyHash","compare","signatures","getChunkCount","MerkleHashTreeVerifier","hashTree","regenerator_default","mark","getConstituentHashBins","bins","bfsIndex","stride","parent","branch","wrap","_context","prev","next","containsBin","isRoot","siblingBin","siblingBfsIndex","abrupt","minSize","size","hashes","siblings","apply","rootHashSignature","pow","log2","hashResult","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","siblingSignature","index","verifiedSignature","siblingHash","_iterator","Symbol","iterator","done","err","return","_ref7","UnifiedMerkleHashTree","subtrees","nextStart","chunkCount","_ref8","comparator","left","right","mid","order","binSearch","_this5$subtrees$i$roo","storedSubtree","findSubtree","copy","sort","b","pruneSubtrees","removedTree","shift","treeSize","nextAddress","insertSubtree","MerkleHashSubtreeVerifier","getConstituentSignatures","_MerkleHashTreeVerifi","unifiedHashTree","_this7","prototype","NoneVerifier","NoneVerifierFactory","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","queue","createRandomId","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__","Conn","open","remote","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","ReadyStates","CONNECTING","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","OPEN","setImmediate","removeListener","CLOSING","CLOSED","removeAllListeners","handleConnection","datachannels","nextId","_EventEmitter3","conns","handleOpen","ClientDataChannel","sendConnection","_Conn","_this8","isRsaAlgorithm","includes","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","metadataLength","buffer","byteLength","writeUInt8","writeUInt32BE","readUInt8","readUInt32BE","ArrayBuffer","isView","read","EMA","alpha","mean","weight","RingBuffer","capacity","setCapacity","lastIndex","createEmptyValue","firstEmptyIndex","advanceLastIndex","set","DelayBuffer","delay","now","Date","TARGET","CURRENT_HISTORY","CURRENT_HISTORY_INTERVAL","BASE_HISTORY","BASE_HISTORY_INTERVAL","INIT_CWND","MSS","COEF_ALPHA","COEF_BETA","LEDBAT","mss","lastDataLoss","lastAckTime","ackSize","bytes","delaySample","update","checkCTO","queuingDelay","abs","offTarget","maxAllowedCwnd","rtt","isEmpty","retransmitting","timestamp","createChunkAddressFieldType","addressingMethod","Bin32ChunkAddress","offset","_Address$binBounds","_Address$binBounds2","ChunkRange32ChunkAddress","createBufferFieldType","BufferField","createLiveSignatureFieldType","getLiveSignatureByteLength","_createBufferFieldTyp","LiveSignatureField","createIntegrityHashFieldType","_createBufferFieldTyp2","IntegrityHashField","createEncoding","ChunkAddress","IntegrityHash","LiveSignature","_protocolOptionRecord","_messageRecordTypes","Uint8ProtocolOption","Uint32ProtocolOption","VersionProtocolOption","_Uint8ProtocolOption","version","MinimumVersionProtocolOption","_Uint8ProtocolOption2","SwarmIdentifierProtocolOption","readUInt16BE","writeUInt16BE","ContentIntegrityProtectionMethodProtocolOption","_Uint8ProtocolOption3","method","MerkleHashTreeFunctionProtocolOption","_Uint8ProtocolOption4","LiveSignatureAlgorithmProtocolOption","_Uint8ProtocolOption5","ChunkAddressingMethodProtocolOption","_Uint8ProtocolOption6","LiveDiscardWindowProtocolOption","_Uint32ProtocolOption","_this9","SupportedMessagesProtocolOption","_this10","messageTypes","byte","j","Boolean","bitmapByteLength","bitmap","toBitmap","ChunkSizeProtocolOption","_Uint32ProtocolOption2","_this11","protocolOptionRecordTypes","HandshakeMessage","code","option","RecordType","reduce","write","Timestamp","seconds","readInt32BE","nanoseconds","writeInt32BE","DataMessage","dataLength","rangeByteLength","AddressMessage","AckMessage","HaveMessage","_AddressMessage","_this12","IntegrityMessage","SignedIntegrityMessage","RequestMessage","_AddressMessage2","_this13","CancelMessage","_AddressMessage3","_this14","EmptyMessage","ChokeMessage","_EmptyMessage","_this15","UnchokeMessage","_EmptyMessage2","_this16","messageRecordTypes","Messages","messageType","message","isArray","Datagram","messages","datagram","createMask","bits","mask","applyMask","BitArray","resize","distance","unsafelySetRange","byteIndex","bitIndex","byteOffset","adjustOffset","startByteIndex","getByteIndex","endByteIndex","startBitIndex","getBitIndex","endBitIndex","unsafelySetIndexRange","startMask","endMask","firstBit","lastBit","Flow","lastVirtualFinish","nextVirtualFinish","wfq","Queue","rate","totalQueueSize","flows","flow","indexOf","computeWeight","virtualFinish","minVirtualFinish","getNextScheduledFlow","task","AvailabilityMap","_ref$end","BinRingBuffer","_RingBuffer","esm_get","RateMeter","windowMs","sampleWindowMs","firstSampleWindow","lastSampleWindow","sum","sampleWindow","adjustSampleWindow","accumulatedMs","ChunkRateMeter","_RateMeter","lastEndBin","lastHeadBin","RequestFlow","_wfq$Flow","queueSize","RequestQueue","_wfq$Queue","remove","result","SchedulerChunkState","reset","availableCopies","requestTime","requestPeerId","requested","received","SchedulerChunkRequestMap","valueByBin","head","tail","createdAt","SchedulerChunkMap","_BinRingBuffer","SchedulerPeerState","requestFlow","lastChunkTime","requestTimes","sentRequests","timeouts","invalidChunks","Scheduler","chunkStates","definitelyLoadedChunks","peerCount","timers","lastExportedBin","sendDelay","nextSendTime","nextSendTimeout","isReady","firstLoadedChunk","firstRequestedChunk","lastAvailableBin","planFor","dip","peer_remoteId","peer_localId","swift_rtt","swift_rttvar","swift_chunkIntervalMean","swift_cwnd","ledbat_cwnd","ledbat_cto","ledbat_currentDelay","ledbat_baseDelay","ledbat_rttMean","ledbat_rttVar","ledbat_rtt","ledbat_flightSize","picker_startBin","picker_lastAvailableBin","minIncompleteBin","picker_firstLoadedChunk","picker_firstRequestedChunk","digestDelaySamples","timeoutThreshold","cancelledRequests","peek","pop","_peerState$peer","requestAddresses","insert","firstRequestedBin","_ref9","sendCancel","sendRequest","requestedAddress","requestedChunk","sentAt","addSent","sendChunk","flush","sendInterval","addFlow","_ref10","removeFlow","_ref11","getPeerState","chunkInterval","addRttSample","_ref12","sendHave","nextExportedBin","advanceLastBin","_ref13","addDelaySample","sentChunk","onDataLoss","genericEncoding","_uri$protocolOptions","protocolOptions","encoding","toBuffer","protocolOption","protocolOptionName","newBins","getNewCompleteBins","_newBins","minNewBin","maxNewBin","chunks","AWAITING_HANDSHAKE","READY","CHOKED","DISCONNECTING","PeerDataHandlerContext","integrityVerifier","createVerifier","Peer","_this$handlers","createChannelId","handlers","handleHandshakeMessage","handleDataMessage","handleHaveMessage","handleAckMessage","handleIntegrityMessage","handleSignedIntegrityMessage","handleRequestMessage","handleCancelMessage","handleChokeMessage","handleUnchokeMessage","sendBuffer","addPeer","sendHandshake","removePeer","context","handler","handshake","setLiveDiscardWindow","verifyProtocolOptions","getRecentChunks","computeOneWayDelay","markChunkReceived","getContentIntegrityVerifier","verifyChunk","markChunkVerified","emitNewData","markChunkRejected","markChunkAvailable","markSendAcked","setHash","setHashSignature","enqueueRequest","cancelRequest","addresses","_len2","_key2","chunk","constituentSignatures","reverse","getSignatureHash","round","SwarmSet","setMaxListeners","swarmIdToKey","channels","Channel","peers","handleSwarmInsert","getOrCreatePeer","liveSwarms","find","handleData","p","createPeer","handleRemove","removedSwarm","NUMBER_OF_NODES_PER_BUCKET","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","KBucket","numberOfNodesPerKBucket","localNodeId","handlePing","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleRemoved","handleUpdated","handleAdded","knownPeerIds","channelMap","seenIds","LRU","knownRoutes","maxAge","callbacks","handlePeersRequest","handlePingRequest","handleTraceRequest","handleCallbackResponse","startPeerRequests","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","stopPeerRequests","ids","peerRequestIvl","setInterval","retry","sendPeerRequest","clearInterval","addChannel","getChannel","removeChannel","add","idHex","bufferMessages","removeEventListener","req","trace","warn","to","res","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","re","forwardMessage","hops","sendRaw","reqCallback","handlePeersResponse","_ref5$data","_ref5$data$count","fromId","closest","randomBytes","knownRoute","vectorClock","lastPing","idx","_","SubChannel","peerId","_ref11$data","DELIMITER","DELIMITER_LENGTH","ChunkedWriteStream","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","appendData","HEADER_INSTANCE_LENGTH","writer","intervalId","AbstractChunkedReadStream","handleWarmupSwarmData","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","handleSwarmData","chunkBufferLength","nextDataOffset","nextDataLength","delimiterIndex","readHeader","instance","lastChunkOffset","nextDataEnd","lastChunkEnd","handleEndData","_AbstractChunkedReadS2","chunkSlice","firstChunkStart","protocolOptionToKey","_protocolOptionToKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","URLSafeBase64","encode","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","join","uriString","startsWith","args","substring","split","query","_query$split","_query$split2","decodeURIComponent","arg","parseFloat","xt","decode","crypto__WEBPACK_IMPORTED_MODULE_0__","crypto__WEBPACK_IMPORTED_MODULE_0___default","randomFillSync"],"mappings":"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","file":"static/js/main.e6ea0f50.chunk.js","sourcesContent":["import invert from 'lodash.invert';\n\nexport const MaxChannelId = 0xffffffff;\n\nexport const ProtocolOptions = {\n  Version: 0,\n  MinimumVersion: 1,\n  SwarmIdentifier: 2,\n  ContentIntegrityProtectionMethod: 3,\n  MerkleHashTreeFunction: 4,\n  LiveSignatureAlgorithm: 5,\n  ChunkAddressingMethod: 6,\n  LiveDiscardWindow: 7,\n  SupportedMessages: 8,\n  ChunkSize: 9,\n  EndOption: 255,\n};\n\nexport const Version = {\n  RFC7574: 1,\n};\n\nexport const ContentIntegrityProtectionMethod = {\n  None: 0,\n  MerkleHashTree: 1,\n  SignAll: 2,\n  UnifiedMerkleTree: 3,\n};\n\nexport const MerkleHashTreeFunction = {\n  SHA1: 0,\n  SHA224: 1,\n  SHA256: 2,\n  SHA384: 3,\n  SHA512: 4,\n};\n\nexport const LiveSignatureAlgorithm = {\n  RSASHA1: 5,\n  RSASHA256: 8,\n  ECDSAP256SHA256: 13,\n  ECDSAP384SHA384: 14,\n};\n\nexport const ChunkAddressingMethod = {\n  Bin32: 0,\n  ByteRange64: 1,\n  ChunkRange32: 2,\n  Bin64: 3,\n  ChunkRange64: 4,\n};\n\nexport const VariableChunkSize = 0xffffffff;\n\nexport const MessageTypes = {\n  HANDSHAKE: 0,\n  DATA: 1,\n  ACK: 2,\n  HAVE: 3,\n  INTEGRITY: 4,\n  PEX_RESv4: 5,\n  PEX_REQ: 6,\n  SIGNED_INTEGRITY: 7,\n  REQUEST: 8,\n  CANCEL: 9,\n  CHOKE: 10,\n  UNCHOKE: 11,\n  PEX_RESv6: 12,\n  PEX_REScert: 13,\n};\n\n[\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n].forEach(enumType => {\n  const names = invert(enumType);\n  enumType.name = value => names[value] || 'UNDEFINED';\n});\n","import {EventEmitter} from 'events';\nimport crypto from 'crypto';\nimport {generateKeyPair} from './integrity';\nimport URI from './uri';\nimport {\n  ChunkAddressingMethod,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ProtocolOptions,\n} from './constants';\nimport {Swarm} from '../ppspp';\n\nexport default class Injector {\n  constructor(swarm, chunkSize, chunksPerSignature) {\n    this.swarm = swarm;\n    this.chunkSize = chunkSize;\n    this.chunksPerSignature = chunksPerSignature;\n    this.inputBuffer = Buffer.alloc(0);\n    this.chunkBuffer = [];\n  }\n\n  appendData(data) {\n    if (this.inputBuffer.length + data.length < this.chunkSize) {\n      this.inputBuffer = Buffer.concat([this.inputBuffer, data]);\n      return;\n    }\n\n    let dataOffset = 0;\n    if (this.inputBuffer.length > 0) {\n      dataOffset = this.chunkSize - this.inputBuffer.length;\n      this.chunkBuffer.push(Buffer.concat([this.inputBuffer, data.slice(0, dataOffset)], this.chunkSize));\n    }\n\n    for (let i = dataOffset; i + this.chunkSize < data.length; i += this.chunkSize) {\n      this.chunkBuffer.push(data.slice(i, Math.min(data.length, i + this.chunkSize)));\n      dataOffset = i + this.chunkSize;\n    }\n\n    if (dataOffset < data.length) {\n      this.inputBuffer = data.slice(dataOffset);\n    }\n\n    while (this.chunkBuffer.length > this.chunksPerSignature) {\n      const subtreeChunks = this.chunkBuffer.splice(0, this.chunksPerSignature);\n      this.swarm.contentIntegrity.appendSubtree(subtreeChunks).then(subtree => {\n        this.swarm.chunkBuffer.setRange(subtree.rootAddress, subtreeChunks);\n        this.swarm.scheduler.markChunksLoaded(subtree.rootAddress);\n      });\n    }\n  }\n\n  static create(options = {}) {\n    const {\n      chunkSize = 8 * 1024,\n      chunksPerSignature = 64,\n      liveDiscardWindow = Math.ceil(15 * 3500 * 1024 / chunkSize),\n      chunkAddressingMethod = ChunkAddressingMethod.Bin32,\n      contentIntegrityProtectionMethod = ContentIntegrityProtectionMethod.UnifiedMerkleTree,\n      merkleHashTreeFunction = MerkleHashTreeFunction.SHA256,\n      liveSignatureAlgorithm = LiveSignatureAlgorithm.ECDSAP256SHA256,\n    } = options;\n\n    return generateKeyPair(liveSignatureAlgorithm).then(({swarmId, privateKey}) => {\n      const uri = new URI(\n        swarmId,\n        {\n          [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n          [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n          [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n          [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n          [ProtocolOptions.ChunkSize]: chunkSize,\n        }\n      );\n\n      console.log('swarm uri:', uri.toString());\n\n      const clientOptions = {\n        liveDiscardWindow,\n        privateKey,\n        uploadRateLimit: 10e6,\n      };\n\n      return new Swarm(uri, clientOptions);\n    }).then(swarm => new Injector(swarm, chunkSize, chunksPerSignature));\n  }\n}\n\nexport class NoiseInjector extends EventEmitter {\n  constructor(dataRate = 3.5e6 / 8, interval = 250) {\n    super();\n    this.dataRate = dataRate * (interval / 1000);\n    this.interval = interval;\n  }\n\n  start() {\n    const data = Buffer.alloc(this.dataRate);\n    crypto.randomFillSync(data);\n\n    Injector.create().then(injector => {\n      this.intervalId = setInterval(() => injector.appendChunk(data), this.interval);\n      this.injector = injector;\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n","import WebCrypto from 'node-webcrypto-ossl';\n\nmodule.exports = new WebCrypto();\n","import {ChunkAddressingMethod} from './constants';\n\nexport default class Address {\n  constructor(bin = 0, treeBounds = Address.binBounds(bin)) {\n    this.bin = bin;\n    [this.start, this.end] = treeBounds;\n  }\n\n  containsBin(bin) {\n    return this.start <= bin && bin <= this.end;\n  }\n\n  getChunkCount() {\n    return (this.end - this.start) / 2 + 1;\n  }\n\n  static from(address) {\n    if (address instanceof Address) {\n      return address;\n    }\n\n    switch (address.type) {\n      case ChunkAddressingMethod.Bin32:\n        return new Address(address.value);\n      case ChunkAddressingMethod.ChunkRange32: {\n        const {start, end} = address;\n        return new Address((end - start) / 2, [start, end]);\n      }\n      default:\n        throw new Error('unsupported address type');\n    }\n  }\n\n  static binBounds(bin) {\n    return [\n      bin & (bin + 1),\n      (bin | (bin + 1)) - 1,\n    ];\n  }\n}\n","module.exports = window.crypto;\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport {scaleLinear} from 'd3-scale';\n\nimport './index.css';\n\nclass ToggleButton extends Component {\n  static defaultProps = {\n    expanded: false,\n  };\n\n  render() {\n    const buttonClasses = classNames({\n      'diagnostic_menu__toggle_button': true,\n      'diagnostic_menu__toggle_button--expanded': this.props.expanded,\n    });\n\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={buttonClasses}\n      />\n    );\n  }\n}\n\nclass SwarmState extends Component {\n  render() {\n    const {scheduler} = this.props.value;\n\n    const values = [\n      {\n        key: 'totalSends',\n        value: scheduler.totalSends,\n      },\n      {\n        key: 'totalRequests',\n        value: scheduler.totalRequests,\n      },\n      {\n        key: 'totalRequestsReceived',\n        value: scheduler.totalRequestsReceived,\n      },\n      {\n        key: 'totalDroppedRequests',\n        value: scheduler.totalDroppedRequests,\n      },\n      {\n        key: 'totalReceived',\n        value: scheduler.totalReceived,\n      },\n      {\n        key: 'totalAdded',\n        value: scheduler.totalAdded,\n      },\n      {\n        key: 'totalCancelled',\n        value: scheduler.totalCancelled,\n      },\n      {\n        key: 'ackUnknownSend',\n        value: scheduler.ackUnknownSend,\n      },\n      {\n        key: 'lastCompletedBin',\n        value: scheduler.lastCompletedBin,\n      },\n      {\n        key: 'picker.firstLoadedChunk',\n        value: scheduler.loadedChunks.min(),\n      },\n      {\n        key: 'picker.firstRequestedChunk',\n        value: scheduler.requestedChunks.min(),\n      },\n      {\n        key: 'chunkRate',\n        value: scheduler.chunkRate.value(),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    return (\n      <div className=\"swarm_state__container\">\n        <table>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass PeerStateTable extends Component {\n  render() {\n    const peerState = this.props.value;\n\n    const values = [\n      {\n        key: 'chunkIntervalMean',\n        value: peerState.chunkIntervalMean.value(),\n      },\n      {\n        key: 'wasteRate',\n        value: peerState.wasteRate.value(),\n      },\n      {\n        key: 'chunkRate',\n        value: peerState.chunkRate.value(),\n      },\n      {\n        key: 'ledbat.baseDelay',\n        value: peerState.ledbat.baseDelay.getMin(),\n      },\n      {\n        key: 'ledbat.currentDelay',\n        value: peerState.ledbat.currentDelay.getMin(),\n      },\n      {\n        key: 'ledbat.rttMean',\n        value: peerState.ledbat.rttMean.value(),\n      },\n      {\n        key: 'ledbat.rttVar',\n        value: peerState.ledbat.rttVar.value(),\n      },\n      {\n        key: 'ledbat.cwnd',\n        value: peerState.ledbat.cwnd,\n      },\n      {\n        key: 'ledbat.cto',\n        value: peerState.ledbat.cto,\n      },\n      {\n        key: 'ledbat.flightSize',\n        value: peerState.ledbat.flightSize,\n      },\n      {\n        key: 'validChunks',\n        value: peerState.validChunks,\n      },\n      {\n        key: 'requestQueue.length',\n        value: peerState.requestQueue.length,\n      },\n      {\n        key: 'requestedChunks.length',\n        value: peerState.requestedChunks.length,\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{String(value)}</td>\n      </tr>\n    ));\n\n    const {\n      startBin,\n      endBin,\n    } = this.props;\n\n    rows.push(\n      <tr key=\"availableChunks\">\n        <td colSpan=\"2\">\n          Available\n          <AvailabilityMapChart\n            value={this.props.value.availableChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"sentChunks\">\n        <td colSpan=\"2\">\n          Sent\n          <AvailabilityMapChart\n            value={this.props.value.sentChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"receivedChunks\">\n        <td colSpan=\"2\">\n          Received\n          <AvailabilityMapChart\n            value={this.props.value.receivedChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    return (\n      <table>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nclass AvailabilityMapChart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (!this.canvas.current) {\n      return;\n    }\n\n    const {value} = this.props;\n    const min = isNaN(this.props.startBin)\n      ? value.min()\n      : this.props.startBin;\n    const max = isNaN(this.props.endBin)\n      ? value.max()\n      : this.props.endBin;\n\n    if (!isFinite(min) || !isFinite(max) || isNaN(min) || isNaN(max)) {\n      return;\n    }\n\n    const ctx = this.canvas.current.getContext('2d');\n    const width = 500;\n    const height = 20;\n\n    const scale = scaleLinear()\n      .domain([min, max])\n      .range([0, width]);\n\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n\n    ctx.fillStyle = '#ccc';\n\n    let lastStart = -1;\n    for (let i = min; i <= max; i += 2) {\n      if (!value.values.get((i + 2) / 2) || i === max) {\n        if (lastStart !== -1) {\n          ctx.fillRect(scale(lastStart), 0, scale(i) - scale(lastStart), 20);\n\n          lastStart = -1;\n        }\n      } else if (lastStart === -1) {\n        lastStart = i;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <canvas\n        height=\"20\"\n        width=\"500\"\n        ref={this.canvas}\n      />\n    );\n  }\n}\n\nclass PeerState extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n  }\n\n  render() {\n    let table;\n    if (this.state.expanded) {\n      table = (\n        <PeerStateTable\n          value={this.props.value}\n          startBin={this.props.startBin}\n          endBin={this.props.endBin}\n        />\n      );\n    }\n\n    return (\n      <div className=\"peer_state__container\">\n        <div className=\"peer_state__header\">\n          <ToggleButton\n            onClick={this.handleButtonClick}\n            expanded={this.state.expanded}\n          />\n          <h4 className=\"peer_state__title\">\n            {this.props.value.peer.localId} : {this.props.value.peer.remoteId}\n          </h4>\n        </div>\n        {table}\n      </div>\n    );\n  }\n}\n\nclass DiagnosticMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n\n    this.scheduleUpdate();\n  }\n\n  handleUpdate = () => {\n    if (this.state.expanded) {\n      this.forceUpdate(this.scheduleUpdate);\n    }\n  }\n\n  scheduleUpdate = () => {\n    window.requestAnimationFrame(this.handleUpdate);\n  }\n\n  render() {\n    const containerClasses = classNames(\n      this.props.containerClass,\n      {\n        'diagnostic_menu__container': true,\n        'diagnostic_menu__container--expanded': this.state.expanded,\n      },\n    );\n\n    const {\n      lastCompletedBin,\n      liveDiscardWindow,\n    } = this.props.swarm.scheduler;\n    const startBin = lastCompletedBin - liveDiscardWindow;\n    const endBin = lastCompletedBin + liveDiscardWindow;\n\n    let swarmState;\n    let peerStates;\n    if (this.state.expanded) {\n      swarmState = (\n        <SwarmState\n          value={this.props.swarm}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      );\n\n      peerStates = Object.entries(this.props.swarm.scheduler.peerStates).map(([key, peerState]) => (\n        <PeerState\n          key={key}\n          value={peerState}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      ));\n    }\n\n    return (\n      <div className={containerClasses}>\n        <ToggleButton\n          onClick={this.handleButtonClick}\n          expanded={this.state.expanded}\n        />\n        {swarmState}\n        {peerStates}\n      </div>\n    );\n  }\n}\n\nexport default DiagnosticMenu;\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport hexToUint8Array from './hexToUint8Array';\n\nexport class Client {\n  constructor(connManager, dhtClientId, bootstrapId, conn, swarmUri) {\n    this.connManager = connManager;\n    this.swarmUri = swarmUri;\n\n    const client = connManager.createClient(conn);\n\n    this.dhtClient = new dht.Client(dhtClientId);\n    this.dhtClient.on('peers.discover', this.handlePeersDiscover.bind(this));\n    this.dhtClient.on('receive.connect.request', this.handleReceiveConnectRequest.bind(this));\n    this.dhtClient.createChannel(bootstrapId, client.createDataChannel('dht'));\n\n    this.ppsppClient = new ppspp.Client();\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    client.init();\n  }\n\n  static create(connManager) {\n    return connManager.bootstrap().then(({data, conn}) => {\n      return new Client(\n        connManager,\n        hexToUint8Array(data.id),\n        hexToUint8Array(data.bootstrapId),\n        conn,\n        data.swarmUri,\n      );\n    });\n  }\n\n  handlePeersDiscover(id) {\n    // console.log('creating client for', ids);\n    const sub = new dht.SubChannel(this.dhtClient, id);\n    const client = this.connManager.createClient(sub);\n\n    this.dhtClient.createChannel(id, client.createDataChannel('dht'));\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    const timeout = setTimeout(() => client.close(), 10000);\n\n    const init = () => {\n      clearTimeout(timeout);\n      client.init();\n    };\n\n    this.dhtClient.send(id, 'connect.request', {channelId: sub.id}, init);\n  }\n\n  handleReceiveConnectRequest({data: {channelId, from}, callback}) {\n    // if (this.dhtClient.channels.count() > 10) {\n    //   return;\n    // }\n\n    // console.log('handleReceiveConnectRequest', {channelId, from, callback});\n    const id = new hexToUint8Array(from);\n    const client = this.connManager.createClient(new dht.SubChannel(this.dhtClient, id, channelId));\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.ppsppClient.createChannel(channel);\n      }\n    });\n\n    callback({});\n  }\n}\n","import {EventEmitter} from 'events';\nimport {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from 'wrtc';\n\nconst WebSocket = require('detect-node')\n  ? require('ws')\n  : window.WebSocket;\n\nexport class ConnManager {\n  constructor(bootstrapAddress) {\n    this.bootstrapAddress = bootstrapAddress;\n  }\n\n  bootstrap() {\n    return new Promise((resolve, reject) => {\n      const conn = new WebSocket(this.bootstrapAddress);\n      conn.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'bootstrap') {\n          resolve({data, conn});\n        } else {\n          reject(new Error(`expected bootstrap, received: ${event.data}`));\n        }\n      };\n    });\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    // firefox seems to continue generating ice messages after the datachannel\n    // has opened...\n    mediator.once('error', () => conn.close());\n    client.once('open', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    // console.log('mediator message', data);\n\n    switch (data.type) {\n      case 'offer':\n      case 'answer':\n        this.emit('remotedescription', new RTCSessionDescription(data));\n        break;\n      case 'icecandidate':\n        if (data.sdp && data.sdp.candidate) {\n          this.emit('icecandidate', new RTCIceCandidate(data.sdp));\n        }\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  sendOffer(event) {\n    this.send(event);\n  }\n\n  sendAnswer(event) {\n    this.send(event);\n  }\n\n  sendIceCandidate(event) {\n    if (event.candidate) {\n      this.send({\n        type: 'icecandidate',\n        sdp: event.candidate,\n      });\n    }\n  }\n\n  send(event) {\n    if (this.conn.readyState !== 1) {\n      console.log('mediator tried to send after closing its connection');\n      // console.log('send error', this.conn);\n      // console.trace();\n      // this.emit('error', new Error('connection in invalid state'));\n      return;\n    }\n\n    this.conn.send(JSON.stringify(event));\n  }\n}\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.initialized = false;\n    this.waitingChannels = 0;\n\n    this.peerConn = new RTCPeerConnection({\n      iceServers: [{urls: 'stun:stun.l.google.com:19302'}],\n    });\n\n    this.peerConn.addEventListener('icecandidate', candidate => this.mediator.sendIceCandidate(candidate));\n    this.peerConn.addEventListener('datachannel', this.handleDataChannel.bind(this));\n\n    mediator.once('error', () => this.peerConn.close());\n    mediator.on('icecandidate', candidate => this.addIceCandidate(candidate));\n\n    this._ready = new Promise((resolve, reject) => {\n      mediator.on('remotedescription', description => {\n        this.peerConn.setRemoteDescription(description)\n          .then(() => {\n            resolve();\n            this.createAnswer();\n          })\n          .catch(reject);\n      });\n    });\n  }\n\n  createAnswer() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n\n    this.peerConn.createAnswer()\n      .then((description) => {\n        this.peerConn.setLocalDescription(description);\n        this.mediator.sendAnswer(description);\n      })\n      .catch(error => console.error(error));\n  }\n\n  addIceCandidate(candidate) {\n    this._ready.then(() => this.peerConn.addIceCandidate(candidate));\n  }\n\n  handleDataChannel(event) {\n    event.channel.addEventListener('close', e => console.log('< begin close event handlers'));\n    event.channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    event.channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('< received data channel', event);\n    // event.channel.addEventListener('error', e => console.log('< data channel emitted error', e));\n    // event.channel.addEventListener('open', e => console.log('< data channel opened', e));\n    // event.channel.addEventListener('bufferedamountlow', e => console.log('< data channel bufferamountlow', e));\n    // event.channel.addEventListener('close', e => console.log('< data channel closed', e));\n\n    this.emit('datachannel', event);\n  }\n\n  createDataChannel(label, options = {}) {\n    options = {\n      ordered: true,\n      maxRetransmits: 10,\n      ...options,\n    };\n\n    const channel = this.peerConn.createDataChannel(label, options);\n    channel.addEventListener('close', e => console.log('> begin close event handlers'));\n    channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('> received data channel', {channel});\n    // channel.addEventListener('error', e => console.log('> data channel emitted error', e));\n    // channel.addEventListener('open', e => console.log('> data channel opened', e));\n    // channel.addEventListener('bufferedamountlow', e => console.log('> data channel bufferedamountlow', e));\n    // channel.addEventListener('close', e => console.log('> data channel closed', e));\n\n    return channel;\n  }\n\n  resolveWaitingChannel() {\n    if (-- this.waitingChannels === 0) {\n      this.emit('open');\n    }\n  }\n\n  init() {\n    this.peerConn.createOffer()\n      .then(offer => {\n        this.initialized = true;\n        // console.log('initial offer', offer);\n        this.peerConn.setLocalDescription(offer);\n        this.mediator.sendOffer(offer);\n      });\n  }\n\n  close() {\n    // console.log('wrtc client closed');\n    // console.trace();\n    this.peerConn.close();\n    this.emit('close');\n  }\n}\n","import React, {useEffect, useState} from 'react';\nimport URI from './ppspp/uri';\nimport DiagnosticMenu from './DiagnosticMenu';\n// import SwarmPlayer from './SwarmPlayer';\nimport {Client} from './client';\nimport {ConnManager} from './wrtc';\nimport {ChunkedReadStream} from './chunkedStream';\n// import qs from 'qs';\n\nimport './App.css';\n\nconst App = props => {\n  const [ppsppClient, setPpsppClient] = useState(null);\n  const [swarmUri, setSwarmUri] = useState('');\n  const [swarm, setSwarm] = useState(null);\n\n  useEffect(() => {\n    const proto = window.location.protocol === 'https:' ? 'wss' : 'ws';\n    const host = process.env.NODE_ENV === 'development'\n      ? window.location.hostname + ':8080'\n      : window.location.host;\n    const bootstrapAddress = `${proto}://${host}`;\n\n    console.log({bootstrapAddress});\n\n    const connManager = new ConnManager(bootstrapAddress);\n\n    Client.create(connManager).then(({ppsppClient, swarmUri}) => {\n      setPpsppClient(ppsppClient);\n      setSwarmUri(swarmUri);\n    });\n  }, []);\n\n  const joinSwarm = () => {\n    console.log(swarmUri);\n    const uri = URI.parse(swarmUri);\n    console.log('joining', uri);\n\n    const swarm = ppsppClient.joinSwarm(uri);\n    const stream = new ChunkedReadStream(swarm);\n    stream.on('data', d => console.log(`received ${d.length} bytes`));\n    setSwarm(swarm);\n  };\n\n  // useEffect(() => {\n  //   const query = qs.parse(props.location.search, {ignoreQueryPrefix: true});\n  //   if (query.autoplay && swarmUri) {\n  //     joinSwarm();\n  //   }\n  // }, [swarmUri]);\n\n  const onJoinSubmit = e => {\n    e.preventDefault();\n    joinSwarm();\n  };\n\n  const onInputChange = e => {\n    setSwarmUri(e.target.value);\n  };\n\n  if (swarm) {\n    return <DiagnosticMenu swarm={swarm} />;\n    // return <SwarmPlayer swarm={swarm} />;\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"idle\">\n        <div className=\"scanner\"></div>\n        <div className=\"noise\"></div>\n      </div>\n      <form className=\"join-form\" onSubmit={onJoinSubmit}>\n        <input\n          onChange={onInputChange}\n          placeholder=\"Enter Swarm URI\"\n          defaultValue={swarmUri}\n        />\n        <button>Join</button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React, {useEffect, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport {ChunkedReadStream, ChunkedWriteStreamInjector} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\n\nimport './App.css';\n\nconst App = () => {\n  const [server] = useState(new Server());\n  const [swarms, setSwarms] = useState([]);\n  const [swarmUri, setSwarmUri] = useState('');\n\n  useEffect(() => {\n    const injector = new ChunkedWriteStreamInjector();\n\n    injector.on('publish', ({swarm}) => {\n      setSwarmUri(swarm.uri);\n      server.ppsppClient.publishSwarm(swarm);\n    });\n\n    injector.on('unpublish', ({swarm}) => {\n      server.ppsppClient.unpublishSwarm(swarm);\n    });\n\n    injector.start();\n\n    return () => injector.stop();\n  }, []);\n\n  const handleAddPeerClick = () => {\n    Client.create(new ConnManager(server)).then(({ppsppClient}) => {\n      const swarm = ppsppClient.joinSwarm(swarmUri);\n      // console.log(ppsppClient);\n\n      setSwarms([...swarms, swarm]);\n\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', d => console.log(`received ${d.length} bytes`));\n    });\n  };\n\n  const diagnosticMenus = swarms.map((swarm, i) => (\n    <DiagnosticMenu\n      key={i}\n      swarm={swarm}\n      containerClass={`diagnostic-menu--indent-${i}`}\n    />\n  ));\n\n  return (\n    <div>\n      {diagnosticMenus}\n      <button onClick={handleAddPeerClick}>add peer</button>\n    </div>\n  );\n};\n\nexport default App;\n","import React, {useEffect, useReducer, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport {schemeCategory10} from 'd3-scale-chromatic';\nimport {scaleOrdinal} from 'd3-scale';\n// import SpriteText from 'three-spritetext';\n// import {Mesh, SphereBufferGeometry, MeshLambertMaterial} from 'three';\n\nimport './App.css';\n\nconst color = scaleOrdinal(schemeCategory10);\n\nconst reduceGraph = (graph, {type, ...data}) => {\n  switch (type) {\n    case 'ADD_NODE':\n      return {\n        nodes: [...graph.nodes, data],\n        links: graph.links,\n      };\n    case 'REMOVE_NODE':\n      return {\n        nodes: graph.nodes.filter(node => node.id !== data.id),\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.id && target.id !== data.id;\n        }),\n      };\n    case 'ADD_LINK':\n      return {\n        nodes: graph.nodes,\n        links: [...graph.links, {...data, activity: 0}],\n      };\n    case 'UPDATE_LINK':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            ...data,\n          };\n        }),\n      };\n    case 'INCR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity + 1,\n          };\n        }),\n      };\n    case 'DECR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity - 1,\n          };\n        }),\n      };\n    case 'REMOVE_LINK':\n      console.log(data);\n      return {\n        nodes: graph.nodes,\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.source || target.id !== data.target;\n        }),\n      };\n    default:\n      return graph;\n  }\n};\n\nconst useGraph = () => {\n  const [servers, setServers] = useState([new Server()]);\n  const [gen, setGen] = useState(1);\n  const [graph, dispatchGraphAction] = useReducer(reduceGraph, {nodes: [], links: []});\n\n  useEffect(() => {\n    const source = arrayBufferToHex(servers[0].dhtClient.id);\n    dispatchGraphAction({\n      type: 'ADD_NODE',\n      id: source,\n      color: '#fff',\n      dhtClient: servers[0].dhtClient,\n    });\n\n    addNodes(3)\n      .then(clients => clients.map(({dhtClient, ppsppClient}) => {\n        return new Server({dhtClient, ppsppClient});\n      }))\n      .then(newServers => setServers([...servers, ...newServers]));\n  }, []);\n\n  const addNodes = (n = 1, props = {}) => {\n    setGen(gen + 1);\n\n    const clientsResult = Promise.all(new Array(n).fill(0).map(() => {\n      const firstIndex = servers.length - 1;\n      const serverIndex = Math.min(firstIndex, 1 + Math.floor(Math.random() * firstIndex));\n      const server = servers[serverIndex];\n      return Client.create(new ConnManager(server));\n    }));\n\n    clientsResult.then(clients => clients.forEach(({dhtClient}) => {\n      // if (Math.random() > 0.5) {\n      //   setTimeout(() => dhtClient.close(), Math.random() * 30000);\n      // }\n\n      const {id, allChannels} = dhtClient;\n      console.log(allChannels);\n\n      const source = arrayBufferToHex(id);\n      dispatchGraphAction({\n        type: 'ADD_NODE',\n        id: source,\n        color: color(gen),\n        dhtClient,\n        ...props,\n      });\n      dhtClient.on('close', () => dispatchGraphAction({\n        type: 'REMOVE_NODE',\n        id: source,\n      }));\n\n      allChannels.toArray().forEach(channel => {\n        if (channel.isOpen()) {\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target: arrayBufferToHex(channel.id),\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n        }\n      });\n\n      // const registerConnObservers = (target, conn) => {\n      //   const handleMessage = () => {\n      //     dispatchGraphAction({type: 'INCR_LINK_ACTIVITY', source, target});\n      //     setTimeout(() => dispatchGraphAction({type: 'DECR_LINK_ACTIVITY', source, target}), 10000);\n      //   };\n\n      //   conn.on('message', handleMessage);\n      //   conn.remote.on('message', handleMessage);\n      // };\n\n      allChannels.on('added',  channel => {\n        if (channel.isOpen()) {\n          const target = arrayBufferToHex(channel.id);\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('updated', (oldChannel, newChannel) => {\n        if (oldChannel.isOpen() !== newChannel.isOpen()) {\n          const target = arrayBufferToHex(newChannel.id);\n          // dispatchGraphAction({\n          //   type: 'UPDATE_LINK',\n          //   source,\n          //   target,\n          //   color: conn ? '#fff' : '#66f',\n          // });\n\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: newChannel.isOpen() ? '#fff' : '#66f',\n          });\n\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('removed', ({id}) => dispatchGraphAction({\n        type: 'REMOVE_LINK',\n        source,\n        target: arrayBufferToHex(id),\n      }));\n    }));\n\n    return clientsResult;\n  };\n\n  const deleteNodes = (n = 1) => {\n    for (let i = 0; i < n; i ++) {\n      const firstIndex = servers.length;\n      const node = graph.nodes[firstIndex + Math.floor(Math.random() * (Object.keys(graph.nodes).length - firstIndex))];\n      if (node) {\n        node.dhtClient.close();\n      }\n    }\n  };\n\n  return [graph, {addNodes, deleteNodes}];\n};\n\nconst useNodePinger = () => {\n  const [source, setSource] = useState(null);\n\n  const handleNodeClick = node => {\n    console.log(node);\n    if (source === null) {\n      setSource(node);\n      console.log('set source', arrayBufferToHex(node.dhtClient.id));\n      return;\n    }\n\n    console.log('pinging %s > %s', arrayBufferToHex(source.dhtClient.id), arrayBufferToHex(node.dhtClient.id))\n    source.dhtClient.sendPing(node.dhtClient.id, (data) => {\n      console.log('received ping response', data);\n    });\n    setSource(null);\n  };\n\n  return handleNodeClick;\n};\n\nconst App = () => {\n  const [graph, {addNodes, deleteNodes}] = useGraph();\n  const handleNodeClick = useNodePinger();\n\n  console.log(graph);\n\n  // useEffect(() => {\n  //   let n = 1;\n  //   const ivl = setInterval(() => {\n  //     addNodes(1, {color: color(n)});\n  //     if (++ n == 50) {\n  //       clearInterval(ivl);\n  //     }\n  //   }, 1000);\n  //   return () => clearInterval(ivl);\n  // }, []);\n\n  return (\n    <div>\n      <div className=\"graph-buttons\">\n        <button onClick={() => addNodes(1)}>add 1 peer</button>\n        <button onClick={() => addNodes(5)}>add 5 peers</button>\n        <button onClick={() => addNodes(10)}>add 10 peers</button>\n        <button onClick={() => deleteNodes(1)}>delete 1 peer</button>\n        <button onClick={() => deleteNodes(5)}>delete 5 peers</button>\n      </div>\n      <ForceGraph3D\n        graphData={graph}\n        nodeAutoColorBy=\"gen\"\n        onNodeClick={handleNodeClick}\n        linkColor={link => link.color}\n        linkWidth={1.5}\n        nodeRelSize={2}\n        nodeVal={node => node.dhtClient.allChannels.count()}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport App from './App';\nimport Test from './Test';\nimport DhtGraph from './DhtGraph';\n\nconst Router = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/test\" component={Test} />\n      <Route exact path=\"/dht-graph\" component={DhtGraph} />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './Router';\n\nimport './index.css';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n","import hexToArrayBuffer from 'hex-to-array-buffer';\n\nexport default function hexToUint8Array(v) {\n  return new Uint8Array(hexToArrayBuffer(v));\n}\n","import {Buffer} from 'buffer';\nimport arrayEqual from 'array-equal';\nimport binSearch from '../binSearch';\nimport Address from './address';\nimport SwarmId from './swarmid';\n\nimport {\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n} from './constants';\n\nconst crypto = require('detect-node')\n  ? require('./webcrypto')\n  : require('./crypto');\n\nconst toUint8Array = data => new Uint8Array(data);\n\nexport const MerkleHashTreeFunctionAlgorithms = {\n  [MerkleHashTreeFunction.SHA1]: 'SHA-1',\n  [MerkleHashTreeFunction.SHA224]: 'SHA-224',\n  [MerkleHashTreeFunction.SHA256]: 'SHA-256',\n  [MerkleHashTreeFunction.SHA384]: 'SHA-384',\n  [MerkleHashTreeFunction.SHA512]: 'SHA-512',\n};\n\nexport const MerkleHashTreeFunctionByteLengths = {\n  [MerkleHashTreeFunction.SHA1]: 20,\n  [MerkleHashTreeFunction.SHA224]: 28,\n  [MerkleHashTreeFunction.SHA256]: 32,\n  [MerkleHashTreeFunction.SHA384]: 48,\n  [MerkleHashTreeFunction.SHA512]: 64,\n};\n\nexport const createMerkleHashTreeFunction = (merkleHashTreeFunction) => {\n  const algorithm = MerkleHashTreeFunctionAlgorithms[merkleHashTreeFunction];\n  if (algorithm === undefined) {\n    throw new Error('invalid merkle hash tree function');\n  }\n\n  const nullHash = new Uint8Array(MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction]);\n\n  return (...values) => {\n    values = values.map(value => value === undefined ? nullHash : value);\n\n    if (values.every(value => arrayEqual(value, nullHash))) {\n      return Promise.resolve(nullHash);\n    }\n\n    if (values.length > 1) {\n      values = new Uint8Array(Buffer.concat(values.map(value => Buffer.from(value))));\n    } else {\n      values = values[0];\n    }\n\n    return crypto.subtle.digest(algorithm, values).then(toUint8Array);\n  };\n};\n\nexport const LiveSignatureAlgorithms = {\n  [LiveSignatureAlgorithm.RSASHA1]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-1'},\n  },\n  [LiveSignatureAlgorithm.RSASHA256]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP256SHA256]: {\n    name: 'ECDSA',\n    namedCurve: 'P-256',\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP384SHA384]: {\n    name: 'ECDSA',\n    namedCurve: 'P-384',\n    hash: {name: 'SHA-384'},\n  },\n};\n\nexport const createLiveSignatureSignFunction = (liveSignatureAlgorithm, privateKey, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  const importResult = crypto.subtle.importKey('pkcs8', privateKey, algorithm, false, ['sign']);\n\n  return data => importResult\n    .then(privateKey => crypto.subtle.sign(algorithm, privateKey, data))\n    .then(toUint8Array);\n};\n\nexport const createLiveSignatureVerifyFunction = (liveSignatureAlgorithm, swarmId, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...swarmId.getKeyParams(),\n    ...algorithm,\n  };\n\n  const publicKey = new Uint8Array(swarmId.publicKey);\n  const importResult = crypto.subtle.importKey('spki', publicKey, algorithm, false, ['verify']);\n\n  return (signature, data) => importResult\n    .then(publicKey => crypto.subtle.verify(algorithm, publicKey, signature, data))\n    .then(toUint8Array);\n};\n\nexport const generateKeyPair = (liveSignatureAlgorithm, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  return crypto.subtle.generateKey(algorithm, true, ['sign', 'verify'])\n    .then(keyPair => Promise.all([\n      crypto.subtle.exportKey('pkcs8', keyPair.privateKey),\n      crypto.subtle.exportKey('spki', keyPair.publicKey),\n    ]))\n    .then(([privateKey, publicKey]) => ({\n      privateKey,\n      publicKey,\n      swarmId: SwarmId.from({\n        ...algorithm,\n        liveSignatureAlgorithm,\n        publicKey,\n      }),\n    }));\n};\n\nconst unavailableLiveSignatureSignFunction = () => Promise.reject('live signature function not available');\n\nexport const createContentIntegrityVerifierFactory = (\n  contentIntegrityProtectionMethod,\n  merkleHashTreeFunction,\n  liveSignatureVerifyFunction,\n  liveSignatureSignFunction = unavailableLiveSignatureSignFunction,\n  liveDiscardWindow = Infinity,\n) => {\n  class Signature {\n    constructor(hash, verified = false) {\n      this.hash = hash;\n      this.verified = verified;\n    }\n\n    markVerified() {\n      this.verified = true;\n    }\n\n    getHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return !this.verified\n        ? Promise.reject('cannot use unverified signature')\n        : Promise.resolve(arrayEqual(this.hash, value));\n    }\n  }\n\n  // TODO: timestamp in hash?\n  class SignedSignature {\n    constructor(signature, hash) {\n      this.signature = signature;\n      this.hash = hash;\n      this.verificationResult = undefined;\n    }\n\n    verifyHash() {\n      if (this.verificationResult === undefined) {\n        this.verificationResult = liveSignatureVerifyFunction(this.hash, this.getHash())\n          .then(() => this.markVerified());\n      }\n      return this.verificationResult;\n    }\n\n    markVerified() {\n      this.signature.markVerified();\n    }\n\n    getHash() {\n      return this.signature.getHash();\n    }\n\n    getSignatureHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return this.verifyHash().then(() => this.signature.compare(value));\n    }\n  }\n\n  class MerkleHashTree {\n    constructor(rootAddress, signatures = new Array(rootAddress.getChunkCount() * 2 - 1)) {\n      this.rootAddress = rootAddress;\n      this.signatures = signatures;\n    }\n\n    createVerifier() {\n      return new MerkleHashTreeVerifier(this);\n    }\n\n    copy(hashTree) {\n      for (let i = 0; i < this.signatures.length; i ++) {\n        if (hashTree.signatures[i] === undefined) {\n          hashTree.signatures[i] = this.signatures[i];\n        }\n      }\n    }\n\n    getChunkCount() {\n      return this.rootAddress.getChunkCount();\n    }\n\n    *getConstituentHashBins({bin}) {\n      if (!this.rootAddress.containsBin(bin)) {\n        throw new Error('bin out of range');\n      }\n\n      const {start} = this.rootAddress;\n      bin -= start;\n\n      const bins = [];\n      let bfsIndex = this.rootAddress.getChunkCount() + bin / 2 - 1;\n      let stride = 2;\n      let parent = bin;\n\n      while (bfsIndex !== 0) {\n        const branch = (bfsIndex & 1) === 1 ? 1 : -1;\n\n        yield {\n          isRoot: false,\n          branch,\n          bin: parent + start,\n          bfsIndex,\n          siblingBin: parent + branch * stride + start,\n          siblingBfsIndex: bfsIndex + branch,\n        };\n\n        bfsIndex = Math.floor((bfsIndex - 1) / 2);\n        parent += branch * stride / 2;\n        stride *= 2;\n      }\n\n      yield {\n        isRoot: true,\n        branch: 0,\n        bin: parent + start,\n        bfsIndex: 0,\n        siblingBin: parent + start,\n        siblingBfsIndex: 0,\n      };\n\n      return bins;\n    }\n\n    getConstituentSignatures(address) {\n      return Array.from(this.getConstituentHashBins(address)).map(({\n        siblingBin,\n        siblingBfsIndex,\n      }) => ({\n        bin: siblingBin,\n        signature: this.signatures[siblingBfsIndex],\n      }));\n    }\n\n    static from(values, rootAddress = new Address(MerkleHashTree.minSize(values.length) - 1)) {\n      const size = rootAddress.getChunkCount();\n      const hashes = new Array(size * 2 - 1);\n      for (let i = 0; i < size; i ++) {\n        hashes[i + size - 1] = merkleHashTreeFunction(values[i]);\n      }\n      for (let i = (size - 1) * 2; i > 0; i -= 2) {\n        hashes[Math.floor(i / 2) - 1] = Promise.all([hashes[i - 1], hashes[i]])\n          .then(siblings => merkleHashTreeFunction(...siblings));\n      }\n\n      return Promise.all(hashes).then(hashes => {\n        const signatures = hashes.map(hash => new Signature(hash, true));\n\n        return liveSignatureSignFunction(hashes[0]).then(rootHashSignature => {\n          signatures[0] = new SignedSignature(\n            signatures[0],\n            rootHashSignature,\n          );\n\n          return new MerkleHashTree(rootAddress, signatures);\n        });\n      });\n    }\n\n    static minSize(size) {\n      return Math.pow(2, Math.ceil(Math.log2(size)));\n    }\n  }\n\n  class MerkleHashTreeVerifier {\n    constructor(hashTree) {\n      this.hashTree = hashTree;\n      this.signatures = {};\n    }\n\n    setHash({bin}, hash) {\n      this.signatures[bin] = new Signature(hash);\n    }\n\n    setHashSignature({bin}, hash) {\n      this.signatures[bin] = new SignedSignature(this.signatures[bin], hash);\n    }\n\n    verifyChunk(address, value) {\n      const signatures = [];\n      let hashResult = merkleHashTreeFunction(value);\n\n      for (let bin of this.hashTree.getConstituentHashBins(address)) {\n        let siblingSignature = this.hashTree.signatures[bin.siblingBfsIndex];\n        if (siblingSignature === undefined) {\n          siblingSignature = this.signatures[bin.siblingBin];\n          signatures.push({\n            index: bin.siblingBfsIndex,\n            signature: siblingSignature,\n          });\n        }\n\n        // if the current branch has already been verified short circuit\n        const verifiedSignature = this.hashTree.signatures[bin.bfsIndex];\n        if (verifiedSignature !== undefined) {\n          hashResult = hashResult.then(hash => verifiedSignature.compare(hash));\n          break;\n        }\n\n        // verify the generated root hash using the one supplied to the verifier\n        if (bin.isRoot) {\n          hashResult = hashResult.then(hash => siblingSignature.compare(hash));\n          break;\n        }\n\n        // chain generating the next parent hash\n        hashResult = hashResult.then(hash => {\n          signatures.push({\n            index: bin.bfsIndex,\n            signature: new Signature(hash),\n          });\n\n          const siblingHash = siblingSignature.getHash();\n          const siblings = bin.branch === 1 ? [hash, siblingHash] : [siblingHash, hash];\n          return merkleHashTreeFunction(...siblings);\n        });\n      }\n\n      return hashResult.then(() => {\n        signatures.forEach(({index, signature}) => {\n          signature.markVerified();\n          this.hashTree.signatures[index] = signature;\n        });\n      });\n    }\n  }\n\n  class UnifiedMerkleHashTree {\n    constructor() {\n      this.subtrees = [];\n      this.nextStart = 0;\n      this.chunkCount = 0;\n    }\n\n    findSubtree({bin}) {\n      const index = binSearch(\n        this.subtrees.length - 1,\n        i => {\n          const {start, end} = this.subtrees[i].rootAddress;\n          return start <= bin && bin <= end ? 0 : start - bin;\n        },\n      );\n\n      return index < 0 ? undefined : this.subtrees[index];\n    }\n\n    insertSubtree(subtree) {\n      const storedSubtree = this.findSubtree(subtree.rootAddress);\n      if (storedSubtree !== undefined) {\n        if (storedSubtree !== subtree) {\n          subtree.copy(storedSubtree);\n        }\n\n        return storedSubtree;\n      }\n\n      this.subtrees.push(subtree);\n      this.subtrees.sort((a, b) => a.rootAddress.start - b.rootAddress.start);\n\n      this.chunkCount += subtree.getChunkCount();\n      this.pruneSubtrees();\n\n      return subtree;\n    }\n\n    pruneSubtrees() {\n      while (this.subtrees.length > 0 && this.chunkCount - this.subtrees[0].getChunkCount() > liveDiscardWindow) {\n        const removedTree = this.subtrees.shift();\n        this.chunkCount -= removedTree.getChunkCount();\n      }\n    }\n\n    appendSubtree(values) {\n      const treeSize = MerkleHashTree.minSize(values.length);\n      const nextAddress = new Address(\n        this.nextStart + treeSize - 1,\n        [this.nextStart, this.nextStart + (treeSize - 1) * 2],\n      );\n\n      this.nextStart += treeSize * 2;\n\n      return MerkleHashTree.from(values, nextAddress)\n        .then(subtree => this.insertSubtree(subtree));\n    }\n\n    createVerifier(address) {\n      let subtree = this.findSubtree(address) || new MerkleHashTree(address);\n      return new MerkleHashSubtreeVerifier(this, subtree);\n    }\n\n    getConstituentSignatures(address) {\n      const subtree = this.findSubtree(address);\n      if (subtree === undefined) {\n        return;\n      }\n\n      return subtree.getConstituentSignatures(address);\n    }\n  }\n\n  class MerkleHashSubtreeVerifier extends MerkleHashTreeVerifier {\n    constructor(unifiedHashTree, subtree) {\n      super(subtree);\n      this.unifiedHashTree = unifiedHashTree;\n    }\n\n    verifyChunk(address, value) {\n      return super.verifyChunk(address, value)\n        .then(this.unifiedHashTree.insertSubtree(this.hashTree));\n    }\n  }\n\n  class NoneVerifier {\n    setHash() {}\n\n    setHashSignature() {}\n\n    verifyChunk() {\n      return Promise.resolve();\n    }\n  }\n\n  class NoneVerifierFactory {\n    createVerifier() {\n      return new NoneVerifier();\n    }\n\n    getConstituentSignatures() {\n      return [];\n    }\n  }\n\n  // TODO: sign all method\n  switch (contentIntegrityProtectionMethod) {\n    case ContentIntegrityProtectionMethod.None:\n      return new NoneVerifierFactory();\n    case ContentIntegrityProtectionMethod.MerkleHashTree:\n      return new MerkleHashTree();\n    case ContentIntegrityProtectionMethod.UnifiedMerkleTree:\n      return new UnifiedMerkleHashTree();\n    default:\n      throw new Error('unsupported content integrity protection method');\n  }\n};\n","export default function binSearch(max, comparator) {\n  let left = 0;\n  let right = max;\n\n  while (left <= right) {\n    const mid = left + Math.floor((right - left) / 2);\n    const order = comparator(mid);\n\n    if (order < 0) {\n      left = mid + 1;\n    } else if (order > 0) {\n      right = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(left + 1);\n}\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport createRandomId from './utils/createRandomId';\n\nexport class Server {\n  constructor(props = {}) {\n    this.queue = [];\n    this.dhtClient = props.dhtClient || new dht.Client(createRandomId());\n    this.ppsppClient = props.ppsppClient || new ppspp.Client();\n  }\n}\n\nexport class ConnManager {\n  constructor(server) {\n    this.server = server;\n  }\n\n  bootstrap() {\n    const id = createRandomId();\n\n    const data = {\n      type: 'bootstrap',\n      bootstrapId: arrayBufferToHex(this.server.dhtClient.id),\n      id: arrayBufferToHex(id),\n    };\n    const conn = Conn.open();\n    const client = this.createClient(conn);\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.server.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.server.ppsppClient.createChannel(channel);\n      }\n    });\n\n    this.server.queue.push(client);\n    if (this.server.queue.length > 6) {\n      this.server.queue.shift().close();\n    }\n    // setTimeout(() => client.close(), Math.random() * 30000);\n\n    return Promise.resolve({data, conn: conn.remote});\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    mediator.on('connection', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Conn extends EventEmitter {\n  constructor(remote) {\n    super();\n\n    this.remote = remote || new Conn(this);\n    this.remote.remote = this;\n\n    this.readyState = this.remote.readyState || Conn.ReadyStates.CONNECTING;\n\n    this.onmessage = () => {};\n  }\n\n  send(data) {\n    if (this.readyState === Conn.ReadyStates.OPEN) {\n      setImmediate(() => {\n        this.remote.emit('message', {data});\n        this.remote.onmessage({data});\n      });\n    }\n  }\n\n  addEventListener(...args) {\n    this.on(...args);\n  }\n\n  removeEventListener(...args) {\n    this.removeListener(...args);\n  }\n\n  static open() {\n    const conn = new Conn();\n    conn.open();\n    conn.remote.open();\n    return conn;\n  }\n\n  open() {\n    this.readyState = Conn.ReadyStates.OPEN;\n    this.remote.readyState = Conn.ReadyStates.OPEN;\n    this.emit('open');\n  }\n\n  close() {\n    this.readyState = Conn.ReadyStates.CLOSING;\n    this.remote.readyState = Conn.ReadyStates.CLOSING;\n\n    this.remote.emit('close');\n    this.emit('close');\n\n    this.readyState = Conn.ReadyStates.CLOSED;\n    this.remote.readyState = Conn.ReadyStates.CLOSED;\n\n    this.removeAllListeners();\n    this.remote.removeAllListeners();\n  }\n}\n\nConn.ReadyStates = {\n  CONNECTING: 'connecting',\n  OPEN: 'open',\n  CLOSING: 'closing',\n  CLOSED: 'closed',\n};\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case 'connection':\n        this.handleConnection(data);\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  handleConnection({id}) {\n    const datachannels = Mediator.datachannels[id];\n    delete Mediator.datachannels[id];\n\n    Object.entries(datachannels).forEach(([label, channel]) => this.emit('datachannel', label, channel));\n    this.emit('open');\n  }\n\n  sendConnection(datachannels) {\n    const id = Mediator.nextId ++;\n    Mediator.datachannels[id] = datachannels;\n\n    this.conn.send(JSON.stringify({\n      type: 'connection',\n      id,\n    }));\n\n    this.emit('open');\n  }\n}\n\nMediator.nextId = 0;\nMediator.datachannels = {};\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.datachannels = {};\n    this.conns = [];\n\n    mediator.on('datachannel', this.handleDataChannel.bind(this));\n    mediator.once('open', this.handleOpen.bind(this));\n  }\n\n  handleDataChannel(label, conn) {\n    const channel = new ClientDataChannel(this, label, conn);\n    this.conns.push(channel);\n    this.emit('datachannel', {label, channel});\n  }\n\n  handleOpen() {\n    setImmediate(() => {\n      this.conns.forEach(conn => conn.open());\n      this.emit('open');\n    });\n  }\n\n  createDataChannel(label) {\n    const channel = new ClientDataChannel(this, label);\n    this.datachannels[label] = channel;\n    this.conns.push(channel);\n    return channel;\n  }\n\n  init() {\n    this.mediator.sendConnection(this.datachannels);\n  }\n\n  close() {\n    this.conns.forEach(conn => conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n}\n\nexport class ClientDataChannel extends Conn {\n  constructor(client, label, remote) {\n    super(remote);\n\n    this.client = client;\n    this.label = label;\n  }\n}\n","import {LiveSignatureAlgorithm} from './constants';\n\nconst isRsaAlgorithm = liveSignatureAlgorithm => {\n  const rsaAlgorithms = [\n    LiveSignatureAlgorithm.RSASHA1,\n    LiveSignatureAlgorithm.RSASHA256,\n  ];\n  return rsaAlgorithms.includes(liveSignatureAlgorithm);\n};\n\nexport default class SwarmId {\n  constructor(\n    liveSignatureAlgorithm,\n    publicKey,\n    publicExponent,\n    modulusLength,\n  ) {\n    this.liveSignatureAlgorithm = liveSignatureAlgorithm;\n    this.publicKey = Buffer.from(publicKey);\n    this.publicExponent = publicExponent;\n    this.modulusLength = modulusLength;\n  }\n\n  getLiveSignatureByteLength() {\n    switch (this.liveSignatureAlgorithm) {\n      case LiveSignatureAlgorithm.RSASHA1:\n      case LiveSignatureAlgorithm.RSASHA256:\n        return this.modulusLength / 8;\n      case LiveSignatureAlgorithm.ECDSAP256SHA256:\n        return 64;\n      case LiveSignatureAlgorithm.ECDSAP384SHA384:\n        return 96;\n      default:\n        throw new Error('unsupported live signature algorithm');\n    }\n  }\n\n  getKeyParams() {\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      return {\n        publicExponent: new Uint8Array(this.publicExponent),\n        modulusLength: this.modulusLength,\n      };\n    }\n    return {};\n  }\n\n  byteLength() {\n    const metadataLength = isRsaAlgorithm(this.liveSignatureAlgorithm) ? 9 : 1;\n    return this.publicKey.length + metadataLength;\n  }\n\n  toBuffer() {\n    const buffer = Buffer.alloc(this.byteLength());\n    let length = 0;\n\n    buffer.writeUInt8(this.liveSignatureAlgorithm, length);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      Buffer.from(this.publicExponent).copy(buffer, length + 4 - this.publicExponent.length);\n      length += 4;\n\n      buffer.writeUInt32BE(this.modulusLength, length);\n      length += 4;\n    }\n\n    this.publicKey.copy(buffer, length);\n\n    return buffer;\n  }\n\n  read(buffer) {\n    let length = 0;\n\n    this.liveSignatureAlgorithm = buffer.readUInt8(0);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      this.publicExponent = buffer.slice(length, length + 4);\n      length += 4;\n\n      this.modulusLength = buffer.readUInt32BE(length);\n      length += 4;\n    }\n\n    this.publicKey = buffer.slice(length);\n  }\n\n  static from(values) {\n    if (ArrayBuffer.isView(values)) {\n      const swarmId = Object.create(SwarmId.prototype);\n      swarmId.read(Buffer.from(values));\n      return swarmId;\n    }\n\n    return new SwarmId(\n      values.liveSignatureAlgorithm,\n      values.publicKey,\n      values.publicExponent,\n      values.modulusLength,\n    );\n  }\n}\n","export default class EMA {\n  constructor(alpha) {\n    this.mean = 0;\n    this.alpha = alpha;\n    this.weight = 1;\n  }\n\n  update(value) {\n    this.mean = this.alpha * value + (1 - this.alpha) * this.mean;\n    this.weight *= this.alpha;\n  }\n\n  set(value) {\n    this.mean = value;\n    this.weight = 0;\n  }\n\n  isEmpty() {\n    return this.weight === 1;\n  }\n\n  value() {\n    return this.mean / (1 - this.weight);\n  }\n}\n","export default class RingBuffer {\n  constructor(capacity) {\n    this.setCapacity(capacity);\n  }\n\n  setCapacity(capacity) {\n    this.capacity = capacity;\n    this.lastIndex = capacity;\n    this.values = new Array(capacity);\n\n    for (let i = 0; i < capacity; i ++) {\n      this.values[i] = this.createEmptyValue(i);\n    }\n  }\n\n  advanceLastIndex(lastIndex) {\n    if (this.lastIndex > lastIndex) {\n      return;\n    }\n\n    let firstEmptyIndex = this.lastIndex;\n    if (lastIndex - firstEmptyIndex > this.capacity) {\n      firstEmptyIndex = lastIndex - this.capacity;\n    }\n    for (let i = firstEmptyIndex; i <= lastIndex; i ++) {\n      const index = i % this.capacity;\n      this.values[index] = this.createEmptyValue(i, this.values[index]);\n    }\n    this.lastIndex = lastIndex + 1;\n  }\n\n  createEmptyValue() {\n    return undefined;\n  }\n\n  set(index, value) {\n    this.advanceLastIndex(index);\n    this.values[index % this.capacity] = value;\n  }\n\n  get(index) {\n    if (index < this.lastIndex - this.capacity || index >= this.lastIndex) {\n      return undefined;\n    }\n    return this.values[index % this.capacity];\n  }\n\n  push(value) {\n    this.set(this.lastIndex, value);\n  }\n}\n","import EMA from './ema';\nimport RingBuffer from './RingBuffer';\n\nclass DelayBuffer extends RingBuffer {\n  constructor(capacity, window) {\n    super(capacity);\n    this.min = Infinity;\n    this.window = window;\n  }\n\n  createEmptyValue() {\n    return Infinity;\n  }\n\n  getMin() {\n    return this.min;\n  }\n\n  update(delay) {\n    const now = Math.floor(Date.now() / this.window);\n\n    if (now >= this.lastIndex) {\n      this.advanceLastIndex(now);\n      this.min = Math.min(...this.values);\n    }\n\n    if (delay < this.get(now)) {\n      this.set(now, delay);\n      this.min = Math.min(this.min, delay);\n    }\n  }\n}\n\n// rfc6817\nconst TARGET = 100;\nconst ALLOWED_INCREASE = 1;\nconst GAIN = 1;\nconst CURRENT_HISTORY = 4;\nconst CURRENT_HISTORY_INTERVAL = 1000;\nconst BASE_HISTORY = 10;\nconst BASE_HISTORY_INTERVAL = 60 * 1000;\nconst INIT_CWND = 2;\nconst MIN_CWND = 2;\n\n// max safe WebRTC data channel message size\nconst MSS = 8 * 1024;\n\n// rfc6298\nconst COEF_G = 1;\nconst COEF_K = 4;\n\n// jacobson, v. \"congestion avoidance and control\"\n// doi: 10.1145/52325.52356\nconst COEF_ALPHA = 0.125;\nconst COEF_BETA = 0.25;\n\nexport default class LEDBAT {\n  constructor(target = TARGET, mss = MSS) {\n    this.target = target;\n    this.mss = mss;\n    this.flightSize = 0;\n\n    // the amount of data that is allowed to be outstanding in an rtt in bytes\n    this.cwnd = INIT_CWND * MSS;\n\n    // the congestion timeout\n    this.cto = 1000;\n    this.currentDelay = new DelayBuffer(CURRENT_HISTORY, CURRENT_HISTORY_INTERVAL);\n    this.baseDelay = new DelayBuffer(BASE_HISTORY, BASE_HISTORY_INTERVAL);\n\n    this.lastDataLoss = 0;\n    this.lastAckTime = Infinity;\n    this.rttMean = new EMA(COEF_ALPHA);\n    this.rttVar = new EMA(COEF_BETA);\n\n    this.ackSize = 0;\n  }\n\n  addSent(bytes) {\n    this.flightSize += bytes;\n  }\n\n  addDelaySample(delaySample, bytes = MSS) {\n    this.currentDelay.update(delaySample);\n    this.baseDelay.update(delaySample);\n\n    this.ackSize += bytes;\n\n    this.lastAckTime = Date.now();\n  }\n\n  digestDelaySamples() {\n    this.checkCTO();\n\n    if (this.ackSize === 0) {\n      return;\n    }\n\n    const queuingDelay = Math.abs(this.currentDelay.getMin() - this.baseDelay.getMin());\n    const offTarget = (this.target - queuingDelay) / this.target;\n    this.cwnd += GAIN * offTarget * this.ackSize * this.mss / this.cwnd;\n\n    const maxAllowedCwnd = this.flightSize + ALLOWED_INCREASE * this.mss;\n    this.cwnd = Math.max(Math.min(this.cwnd, maxAllowedCwnd), MIN_CWND * this.mss);\n\n    this.flightSize = Math.max(0, this.flightSize - this.ackSize);\n    this.ackSize = 0;\n  }\n\n  checkCTO() {\n    if (this.flightSize > 0 && Date.now() - this.cto > this.lastAckTime) {\n      this.cwnd = this.mss;\n      this.cto = 2 * this.cto;\n    }\n  }\n\n  addRttSample(rtt) {\n    if (this.rttMean.isEmpty()) {\n      this.rttMean.set(rtt);\n      this.rttVar.set(rtt / 2);\n    } else {\n      this.rttVar.update(Math.abs(this.rttMean.value() - rtt));\n      this.rttMean.update(rtt);\n    }\n\n    this.cto = this.rttMean.value() + Math.max(COEF_G, COEF_K * this.rttVar.value());\n    if (this.cto < 1000) {\n      this.cto = 1000;\n    }\n  }\n\n  onDataLoss(bytes, retransmitting = false) {\n    const now = Date.now();\n    if (this.lastDataLoss !== 0 && now - this.lastDataLoss < this.rttMean.value()) {\n      return;\n    }\n    this.lastDataLoss = now;\n\n    this.cwnd = Math.min(this.cwnd, Math.max(this.cwnd / 2, MIN_CWND * this.mss));\n\n    if (!retransmitting) {\n      this.flightSize = Math.max(0, this.flightSize - bytes);\n    }\n  }\n\n  static computeOneWayDelay(timestamp) {\n    return Date.now() - timestamp;\n  }\n}\n","import {Buffer} from 'buffer';\nimport Address from './address';\nimport {MerkleHashTreeFunctionByteLengths} from './integrity';\n\nimport {\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n} from './constants';\n\nexport const createChunkAddressFieldType = (addressingMethod, chunkSize) => {\n  class Bin32ChunkAddress {\n    constructor(value = 0) {\n      this.type = ChunkAddressingMethod.Bin32;\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n\n    rangeByteLength() {\n      const [start, end] = Address.binBounds(this.value);\n      return (end - start + 1) * chunkSize;\n    }\n\n    static from({bin}) {\n      return new Bin32ChunkAddress(bin);\n    }\n  }\n\n  class ChunkRange32ChunkAddress {\n    constructor(start = 0, end = 0) {\n      this.type = ChunkAddressingMethod.ChunkRange32;\n      this.start = start;\n      this.end = end;\n    }\n\n    read(buffer, offset) {\n      this.start = buffer.readUInt32BE(offset);\n      this.end = buffer.readUInt32BE(offset + 4);\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.start, offset);\n      buffer.writeUInt32BE(this.end, offset + 4);\n    }\n\n    rangeByteLength() {\n      return (this.end - this.start + 1) * chunkSize;\n    }\n\n    static from({start, end}) {\n      return new ChunkRange32ChunkAddress(start, end);\n    }\n  }\n\n  switch (addressingMethod) {\n    case ChunkAddressingMethod.Bin32:\n      return Bin32ChunkAddress;\n    case ChunkAddressingMethod.ChunkRange32:\n      return ChunkRange32ChunkAddress;\n    default:\n      throw new Error('unsupported chunk addressing method');\n  }\n};\n\nconst createBufferFieldType = byteLength => {\n  class BufferField {\n    constructor(value = Buffer.alloc(byteLength)) {\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      buffer.copy(this.value, 0, offset, offset + byteLength);\n      return byteLength;\n    }\n\n    byteLength() {\n      return byteLength;\n    }\n\n    write(buffer, offset) {\n      this.value.copy(buffer, offset);\n    }\n  }\n\n  return BufferField;\n};\n\nexport const createLiveSignatureFieldType = (liveSignatureAlgorithm, swarmId) => {\n  const byteLength = swarmId.getLiveSignatureByteLength();\n\n  class LiveSignatureField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = liveSignatureAlgorithm;\n    }\n  }\n\n  return LiveSignatureField;\n};\n\nexport const createIntegrityHashFieldType = merkleHashTreeFunction => {\n  const byteLength = MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction];\n\n  class IntegrityHashField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = merkleHashTreeFunction;\n    }\n  }\n\n  return IntegrityHashField;\n};\n\nexport const createEncoding = (ChunkAddress, IntegrityHash, LiveSignature) => {\n  class Uint8ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt8(offset);\n      return 1;\n    }\n\n    byteLength() {\n      return 1;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt8(this.value, offset);\n    }\n  }\n\n  class Uint32ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n  }\n\n  class VersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.Version;\n    }\n  }\n\n  class MinimumVersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.MinimumVersion;\n    }\n  }\n\n  class SwarmIdentifierProtocolOption {\n    constructor(value = []) {\n      this.type = ProtocolOptions.SwarmIdentifier;\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt16BE(offset);\n      offset += 2;\n\n      this.value = buffer.slice(offset, offset + length);\n\n      return length + 2;\n    }\n\n    byteLength() {\n      return this.value.length + 2;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt16BE(this.value.length, offset);\n      this.value.copy(buffer, offset + 2);\n    }\n  }\n\n  class ContentIntegrityProtectionMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ContentIntegrityProtectionMethod.MerkleHashTree) {\n      super(method);\n      this.type = ProtocolOptions.ContentIntegrityProtectionMethod;\n    }\n  }\n\n  class MerkleHashTreeFunctionProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = MerkleHashTreeFunction.SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.MerkleHashTreeFunction;\n    }\n  }\n\n  class LiveSignatureAlgorithmProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = LiveSignatureAlgorithm.ECDSAP256SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.LiveSignatureAlgorithm;\n    }\n  }\n\n  class ChunkAddressingMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ChunkAddressingMethod.ChunkRange32) {\n      super(method);\n      this.type = ProtocolOptions.ChunkAddressingMethod;\n    }\n  }\n\n  class LiveDiscardWindowProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.LiveDiscardWindow;\n    }\n  }\n\n  class SupportedMessagesProtocolOption {\n    constructor(messageTypes = Object.values(MessageTypes).filter(v => !isNaN(v))) {\n      this.type = ProtocolOptions.SupportedMessages;\n      this.value = {};\n      messageTypes.forEach(type => this.value[type] = true);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt8(offset);\n      offset += 1;\n\n      for (let i = 0; i < length; i ++) {\n        const byte = buffer[offset + i];\n        for (let j = 0; j < 8; j ++) {\n          this.value[i * 8 + j] = Boolean(byte & (1 << 7 - j));\n        }\n      }\n\n      return length + 1;\n    }\n\n    bitmapByteLength() {\n      return Math.ceil(Math.max(...Object.keys(this.value)) / 8) + 1;\n    }\n\n    toBitmap() {\n      const length = this.bitmapByteLength();\n      const buffer = Buffer.alloc(length);\n\n      for (let i = 0; i < length; i ++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j ++) {\n          byte = (byte << 1) | (this.value[i * 8 + j] ? 1 : 0);\n        }\n        buffer.writeUInt8(byte, i);\n      }\n      return buffer;\n    }\n\n    byteLength() {\n      return this.bitmapByteLength() + 1;\n    }\n\n    write(buffer, offset) {\n      const bitmap = this.toBitmap();\n      buffer.writeUInt8(bitmap.length, offset);\n      bitmap.copy(buffer, offset + 1);\n    }\n  }\n\n  class ChunkSizeProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.ChunkSize;\n    }\n  }\n\n  const protocolOptionRecordTypes = {\n    [ProtocolOptions.Version]: VersionProtocolOption,\n    [ProtocolOptions.MinimumVersion]: MinimumVersionProtocolOption,\n    [ProtocolOptions.SwarmIdentifier]: SwarmIdentifierProtocolOption,\n    [ProtocolOptions.ContentIntegrityProtectionMethod]: ContentIntegrityProtectionMethodProtocolOption,\n    [ProtocolOptions.MerkleHashTreeFunction]: MerkleHashTreeFunctionProtocolOption,\n    [ProtocolOptions.LiveSignatureAlgorithm]: LiveSignatureAlgorithmProtocolOption,\n    [ProtocolOptions.ChunkAddressingMethod]: ChunkAddressingMethodProtocolOption,\n    [ProtocolOptions.LiveDiscardWindow]: LiveDiscardWindowProtocolOption,\n    [ProtocolOptions.SupportedMessages]: SupportedMessagesProtocolOption,\n    [ProtocolOptions.ChunkSize]: ChunkSizeProtocolOption,\n  };\n\n  class HandshakeMessage {\n    constructor(channelId = 0, options = []) {\n      this.type = MessageTypes.HANDSHAKE;\n      this.channelId = channelId;\n      this.options = options;\n    }\n\n    read(buffer, offset) {\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(offset);\n      length += 4;\n\n      while (offset + length < buffer.length) {\n        const code = buffer.readUInt8(offset + length);\n        length += 1;\n\n        if (code === ProtocolOptions.EndOption) {\n          break;\n        }\n\n        const RecordType = protocolOptionRecordTypes[code];\n        const option = new RecordType();\n\n        length += option.read(buffer, offset + length);\n        this.options.push(option);\n      }\n\n      return length;\n    }\n\n    byteLength() {\n      return this.options.reduce((length, option) => length + option.byteLength() + 1, 0) + 5;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, offset);\n      length += 4;\n\n      this.options.forEach(option => {\n        buffer.writeUInt8(option.type, offset + length);\n        length += 1;\n\n        option.write(buffer, offset + length);\n        length += option.byteLength();\n      });\n\n      buffer.writeUInt8(ProtocolOptions.EndOption, offset + length);\n      length += 1;\n\n      return length;\n    }\n  }\n\n  class Timestamp {\n    constructor(value = Date.now()) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      const seconds = buffer.readInt32BE(offset);\n      const nanoseconds = buffer.readInt32BE(offset + 4);\n      this.value = seconds * 1e3 + nanoseconds / 1e6;\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeInt32BE(Math.floor(this.value / 1e3), offset);\n      buffer.writeInt32BE((this.value % 1e3) * 1e6, offset + 4);\n    }\n  }\n\n  class DataMessage {\n    constructor(address = new ChunkAddress(), data = [], timestamp = new Timestamp()) {\n      this.type = MessageTypes.DATA;\n      this.address = address;\n      this.data = Buffer.from(data);\n      this.timestamp = timestamp;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n\n      offset += length;\n      const dataLength = Math.min(this.address.rangeByteLength(), buffer.length - offset);\n      this.data = buffer.slice(offset, offset + dataLength);\n\n      return length + dataLength;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.data.length + 8;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.data.copy(buffer, offset + length);\n    }\n  }\n\n  class AddressMessage {\n    constructor(address = new ChunkAddress()) {\n      this.address = address;\n    }\n\n    read(buffer, offset) {\n      return this.address.read(buffer, offset);\n    }\n\n    byteLength() {\n      return this.address.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n    }\n  }\n\n  class AckMessage {\n    constructor(address = new ChunkAddress(), delaySample = new Timestamp()) {\n      this.type = MessageTypes.ACK;\n      this.address = address;\n      this.delaySample = delaySample;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.delaySample.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.delaySample.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.delaySample.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class HaveMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.HAVE;\n    }\n  }\n\n  class IntegrityMessage {\n    constructor(address = new ChunkAddress(), hash = new IntegrityHash()) {\n      this.type = MessageTypes.INTEGRITY;\n      this.address = address;\n      this.hash = hash;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.hash.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.hash.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.hash.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class SignedIntegrityMessage {\n    constructor(\n      address = new ChunkAddress(),\n      timestamp = new Timestamp(),\n      signature = new LiveSignature(),\n    ) {\n      this.type = MessageTypes.SIGNED_INTEGRITY;\n      this.address = address;\n      this.timestamp = timestamp;\n      this.signature = signature;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n      length += this.signature.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.timestamp.byteLength() + this.signature.byteLength();\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.signature.write(buffer, offset + length);\n    }\n  }\n\n  class RequestMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.REQUEST;\n    }\n  }\n\n  class CancelMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.CANCEL;\n    }\n  }\n\n  class EmptyMessage {\n    read() {\n      return 0;\n    }\n\n    byteLength() {\n      return 0;\n    }\n\n    write() {}\n  }\n\n  class ChokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.CHOKE;\n    }\n  }\n\n  class UnchokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.UNCHOKE;\n    }\n  }\n\n  const messageRecordTypes = {\n    [MessageTypes.HANDSHAKE]: HandshakeMessage,\n    [MessageTypes.DATA]: DataMessage,\n    [MessageTypes.ACK]: AckMessage,\n    [MessageTypes.HAVE]: HaveMessage,\n    [MessageTypes.INTEGRITY]: IntegrityMessage,\n    [MessageTypes.SIGNED_INTEGRITY]: SignedIntegrityMessage,\n    [MessageTypes.REQUEST]: RequestMessage,\n    [MessageTypes.CANCEL]: CancelMessage,\n    [MessageTypes.CHOKE]: ChokeMessage,\n    [MessageTypes.UNCHOKE]: UnchokeMessage,\n  };\n\n  class Messages {\n    constructor(values = []) {\n      this.values = values;\n      this.buffer = null;\n      this.offset = 0;\n    }\n\n    static from(values) {\n      if (values instanceof Messages) {\n        return values;\n      }\n      if (Array.isArray(values)) {\n        return new Messages(values);\n      }\n      throw new Error('unable to create Messages from unsupported type');\n    }\n\n    next() {\n      if (this.offset >= this.buffer.length) {\n        return;\n      }\n\n      const messageType = this.buffer.readUInt8(this.offset);\n      this.offset += 1;\n\n      const RecordType = messageRecordTypes[messageType];\n      const message = new RecordType();\n      this.values.push(message);\n\n      this.offset += message.read(this.buffer, this.offset);\n\n      return message;\n    }\n\n    toArray() {\n      // eslint-disable-next-line no-empty\n      while (this.next()) {}\n      return this.values;\n    }\n\n    read(buffer, offset) {\n      this.buffer = buffer;\n      this.offset = offset;\n      return 0;\n    }\n\n    byteLength() {\n      return this.values.reduce((length, message) => length + message.byteLength() + 1, 0);\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.values.forEach(message => {\n        buffer.writeUInt8(message.type, offset + length);\n        length += 1;\n\n        message.write(buffer, offset + length);\n        length += message.byteLength();\n      });\n\n      return length;\n    }\n  }\n\n  class Datagram {\n    constructor(channelId = 0, messages = []) {\n      this.channelId = channelId;\n      this.messages = Messages.from(messages);\n    }\n\n    read(data) {\n      const buffer = Buffer.from(data);\n\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(0);\n      length += 4;\n\n      length += this.messages.read(buffer, length);\n\n      return length;\n    }\n\n    byteLength() {\n      return this.messages.byteLength() + 4;\n    }\n\n    write(buffer) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, 0);\n      length += 4;\n\n      length += this.messages.write(buffer, length);\n\n      return length;\n    }\n\n    toBuffer() {\n      const buffer = Buffer.alloc(this.byteLength());\n      this.write(buffer);\n      return buffer;\n    }\n\n    static from(buffer) {\n      const datagram = new Datagram();\n      datagram.read(buffer);\n      return datagram;\n    }\n  }\n\n  return {\n    VersionProtocolOption,\n    MinimumVersionProtocolOption,\n    SwarmIdentifierProtocolOption,\n    ContentIntegrityProtectionMethodProtocolOption,\n    MerkleHashTreeFunctionProtocolOption,\n    LiveSignatureAlgorithmProtocolOption,\n    ChunkAddressingMethodProtocolOption,\n    LiveDiscardWindowProtocolOption,\n    SupportedMessagesProtocolOption,\n    ChunkSizeProtocolOption,\n    HandshakeMessage,\n    Timestamp,\n    DataMessage,\n    AckMessage,\n    HaveMessage,\n    IntegrityMessage,\n    SignedIntegrityMessage,\n    RequestMessage,\n    CancelMessage,\n    ChokeMessage,\n    UnchokeMessage,\n    Datagram,\n    LiveSignature,\n    IntegrityHash,\n    ChunkAddress,\n  };\n};\n","function createMask(bits) {\n  let mask = 0;\n  for (let i = 0; i < bits; i ++) {\n    mask = (mask << 1) | 1;\n  }\n  return mask;\n}\n\nfunction applyMask(byte, mask, value) {\n  if (value) {\n    return byte | mask;\n  }\n  return byte & (255 ^ mask);\n}\n\nexport default class BitArray {\n  constructor(capacity = 0) {\n    this.offset = 0;\n    this.resize(capacity);\n  }\n\n  // TODO: copy old values..?\n  resize(capacity) {\n    this.capacity = capacity;\n    this.values = new Uint8Array(Math.ceil(capacity / 8));\n  }\n\n  adjustOffset(index) {\n    const {offset} = this;\n    const distance = (index - offset) - this.capacity;\n    if (distance <= 0) {\n      return;\n    }\n\n    this.offset += distance;\n    this.unsafelySetRange(offset + 1, offset + distance + 1, false);\n  }\n\n  getByteIndex(index) {\n    return Math.floor(index / 8) % this.values.length;\n  }\n\n  getBitIndex(index) {\n    return index % 8;\n  }\n\n  getIndexValue(byteIndex, bitIndex) {\n    const byteOffset = this.offset % (this.values.length * 8);\n    const offset = byteIndex < byteOffset\n      ? this.offset + (this.values.length * 8) - byteOffset\n      : this.offset;\n    return offset + (byteIndex * 8 + bitIndex);\n  }\n\n  setRange(start, end, value = true) {\n    if (end - start === 1) {\n      this.set(start, value);\n      return;\n    }\n\n    if (end <= this.offset) {\n      return;\n    }\n    start = Math.max(start, this.offset);\n\n    this.adjustOffset(end);\n    this.unsafelySetRange(start, end, value);\n  }\n\n  unsafelySetRange(start, end, value = true, fillEndByte = false) {\n    if (end - start >= this.capacity) {\n      this.values.fill(value ? 255 : 0);\n      return;\n    }\n\n    const startByteIndex = this.getByteIndex(start);\n    const endByteIndex = this.getByteIndex(end);\n    const startBitIndex = this.getBitIndex(start);\n    const endBitIndex = this.getBitIndex(end);\n\n    if (startByteIndex > endByteIndex) {\n      this.unsafelySetIndexRange(startByteIndex, startBitIndex, this.capacity, 0, value);\n      this.unsafelySetIndexRange(0, 0, endByteIndex, endBitIndex, value);\n      return;\n    }\n\n    this.unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value);\n  }\n\n  unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value) {\n    let startMask = createMask(8 - startBitIndex);\n    let endMask = 255 ^ createMask(8 - endBitIndex);\n\n    if (startByteIndex === endByteIndex) {\n      const mask = startMask & endMask;\n      this.values[startByteIndex] = applyMask(this.values[startByteIndex], mask, value);\n      return;\n    }\n\n    this.values[startByteIndex] = applyMask(this.values[startByteIndex], startMask, value);\n    this.values[endByteIndex] = applyMask(this.values[endByteIndex], endMask, value);\n\n    if (endByteIndex - startByteIndex > 1) {\n      this.values.fill(value ? 255 : 0, startByteIndex + 1, endByteIndex);\n    }\n  }\n\n  unsetRange(start, end) {\n    this.setRange(start, end, false);\n  }\n\n  set(index, value = true) {\n    if (index < this.offset) {\n      return;\n    }\n\n    this.adjustOffset(index);\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    this.values[byteIndex] = applyMask(this.values[byteIndex], mask, value);\n  }\n\n  unset(index) {\n    this.set(index, false);\n  }\n\n  get(index) {\n    if (index <= this.offset || index > this.offset + this.capacity) {\n      return false;\n    }\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    return (this.values[byteIndex] & mask) !== 0;\n  }\n\n  toValueArray() {\n    const values = [];\n    for (let i = 1; i <= this.capacity; i ++) {\n      if (this.get(this.offset + i)) {\n        values.push(this.offset + i);\n      }\n    }\n    return values;\n  }\n\n  min() {\n    for (let i = this.offset; i <= this.offset + this.capacity; i += 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const firstBit = Math.floor(i / 8) * 8;\n        for (let j = firstBit; j < firstBit + 8; j ++) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return Infinity;\n  }\n\n  max() {\n    for (let i = this.capacity + this.offset; i >= this.offset; i -= 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const lastBit = Math.ceil(i / 8) * 8 + 1;\n        for (let j = lastBit; j > lastBit - 8; j --) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return -Infinity;\n  }\n}\n","export class Flow {\n  constructor() {\n    this.lastVirtualFinish = 0;\n    this.nextVirtualFinish = Infinity;\n    this.queue = [];\n  }\n\n  computeWeight() {\n    return 1;\n  }\n}\n\nexport class Queue {\n  constructor(rate) {\n    this.rate = rate;\n    this.totalQueueSize = 0;\n    this.flows = [];\n  }\n\n  addFlow(flow) {\n    return this.flows.push(flow);\n  }\n\n  removeFlow(flow) {\n    const index = this.flows.indexOf(flow);\n    if (index !== -1) {\n      this.flows.splice(index, 1);\n    }\n  }\n\n  enqueue(flow, size, value) {\n    const weight = flow.computeWeight(this);\n    const rate = this.rate / weight;\n    const virtualFinish = Math.max(Date.now(), flow.lastVirtualFinish) + size / rate;\n\n    flow.queue.push({\n      virtualFinish,\n      size,\n      value,\n    });\n    flow.lastVirtualFinish = virtualFinish;\n    if (flow.queue.length === 1) {\n      flow.nextVirtualFinish = virtualFinish;\n    }\n  }\n\n  getNextScheduledFlow() {\n    let minVirtualFinish = Infinity;\n    let flow = null;\n    for (let i = 0; i < this.flows.length; i ++) {\n      if (this.flows[i].nextVirtualFinish < minVirtualFinish) {\n        flow = this.flows[i];\n        minVirtualFinish = flow.nextVirtualFinish;\n      }\n    }\n\n    return flow;\n  }\n\n  peek() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    return {\n      flow,\n      task: flow.queue[0],\n    };\n  }\n\n  dequeue() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    const task = flow.queue.shift();\n\n    flow.nextVirtualFinish = flow.queue.length !== 0\n      ? flow.queue[0].virtualFinish\n      : Infinity;\n\n    return {flow, task};\n  }\n}\n\nexport default {\n  Queue,\n  Flow,\n};\n","import BitArray from '../bitarray';\nimport Address from './address';\nimport wfq from '../wfq';\nimport EMA from '../ema';\nimport LEDBAT from '../ledbat';\nimport RingBuffer from '../RingBuffer';\n\nexport class AvailabilityMap {\n  constructor(capacity) {\n    this.values = new BitArray(capacity);\n  }\n\n  // TODO: ignore very large discard windows from remote peers...\n  setCapacity(capacity) {\n    this.values.resize(capacity);\n  }\n\n  set(address, value) {\n    this.values.setRange(address.start / 2, address.end / 2 + 1, value);\n  }\n\n  get({start, end = start}) {\n    for (let i = start; i <= end; i += 2) {\n      if (!this.values.get(i / 2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  min() {\n    return this.values.min() * 2;\n  }\n\n  max() {\n    return this.values.max() * 2;\n  }\n}\n\nexport class BinRingBuffer extends RingBuffer {\n  advanceLastBin(bin) {\n    super.advanceLastIndex(bin / 2);\n  }\n\n  setRange({start}, values) {\n    for (let i = 0; i < values.length; i ++) {\n      super.set(start / 2 + i, values[i]);\n    }\n  }\n\n  set({bin}, value) {\n    super.set(bin / 2, value);\n  }\n\n  get({bin}) {\n    return super.get(bin / 2);\n  }\n\n  forEach(callback) {\n    for (let i = this.lastIndex - this.capacity; i < this.lastIndex; i ++) {\n      if (callback(this.get(i), i * 2) === false) {\n        break;\n      }\n    }\n  }\n}\n\nexport class RateMeter {\n  constructor(windowMs, sampleWindowMs = 100) {\n    this.firstSampleWindow = Math.floor(Date.now() / sampleWindowMs);\n    this.lastSampleWindow = this.firstSampleWindow;\n    this.windowMs = windowMs;\n    this.sampleWindowMs = sampleWindowMs;\n    this.sum = 0;\n    this.values = new Array(Math.ceil(windowMs / sampleWindowMs));\n\n    this.values.fill(0);\n  }\n\n  adjustSampleWindow() {\n    const sampleWindow = Math.floor(Date.now() / this.sampleWindowMs);\n\n    for (let i = this.lastSampleWindow + 1; i <= sampleWindow; i ++) {\n      const index = i % this.values.length;\n      this.sum -= this.values[index];\n      this.values[index] = 0;\n    }\n    this.lastSampleWindow = sampleWindow;\n  }\n\n  update(value) {\n    this.adjustSampleWindow();\n    this.sum += value;\n    this.values[this.lastSampleWindow % this.values.length] += value;\n  }\n\n  value() {\n    this.adjustSampleWindow();\n    const accumulatedMs = Math.min(\n      (this.lastSampleWindow - this.firstSampleWindow) * this.sampleWindowMs,\n      this.windowMs,\n    );\n    return this.sum / accumulatedMs;\n  }\n}\n\nexport class ChunkRateMeter extends RateMeter {\n  constructor(windowMs = 15000) {\n    super(windowMs);\n    this.lastEndBin = 0;\n  }\n\n  update({start, end}) {\n    if (this.lastHeadBin === 0) {\n      super.update((end - start) / 2);\n    } else if (end > this.lastEndBin) {\n      super.update((end - this.lastEndBin) / 2);\n      this.lastEndBin = end;\n    }\n  }\n}\n\nexport class RequestFlow extends wfq.Flow {\n  constructor(id) {\n    super();\n    this.id = id;\n    this.queueSize = 0;\n  }\n\n  computeWeight(queue) {\n    return this.queueSize / queue.totalQueueSize;\n  }\n}\n\nexport class RequestQueue extends wfq.Queue {\n  constructor(rate) {\n    super(rate);\n    this.totalQueueSize = 0;\n  }\n\n  enqueue(flow, size, value) {\n    this.totalQueueSize += size;\n    flow.queueSize += size;\n    super.enqueue(flow, size, value);\n  }\n\n  cancel(flow, filter) {\n    flow.queue = flow.queue.filter(task => {\n      const remove = filter(task.value);\n\n      if (remove) {\n        this.totalQueueSize -= task.size;\n        flow.queueSize -= task.size;\n      }\n\n      return !remove;\n    });\n  }\n\n  dequeue() {\n    const result = super.dequeue();\n    if (result === null) {\n      return null;\n    }\n\n    this.totalQueueSize -= result.task.size;\n    result.flow.queueSize -= result.task.size;\n\n    return result;\n  }\n}\n\nexport class SchedulerChunkState {\n  constructor(bin) {\n    this.bin = bin;\n    this.reset();\n  }\n\n  reset() {\n    this.availableCopies = 0;\n    this.requestTime = [0, 0];\n    this.requestPeerId = 0;\n\n    this.requested = false;\n    this.received = false;\n    this.verified = false;\n  }\n}\n\nexport class SchedulerChunkRequestMap {\n  constructor() {\n    this.valueByBin = {};\n    this.head = undefined;\n    this.tail = undefined;\n    this.length = 0;\n  }\n\n  insert(address) {\n    const now = Date.now();\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      const value = {\n        address: new Address(i),\n        createdAt: now,\n        next: undefined,\n        prev: undefined,\n      };\n      this.valueByBin[i] = value;\n\n      if (this.head === undefined) {\n        this.head = value;\n      } else {\n        this.tail.next = value;\n      }\n      value.prev = this.tail;\n      this.tail = value;\n\n      this.length ++;\n    }\n  }\n\n  get({bin}) {\n    return this.valueByBin[bin];\n  }\n\n  remove({bin}) {\n    const value = this.valueByBin[bin];\n    if (value === undefined) {\n      return;\n    }\n    delete this.valueByBin[bin];\n\n    if (this.head === value) {\n      this.head = value.next;\n    }\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.prev !== undefined) {\n      value.prev.next = value.next;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = value.prev;\n    }\n\n    this.length --;\n  }\n\n  peek() {\n    return this.head;\n  }\n\n  pop() {\n    if (this.head === undefined) {\n      return;\n    }\n    const value = this.head;\n\n    this.head = value.next;\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = undefined;\n    }\n\n    delete this.valueByBin[value.address.bin];\n\n    this.length --;\n\n    return value;\n  }\n}\n\nexport class SchedulerChunkMap extends BinRingBuffer {\n  createEmptyValue(bin, value) {\n    if (value === undefined) {\n      return new SchedulerChunkState(bin);\n    }\n\n    // put the peer map here and when we advance the bin meme update\n    // the availability map here\n\n    value.reset();\n    return value;\n  }\n}\n\nexport class SchedulerPeerState {\n  constructor(peer, requestFlow) {\n    this.peer = peer;\n    this.requestFlow = requestFlow;\n    this.availableChunks = new AvailabilityMap();\n\n    this.ledbat = new LEDBAT();\n\n    // this.rttMean = new EMA(0.125);\n    // this.rttVar = new EMA(0.25);\n\n    this.rttMean = new EMA(0.05);\n    this.rttVar = new EMA(0.05);\n\n    this.chunkIntervalMean = new EMA(0.25);\n    this.chunkRate = new RateMeter(15000);\n    this.wasteRate = new RateMeter(15000);\n    this.lastChunkTime = null;\n\n    this.requestTimes = new BinRingBuffer();\n\n    this.requestedChunks = new SchedulerChunkRequestMap();\n    this.sentRequests = new SchedulerChunkRequestMap();\n\n    this.timeouts = 0;\n    this.validChunks = 0;\n    this.invalidChunks = 0;\n\n    this.requestQueue = [];\n\n    this.sentChunks = new AvailabilityMap();\n    this.receivedChunks = new AvailabilityMap();\n  }\n}\n\nexport class Scheduler {\n  constructor(chunkSize, clientOptions) {\n    const {\n      liveDiscardWindow,\n      uploadRateLimit,\n    } = clientOptions;\n\n    this.chunkSize = chunkSize;\n    this.liveDiscardWindow = liveDiscardWindow;\n\n    // where are we in the buffer\n\n    // how rare is a chunk\n    // how urgently is a chunk needed\n\n    // high/mid/low priority time bands\n\n    // high performance/reliability peers\n    // expected performance per peer\n\n    // request timeout/cancel\n    // send timeout/cancel?\n\n    // average stream bit rate\n    // position in available window\n    // position in theoretical window\n\n    // minimum needed bin\n\n    this.peerStates = {};\n    this.chunkStates = new SchedulerChunkMap(liveDiscardWindow);\n    this.definitelyLoadedChunks = [];\n    this.loadedChunks = new AvailabilityMap(liveDiscardWindow);\n    this.peerCount = 0;\n\n    this.chunkRate = new ChunkRateMeter();\n\n    this.requestQueue = new RequestQueue(uploadRateLimit / 1000);\n\n    // this.update = this.update.bind(this);\n    // setTimeout(this.update, 0);\n\n    this.timers = {};\n\n    this.lastExportedBin = -Infinity;\n    this.lastCompletedBin = -Infinity;\n    this.requestedChunks = new AvailabilityMap(liveDiscardWindow);\n\n    this.totalSends = 0;\n    this.totalRequests = 0;\n    this.totalRequestsReceived = 0;\n    this.totalReceived = 0;\n    this.totalAdded = 0;\n    this.totalCancelled = 0;\n    this.ackUnknownSend = 0;\n    this.totalDroppedRequests = 0;\n    this.sendDelay = new EMA(0.05);\n    // setInterval(this.debug.bind(this), 1000);\n\n    this.nextSendTime = 0;\n    this.nextSendTimeout = 0;\n  }\n\n  debug() {\n    console.log('---');\n    Object.values(this.peerStates).forEach((peerState) => {\n      if (!peerState.peer.isReady()) {\n        return;\n      }\n\n      let cto = peerState.ledbat.cto / (peerState.ledbat.cwnd / this.chunkSize);\n      const timeout = Math.ceil(Math.min(cto, 1000));\n\n      const availableChunks = peerState.availableChunks;\n\n      const firstLoadedChunk = this.loadedChunks.min();\n      const firstRequestedChunk = this.requestedChunks.min();\n      const startBin = Math.max(\n        availableChunks.min(),\n        isFinite(firstLoadedChunk) ? firstLoadedChunk : -Infinity,\n        isFinite(firstRequestedChunk) ? firstLoadedChunk : -Infinity,\n        this.lastCompletedBin,\n      );\n      const lastAvailableBin = Math.min(availableChunks.max(), startBin + this.liveDiscardWindow * 2);\n\n      const planFor = Math.min(1000, peerState.ledbat.rttMean.value() * 4);\n\n      const dip = peerState.chunkIntervalMean.value() || 0;\n      const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n      const cwnd = firstPlanPick - peerState.sentRequests.length;\n\n      console.log(JSON.stringify({\n        peer_remoteId: peerState.peer.remoteId,\n        peer_localId: peerState.peer.localId,\n        sentRequests: peerState.sentRequests.length,\n        swift_rtt: peerState.rttMean.value(),\n        swift_rttvar: peerState.rttVar.value(),\n        swift_chunkIntervalMean: peerState.chunkIntervalMean.value(),\n        chunkRate: peerState.chunkRate.value(),\n        wasteRate: peerState.wasteRate.value(),\n        swift_cwnd: cwnd,\n        ledbat_cwnd: peerState.ledbat.cwnd,\n        ledbat_cto: peerState.ledbat.cto,\n        ledbat_currentDelay: peerState.ledbat.currentDelay.getMin(),\n        ledbat_baseDelay: peerState.ledbat.baseDelay.getMin(),\n        ledbat_rttMean: peerState.ledbat.rttMean.value(),\n        ledbat_rttVar: peerState.ledbat.rttVar.value(),\n        ledbat_rtt: peerState.ledbat.rtt,\n        ledbat_flightSize: peerState.ledbat.flightSize,\n        // requestedChunks: peerState.requestedChunks,\n        timeouts: peerState.timeouts,\n        validChunks: peerState.validChunks,\n        invalidChunks: peerState.invalidChunks,\n        timeout: timeout,\n        picker_startBin: startBin,\n        picker_lastAvailableBin: lastAvailableBin,\n      }, true, 2));\n    });\n\n    console.log(JSON.stringify({\n      totalSends: this.totalSends,\n      totalRequests: this.totalRequests,\n      totalRequestsReceived: this.totalRequestsReceived,\n      totalDroppedRequests: this.totalDroppedRequests,\n      totalReceived: this.totalReceived,\n      totalAdded: this.totalAdded,\n      totalCancelled: this.totalCancelled,\n      ackUnknownSend: this.ackUnknownSend,\n      minIncompleteBin: this.lastCompletedBin,\n      sendDelay: this.sendDelay.value(),\n      picker_firstLoadedChunk: this.loadedChunks.min(),\n      picker_firstRequestedChunk: this.requestedChunks.min(),\n      chunkRate: this.chunkRate.value(),\n    }, true, 2));\n    // this.totalSends = 0;\n    // this.totalRequests = 0;\n    // this.totalRequestsReceived = 0;\n    // this.totalReceived = 0;\n    // // this.ackUnknownSend = 0;\n    // this.totalAdded = 0;\n    // this.totalCancelled = 0;\n    // this.totalDroppedRequests = 0;\n  }\n\n  update(peerState, update) {\n    if (!peerState.peer.isReady()) {\n      this.timers[peerState.localId] = setTimeout(update, 1000);\n      return;\n    }\n\n    const {\n      availableChunks,\n      ledbat,\n      sentRequests,\n    } = peerState;\n\n    ledbat.digestDelaySamples();\n\n    const now = Date.now();\n    // const planFor = ledbat.rttMean.value();\n    // const planFor = ledbat.rttMean.value() * 2 + ledbat.rttVar.value() * 4;\n    const planFor = Math.max(1000, ledbat.rttMean.value() * 4);\n    const timeoutThreshold = now - ledbat.cto * 2;\n\n    const dip = peerState.chunkIntervalMean.value() || 0;\n    const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n    const cwnd = firstPlanPick - sentRequests.length;\n\n    const cancelledRequests = [];\n    while (sentRequests.peek() !== undefined\n      && sentRequests.peek().createdAt < timeoutThreshold) {\n      cancelledRequests.push(sentRequests.pop());\n    }\n\n    if (cancelledRequests.length > 0) {\n      this.totalCancelled += cancelledRequests.length;\n      cancelledRequests.forEach(({address}) => sentRequests.remove(address));\n\n      // TODO: this is for ack timeout\n      // ledbat.onDataLoss(cancelledRequests.length * this.chunkSize);\n    }\n\n    const startBin = Math.max(\n      this.loadedChunks.values.offset * 2 + 2,\n      this.requestedChunks.values.offset * 2 + 2,\n      availableChunks.min(),\n      this.lastCompletedBin,\n    );\n    const endBin = Math.min(\n      startBin + this.liveDiscardWindow * 2,\n      availableChunks.max(),\n    );\n    const requestAddresses = [];\n    for (let i = startBin; i < endBin && requestAddresses.length < cwnd; i += 2) {\n      const address = new Address(i);\n      if (!this.loadedChunks.get(address)\n        && !this.requestedChunks.get(address)\n        && availableChunks.get(address)) {\n\n        if (Math.random() < 0.05) {\n          requestAddresses.push(address);\n          sentRequests.insert(address);\n          this.requestedChunks.set(address);\n        }\n      }\n    }\n    if (this.lastCompletedBin === -Infinity && requestAddresses.length !== 0) {\n      const firstRequestedBin = requestAddresses[0].bin;\n      this.lastCompletedBin = firstRequestedBin;\n      this.lastExportedBin = firstRequestedBin - 2;\n    }\n\n    if (cancelledRequests.length !== 0) {\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        peerState.peer.sendCancel(address);\n      });\n    }\n\n    if (requestAddresses.length !== 0) {\n      this.totalRequests += requestAddresses.length;\n      peerState.peer.sendRequest(...requestAddresses);\n\n      requestAddresses.forEach(address => {\n        if (peerState.requestTimes.get(address) === undefined) {\n          peerState.requestTimes.set(address, now);\n        }\n      });\n    }\n\n    while (ledbat.flightSize < ledbat.cwnd && peerState.requestQueue.length) {\n      const requestedAddress = peerState.requestQueue.shift();\n      if (requestedAddress !== undefined) {\n        const requestedChunk = peerState.requestedChunks.get(requestedAddress);\n        if (requestedChunk !== undefined) {\n          requestedChunk.sentAt = now;\n          peerState.ledbat.addSent(this.chunkSize);\n          peerState.peer.sendChunk(requestedAddress);\n          this.totalSends ++;\n        }\n      }\n\n      peerState.sentChunks.set(requestedAddress);\n\n      // TODO: volunteer bin we have and they don't?\n    }\n\n    peerState.peer.flush();\n    let sendInterval = Math.min(1000, (ledbat.rttMean.value() || 0) / (ledbat.cwnd / this.chunkSize));\n    this.timers[peerState.localId] = setTimeout(update, sendInterval);\n  }\n\n  addPeer(peer) {\n    const {localId} = peer;\n\n    const requestFlow = new RequestFlow(localId);\n    this.requestQueue.addFlow(requestFlow);\n\n    const peerState = new SchedulerPeerState(peer, requestFlow);\n    this.peerStates[localId] = peerState;\n\n    const update = () => this.update(peerState, update);\n    this.timers[localId] = setTimeout(update, 1000);\n  }\n\n  removePeer({localId}) {\n    const peerState = this.peerStates[localId];\n    if (peerState === undefined) {\n      return;\n    }\n\n    const {requestFlow} = peerState;\n    this.requestQueue.removeFlow(requestFlow);\n\n    delete this.peerStates[localId];\n\n    clearTimeout(this.timers[localId]);\n  }\n\n  getPeerState({localId}) {\n    return this.peerStates[localId];\n  }\n\n  getRecentChunks() {\n    // TODO: how to pick this... maybe remote discard window size?\n    const startBin = this.loadedChunks.max() - 512;\n\n    // bail if no chunks have been loaded yet\n    if (!isFinite(startBin)) {\n      return [];\n    }\n\n    const bins = [];\n\n    const endBin = this.loadedChunks.max();\n    for (let i = startBin; i <= endBin; i += 2) {\n      const address = new Address(i);\n      if (this.loadedChunks.get(address)) {\n        bins.push(address);\n      }\n    }\n\n    return bins;\n  }\n\n  setLiveDiscardWindow(peer, liveDiscardWindow) {\n    this.getPeerState(peer).availableChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).requestTimes.setCapacity(liveDiscardWindow);\n\n    this.getPeerState(peer).sentChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).receivedChunks.setCapacity(liveDiscardWindow);\n  }\n\n  markChunkReceived(peer, address, delaySample) {\n    const now = Date.now();\n\n    this.totalReceived ++;\n\n    const peerState = this.getPeerState(peer);\n    if (peerState === undefined) {\n      return;\n    }\n\n    if (this.loadedChunks.get(address)) {\n      peerState.wasteRate.update(1);\n    }\n\n    const request = peerState.sentRequests.get(address);\n    if (request === undefined) {\n      return;\n    }\n\n    if (peerState.lastChunkTime !== null) {\n      const chunkInterval = now - peerState.lastChunkTime;\n      peerState.chunkIntervalMean.update(chunkInterval);\n    }\n    peerState.lastChunkTime = now;\n    if (!this.loadedChunks.get(address)) {\n      peerState.chunkRate.update(1);\n    }\n\n    const requestTime = peerState.requestTimes.get(address);\n    if (requestTime !== undefined) {\n      peerState.ledbat.addRttSample(now - requestTime);\n    }\n\n    // peerState.rttMean.update(rtt);\n    // peerState.rttVar.update(Math.abs(rtt - peerState.rttMean.value()));\n\n    // TODO: double check LEDBAT to make sure we shouldn't be doing\n    // something here\n\n    peerState.sentRequests.remove(address);\n  }\n\n  markChunkVerified(peer, address) {\n    // this.chunkStates.get(address).verified = true;\n    this.getPeerState(peer).validChunks ++;\n    this.getPeerState(peer).receivedChunks.set(address);\n\n    // this.chunkStates.advanceLastBin(address.end);\n\n    this.definitelyLoadedChunks.push(address.bin);\n    this.chunkRate.update(address);\n    this.loadedChunks.set(address);\n\n    for (let i = this.lastCompletedBin; this.loadedChunks.get(new Address(i)); i += 2) {\n      this.lastCompletedBin = i;\n    }\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  getNewCompleteBins() {\n    const nextExportedBin = this.lastExportedBin + 2;\n    if (nextExportedBin <= this.lastCompletedBin) {\n      this.lastExportedBin = this.lastCompletedBin;\n      return [nextExportedBin, this.lastCompletedBin];\n    }\n  }\n\n  markChunkRejected(peer, address) {\n    this.requestedChunks.set(address, false);\n    this.getPeerState(peer).invalidChunks ++;\n  }\n\n  markChunkAvailable(peer, address) {\n    for (let i = address.start; i <= address.end; i += 2) {\n      if (!this.getPeerState(peer).availableChunks.get(new Address(i))) {\n        this.totalAdded ++;\n      }\n    }\n\n    this.getPeerState(peer).availableChunks.set(address);\n  }\n\n  markChunksLoaded(address) {\n    this.chunkStates.advanceLastBin(address.end);\n    this.loadedChunks.set(address);\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  markSendAcked(peer, address, delaySample) {\n    const peerState = this.getPeerState(peer);\n\n    peerState.ledbat.addDelaySample(delaySample, this.chunkSize);\n\n    const sentChunk = peerState.requestedChunks.get(address);\n    if (sentChunk === undefined) {\n      this.ackUnknownSend ++;\n      return;\n    }\n\n    // TODO: is this necessary?\n    if (sentChunk.sentAt) {\n      peerState.ledbat.addRttSample(Date.now() - sentChunk.sentAt);\n    }\n\n    peerState.requestedChunks.remove(address);\n  }\n\n  enqueueRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      this.totalRequestsReceived ++;\n      peerState.requestQueue.push(new Address(i));\n    }\n\n    peerState.requestedChunks.insert(address);\n  }\n\n  cancelRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n    const requestedChunk = peerState.requestedChunks.get(address);\n    if (requestedChunk && requestedChunk.sentAt) {\n      peerState.ledbat.onDataLoss(this.chunkSize);\n    }\n    peerState.requestedChunks.remove(address);\n\n    // this.requestQueue.cancel(\n    //   this.getPeerState(peer).requestFlow,\n    //   ({bin}) => address.containsBin(bin),\n    // );\n  }\n}\n","import {EventEmitter} from 'events';\nimport Address from './address';\nimport SwarmId from './swarmid';\nimport LEDBAT from '../ledbat';\nimport {\n  createChunkAddressFieldType,\n  createLiveSignatureFieldType,\n  createIntegrityHashFieldType,\n  createEncoding,\n} from './encoding';\nimport {\n  MaxChannelId,\n  ProtocolOptions,\n  MessageTypes,\n} from './constants';\nimport {\n  createMerkleHashTreeFunction,\n  createLiveSignatureVerifyFunction,\n  createLiveSignatureSignFunction,\n  createContentIntegrityVerifierFactory,\n} from './integrity';\nimport {\n  BinRingBuffer,\n  Scheduler,\n} from './scheduler';\n\nconst genericEncoding = createEncoding();\n\nconst BUFFER_SIZE = 1e7;\nconst MAX_UPLOAD_RATE = 1e6;\n\nexport class Swarm extends EventEmitter {\n  constructor(uri, clientOptions) {\n    super();\n\n    const {swarmId} = uri;\n    const {\n      [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n      [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n      [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n      [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n      [ProtocolOptions.ChunkSize]: chunkSize,\n    } = uri.protocolOptions;\n    const {\n      liveDiscardWindow,\n      privateKey,\n    } = clientOptions;\n\n    this.uri = uri;\n\n    this.encoding = createEncoding(\n      createChunkAddressFieldType(chunkAddressingMethod, chunkSize),\n      createIntegrityHashFieldType(merkleHashTreeFunction),\n      createLiveSignatureFieldType(liveSignatureAlgorithm, swarmId),\n    );\n\n    const liveSignatureSignFunction = privateKey !== undefined\n      ? createLiveSignatureSignFunction(liveSignatureAlgorithm, privateKey)\n      : undefined;\n    this.contentIntegrity = createContentIntegrityVerifierFactory(\n      contentIntegrityProtectionMethod,\n      createMerkleHashTreeFunction(merkleHashTreeFunction),\n      createLiveSignatureVerifyFunction(liveSignatureAlgorithm, swarmId),\n      liveSignatureSignFunction,\n      liveDiscardWindow,\n    );\n\n    this.chunkBuffer = new BinRingBuffer(liveDiscardWindow);\n    this.scheduler = new Scheduler(chunkSize, clientOptions);\n\n    this.protocolOptions = [\n      new this.encoding.VersionProtocolOption(),\n      new this.encoding.MinimumVersionProtocolOption(),\n      new this.encoding.SwarmIdentifierProtocolOption(swarmId.toBuffer()),\n      new this.encoding.ContentIntegrityProtectionMethodProtocolOption(contentIntegrityProtectionMethod),\n      new this.encoding.MerkleHashTreeFunctionProtocolOption(merkleHashTreeFunction),\n      new this.encoding.LiveSignatureAlgorithmProtocolOption(liveSignatureAlgorithm),\n      new this.encoding.ChunkAddressingMethodProtocolOption(chunkAddressingMethod),\n      new this.encoding.ChunkSizeProtocolOption(chunkSize),\n      new this.encoding.LiveDiscardWindowProtocolOption(liveDiscardWindow),\n    ];\n  }\n\n  verifyProtocolOptions(protocolOptions) {\n    Object.entries(this.uri.protocolOptions)\n      .forEach(([protocolOption, value]) => {\n        if (protocolOptions[protocolOption] !== value) {\n          const protocolOptionName = ProtocolOptions.name(protocolOption);\n          throw new Error(`invalid peer options: ${protocolOptionName} mismatch`);\n        }\n      });\n  }\n\n  emitNewData() {\n    const newBins = this.scheduler.getNewCompleteBins();\n    if (newBins !== undefined) {\n      const [minNewBin, maxNewBin] = newBins;\n      const chunks = [];\n      for (let i = minNewBin; i <= maxNewBin; i += 2) {\n        chunks.push(this.chunkBuffer.get(new Address(i)));\n      }\n      this.emit('data', chunks);\n    }\n  }\n}\n\nconst PeerState = {\n  CONNECTING: 1,\n  AWAITING_HANDSHAKE: 2,\n  READY: 3,\n  CHOKED: 4,\n  DISCONNECTING: 5,\n  CLOSED: 6,\n};\n\nclass PeerDataHandlerContext {\n  constructor(swarm) {\n    this.swarm = swarm;\n    this.integrityVerifier = null;\n  }\n\n  getContentIntegrityVerifier(address) {\n    if (this.integrityVerifier === null) {\n      this.integrityVerifier = this.swarm.contentIntegrity.createVerifier(address);\n    }\n    return this.integrityVerifier;\n  }\n}\n\n// TODO: disconnect inactive peers\nclass Peer {\n  constructor(swarm, channel, remoteId = 0, localId = Peer.createChannelId()) {\n    this.swarm = swarm;\n    this.channel = channel;\n    this.remoteId = remoteId;\n    this.localId = localId;\n    this.state = PeerState.CONNECTING;\n\n    this.handlers = {\n      [MessageTypes.HANDSHAKE]: this.handleHandshakeMessage.bind(this),\n      [MessageTypes.DATA]: this.handleDataMessage.bind(this),\n      [MessageTypes.HAVE]: this.handleHaveMessage.bind(this),\n      [MessageTypes.ACK]: this.handleAckMessage.bind(this),\n      [MessageTypes.INTEGRITY]: this.handleIntegrityMessage.bind(this),\n      [MessageTypes.SIGNED_INTEGRITY]: this.handleSignedIntegrityMessage.bind(this),\n      [MessageTypes.REQUEST]: this.handleRequestMessage.bind(this),\n      [MessageTypes.CANCEL]: this.handleCancelMessage.bind(this),\n      [MessageTypes.CHOKE]: this.handleChokeMessage.bind(this),\n      [MessageTypes.UNCHOKE]: this.handleUnchokeMessage.bind(this),\n    };\n\n    this.sendBuffer = [];\n\n    this.swarm.scheduler.addPeer(this);\n  }\n\n  static createChannelId() {\n    return Math.round(Math.random() * MaxChannelId);\n  }\n\n  init() {\n    this.sendHandshake();\n    this.flush();\n\n    this.state = PeerState.AWAITING_HANDSHAKE;\n  }\n\n  close() {\n    this.state = PeerState.CLOSED;\n    this.swarm.scheduler.removePeer(this);\n  }\n\n  handleData(data) {\n    const context = new PeerDataHandlerContext(this.swarm);\n    data.messages.toArray().forEach(message => this.handleMessage(message, context));\n  }\n\n  handleMessage(message, context) {\n    const handler = this.handlers[message.type];\n    if (handler === undefined) {\n      throw new Error('unsupported message type');\n    }\n\n    // console.log(MessageTypes.name(message.type), this.remoteId, message);\n    handler(message, context);\n  }\n\n  handleHandshakeMessage(handshake) {\n    const options = handshake.options.reduce((options, {type, value}) => ({...options, [type]: value}), {});\n\n    const liveDiscardWindow = options[ProtocolOptions.LiveDiscardWindow];\n    if (liveDiscardWindow !== undefined) {\n      this.swarm.scheduler.setLiveDiscardWindow(this, liveDiscardWindow);\n    }\n\n    this.swarm.verifyProtocolOptions(options);\n\n    this.remoteId = handshake.channelId;\n\n    // console.log('received handshake message while in state', this.state);\n    if (this.state !== PeerState.READY) {\n      this.sendHandshake();\n      this.swarm.scheduler.getRecentChunks().forEach(address => this.sendHave(address));\n      this.flush();\n    }\n\n    this.state = PeerState.READY;\n  }\n\n  handleDataMessage(message, context) {\n    const address = Address.from(message.address);\n    const delaySample = LEDBAT.computeOneWayDelay(message.timestamp.value);\n\n    this.swarm.scheduler.markChunkReceived(this, address, delaySample);\n\n    const {encoding} = this.swarm;\n    this.channel.send(new encoding.Datagram(\n      this.remoteId,\n      [new encoding.AckMessage(message.address, new encoding.Timestamp(delaySample))],\n    ));\n\n    context.getContentIntegrityVerifier(address).verifyChunk(address, message.data)\n      .then(() => {\n        this.swarm.chunkBuffer.set(address, message.data);\n        this.swarm.scheduler.markChunkVerified(this, address);\n        this.swarm.emitNewData();\n      })\n      .catch((err) => {\n        console.log('error validating chunk', err);\n        this.swarm.scheduler.markChunkRejected(this, address);\n      });\n  }\n\n  handleHaveMessage(message) {\n    this.swarm.scheduler.markChunkAvailable(this, Address.from(message.address));\n  }\n\n  handleAckMessage(message) {\n    const address = Address.from(message.address);\n    this.swarm.scheduler.markChunkAvailable(this, address);\n    this.swarm.scheduler.markSendAcked(this, address, message.delaySample.value);\n  }\n\n  handleIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHash(address, message.hash.value);\n  }\n\n  handleSignedIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHashSignature(address, message.signature.value);\n  }\n\n  handleRequestMessage(message) {\n    this.swarm.scheduler.enqueueRequest(this, Address.from(message.address));\n  }\n\n  handleCancelMessage(message) {\n    this.swarm.scheduler.cancelRequest(this, Address.from(message.address));\n  }\n\n  handleChokeMessage() {\n    this.state = PeerState.CHOKED;\n  }\n\n  handleUnchokeMessage() {\n    this.state = PeerState.READY;\n  }\n\n  isReady() {\n    return this.state === PeerState.READY;\n  }\n\n  sendHandshake() {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HandshakeMessage(\n      this.localId,\n      [\n        ...this.swarm.protocolOptions,\n        new encoding.SupportedMessagesProtocolOption(Object.keys(this.handlers)),\n      ],\n    ));\n  }\n\n  sendHave(address) {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HaveMessage(encoding.ChunkAddress.from(address)));\n  }\n\n  sendRequest(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.RequestMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendCancel(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.CancelMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendChunk(address, timestamp) {\n    const chunk = this.swarm.chunkBuffer.get(address);\n    if (chunk === undefined) {\n      return;\n    }\n\n    // TODO: omit signatures for bins the peer has already acked\n    const constituentSignatures = this.swarm.contentIntegrity.getConstituentSignatures(address);\n    if (constituentSignatures === undefined) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n\n    constituentSignatures\n      .reverse()\n      .forEach(({bin, signature}, i) => {\n        const address = encoding.ChunkAddress.from(new Address(bin));\n\n        this.sendBuffer.push(new encoding.IntegrityMessage(\n          address,\n          new encoding.IntegrityHash(signature.getHash()),\n        ));\n\n        if (i === 0) {\n          this.sendBuffer.push(new encoding.SignedIntegrityMessage(\n            address,\n            new encoding.Timestamp(timestamp),\n            new encoding.LiveSignature(signature.getSignatureHash()),\n          ));\n        }\n      });\n\n    this.sendBuffer.push(new encoding.DataMessage(encoding.ChunkAddress.from(address), chunk));\n\n    this.flush();\n  }\n\n  flush() {\n    if (this.sendBuffer.length === 0) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n    try {\n      this.channel.send(new encoding.Datagram(this.remoteId, this.sendBuffer));\n    } catch (e) {\n      console.log('error sending');\n      console.log(this.channel);\n      throw e;\n    }\n    this.sendBuffer = [];\n  }\n}\n\nclass SwarmSet extends EventEmitter {\n  constructor() {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.swarms = {};\n  }\n\n  insert(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] === undefined) {\n      this.swarms[key] = swarm;\n      this.emit('insert', swarm);\n    }\n  }\n\n  remove(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] !== undefined) {\n      delete this.swarms[key];\n      this.emit('remove', swarm);\n    }\n  }\n\n  get(swarmId) {\n    return this.swarms[SwarmSet.swarmIdToKey(swarmId)];\n  }\n\n  toArray() {\n    return Object.values(this.swarms);\n  }\n\n  static swarmIdToKey(swarmId) {\n    return swarmId.toBuffer().toString('base64');\n  }\n}\n\nexport class Client {\n  constructor() {\n    this.channels = [];\n\n    this.swarms = new SwarmSet();\n  }\n\n  publishSwarm(swarm) {\n    this.swarms.insert(swarm);\n  }\n\n  unpublishSwarm(swarm) {\n    this.swarms.remove(swarm);\n  }\n\n  joinSwarm(uri) {\n    const chunkSize = uri.protocolOptions[ProtocolOptions.ChunkSize];\n    const clientOptions = {\n      liveDiscardWindow: Math.ceil(BUFFER_SIZE / chunkSize),\n      uploadRateLimit: MAX_UPLOAD_RATE,\n    };\n\n    const swarm = new Swarm(uri, clientOptions);\n    this.swarms.insert(swarm);\n\n    return swarm;\n  }\n\n  createChannel(conn) {\n    const channel = new Channel(conn, this.swarms);\n    this.channels.push(channel);\n\n    channel.once('close', () => {\n      const index = this.channels.indexOf(channel);\n      this.channels.splice(index, 1);\n    });\n  }\n}\n\nexport class Channel extends EventEmitter {\n  constructor(conn, swarms) {\n    super();\n\n    this.conn = conn;\n    this.swarms = swarms;\n    this.peers = {};\n\n    this.handleSwarmInsert = this.getOrCreatePeer.bind(this);\n    this.swarms.on('insert', this.handleSwarmInsert);\n\n    const liveSwarms = swarms.toArray();\n    this.conn.addEventListener('open', () => liveSwarms.forEach(this.handleSwarmInsert));\n    this.conn.addEventListener('message', this.handleMessage.bind(this));\n    this.conn.addEventListener('error', err => console.log('connection error:', err));\n  }\n\n  handleMessage(event) {\n    let data = new genericEncoding.Datagram();\n    try {\n      data.read(event.data);\n    } catch (e) {\n      console.log(event.data);\n      throw e;\n    }\n\n    let peer = this.peers[data.channelId];\n    if (peer === undefined) {\n      if (data.channelId !== 0) {\n        return;\n      }\n\n      let handshake;\n      try {\n        handshake = data.messages.next();\n      } catch (error) {\n        console.log('error decoding mesasge', error);\n        return;\n      }\n      if (handshake === undefined || handshake.type !== MessageTypes.HANDSHAKE) {\n        console.log('rejected new peer without handshake');\n        return;\n      }\n      const swarmId = handshake.options.find(({type}) => type === ProtocolOptions.SwarmIdentifier);\n      if (swarmId === undefined) {\n        // console.log('rejecting new peer with invalid swarm id');\n        return;\n      }\n      const swarm = this.swarms.get(SwarmId.from(swarmId.value));\n      if (swarm === undefined) {\n        // console.log('rejecting new peer requesting unknown swarm');\n        return;\n      }\n\n      peer = this.getOrCreatePeer(swarm);\n    }\n\n    data = new peer.swarm.encoding.Datagram();\n    data.read(event.data);\n    // console.log('RECEIVED', data.messages.toArray());\n    peer.handleData(data);\n  }\n\n  send(data) {\n    if (this.conn.readyState !== 'open') {\n      this.conn.addEventListener('open', () => this.conn.send(data.toBuffer()));\n      return;\n    }\n\n    this.conn.send(data.toBuffer());\n  }\n\n  handleClose() {\n    this.swarms.removeListener('insert', this.handleSwarmInsert);\n    Object.values(this.peers).forEach(peer => peer.close());\n    this.emit('close');\n  }\n\n  getOrCreatePeer(swarm) {\n    let peer = Object.values(this.peers).find(p => p.swarm === swarm);\n    return peer || this.createPeer(swarm);\n  }\n\n  createPeer(swarm) {\n    const {peers, swarms} = this;\n\n    const peer = new Peer(swarm, this);\n    peers[peer.localId] = peer;\n    peer.init();\n\n    function handleRemove(removedSwarm) {\n      if (removedSwarm === swarm) {\n        delete peers[peer.localId];\n        peer.close();\n\n        swarms.removeListener('remove', handleRemove);\n      }\n    }\n\n    swarms.on('remove', handleRemove);\n\n    return peer;\n  }\n}\n","import KBucket from 'k-bucket';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport arrayEqual from 'array-equal';\nimport randomBytes from 'randombytes';\nimport LRU from 'lru-cache';\nimport hexToUint8Array from './hexToUint8Array';\nimport idx from 'idx';\n\nconst SEND_REPLICAS = 2;\nconst MAX_HOPS = 10;\nconst DEFAULT_PEER_REQUEST_COUNT = 10;\nconst NUMBER_OF_NODES_PER_BUCKET = 2;\n\n// TODO: implement get/set\n// TODO: implement connection dump rpc for network debugging\n\nexport class Client extends EventEmitter {\n  constructor(id) {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.id = id;\n\n    // managed/unmanaged?\n    this.channels = new KBucket({\n      numberOfNodesPerKBucket: NUMBER_OF_NODES_PER_BUCKET,\n      localNodeId: this.id,\n    });\n    this.allChannels = new KBucket({\n      numberOfNodesPerKBucket: 100,\n      localNodeId: this.id,\n    });\n\n    this.channels.on('ping', this.handlePing.bind(this));\n    this.channels.on('removed', this.handleRemoved.bind(this));\n    this.channels.on('updated', this.handleUpdated.bind(this));\n    this.channels.on('added', this.handleAdded.bind(this));\n\n    this.knownPeerIds = {};\n    this.channelMap = {};\n\n    this.seenIds = new LRU({max: 1024});\n    this.knownRoutes = new LRU({\n      max: 1024,\n      maxAge: 1000 * 60,\n    });\n    this.callbacks = new LRU({max: 1024});\n\n    this.on('receive.peers.request', this.handlePeersRequest.bind(this));\n    this.on('receive.ping.request', this.handlePingRequest.bind(this));\n    this.on('receive.trace.request', this.handleTraceRequest.bind(this));\n    this.on('receive.callback.response', this.handleCallbackResponse.bind(this));\n\n    this.startPeerRequests();\n  }\n\n  // TODO: this is leaking connections\n  close() {\n    this.stopPeerRequests();\n    this.allChannels.toArray().forEach(({conn}) => conn && conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n\n  startPeerRequests() {\n    let index = 0;\n    let ids = Object.keys(this.knownPeerIds);\n\n    const next = () => {\n      for (let retry = 0; retry <= ids.length; retry ++) {\n        if (index >= ids.length) {\n          index = 0;\n          ids = Object.keys(this.knownPeerIds);\n        }\n\n        const id = ids[index];\n        index ++;\n\n        if (id) {\n          return id;\n        }\n      }\n    };\n\n    this.peerRequestIvl = setInterval(() => {\n      const id = next();\n      if (id) {\n        this.sendPeerRequest(hexToUint8Array(id));\n      }\n    }, 5000);\n  }\n\n  stopPeerRequests() {\n    clearInterval(this.peerRequestIvl);\n  }\n\n  handlePing(channels, newChannel) {\n    // console.log('ping', channels, newChannel);\n    const PING_TIMEOUT = 10000;\n\n    channels.forEach(channel => {\n      const {id} = channel;\n\n      if (channel.isOpen()) {\n        this.addChannel(channel);\n        return;\n      }\n\n      setTimeout(() => {\n        const channel = this.getChannel(id);\n        if (channel && channel.isOpen()) {\n          this.addChannel(channel);\n          return;\n        }\n\n        this.removeChannel(id);\n        this.addChannel(newChannel);\n      }, PING_TIMEOUT);\n    });\n  }\n\n  addChannel(channel) {\n    this.channels.add(channel);\n    this.allChannels.add(channel);\n  }\n\n  removeChannel(id) {\n    this.channels.remove(id);\n    this.allChannels.remove(id);\n    // delete this.channelMap[arrayBufferToHex(id)];\n  }\n\n  getChannel(id) {\n    return this.channelMap[arrayBufferToHex(id)];\n  }\n\n  handleRemoved(channel) {\n    // console.log('remove', arrayBufferToHex(channel.id));\n    // console.trace();\n    if (channel.conn) {\n      channel.conn.close();\n    }\n    // console.log('handleRemoved', arrayBufferToHex(channel.id));\n  }\n\n  handleUpdated(oldChannel, newChannel) {\n    // console.log('update', {oldChannel, newChannel});\n    // console.log('handleUpdated', arrayBufferToHex(channel.id));\n  }\n\n  handleAdded(channel) {\n    if (channel.conn === undefined) {\n      // console.log('peers.discover', arrayBufferToHex(this.id), arrayBufferToHex(channel.id), this.channels.count());\n      this.emit('peers.discover', channel.id);\n    }\n    // console.log('add');\n    // emit event?\n    // console.log('handleAdded', arrayBufferToHex(channel.id));\n  }\n\n  createChannel(id, conn) {\n    const idHex = arrayBufferToHex(id);\n    const channel = new Channel(id, conn);\n\n    const oldChannel = this.channelMap[idHex];\n    if (oldChannel && oldChannel.conn) {\n      // console.warn('replacing open channel...');\n      oldChannel.conn.close();\n    }\n    this.channelMap[idHex] = channel;\n\n    const messages = [];\n    const bufferMessages = event => messages.push(event);\n    const handleMessage = this.handleMessage.bind(this, channel);\n\n    const handleOpen = () => {\n      // console.log('saw open', idHex);\n      this.addChannel(channel);\n\n      conn.removeEventListener('message', bufferMessages);\n      conn.addEventListener('message', handleMessage);\n      messages.forEach(handleMessage);\n\n      this.sendPeerRequest(id);\n    };\n\n    const handleClose = () => {\n      // console.log('saw close', idHex);\n      conn.removeEventListener('message', bufferMessages);\n      conn.removeEventListener('message', handleMessage);\n      conn.removeEventListener('open', handleOpen);\n\n      if (this.channelMap[idHex] === channel) {\n        this.removeChannel(id);\n        delete this.channelMap[idHex];\n      }\n    };\n\n    conn.addEventListener('message', bufferMessages);\n    conn.addEventListener('open', handleOpen, {once: true});\n    conn.addEventListener('close', handleClose, {once: true});\n  }\n\n  handleMessage(channel, event) {\n    // console.log('handleMessage', event.data);\n\n    const req = JSON.parse(event.data);\n    const {type, id} = req;\n\n    if (req.trace) {\n      req.trace.push(arrayBufferToHex(this.id));\n      // console.log('TRACE', req);\n    }\n\n    if (this.seenIds.get(id)) {\n      // console.log('discarding seen message', id);\n      // if (req.trace) {\n      //   console.log('DROPPED', req);\n      // }\n      return;\n    }\n    this.seenIds.set(id, true);\n\n    if (!this.getChannel(channel.id)) {\n      console.warn('receiving channel is not known to dht', arrayBufferToHex(channel.id));\n    }\n\n    this.knownRoutes.set(req.from, channel.id);\n    // this.knownRoutes.set(req.from, arrayBufferToHex(channel.id));\n\n    const to = hexToUint8Array(req.to);\n    if (!arrayEqual(to, this.id)) {\n      this.forwardMessage(to, req);\n      return;\n    }\n\n    // if (req.trace) {\n    //   console.log('DELIVERED', req);\n    // }\n\n    const resCallback = (res={}, callback=null) => {\n      const from = hexToUint8Array(req.from);\n      const data = {re: id, ...res};\n      this.send(from, 'callback.response', data, callback);\n    };\n\n    // console.log(`emit receive.${type}`, req);\n    this.emit(`receive.${type}`, {data: req, callback: resCallback});\n  }\n\n  forwardMessage(to, data) {\n    // console.log('forwarding message', arrayBufferToHex(to), data);\n\n    if (data.hops >= MAX_HOPS) {\n      // console.log('discarding message with too many hops', data.id);\n      return;\n    }\n    data.hops ++;\n\n    this.sendRaw(to, JSON.stringify(data), data.trace);\n  }\n\n  sendPing(to, callback=()=>{}) {\n    this.send(to, 'ping.request', {}, callback);\n  }\n\n  handlePingRequest({data, callback}) {\n    // console.log('PING', data);\n    callback({});\n  }\n\n  handleTraceRequest({data, callback}) {\n    callback(data);\n  }\n\n  handleCallbackResponse({data, callback}) {\n    const reqCallback = this.callbacks.get(data.re);\n    if (reqCallback) {\n      reqCallback(data, callback);\n    } else {\n      // console.warn('<<< callback for %s expired', data.re);\n    }\n  }\n\n  sendPeerRequest(to, count=DEFAULT_PEER_REQUEST_COUNT) {\n    const timeout = setTimeout(() => {\n      delete this.knownPeerIds[arrayBufferToHex(to)];\n    }, 5000);\n    this.send(to, 'peers.request', {count}, res => {\n      clearTimeout(timeout);\n      this.handlePeersResponse(res);\n    });\n  }\n\n  handlePeersRequest({data: {count=DEFAULT_PEER_REQUEST_COUNT, from}, callback}) {\n    // console.log('handlePeersRequest');\n\n    const fromId = hexToUint8Array(from);\n\n    const ids = this.allChannels.closest(fromId)\n      .filter(({conn}) => conn != null)\n      .filter(({id}) => !arrayEqual(id, this.id) && !arrayEqual(id, fromId))\n      .map(({id}) => arrayBufferToHex(id))\n      .slice(0, count);\n    callback({ids});\n  }\n\n  handlePeersResponse(res) {\n    // console.log('handlePeersResponse', res.ids);\n\n    res.ids\n      .map(id => hexToUint8Array(id))\n      .filter(id => !arrayEqual(id, this.id))\n      .filter(id => {\n        const channel = this.getChannel(id);\n        return channel == null || channel.conn == null;\n      })\n      .forEach(id => {\n        // TODO: store peer provenance so we can ignore bad actors?\n        this.knownPeerIds[arrayBufferToHex(id)] = true;\n        this.addChannel(new Channel(id));\n      });\n  }\n\n  send(to, type, data={}, callback=null) {\n    if (typeof data === 'function') {\n      callback = data;\n      data = {};\n    }\n\n    const id = arrayBufferToHex(randomBytes(16));\n    this.seenIds.set(id, true);\n\n    if (callback != null) {\n      this.callbacks.set(id, callback);\n    }\n\n    const message = JSON.stringify({\n      id,\n      type,\n      from: arrayBufferToHex(this.id),\n      to: arrayBufferToHex(to),\n      trace: [arrayBufferToHex(this.id)],\n      hops: 0,\n      ...data,\n    });\n\n    // console.log('formatMessage', message);\n\n    this.sendRaw(to, message);\n  }\n\n  sendRaw(to, message, trace=[]) {\n    let closest = this.allChannels.closest(to)\n      .filter(channel => channel.isOpen())\n      .filter(({idHex}) => trace.indexOf(idHex) === -1)\n      .slice(0, SEND_REPLICAS);\n\n    const knownRoute = this.knownRoutes.get(arrayBufferToHex(to));\n    if (knownRoute) {\n      const channel = this.getChannel(knownRoute);\n      // const channel = this.allChannels.get(knownRoute);\n      if (channel != null && channel.isOpen()) {\n        closest.push(channel);\n      }\n    }\n\n    if (closest.length === 0) {\n      // console.warn(`closest value to ${arrayBufferToHex(to)} does not exist, dropping`, message);\n      return;\n    }\n\n    if (arrayEqual(closest[0].id, to)) {\n      closest = closest.slice(0, 1);\n    }\n    // console.log('send', closest.map(({id}) => arrayBufferToHex(id)), message);\n    // console.log(closest.length, closest.filter(({conn}) => !!conn).length, message);\n    closest.forEach(({id, conn}) => {\n      try {\n        conn.send(message);\n      } catch (e) {\n        console.log('probably a race', e);\n        // this.removeChannel(id);\n      }\n    });\n  }\n}\n\nexport class Channel {\n  constructor(id, conn) {\n    this.id = id;\n    this.idHex = arrayBufferToHex(id);\n    this.vectorClock = Date.now();\n    this.lastPing = Date.now();\n    this.conn = conn;\n\n    // console.log('channel', this);\n  }\n\n  isOpen() {\n    const readyState = idx(this, _ => _.conn.readyState);\n    return readyState === 1 || readyState === 'open';\n  }\n}\n\nexport class SubChannel {\n  constructor(client, peerId, id=arrayBufferToHex(randomBytes(16))) {\n    // console.log('subchannel created', id);\n    this.client = client;\n    this.peerId = peerId;\n    this.id = id;\n    this.readyState = SubChannel.ReadyStates.OPEN;\n    this.onmessage = () => {};\n\n    this.handleMessage = this.handleMessage.bind(this);\n    this.client.on('receive.subchannel.message', this.handleMessage);\n  }\n\n  handleMessage({data: {channelId, data}}) {\n    // console.log('receive.subchannel.message', channelId, this.id, data);\n\n    if (channelId === this.id) {\n      this.onmessage({data});\n    }\n  }\n\n  send(data) {\n    this.client.send(\n      this.peerId,\n      'subchannel.message',\n      {\n        channelId: this.id,\n        data: data,\n      },\n    );\n  }\n\n  close() {\n    this.readyState = SubChannel.ReadyStates.CLOSED;\n    this.client.removeListener('receive.subchannel.message', this.handleMessage);\n  }\n}\n\nSubChannel.ReadyStates = {\n  OPEN: 1,\n  CLOSED: 3,\n};\n","import {EventEmitter} from 'events';\nimport Injector from './ppspp/injector';\n\nconst DELIMITER = Buffer.from('4c93bf00ae13c37e5df3b7a9cea0413521fe1b08a627d065d7180b9d0738c666', 'hex');\nconst DELIMITER_LENGTH = DELIMITER.length;\nconst HEADER_INSTANCE_LENGTH = 37;\n\nexport class ChunkedWriteStream extends EventEmitter {\n  constructor(injector) {\n    super();\n    this.injector = injector;\n  }\n\n  write(buffer) {\n    const length = Buffer.alloc(4);\n    length.writeUInt32BE(buffer.length);\n    this.injector.appendData(Buffer.concat(\n      [\n        DELIMITER,\n        Buffer.from([0]),\n        length,\n        DELIMITER,\n        Buffer.from([1]),\n        length,\n      ],\n      HEADER_INSTANCE_LENGTH * 2,\n    ));\n\n    this.injector.appendData(buffer);\n  }\n}\n\nexport class ChunkedWriteStreamInjector extends EventEmitter {\n  start() {\n    const data = Buffer.alloc(3500000 / 8);\n    data.fill(255);\n\n    Injector.create().then(injector => {\n      this.injector = injector;\n\n      const writer = new ChunkedWriteStream(injector);\n      this.intervalId = setInterval(() => writer.write(data), 1000);\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n\nclass AbstractChunkedReadStream extends EventEmitter {\n  constructor(swarm) {\n    super();\n\n    this.swarm = swarm;\n\n    this.handleWarmupSwarmData = this.handleWarmupSwarmData.bind(this);\n    this.handleSwarmData = this.handleSwarmData.bind(this);\n\n    this.chunkBufferLength = 0;\n    this.nextDataOffset = 0;\n    this.nextDataLength = 0;\n\n    this.swarm.on('data', this.handleWarmupSwarmData);\n  }\n\n  handleWarmupSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const delimiterIndex = data[i].indexOf(DELIMITER);\n      if (delimiterIndex === -1 || delimiterIndex + HEADER_INSTANCE_LENGTH > data[i].length) {\n        continue;\n      }\n\n      this.swarm.removeListener('data', this.handleWarmupSwarmData);\n      this.swarm.on('data', this.handleSwarmData);\n\n      this.readHeader(data[i], delimiterIndex);\n      this.handleSwarmData(data.slice(i));\n\n      break;\n    }\n  }\n\n  readHeader(data, offset) {\n    const instance = data.readUInt8(offset + DELIMITER_LENGTH);\n    this.nextDataOffset = offset + HEADER_INSTANCE_LENGTH * (2 - instance);\n    this.nextDataLength = data.readUInt32BE(offset + DELIMITER_LENGTH + 1);\n  }\n\n  handleSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const lastChunkOffset = this.chunkBufferLength;\n\n      this.chunkBufferLength += data[i].length;\n\n      const nextDataEnd = this.nextDataOffset + this.nextDataLength;\n      if (this.chunkBufferLength < nextDataEnd) {\n        this.handleData(data[i], lastChunkOffset);\n        continue;\n      }\n\n      const lastChunkEnd = nextDataEnd - lastChunkOffset;\n      this.handleEndData(data[i], lastChunkEnd);\n\n      // find the next header or defer to handleWarmupSwarmData if it hasn't arrived\n      if (this.chunkBufferLength - nextDataEnd <= HEADER_INSTANCE_LENGTH) {\n        this.swarm.removeListener('data', this.handleSwarmData);\n        this.swarm.on('data', this.handleWarmupSwarmData);\n\n        this.chunkBufferLength = 0;\n        this.handleWarmupSwarmData(data.slice(i));\n        return;\n      }\n\n      this.chunkBufferLength = 0;\n      this.readHeader(data[i], lastChunkEnd);\n      i--;\n    }\n  }\n}\n\nexport class ChunkedFragmentedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.firstEmitted = false;\n  }\n\n  handleData(data, lastChunkOffset) {\n    if (!this.firstEmitted) {\n      if (this.chunkBufferLength > this.nextDataOffset) {\n        this.emit('start', data.slice(this.nextDataOffset - lastChunkOffset));\n        this.firstEmitted = true;\n      }\n\n      return;\n    }\n\n    this.emit('data', data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.emit('end', data.slice(0, lastChunkEnd));\n    this.firstEmitted = false;\n  }\n}\n\nexport class ChunkedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.chunkBuffer = [];\n  }\n\n  handleData(data) {\n    this.chunkBuffer.push(data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.chunkBuffer.push(data);\n\n    // trim export data range and emit\n    const chunkSlice = this.chunkBuffer.slice();\n\n    chunkSlice[chunkSlice.length - 1] = chunkSlice[chunkSlice.length - 1].slice(0, lastChunkEnd);\n\n    let firstChunkStart = this.nextDataOffset;\n    if (firstChunkStart > chunkSlice[0].length) {\n      firstChunkStart -= chunkSlice[0].length;\n      chunkSlice.shift();\n    }\n    chunkSlice[0] = chunkSlice[0].slice(firstChunkStart);\n\n    this.emit(\n      'data',\n      {\n        chunks: chunkSlice,\n        length: this.nextDataLength,\n      },\n    );\n\n    this.chunkBuffer = [];\n  }\n}\n","import URLSafeBase64 from 'urlsafe-base64';\nimport SwarmId from './swarmid';\nimport {ProtocolOptions} from './constants';\n\nconst protocolOptionToKey = {\n  [ProtocolOptions.ContentIntegrityProtectionMethod]: 'x.im',\n  [ProtocolOptions.MerkleHashTreeFunction]: 'x.hf',\n  [ProtocolOptions.LiveSignatureAlgorithm]: 'x.sa',\n  [ProtocolOptions.ChunkAddressingMethod]: 'x.am',\n  [ProtocolOptions.ChunkSize]: 'x.cs',\n};\n\n// TODO: dn with stream name\n// TODO: as to m3u8 url?\nexport default class URI {\n  constructor(swarmId, protocolOptions) {\n    this.swarmId = swarmId;\n    this.protocolOptions = protocolOptions;\n  }\n\n  toString() {\n    const swarmId = URLSafeBase64.encode(this.swarmId.toBuffer());\n    const protocolOptions = Object.entries(this.protocolOptions)\n      .map(([protocolOption, value]) => `${protocolOptionToKey[protocolOption]}=${value}`)\n      .join('&');\n    return `magnet:?xt=urn:ppspp:${swarmId}&${protocolOptions}`;\n  }\n\n  static parse(uriString) {\n    if (!uriString.startsWith('magnet:')) {\n      throw new Error('invalid uri: expected magnet');\n    }\n\n    const args = uriString.substring(8)\n      .split('&')\n      .map(query => {\n        const [key, value] = query.split('=');\n        return [key, decodeURIComponent(value)];\n      });\n\n    const protocolOptions = Object.entries(protocolOptionToKey)\n      .reduce((protocolOptions, [protocolOption, key]) => {\n        const arg = args.find(([argKey]) => argKey === key);\n        if (arg === undefined) {\n          throw new Error(`invalid uri: missing ${key}`);\n        }\n        return {...protocolOptions, [protocolOption]: parseFloat(arg[1])};\n      }, {});\n\n    const xt = args.find(([key, value]) => key === 'xt' && value.startsWith('urn:ppspp:'));\n    if (xt === undefined) {\n      throw new Error('invalid uri: missing suitable xt');\n    }\n    const swarmId = SwarmId.from(URLSafeBase64.decode(xt[1].substring(10)));\n\n    return new URI(swarmId, protocolOptions);\n  }\n}\n","import crypto from 'crypto';\n\nconst createRandomId = () => {\n  const id = new Uint8Array(16);\n  crypto.randomFillSync(id);\n  return id;\n};\n\nexport default createRandomId;\n"],"sourceRoot":""}