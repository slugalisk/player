{"version":3,"sources":["loopback.js","utils/createRandomId.js","components/DhtGraph.js"],"names":["Server","props","arguments","length","undefined","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","this","queue","dhtClient","dht","createRandomId","ppsppClient","ppspp","ConnManager","server","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__","key","value","_this","id","data","type","bootstrapId","arrayBufferToHex","conn","Conn","open","client","createClient","on","_ref","channel","label","createChannel","push","shift","close","Promise","resolve","remote","mediator","Mediator","Client","_EventEmitter","_this2","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","call","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","readyState","ReadyStates","CONNECTING","onmessage","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","_this3","OPEN","setImmediate","emit","apply","removeListener","CLOSING","CLOSED","removeAllListeners","EventEmitter","_EventEmitter2","_this4","handleMessage","bind","event","JSON","parse","handleConnection","Error","_ref2","_this5","datachannels","entries","forEach","_ref3","_ref4","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","nextId","send","stringify","_EventEmitter3","_this6","conns","handleDataChannel","once","handleOpen","ClientDataChannel","_this7","sendConnection","closed","_Conn","_this8","crypto__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","crypto__WEBPACK_IMPORTED_MODULE_0___default","n","Uint8Array","crypto","randomFillSync","color","scaleOrdinal","schemeCategory10","reduceGraph","graph","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__","nodes","concat","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__","links","filter","node","source","target","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","activity","map","link","App","_useGraph","_useState","useState","_useState2","servers","setServers","_useState3","_useState4","gen","setGen","_useReducer","useReducer","_useReducer2","dispatchGraphAction","useEffect","addNodes","then","clients","newServers","clientsResult","all","Array","fill","firstIndex","serverIndex","Math","min","floor","random","create","_ref5","allChannels","toArray","isOpen","oldChannel","newChannel","_ref6","deleteNodes","i","keys","useGraph","_useGraph2","_useGraph2$","handleNodeClick","_useState5","_useState6","setSource","console","log","sendPing","useNodePinger","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","className","onClick","react_force_graph_3d__WEBPACK_IMPORTED_MODULE_8__","graphData","nodeAutoColorBy","onNodeClick","linkColor","linkWidth","nodeRelSize","nodeVal","count"],"mappings":"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","file":"static/js/6.bf3dd64a.chunk.js","sourcesContent":["import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport createRandomId from './utils/createRandomId';\n\nexport class Server {\n  constructor(props = {}) {\n    this.queue = [];\n    this.dhtClient = props.dhtClient || new dht.Client(createRandomId());\n    this.ppsppClient = props.ppsppClient || new ppspp.Client();\n  }\n}\n\nexport class ConnManager {\n  constructor(server) {\n    this.server = server;\n  }\n\n  bootstrap() {\n    const id = createRandomId();\n\n    const data = {\n      type: 'bootstrap',\n      bootstrapId: arrayBufferToHex(this.server.dhtClient.id),\n      id: arrayBufferToHex(id),\n    };\n    const conn = Conn.open();\n    const client = this.createClient(conn);\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.server.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.server.ppsppClient.createChannel(channel);\n      }\n    });\n\n    this.server.queue.push(client);\n    if (this.server.queue.length > 6) {\n      this.server.queue.shift().close();\n    }\n    // setTimeout(() => client.close(), Math.random() * 30000);\n\n    return Promise.resolve({data, conn: conn.remote});\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    mediator.on('connection', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Conn extends EventEmitter {\n  constructor(remote) {\n    super();\n\n    this.remote = remote || new Conn(this);\n    this.remote.remote = this;\n\n    this.readyState = this.remote.readyState || Conn.ReadyStates.CONNECTING;\n\n    this.onmessage = () => {};\n  }\n\n  send(data) {\n    if (this.readyState === Conn.ReadyStates.OPEN) {\n      setImmediate(() => {\n        this.remote.emit('message', {data});\n        this.remote.onmessage({data});\n      });\n    }\n  }\n\n  addEventListener(...args) {\n    this.on(...args);\n  }\n\n  removeEventListener(...args) {\n    this.removeListener(...args);\n  }\n\n  static open() {\n    const conn = new Conn();\n    conn.open();\n    conn.remote.open();\n    return conn;\n  }\n\n  open() {\n    this.readyState = Conn.ReadyStates.OPEN;\n    this.remote.readyState = Conn.ReadyStates.OPEN;\n    this.emit('open');\n  }\n\n  close() {\n    this.readyState = Conn.ReadyStates.CLOSING;\n    this.remote.readyState = Conn.ReadyStates.CLOSING;\n\n    this.remote.emit('close');\n    this.emit('close');\n\n    this.readyState = Conn.ReadyStates.CLOSED;\n    this.remote.readyState = Conn.ReadyStates.CLOSED;\n\n    this.removeAllListeners();\n    this.remote.removeAllListeners();\n  }\n}\n\nConn.ReadyStates = {\n  CONNECTING: 'connecting',\n  OPEN: 'open',\n  CLOSING: 'closing',\n  CLOSED: 'closed',\n};\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case 'connection':\n        this.handleConnection(data);\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  handleConnection({id}) {\n    const datachannels = Mediator.datachannels[id];\n    delete Mediator.datachannels[id];\n\n    Object.entries(datachannels).forEach(([label, channel]) => this.emit('datachannel', label, channel));\n    this.emit('open');\n  }\n\n  sendConnection(datachannels) {\n    const id = Mediator.nextId ++;\n    Mediator.datachannels[id] = datachannels;\n\n    this.conn.send(JSON.stringify({\n      type: 'connection',\n      id,\n    }));\n\n    this.emit('open');\n  }\n}\n\nMediator.nextId = 0;\nMediator.datachannels = {};\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.datachannels = {};\n    this.conns = [];\n\n    mediator.on('datachannel', this.handleDataChannel.bind(this));\n    mediator.once('open', this.handleOpen.bind(this));\n  }\n\n  handleDataChannel(label, conn) {\n    const channel = new ClientDataChannel(this, label, conn);\n    this.conns.push(channel);\n    this.emit('datachannel', {label, channel});\n  }\n\n  handleOpen() {\n    setImmediate(() => {\n      this.conns.forEach(conn => conn.open());\n      this.emit('open');\n    });\n  }\n\n  createDataChannel(label) {\n    const channel = new ClientDataChannel(this, label);\n    this.datachannels[label] = channel;\n    this.conns.push(channel);\n    return channel;\n  }\n\n  init() {\n    this.mediator.sendConnection(this.datachannels);\n  }\n\n  close() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n\n    this.conns.forEach(conn => conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n}\n\nexport class ClientDataChannel extends Conn {\n  constructor(client, label, remote) {\n    super(remote);\n\n    this.client = client;\n    this.label = label;\n  }\n}\n","import crypto from 'crypto';\n\nconst createRandomId = () => {\n  const id = new Uint8Array(16);\n  crypto.randomFillSync(id);\n  return id;\n};\n\nexport default createRandomId;\n","import React, {useEffect, useReducer, useState} from 'react';\nimport {Server, ConnManager} from '../loopback';\nimport {Client} from '../client';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport {schemeCategory10} from 'd3-scale-chromatic';\nimport {scaleOrdinal} from 'd3-scale';\n// import SpriteText from 'three-spritetext';\n// import {Mesh, SphereBufferGeometry, MeshLambertMaterial} from 'three';\n\nimport './App.scss';\n\nconst color = scaleOrdinal(schemeCategory10);\n\nconst reduceGraph = (graph, {type, ...data}) => {\n  switch (type) {\n    case 'ADD_NODE':\n      return {\n        nodes: [...graph.nodes, data],\n        links: graph.links,\n      };\n    case 'REMOVE_NODE':\n      return {\n        nodes: graph.nodes.filter(node => node.id !== data.id),\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.id && target.id !== data.id;\n        }),\n      };\n    case 'ADD_LINK':\n      return {\n        nodes: graph.nodes,\n        links: [...graph.links, {...data, activity: 0}],\n      };\n    case 'UPDATE_LINK':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            ...data,\n          };\n        }),\n      };\n    case 'INCR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity + 1,\n          };\n        }),\n      };\n    case 'DECR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity - 1,\n          };\n        }),\n      };\n    case 'REMOVE_LINK':\n      // console.log(data);\n      return {\n        nodes: graph.nodes,\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.source || target.id !== data.target;\n        }),\n      };\n    default:\n      return graph;\n  }\n};\n\nconst useGraph = () => {\n  const [servers, setServers] = useState([new Server()]);\n  const [gen, setGen] = useState(1);\n  const [graph, dispatchGraphAction] = useReducer(reduceGraph, {nodes: [], links: []});\n\n  useEffect(() => {\n    const source = arrayBufferToHex(servers[0].dhtClient.id);\n    dispatchGraphAction({\n      type: 'ADD_NODE',\n      id: source,\n      color: '#fff',\n      dhtClient: servers[0].dhtClient,\n    });\n\n    addNodes(3)\n      .then(clients => clients.map(({dhtClient, ppsppClient}) => {\n        return new Server({dhtClient, ppsppClient});\n      }))\n      .then(newServers => setServers([...servers, ...newServers]));\n  }, []);\n\n  const addNodes = (n = 1, props = {}) => {\n    setGen(gen + 1);\n\n    const clientsResult = Promise.all(new Array(n).fill(0).map(() => {\n      const firstIndex = servers.length - 1;\n      const serverIndex = Math.min(firstIndex, 1 + Math.floor(Math.random() * firstIndex));\n      const server = servers[serverIndex];\n      return Client.create(new ConnManager(server));\n    }));\n\n    clientsResult.then(clients => clients.forEach(({dhtClient}) => {\n      // if (Math.random() > 0.5) {\n      //   setTimeout(() => dhtClient.close(), Math.random() * 30000);\n      // }\n\n      const {id, allChannels} = dhtClient;\n      // console.log(allChannels);\n\n      const source = arrayBufferToHex(id);\n      dispatchGraphAction({\n        type: 'ADD_NODE',\n        id: source,\n        color: color(gen),\n        dhtClient,\n        ...props,\n      });\n      dhtClient.on('close', () => dispatchGraphAction({\n        type: 'REMOVE_NODE',\n        id: source,\n      }));\n\n      allChannels.toArray().forEach(channel => {\n        if (channel.isOpen()) {\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target: arrayBufferToHex(channel.id),\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n        }\n      });\n\n      // const registerConnObservers = (target, conn) => {\n      //   const handleMessage = () => {\n      //     dispatchGraphAction({type: 'INCR_LINK_ACTIVITY', source, target});\n      //     setTimeout(() => dispatchGraphAction({type: 'DECR_LINK_ACTIVITY', source, target}), 10000);\n      //   };\n\n      //   conn.on('message', handleMessage);\n      //   conn.remote.on('message', handleMessage);\n      // };\n\n      allChannels.on('added',  channel => {\n        if (channel.isOpen()) {\n          const target = arrayBufferToHex(channel.id);\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('updated', (oldChannel, newChannel) => {\n        if (oldChannel.isOpen() !== newChannel.isOpen()) {\n          const target = arrayBufferToHex(newChannel.id);\n          // dispatchGraphAction({\n          //   type: 'UPDATE_LINK',\n          //   source,\n          //   target,\n          //   color: conn ? '#fff' : '#66f',\n          // });\n\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: newChannel.isOpen() ? '#fff' : '#66f',\n          });\n\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('removed', ({id}) => dispatchGraphAction({\n        type: 'REMOVE_LINK',\n        source,\n        target: arrayBufferToHex(id),\n      }));\n    }));\n\n    return clientsResult;\n  };\n\n  const deleteNodes = (n = 1) => {\n    for (let i = 0; i < n; i ++) {\n      const firstIndex = servers.length;\n      const node = graph.nodes[firstIndex + Math.floor(Math.random() * (Object.keys(graph.nodes).length - firstIndex))];\n      if (node) {\n        node.dhtClient.close();\n      }\n    }\n  };\n\n  return [graph, {addNodes, deleteNodes}];\n};\n\nconst useNodePinger = () => {\n  const [source, setSource] = useState(null);\n\n  const handleNodeClick = node => {\n    console.log(node);\n    if (source === null) {\n      setSource(node);\n      console.log('set source', arrayBufferToHex(node.dhtClient.id));\n      return;\n    }\n\n    console.log('pinging %s > %s', arrayBufferToHex(source.dhtClient.id), arrayBufferToHex(node.dhtClient.id));\n    source.dhtClient.sendPing(node.dhtClient.id, (data) => {\n      console.log('received ping response', data);\n    });\n    setSource(null);\n  };\n\n  return handleNodeClick;\n};\n\nconst App = () => {\n  const [graph, {addNodes, deleteNodes}] = useGraph();\n  const handleNodeClick = useNodePinger();\n\n  // console.log(graph);\n\n  // useEffect(() => {\n  //   let n = 1;\n  //   const ivl = setInterval(() => {\n  //     addNodes(1, {color: color(n)});\n  //     if (++ n == 50) {\n  //       clearInterval(ivl);\n  //     }\n  //   }, 1000);\n  //   return () => clearInterval(ivl);\n  // }, []);\n\n  return (\n    <div>\n      <div className=\"graph-buttons\">\n        <button onClick={() => addNodes(1)}>add 1 peer</button>\n        <button onClick={() => addNodes(5)}>add 5 peers</button>\n        <button onClick={() => deleteNodes(1)}>delete 1 peer</button>\n        <button onClick={() => deleteNodes(5)}>delete 5 peers</button>\n      </div>\n      <ForceGraph3D\n        graphData={graph}\n        nodeAutoColorBy=\"gen\"\n        onNodeClick={handleNodeClick}\n        linkColor={link => link.color}\n        linkWidth={1.5}\n        nodeRelSize={2}\n        nodeVal={node => node.dhtClient.allChannels.count()}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}