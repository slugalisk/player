{"version":3,"sources":["ppspp/constants.js","utils/createRandomId.js","App.js","SwarmPlayer.js","ppspp/injector.js","wrtc.js","compat/ws/index.js","ppspp/address.js","compat/crypto/index.js","compat/crypto/node.js","compat/crypto/browser.js","compat/ws/node.js","compat/ws/browser.js","compat/wrtc/node.js","compat/wrtc/browser.js","hexToUint8Array.js","Test.js","DhtGraph.js","Router.js","index.js","ppspp/integrity.js","binSearch.js","chunkedStream.js","loopback.js","compat/wrtc/index.js","ppspp/swarmid.js","DiagnosticMenu/index.js","client.js","ema.js","RingBuffer.js","ledbat.js","ppspp/encoding.js","bitarray.js","wfq.js","ppspp/scheduler.js","ppspp/index.js","dht.js","ppspp/uri.js"],"names":["__webpack_require__","d","__webpack_exports__","MaxChannelId","ProtocolOptions","Version","ContentIntegrityProtectionMethod","MerkleHashTreeFunction","LiveSignatureAlgorithm","ChunkAddressingMethod","MessageTypes","lodash_invert__WEBPACK_IMPORTED_MODULE_0__","lodash_invert__WEBPACK_IMPORTED_MODULE_0___default","n","MinimumVersion","SwarmIdentifier","LiveDiscardWindow","SupportedMessages","ChunkSize","EndOption","RFC7574","None","MerkleHashTree","SignAll","UnifiedMerkleTree","SHA1","SHA224","SHA256","SHA384","SHA512","RSASHA1","RSASHA256","ECDSAP256SHA256","ECDSAP384SHA384","Bin32","ByteRange64","ChunkRange32","Bin64","ChunkRange64","HANDSHAKE","DATA","ACK","HAVE","INTEGRITY","PEX_RESv4","PEX_REQ","SIGNED_INTEGRITY","REQUEST","CANCEL","CHOKE","UNCHOKE","PEX_RESv6","PEX_REScert","forEach","enumType","names","invert","name","value","crypto__WEBPACK_IMPORTED_MODULE_0__","crypto__WEBPACK_IMPORTED_MODULE_0___default","createRandomId","id","Uint8Array","crypto","randomFillSync","App","props","_useState3","useState","_useState4","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","ppsppClient","setPpsppClient","_useState5","_useState6","swarmUri","setSwarmUri","_useState7","_useState8","injectorType","setInjectorType","_useState9","_useState10","swarm","setSwarm","_useQueryString","queryString","_useState","_useState2","query","setQuery","useEffect","qs","parse","ignoreQueryPrefix","useQueryString","location","search","proto","window","protocol","host","bootstrapAddress","concat","console","log","connManager","ConnManager","Client","create","then","_ref","_ref$bootstrap","bootstrap","joinSwarm","uri","URI","ChunkedReadStream","on","length","autoplay","setImmediate","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_DiagnosticMenu__WEBPACK_IMPORTED_MODULE_3__","_SwarmPlayer__WEBPACK_IMPORTED_MODULE_4__","Fragment","className","onSubmit","e","preventDefault","onChange","target","placeholder","defaultValue","SwarmPlayer","_this","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleSourceOpen","mediaSource","sourceBuffer","addSourceBuffer","addEventListener","videoSegments","initSet","safelyAppendBuffer","segment","appendBuffer","shift","transmuxer","muxjs","mp4","Transmuxer","event","type","buf","data","Buffer","from","initSegment","updating","push","stream","ChunkedFragmentedReadStream","flush","video","React","createRef","_this2","MediaSource","current","src","URL","createObjectURL","play","react__WEBPACK_IMPORTED_MODULE_5___default","_DiagnosticMenu__WEBPACK_IMPORTED_MODULE_8__","ref","Component","Injector","chunkSize","chunksPerSignature","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","inputBuffer","alloc","chunkBuffer","dataOffset","slice","i","Math","min","_loop","subtreeChunks","splice","contentIntegrity","appendSubtree","subtree","setRange","rootAddress","scheduler","markChunksLoaded","options","arguments","undefined","_options$chunkSize","_options$chunksPerSig","_options$liveDiscardW","liveDiscardWindow","ceil","_options$chunkAddress","chunkAddressingMethod","_options$contentInteg","contentIntegrityProtectionMethod","_options$merkleHashTr","merkleHashTreeFunction","_options$liveSignatur","liveSignatureAlgorithm","generateKeyPair","_ref2","swarmId","privateKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__","toString","clientOptions","uploadRateLimit","Swarm","EventEmitter","RTCPeerConnection","RTCSessionDescription","RTCIceCandidate","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__","key","Promise","resolve","reject","conn","WebSocket","onmessage","JSON","Error","mediator","Mediator","client","once","close","_EventEmitter","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","handleMessage","bind","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","emit","sdp","candidate","send","readyState","stringify","_EventEmitter2","_this3","initialized","waitingChannels","peerConn","iceServers","urls","sendIceCandidate","handleDataChannel","handleIceConnectionStateChange","addIceCandidate","_ready","description","setRemoteDescription","createAnswer","catch","_this4","setLocalDescription","sendAnswer","error","_this5","channel","binaryType","resolveWaitingChannel","label","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","ordered","maxRetransmits","createDataChannel","iceConnectionState","_this6","createOffer","offer","sendOffer","module","exports","require","Address","bin","treeBounds","binBounds","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_treeBounds","start","end","address","r","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0__","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0___default","WebCrypto","ws__WEBPACK_IMPORTED_MODULE_0__","ws__WEBPACK_IMPORTED_MODULE_0___default","ws","wrtc__WEBPACK_IMPORTED_MODULE_0__","hexToUint8Array","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0__","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0___default","v","hexToArrayBuffer","Server","server","slicedToArray","swarms","setSwarms","injector","ChunkedWriteStreamInjector","publishSwarm","unpublishSwarm","stop","diagnosticMenus","map","react_default","DiagnosticMenu","containerClass","onClick","_ref3","toConsumableArray","color","scaleOrdinal","schemeCategory10","reduceGraph","graph","objectWithoutProperties","nodes","links","filter","node","source","objectSpread","activity","link","_useGraph","servers","setServers","gen","setGen","_useReducer","useReducer","_useReducer2","dispatchGraphAction","arrayBufferToHex","dhtClient","addNodes","clients","_ref4","newServers","clientsResult","all","Array","fill","firstIndex","serverIndex","floor","random","_ref5","allChannels","toArray","isOpen","oldChannel","newChannel","_ref6","deleteNodes","keys","useGraph","_useGraph2","_useGraph2$","handleNodeClick","setSource","sendPing","useNodePinger","react_force_graph_3d_module","graphData","nodeAutoColorBy","onNodeClick","linkColor","linkWidth","nodeRelSize","nodeVal","count","Router","HashRouter","Switch","Route","exact","path","component","Test","DhtGraph","ReactDOM","render","src_Router","document","getElementById","toUint8Array","MerkleHashTreeFunctionAlgorithms","_MerkleHashTreeFuncti","defineProperty","MerkleHashTreeFunctionByteLengths","_MerkleHashTreeFuncti2","createMerkleHashTreeFunction","algorithm","nullHash","_len","values","_key","every","arrayEqual","subtle","digest","LiveSignatureAlgorithms","_LiveSignatureAlgorit","modulusLength","publicExponent","hash","namedCurve","createLiveSignatureSignFunction","importResult","importKey","sign","createLiveSignatureVerifyFunction","getKeyParams","publicKey","signature","verify","generateKey","keyPair","exportKey","SwarmId","unavailableLiveSignatureSignFunction","createContentIntegrityVerifierFactory","liveSignatureVerifyFunction","liveSignatureSignFunction","Infinity","Signature","verified","classCallCheck","createClass","SignedSignature","verificationResult","getHash","markVerified","verifyHash","compare","signatures","getChunkCount","MerkleHashTreeVerifier","hashTree","regenerator_default","mark","getConstituentHashBins","bins","bfsIndex","stride","parent","branch","wrap","_context","prev","next","containsBin","isRoot","siblingBin","siblingBfsIndex","abrupt","minSize","size","hashes","siblings","apply","rootHashSignature","pow","log2","hashResult","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","siblingSignature","index","verifiedSignature","siblingHash","_iterator","Symbol","iterator","done","err","return","_ref7","UnifiedMerkleHashTree","subtrees","nextStart","chunkCount","_ref8","max","comparator","left","right","mid","order","binSearch","_this5$subtrees$i$roo","storedSubtree","findSubtree","copy","sort","b","pruneSubtrees","removedTree","treeSize","nextAddress","insertSubtree","MerkleHashSubtreeVerifier","getConstituentSignatures","_MerkleHashTreeVerifi","unifiedHashTree","_this7","possibleConstructorReturn","getPrototypeOf","inherits","get","prototype","NoneVerifier","NoneVerifierFactory","DELIMITER","DELIMITER_LENGTH","ChunkedWriteStream","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","buffer","writeUInt32BE","appendData","HEADER_INSTANCE_LENGTH","writer","intervalId","setInterval","write","clearInterval","setTimeout","AbstractChunkedReadStream","handleWarmupSwarmData","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","handleSwarmData","chunkBufferLength","nextDataOffset","nextDataLength","delimiterIndex","indexOf","removeListener","readHeader","offset","instance","readUInt8","readUInt32BE","lastChunkOffset","nextDataEnd","handleData","lastChunkEnd","handleEndData","_AbstractChunkedReadS","firstEmitted","_AbstractChunkedReadS2","chunkSlice","firstChunkStart","chunks","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","queue","dht","ppspp","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__","bootstrapId","Conn","open","createClient","createChannel","remote","ReadyStates","CONNECTING","OPEN","CLOSING","CLOSED","removeAllListeners","handleConnection","datachannels","entries","nextId","_EventEmitter3","conns","handleOpen","ClientDataChannel","sendConnection","closed","_Conn","_this8","isRsaAlgorithm","includes","metadataLength","byteLength","writeUInt8","ArrayBuffer","isView","read","ToggleButton","buttonClasses","classNames","diagnostic_menu__toggle_button","diagnostic_menu__toggle_button--expanded","expanded","react__WEBPACK_IMPORTED_MODULE_6___default","defaultProps","formatNumber","isFinite","approx","String","SwarmState","rows","totalSends","totalRequests","totalRequestsReceived","totalDroppedRequests","totalReceived","totalAdded","totalCancelled","ackUnknownSend","lastCompletedBin","loadedChunks","requestedChunks","chunkRate","PeerStateTable","peerState","chunkIntervalMean","wasteRate","ledbat","baseDelay","getMin","currentDelay","rttMean","rttVar","cwnd","cto","flightSize","validChunks","requestQueue","_this$props","startBin","endBin","colSpan","AvailabilityMapChart","availableChunks","sentChunks","receivedChunks","canvas","scratchCanvas","isNaN","height","width","ctx","getContext","scale","scaleLinear","domain","range","fillStyle","fillRect","lastStart","drawImage","PeerState","handleButtonClick","setState","state","table","peer","localId","remoteId","scheduleUpdate","handleUpdate","forceUpdate","requestAnimationFrame","swarmState","peerStates","containerClasses","diagnostic_menu__container","diagnostic_menu__container--expanded","_this$props$swarm$sch","dhtClientId","handlePeersDiscover","handleReceiveConnectRequest","init","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","sub","dhtChannel","ppsppChannel","timeout","channelId","clearTimeout","_ref$data","callback","EMA","alpha","mean","weight","RingBuffer","capacity","setCapacity","lastIndex","createEmptyValue","firstEmptyIndex","advanceLastIndex","set","DelayBuffer","delay","now","Date","TARGET","CURRENT_HISTORY","CURRENT_HISTORY_INTERVAL","BASE_HISTORY","BASE_HISTORY_INTERVAL","INIT_CWND","MSS","COEF_ALPHA","COEF_BETA","LEDBAT","mss","lastDataLoss","lastAckTime","ackSize","bytes","delaySample","update","checkCTO","queuingDelay","abs","offTarget","maxAllowedCwnd","rtt","isEmpty","retransmitting","timestamp","createChunkAddressFieldType","addressingMethod","Bin32ChunkAddress","_Address$binBounds","_Address$binBounds2","ChunkRange32ChunkAddress","createBufferFieldType","BufferField","createLiveSignatureFieldType","getLiveSignatureByteLength","_createBufferFieldTyp","LiveSignatureField","createIntegrityHashFieldType","_createBufferFieldTyp2","IntegrityHashField","createEncoding","ChunkAddress","IntegrityHash","LiveSignature","_protocolOptionRecord","_messageRecordTypes","Uint8ProtocolOption","Uint32ProtocolOption","VersionProtocolOption","_Uint8ProtocolOption","version","MinimumVersionProtocolOption","_Uint8ProtocolOption2","SwarmIdentifierProtocolOption","readUInt16BE","writeUInt16BE","ContentIntegrityProtectionMethodProtocolOption","_Uint8ProtocolOption3","method","MerkleHashTreeFunctionProtocolOption","_Uint8ProtocolOption4","LiveSignatureAlgorithmProtocolOption","_Uint8ProtocolOption5","ChunkAddressingMethodProtocolOption","_Uint8ProtocolOption6","LiveDiscardWindowProtocolOption","_Uint32ProtocolOption","_this9","SupportedMessagesProtocolOption","_this10","messageTypes","byte","j","Boolean","bitmapByteLength","bitmap","toBitmap","ChunkSizeProtocolOption","_Uint32ProtocolOption2","_this11","protocolOptionRecordTypes","HandshakeMessage","code","option","RecordType","reduce","Timestamp","seconds","readInt32BE","nanoseconds","writeInt32BE","DataMessage","dataLength","rangeByteLength","AddressMessage","AckMessage","HaveMessage","_AddressMessage","_this12","IntegrityMessage","SignedIntegrityMessage","RequestMessage","_AddressMessage2","_this13","CancelMessage","_AddressMessage3","_this14","EmptyMessage","ChokeMessage","_EmptyMessage","_this15","UnchokeMessage","_EmptyMessage2","_this16","messageRecordTypes","Messages","messageType","message","isArray","Datagram","messages","datagram","createMask","bits","mask","applyMask","BitArray","resize","distance","unsafelySetRange","byteIndex","bitIndex","byteOffset","adjustOffset","startByteIndex","getByteIndex","endByteIndex","startBitIndex","getBitIndex","endBitIndex","unsafelySetIndexRange","startMask","endMask","firstBit","lastBit","Flow","lastVirtualFinish","nextVirtualFinish","wfq","Queue","rate","totalQueueSize","flows","flow","computeWeight","virtualFinish","minVirtualFinish","getNextScheduledFlow","task","AvailabilityMap","_ref$end","BinRingBuffer","_RingBuffer","esm_get","RateMeter","windowMs","sampleWindowMs","firstSampleWindow","lastSampleWindow","sum","sampleWindow","adjustSampleWindow","accumulatedMs","ChunkRateMeter","_RateMeter","lastEndBin","lastHeadBin","RequestFlow","_wfq$Flow","queueSize","RequestQueue","_wfq$Queue","remove","result","SchedulerChunkState","reset","availableCopies","requestTime","requestPeerId","requested","received","SchedulerChunkRequestMap","valueByBin","head","tail","createdAt","SchedulerChunkMap","_BinRingBuffer","SchedulerPeerState","requestFlow","lastChunkTime","requestTimes","sentRequests","timeouts","invalidChunks","Scheduler","chunkStates","definitelyLoadedChunks","peerCount","timers","lastExportedBin","sendDelay","nextSendTime","nextSendTimeout","isReady","firstLoadedChunk","firstRequestedChunk","lastAvailableBin","planFor","dip","peer_remoteId","peer_localId","swift_rtt","swift_rttvar","swift_chunkIntervalMean","swift_cwnd","ledbat_cwnd","ledbat_cto","ledbat_currentDelay","ledbat_baseDelay","ledbat_rttMean","ledbat_rttVar","ledbat_rtt","ledbat_flightSize","picker_startBin","picker_lastAvailableBin","minIncompleteBin","picker_firstLoadedChunk","picker_firstRequestedChunk","timeoutThreshold","cancelledRequests","peek","pop","onDataLoss","digestDelaySamples","_peerState$peer","requestAddresses","insert","firstRequestedBin","_ref9","sendCancel","sendRequest","requestedAddress","requestedChunk","sentAt","addSent","sendChunk","sendInterval","addFlow","_ref10","removeFlow","_ref11","getPeerState","chunkInterval","addRttSample","_ref12","sendHave","nextExportedBin","advanceLastBin","_ref13","addDelaySample","sentChunk","genericEncoding","_uri$protocolOptions","protocolOptions","encoding","toBuffer","protocolOption","protocolOptionName","newBins","getNewCompleteBins","_newBins","minNewBin","maxNewBin","AWAITING_HANDSHAKE","READY","CHOKED","DISCONNECTING","PeerDataHandlerContext","integrityVerifier","createVerifier","Peer","_this$handlers","createChannelId","handlers","handleHandshakeMessage","handleDataMessage","handleHaveMessage","handleAckMessage","handleIntegrityMessage","handleSignedIntegrityMessage","handleRequestMessage","handleCancelMessage","handleChokeMessage","handleUnchokeMessage","sendBuffer","addPeer","sendHandshake","removePeer","context","handler","handshake","setLiveDiscardWindow","verifyProtocolOptions","getRecentChunks","computeOneWayDelay","markChunkReceived","getContentIntegrityVerifier","verifyChunk","markChunkVerified","emitNewData","markChunkRejected","markChunkAvailable","markSendAcked","setHash","setHashSignature","enqueueRequest","cancelRequest","addresses","_len2","_key2","chunk","constituentSignatures","reverse","getSignatureHash","round","SwarmSet","setMaxListeners","swarmIdToKey","channels","Channel","peers","handleSwarmInsert","getOrCreatePeer","assertThisInitialized","liveSwarms","handleClose","find","p","createPeer","destroyPeer","handleRemove","isInitialized","removedSwarm","NUMBER_OF_NODES_PER_BUCKET","KBucket","numberOfNodesPerKBucket","localNodeId","handlePing","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleRemoved","handleUpdated","handleAdded","knownPeerIds","channelMap","seenIds","LRU","knownRoutes","maxAge","callbacks","handlePeersRequest","handlePingRequest","handleTraceRequest","handleCallbackResponse","startPeerRequests","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","stopPeerRequests","peerRequestIvl","ids","retry","sendPeerRequest","addChannel","getChannel","removeChannel","add","idHex","bufferMessages","removeEventListener","req","lastActive","_req","trace","warn","to","res","re","forwardMessage","hops","sendRaw","reqCallback","handlePeersResponse","_ref5$data","_ref5$data$count","fromId","closest","randomBytes","knownRoute","vectorClock","lastPing","idx","_","SubChannel","peerId","_ref11$data","protocolOptionToKey","_protocolOptionToKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","URLSafeBase64","encode","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","join","uriString","startsWith","args","substring","split","_query$split","_query$split2","decodeURIComponent","arg","parseFloat","xt","decode"],"mappings":"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","file":"static/js/main.142efab0.chunk.js","sourcesContent":["import invert from 'lodash.invert';\n\nexport const MaxChannelId = 0xffffffff;\n\nexport const ProtocolOptions = {\n  Version: 0,\n  MinimumVersion: 1,\n  SwarmIdentifier: 2,\n  ContentIntegrityProtectionMethod: 3,\n  MerkleHashTreeFunction: 4,\n  LiveSignatureAlgorithm: 5,\n  ChunkAddressingMethod: 6,\n  LiveDiscardWindow: 7,\n  SupportedMessages: 8,\n  ChunkSize: 9,\n  EndOption: 255,\n};\n\nexport const Version = {\n  RFC7574: 1,\n};\n\nexport const ContentIntegrityProtectionMethod = {\n  None: 0,\n  MerkleHashTree: 1,\n  SignAll: 2,\n  UnifiedMerkleTree: 3,\n};\n\nexport const MerkleHashTreeFunction = {\n  SHA1: 0,\n  SHA224: 1,\n  SHA256: 2,\n  SHA384: 3,\n  SHA512: 4,\n};\n\nexport const LiveSignatureAlgorithm = {\n  RSASHA1: 5,\n  RSASHA256: 8,\n  ECDSAP256SHA256: 13,\n  ECDSAP384SHA384: 14,\n};\n\nexport const ChunkAddressingMethod = {\n  Bin32: 0,\n  ByteRange64: 1,\n  ChunkRange32: 2,\n  Bin64: 3,\n  ChunkRange64: 4,\n};\n\nexport const VariableChunkSize = 0xffffffff;\n\nexport const MessageTypes = {\n  HANDSHAKE: 0,\n  DATA: 1,\n  ACK: 2,\n  HAVE: 3,\n  INTEGRITY: 4,\n  PEX_RESv4: 5,\n  PEX_REQ: 6,\n  SIGNED_INTEGRITY: 7,\n  REQUEST: 8,\n  CANCEL: 9,\n  CHOKE: 10,\n  UNCHOKE: 11,\n  PEX_RESv6: 12,\n  PEX_REScert: 13,\n};\n\n[\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n].forEach(enumType => {\n  const names = invert(enumType);\n  enumType.name = value => names[value] || 'UNDEFINED';\n});\n","import crypto from 'crypto';\n\nconst createRandomId = () => {\n  const id = new Uint8Array(16);\n  crypto.randomFillSync(id);\n  return id;\n};\n\nexport default createRandomId;\n","import React, {useEffect, useState} from 'react';\nimport URI from './ppspp/uri';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport SwarmPlayer from './SwarmPlayer';\nimport {Client} from './client';\nimport {ConnManager} from './wrtc';\nimport {ChunkedReadStream} from './chunkedStream';\nimport qs from 'qs';\n\nimport './App.css';\n\nconst useQueryString = queryString => {\n  const [query, setQuery] = useState({});\n\n  useEffect(() => {\n    setQuery(qs.parse(queryString, {ignoreQueryPrefix: true}) || {});\n  }, [queryString]);\n\n  return [query];\n};\n\nconst App = props => {\n  const [ppsppClient, setPpsppClient] = useState(null);\n  const [swarmUri, setSwarmUri] = useState('');\n  const [injectorType, setInjectorType] = useState('');\n  const [swarm, setSwarm] = useState(null);\n  const [query] = useQueryString(props.location.search);\n\n  useEffect(() => {\n    const proto = window.location.protocol === 'https:' ? 'wss' : 'ws';\n    const host = process.env.NODE_ENV === 'development'\n      ? window.location.hostname + ':8080'\n      : window.location.host;\n    const bootstrapAddress = `${proto}://${host}`;\n\n    console.log({bootstrapAddress});\n\n    const connManager = new ConnManager(bootstrapAddress);\n\n    Client.create(connManager).then(({ppsppClient, bootstrap: {swarmUri, injectorType}}) => {\n      setPpsppClient(ppsppClient);\n      setSwarmUri(swarmUri);\n      setInjectorType(injectorType);\n    });\n  }, []);\n\n  const joinSwarm = () => {\n    console.log(swarmUri);\n    const uri = URI.parse(swarmUri);\n    console.log('joining', uri);\n\n    const swarm = ppsppClient.joinSwarm(uri);\n    if (injectorType === 'noise') {\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', d => console.log(`received ${d.length} bytes`));\n    }\n    setSwarm(swarm);\n  };\n\n  useEffect(() => {\n    if (query.autoplay != null && swarmUri) {\n      setImmediate(joinSwarm);\n    }\n  }, [swarmUri, query]);\n\n  const onJoinSubmit = e => {\n    e.preventDefault();\n    joinSwarm();\n  };\n\n  const onInputChange = e => {\n    setSwarmUri(e.target.value);\n  };\n\n  if (swarm) {\n    return injectorType === 'noise'\n      ? <DiagnosticMenu swarm={swarm} />\n      : <SwarmPlayer swarm={swarm} />;\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"idle\">\n        <div className=\"scanner\"></div>\n        <div className=\"noise\"></div>\n      </div>\n      <form className=\"join-form\" onSubmit={onJoinSubmit}>\n        <input\n          onChange={onInputChange}\n          placeholder=\"Enter Swarm URI\"\n          defaultValue={swarmUri}\n        />\n        <button>Join</button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React, {Component} from 'react';\nimport muxjs from 'mux.js';\nimport {ChunkedFragmentedReadStream} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport {Buffer} from 'buffer';\n\nimport './SwarmPlayer.css';\n\nexport default class SwarmPlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.video = React.createRef();\n  }\n\n  componentDidMount() {\n    const mediaSource = new MediaSource();\n\n    this.video.current.addEventListener('error', e => console.log(e));\n    this.video.current.src = URL.createObjectURL(mediaSource);\n\n    mediaSource.addEventListener('sourceopen', () => this.handleSourceOpen(mediaSource));\n\n    this.video.current.play();\n  }\n\n  handleSourceOpen = mediaSource => {\n    const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"mp4a.40.5,avc1.64001F\"');\n    // sourceBuffer.addEventListener('updatestart', e => console.log(e));\n    // sourceBuffer.addEventListener('updateend', e => console.log(e));\n    sourceBuffer.addEventListener('error', e => console.log(e));\n\n    const videoSegments = [];\n    let initSet = false;\n\n    const safelyAppendBuffer = segment => {\n      try {\n        sourceBuffer.appendBuffer(segment);\n      } catch (e) {\n        setImmediate(() => safelyAppendBuffer(segment));\n      }\n    };\n\n    sourceBuffer.addEventListener('updateend', () => {\n      if (videoSegments.length) {\n        safelyAppendBuffer(videoSegments.shift());\n      }\n    });\n\n    var transmuxer = new muxjs.mp4.Transmuxer();\n    transmuxer.on('data', event => {\n      if (event.type === 'combined') {\n        const buf = initSet\n          ? event.data\n          : Buffer.concat([Buffer.from(event.initSegment), Buffer.from(event.data)]);\n        initSet = true;\n\n        if (sourceBuffer.updating) {\n          videoSegments.push(new Uint8Array(buf));\n        } else {\n          safelyAppendBuffer(new Uint8Array(buf));\n        }\n      } else {\n        console.log('unhandled event', event.type);\n      }\n    });\n\n    const stream = new ChunkedFragmentedReadStream(this.props.swarm);\n    stream.on('start', data => transmuxer.push(new Uint8Array(data)));\n    stream.on('data', data => transmuxer.push(new Uint8Array(data)));\n    stream.on('end', data => {\n      transmuxer.push(new Uint8Array(data));\n      transmuxer.flush();\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <DiagnosticMenu swarm={this.props.swarm} />\n        <video\n          className=\"swarm-player-video\"\n          ref={this.video}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","import {EventEmitter} from 'events';\nimport crypto from 'crypto';\nimport {generateKeyPair} from './integrity';\nimport URI from './uri';\nimport {\n  ChunkAddressingMethod,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ProtocolOptions,\n} from './constants';\nimport {Swarm} from '../ppspp';\n\nexport default class Injector {\n  constructor(swarm, chunkSize, chunksPerSignature) {\n    this.swarm = swarm;\n    this.chunkSize = chunkSize;\n    this.chunksPerSignature = chunksPerSignature;\n    this.inputBuffer = Buffer.alloc(0);\n    this.chunkBuffer = [];\n  }\n\n  appendData(data) {\n    if (this.inputBuffer.length + data.length < this.chunkSize) {\n      this.inputBuffer = Buffer.concat([this.inputBuffer, data]);\n      return;\n    }\n\n    let dataOffset = 0;\n    if (this.inputBuffer.length > 0) {\n      dataOffset = this.chunkSize - this.inputBuffer.length;\n      this.chunkBuffer.push(Buffer.concat([this.inputBuffer, data.slice(0, dataOffset)], this.chunkSize));\n    }\n\n    for (let i = dataOffset; i + this.chunkSize < data.length; i += this.chunkSize) {\n      this.chunkBuffer.push(data.slice(i, Math.min(data.length, i + this.chunkSize)));\n      dataOffset = i + this.chunkSize;\n    }\n\n    if (dataOffset < data.length) {\n      this.inputBuffer = data.slice(dataOffset);\n    }\n\n    while (this.chunkBuffer.length > this.chunksPerSignature) {\n      const subtreeChunks = this.chunkBuffer.splice(0, this.chunksPerSignature);\n      this.swarm.contentIntegrity.appendSubtree(subtreeChunks).then(subtree => {\n        this.swarm.chunkBuffer.setRange(subtree.rootAddress, subtreeChunks);\n        this.swarm.scheduler.markChunksLoaded(subtree.rootAddress);\n      });\n    }\n  }\n\n  static create(options = {}) {\n    const {\n      chunkSize = 8 * 1024,\n      chunksPerSignature = 64,\n      liveDiscardWindow = Math.ceil(15 * 3500 * 1024 / chunkSize),\n      chunkAddressingMethod = ChunkAddressingMethod.Bin32,\n      contentIntegrityProtectionMethod = ContentIntegrityProtectionMethod.UnifiedMerkleTree,\n      merkleHashTreeFunction = MerkleHashTreeFunction.SHA256,\n      liveSignatureAlgorithm = LiveSignatureAlgorithm.ECDSAP256SHA256,\n    } = options;\n\n    return generateKeyPair(liveSignatureAlgorithm).then(({swarmId, privateKey}) => {\n      const uri = new URI(\n        swarmId,\n        {\n          [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n          [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n          [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n          [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n          [ProtocolOptions.ChunkSize]: chunkSize,\n        }\n      );\n\n      console.log('swarm uri:', uri.toString());\n\n      const clientOptions = {\n        liveDiscardWindow,\n        privateKey,\n        uploadRateLimit: 10e6,\n      };\n\n      return new Swarm(uri, clientOptions);\n    }).then(swarm => new Injector(swarm, chunkSize, chunksPerSignature));\n  }\n}\n\nexport class NoiseInjector extends EventEmitter {\n  constructor(dataRate = 3.5e6 / 8, interval = 250) {\n    super();\n    this.dataRate = dataRate * (interval / 1000);\n    this.interval = interval;\n  }\n\n  start() {\n    const data = Buffer.alloc(this.dataRate);\n    crypto.randomFillSync(data);\n\n    Injector.create().then(injector => {\n      this.intervalId = setInterval(() => injector.appendChunk(data), this.interval);\n      this.injector = injector;\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n","import {EventEmitter} from 'events';\nimport WebSocket from './compat/ws';\nimport {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from './compat/wrtc';\n\nconsole.log({\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n});\n\nexport class ConnManager {\n  constructor(bootstrapAddress) {\n    this.bootstrapAddress = bootstrapAddress;\n  }\n\n  bootstrap() {\n    return new Promise((resolve, reject) => {\n      const conn = new WebSocket(this.bootstrapAddress);\n      conn.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'bootstrap') {\n          resolve({data, conn});\n        } else {\n          reject(new Error(`expected bootstrap, received: ${event.data}`));\n        }\n      };\n    });\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    // firefox seems to continue generating ice messages after the datachannel\n    // has opened...\n    mediator.once('error', () => conn.close());\n    client.once('open', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    // console.log('mediator message', data);\n\n    switch (data.type) {\n      case 'offer':\n      case 'answer':\n        this.emit('remotedescription', new RTCSessionDescription(data));\n        break;\n      case 'icecandidate':\n        if (data.sdp && data.sdp.candidate) {\n          this.emit('icecandidate', new RTCIceCandidate(data.sdp));\n        }\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  sendOffer(event) {\n    this.send(event);\n  }\n\n  sendAnswer(event) {\n    this.send(event);\n  }\n\n  sendIceCandidate(event) {\n    if (event.candidate) {\n      this.send({\n        type: 'icecandidate',\n        sdp: event.candidate,\n      });\n    }\n  }\n\n  send(event) {\n    if (this.conn.readyState !== 1) {\n      console.log('mediator tried to send after closing its connection');\n      // console.log('send error', this.conn);\n      // console.trace();\n      // this.emit('error', new Error('connection in invalid state'));\n      return;\n    }\n\n    this.conn.send(JSON.stringify(event));\n  }\n}\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.initialized = false;\n    this.waitingChannels = 0;\n\n    this.peerConn = new RTCPeerConnection({\n      iceServers: [{urls: 'stun:stun.l.google.com:19302'}],\n    });\n\n    this.peerConn.addEventListener('icecandidate', candidate => this.mediator.sendIceCandidate(candidate));\n    this.peerConn.addEventListener('datachannel', this.handleDataChannel.bind(this));\n    this.peerConn.addEventListener('iceconnectionstatechange', this.handleIceConnectionStateChange.bind(this));\n\n    mediator.once('error', () => this.peerConn.close());\n    mediator.on('icecandidate', candidate => this.addIceCandidate(candidate));\n\n    this._ready = new Promise((resolve, reject) => {\n      mediator.on('remotedescription', description => {\n        this.peerConn.setRemoteDescription(description)\n          .then(() => {\n            resolve();\n            this.createAnswer();\n          })\n          .catch(reject);\n      });\n    });\n  }\n\n  createAnswer() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n\n    this.peerConn.createAnswer()\n      .then((description) => {\n        this.peerConn.setLocalDescription(description);\n        this.mediator.sendAnswer(description);\n      })\n      .catch(error => console.error(error));\n  }\n\n  addIceCandidate(candidate) {\n    this._ready.then(() => this.peerConn.addIceCandidate(candidate));\n  }\n\n  handleDataChannel(event) {\n    // event.channel.addEventListener('close', e => console.log('< begin close event handlers'));\n    event.channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    event.channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('< received data channel', event);\n    // event.channel.addEventListener('error', e => console.log('< data channel emitted error', e));\n    // event.channel.addEventListener('open', e => console.log('< data channel opened', e));\n    // event.channel.addEventListener('bufferedamountlow', e => console.log('< data channel bufferamountlow', e));\n    // event.channel.addEventListener('close', e => console.log('< data channel closed', e));\n\n    this.emit('datachannel', event);\n  }\n\n  createDataChannel(label, options = {}) {\n    options = {\n      ordered: true,\n      maxRetransmits: 10,\n      ...options,\n    };\n\n    const channel = this.peerConn.createDataChannel(label, options);\n    // channel.addEventListener('close', e => console.log('> begin close event handlers'));\n    channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('> received data channel', {channel});\n    // channel.addEventListener('error', e => console.log('> data channel emitted error', e));\n    // channel.addEventListener('open', e => console.log('> data channel opened', e));\n    // channel.addEventListener('bufferedamountlow', e => console.log('> data channel bufferedamountlow', e));\n    // channel.addEventListener('close', e => console.log('> data channel closed', e));\n\n    return channel;\n  }\n\n  resolveWaitingChannel() {\n    if (-- this.waitingChannels === 0) {\n      this.emit('open');\n    }\n  }\n\n  handleIceConnectionStateChange() {\n    // this seems to be the most reliable way to get connection state in chrome\n    if (this.peerConn.iceConnectionState === 'failed') {\n      this.peerConn.close();\n    }\n  }\n\n  init() {\n    this.peerConn.createOffer()\n      .then(offer => {\n        this.initialized = true;\n        // console.log('initial offer', offer);\n        this.peerConn.setLocalDescription(offer);\n        this.mediator.sendOffer(offer);\n      });\n  }\n\n  close() {\n    // console.log('wrtc client closed');\n    // console.trace();\n    this.peerConn.close();\n    this.emit('close');\n  }\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","import {ChunkAddressingMethod} from './constants';\n\nexport default class Address {\n  constructor(bin = 0, treeBounds = Address.binBounds(bin)) {\n    this.bin = bin;\n    [this.start, this.end] = treeBounds;\n  }\n\n  containsBin(bin) {\n    return this.start <= bin && bin <= this.end;\n  }\n\n  getChunkCount() {\n    return (this.end - this.start) / 2 + 1;\n  }\n\n  static from(address) {\n    if (address instanceof Address) {\n      return address;\n    }\n\n    switch (address.type) {\n      case ChunkAddressingMethod.Bin32:\n        return new Address(address.value);\n      case ChunkAddressingMethod.ChunkRange32: {\n        const {start, end} = address;\n        return new Address((end - start) / 2, [start, end]);\n      }\n      default:\n        throw new Error('unsupported address type');\n    }\n  }\n\n  static binBounds(bin) {\n    return [\n      bin & (bin + 1),\n      (bin | (bin + 1)) - 1,\n    ];\n  }\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","import WebCrypto from 'node-webcrypto-ossl';\n\nmodule.exports = new WebCrypto();\n","module.exports = crypto;\n","import ws from 'ws';\n\nexport default ws;\n","module.exports = WebSocket;\n","import {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from 'wrtc';\n\nmodule.exports = {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n};\n","module.exports = {\n  RTCPeerConnection: window.RTCPeerConnection,\n  RTCSessionDescription: window.RTCSessionDescription,\n  RTCIceCandidate: window.RTCIceCandidate,\n};\n","import hexToArrayBuffer from 'hex-to-array-buffer';\n\nexport default function hexToUint8Array(v) {\n  return new Uint8Array(hexToArrayBuffer(v));\n}\n","import React, {useEffect, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport {ChunkedReadStream, ChunkedWriteStreamInjector} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\n\nimport './App.css';\n\nconst App = () => {\n  const [server] = useState(new Server());\n  const [swarms, setSwarms] = useState([]);\n  const [swarmUri, setSwarmUri] = useState('');\n\n  useEffect(() => {\n    const injector = new ChunkedWriteStreamInjector();\n\n    injector.on('publish', ({swarm}) => {\n      setSwarmUri(swarm.uri);\n      server.ppsppClient.publishSwarm(swarm);\n    });\n\n    injector.on('unpublish', ({swarm}) => {\n      server.ppsppClient.unpublishSwarm(swarm);\n    });\n\n    injector.start();\n\n    return () => injector.stop();\n  }, []);\n\n  const handleAddPeerClick = () => {\n    Client.create(new ConnManager(server)).then(({ppsppClient}) => {\n      const swarm = ppsppClient.joinSwarm(swarmUri);\n      // console.log(ppsppClient);\n\n      setSwarms([...swarms, swarm]);\n\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', d => console.log(`received ${d.length} bytes`));\n    });\n  };\n\n  const diagnosticMenus = swarms.map((swarm, i) => (\n    <DiagnosticMenu\n      key={i}\n      swarm={swarm}\n      containerClass={`diagnostic-menu--indent-${i}`}\n    />\n  ));\n\n  return (\n    <div>\n      {diagnosticMenus}\n      <button onClick={handleAddPeerClick}>add peer</button>\n    </div>\n  );\n};\n\nexport default App;\n","import React, {useEffect, useReducer, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport {schemeCategory10} from 'd3-scale-chromatic';\nimport {scaleOrdinal} from 'd3-scale';\n// import SpriteText from 'three-spritetext';\n// import {Mesh, SphereBufferGeometry, MeshLambertMaterial} from 'three';\n\nimport './App.css';\n\nconst color = scaleOrdinal(schemeCategory10);\n\nconst reduceGraph = (graph, {type, ...data}) => {\n  switch (type) {\n    case 'ADD_NODE':\n      return {\n        nodes: [...graph.nodes, data],\n        links: graph.links,\n      };\n    case 'REMOVE_NODE':\n      return {\n        nodes: graph.nodes.filter(node => node.id !== data.id),\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.id && target.id !== data.id;\n        }),\n      };\n    case 'ADD_LINK':\n      return {\n        nodes: graph.nodes,\n        links: [...graph.links, {...data, activity: 0}],\n      };\n    case 'UPDATE_LINK':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            ...data,\n          };\n        }),\n      };\n    case 'INCR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity + 1,\n          };\n        }),\n      };\n    case 'DECR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity - 1,\n          };\n        }),\n      };\n    case 'REMOVE_LINK':\n      console.log(data);\n      return {\n        nodes: graph.nodes,\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.source || target.id !== data.target;\n        }),\n      };\n    default:\n      return graph;\n  }\n};\n\nconst useGraph = () => {\n  const [servers, setServers] = useState([new Server()]);\n  const [gen, setGen] = useState(1);\n  const [graph, dispatchGraphAction] = useReducer(reduceGraph, {nodes: [], links: []});\n\n  useEffect(() => {\n    const source = arrayBufferToHex(servers[0].dhtClient.id);\n    dispatchGraphAction({\n      type: 'ADD_NODE',\n      id: source,\n      color: '#fff',\n      dhtClient: servers[0].dhtClient,\n    });\n\n    addNodes(3)\n      .then(clients => clients.map(({dhtClient, ppsppClient}) => {\n        return new Server({dhtClient, ppsppClient});\n      }))\n      .then(newServers => setServers([...servers, ...newServers]));\n  }, []);\n\n  const addNodes = (n = 1, props = {}) => {\n    setGen(gen + 1);\n\n    const clientsResult = Promise.all(new Array(n).fill(0).map(() => {\n      const firstIndex = servers.length - 1;\n      const serverIndex = Math.min(firstIndex, 1 + Math.floor(Math.random() * firstIndex));\n      const server = servers[serverIndex];\n      return Client.create(new ConnManager(server));\n    }));\n\n    clientsResult.then(clients => clients.forEach(({dhtClient}) => {\n      // if (Math.random() > 0.5) {\n      //   setTimeout(() => dhtClient.close(), Math.random() * 30000);\n      // }\n\n      const {id, allChannels} = dhtClient;\n      console.log(allChannels);\n\n      const source = arrayBufferToHex(id);\n      dispatchGraphAction({\n        type: 'ADD_NODE',\n        id: source,\n        color: color(gen),\n        dhtClient,\n        ...props,\n      });\n      dhtClient.on('close', () => dispatchGraphAction({\n        type: 'REMOVE_NODE',\n        id: source,\n      }));\n\n      allChannels.toArray().forEach(channel => {\n        if (channel.isOpen()) {\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target: arrayBufferToHex(channel.id),\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n        }\n      });\n\n      // const registerConnObservers = (target, conn) => {\n      //   const handleMessage = () => {\n      //     dispatchGraphAction({type: 'INCR_LINK_ACTIVITY', source, target});\n      //     setTimeout(() => dispatchGraphAction({type: 'DECR_LINK_ACTIVITY', source, target}), 10000);\n      //   };\n\n      //   conn.on('message', handleMessage);\n      //   conn.remote.on('message', handleMessage);\n      // };\n\n      allChannels.on('added',  channel => {\n        if (channel.isOpen()) {\n          const target = arrayBufferToHex(channel.id);\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: channel.isOpen() ? '#fff' : '#66f',\n          });\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('updated', (oldChannel, newChannel) => {\n        if (oldChannel.isOpen() !== newChannel.isOpen()) {\n          const target = arrayBufferToHex(newChannel.id);\n          // dispatchGraphAction({\n          //   type: 'UPDATE_LINK',\n          //   source,\n          //   target,\n          //   color: conn ? '#fff' : '#66f',\n          // });\n\n          dispatchGraphAction({\n            type: 'ADD_LINK',\n            source,\n            target,\n            color: newChannel.isOpen() ? '#fff' : '#66f',\n          });\n\n\n          // registerConnObservers(target, conn);\n        }\n      });\n      allChannels.on('removed', ({id}) => dispatchGraphAction({\n        type: 'REMOVE_LINK',\n        source,\n        target: arrayBufferToHex(id),\n      }));\n    }));\n\n    return clientsResult;\n  };\n\n  const deleteNodes = (n = 1) => {\n    for (let i = 0; i < n; i ++) {\n      const firstIndex = servers.length;\n      const node = graph.nodes[firstIndex + Math.floor(Math.random() * (Object.keys(graph.nodes).length - firstIndex))];\n      if (node) {\n        node.dhtClient.close();\n      }\n    }\n  };\n\n  return [graph, {addNodes, deleteNodes}];\n};\n\nconst useNodePinger = () => {\n  const [source, setSource] = useState(null);\n\n  const handleNodeClick = node => {\n    console.log(node);\n    if (source === null) {\n      setSource(node);\n      console.log('set source', arrayBufferToHex(node.dhtClient.id));\n      return;\n    }\n\n    console.log('pinging %s > %s', arrayBufferToHex(source.dhtClient.id), arrayBufferToHex(node.dhtClient.id));\n    source.dhtClient.sendPing(node.dhtClient.id, (data) => {\n      console.log('received ping response', data);\n    });\n    setSource(null);\n  };\n\n  return handleNodeClick;\n};\n\nconst App = () => {\n  const [graph, {addNodes, deleteNodes}] = useGraph();\n  const handleNodeClick = useNodePinger();\n\n  console.log(graph);\n\n  // useEffect(() => {\n  //   let n = 1;\n  //   const ivl = setInterval(() => {\n  //     addNodes(1, {color: color(n)});\n  //     if (++ n == 50) {\n  //       clearInterval(ivl);\n  //     }\n  //   }, 1000);\n  //   return () => clearInterval(ivl);\n  // }, []);\n\n  return (\n    <div>\n      <div className=\"graph-buttons\">\n        <button onClick={() => addNodes(1)}>add 1 peer</button>\n        <button onClick={() => addNodes(5)}>add 5 peers</button>\n        <button onClick={() => addNodes(10)}>add 10 peers</button>\n        <button onClick={() => deleteNodes(1)}>delete 1 peer</button>\n        <button onClick={() => deleteNodes(5)}>delete 5 peers</button>\n      </div>\n      <ForceGraph3D\n        graphData={graph}\n        nodeAutoColorBy=\"gen\"\n        onNodeClick={handleNodeClick}\n        linkColor={link => link.color}\n        linkWidth={1.5}\n        nodeRelSize={2}\n        nodeVal={node => node.dhtClient.allChannels.count()}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport App from './App';\nimport Test from './Test';\nimport DhtGraph from './DhtGraph';\n\nconst Router = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/test\" component={Test} />\n      <Route exact path=\"/dht-graph\" component={DhtGraph} />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './Router';\n\nimport './index.css';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n","import {Buffer} from 'buffer';\nimport arrayEqual from 'array-equal';\nimport binSearch from '../binSearch';\nimport Address from './address';\nimport SwarmId from './swarmid';\n\nimport {\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n} from './constants';\n\nconst crypto = require('../compat/crypto');\n\nconst toUint8Array = data => new Uint8Array(data);\n\nexport const MerkleHashTreeFunctionAlgorithms = {\n  [MerkleHashTreeFunction.SHA1]: 'SHA-1',\n  [MerkleHashTreeFunction.SHA224]: 'SHA-224',\n  [MerkleHashTreeFunction.SHA256]: 'SHA-256',\n  [MerkleHashTreeFunction.SHA384]: 'SHA-384',\n  [MerkleHashTreeFunction.SHA512]: 'SHA-512',\n};\n\nexport const MerkleHashTreeFunctionByteLengths = {\n  [MerkleHashTreeFunction.SHA1]: 20,\n  [MerkleHashTreeFunction.SHA224]: 28,\n  [MerkleHashTreeFunction.SHA256]: 32,\n  [MerkleHashTreeFunction.SHA384]: 48,\n  [MerkleHashTreeFunction.SHA512]: 64,\n};\n\nexport const createMerkleHashTreeFunction = (merkleHashTreeFunction) => {\n  const algorithm = MerkleHashTreeFunctionAlgorithms[merkleHashTreeFunction];\n  if (algorithm === undefined) {\n    throw new Error('invalid merkle hash tree function');\n  }\n\n  const nullHash = new Uint8Array(MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction]);\n\n  return (...values) => {\n    values = values.map(value => value === undefined ? nullHash : value);\n\n    if (values.every(value => arrayEqual(value, nullHash))) {\n      return Promise.resolve(nullHash);\n    }\n\n    if (values.length > 1) {\n      values = new Uint8Array(Buffer.concat(values.map(value => Buffer.from(value))));\n    } else {\n      values = values[0];\n    }\n\n    return crypto.subtle.digest(algorithm, values).then(toUint8Array);\n  };\n};\n\nexport const LiveSignatureAlgorithms = {\n  [LiveSignatureAlgorithm.RSASHA1]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-1'},\n  },\n  [LiveSignatureAlgorithm.RSASHA256]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP256SHA256]: {\n    name: 'ECDSA',\n    namedCurve: 'P-256',\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP384SHA384]: {\n    name: 'ECDSA',\n    namedCurve: 'P-384',\n    hash: {name: 'SHA-384'},\n  },\n};\n\nexport const createLiveSignatureSignFunction = (liveSignatureAlgorithm, privateKey, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  const importResult = crypto.subtle.importKey('pkcs8', privateKey, algorithm, false, ['sign']);\n\n  return data => importResult\n    .then(privateKey => crypto.subtle.sign(algorithm, privateKey, data))\n    .then(toUint8Array);\n};\n\nexport const createLiveSignatureVerifyFunction = (liveSignatureAlgorithm, swarmId, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...swarmId.getKeyParams(),\n    ...algorithm,\n  };\n\n  const publicKey = new Uint8Array(swarmId.publicKey);\n  const importResult = crypto.subtle.importKey('spki', publicKey, algorithm, false, ['verify']);\n\n  return (signature, data) => importResult\n    .then(publicKey => crypto.subtle.verify(algorithm, publicKey, signature, data))\n    .then(toUint8Array);\n};\n\nexport const generateKeyPair = (liveSignatureAlgorithm, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  return crypto.subtle.generateKey(algorithm, true, ['sign', 'verify'])\n    .then(keyPair => Promise.all([\n      crypto.subtle.exportKey('pkcs8', keyPair.privateKey),\n      crypto.subtle.exportKey('spki', keyPair.publicKey),\n    ]))\n    .then(([privateKey, publicKey]) => ({\n      privateKey,\n      publicKey,\n      swarmId: SwarmId.from({\n        ...algorithm,\n        liveSignatureAlgorithm,\n        publicKey,\n      }),\n    }));\n};\n\nconst unavailableLiveSignatureSignFunction = () => Promise.reject('live signature function not available');\n\nexport const createContentIntegrityVerifierFactory = (\n  contentIntegrityProtectionMethod,\n  merkleHashTreeFunction,\n  liveSignatureVerifyFunction,\n  liveSignatureSignFunction = unavailableLiveSignatureSignFunction,\n  liveDiscardWindow = Infinity,\n) => {\n  class Signature {\n    constructor(hash, verified = false) {\n      this.hash = hash;\n      this.verified = verified;\n    }\n\n    markVerified() {\n      this.verified = true;\n    }\n\n    getHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return !this.verified\n        ? Promise.reject('cannot use unverified signature')\n        : Promise.resolve(arrayEqual(this.hash, value));\n    }\n  }\n\n  // TODO: timestamp in hash?\n  class SignedSignature {\n    constructor(signature, hash) {\n      this.signature = signature;\n      this.hash = hash;\n      this.verificationResult = undefined;\n    }\n\n    verifyHash() {\n      if (this.verificationResult === undefined) {\n        this.verificationResult = liveSignatureVerifyFunction(this.hash, this.getHash())\n          .then(() => this.markVerified());\n      }\n      return this.verificationResult;\n    }\n\n    markVerified() {\n      this.signature.markVerified();\n    }\n\n    getHash() {\n      return this.signature.getHash();\n    }\n\n    getSignatureHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return this.verifyHash().then(() => this.signature.compare(value));\n    }\n  }\n\n  class MerkleHashTree {\n    constructor(rootAddress, signatures = new Array(rootAddress.getChunkCount() * 2 - 1)) {\n      this.rootAddress = rootAddress;\n      this.signatures = signatures;\n    }\n\n    createVerifier() {\n      return new MerkleHashTreeVerifier(this);\n    }\n\n    copy(hashTree) {\n      for (let i = 0; i < this.signatures.length; i ++) {\n        if (hashTree.signatures[i] === undefined) {\n          hashTree.signatures[i] = this.signatures[i];\n        }\n      }\n    }\n\n    getChunkCount() {\n      return this.rootAddress.getChunkCount();\n    }\n\n    *getConstituentHashBins({bin}) {\n      if (!this.rootAddress.containsBin(bin)) {\n        throw new Error('bin out of range');\n      }\n\n      const {start} = this.rootAddress;\n      bin -= start;\n\n      const bins = [];\n      let bfsIndex = this.rootAddress.getChunkCount() + bin / 2 - 1;\n      let stride = 2;\n      let parent = bin;\n\n      while (bfsIndex !== 0) {\n        const branch = (bfsIndex & 1) === 1 ? 1 : -1;\n\n        yield {\n          isRoot: false,\n          branch,\n          bin: parent + start,\n          bfsIndex,\n          siblingBin: parent + branch * stride + start,\n          siblingBfsIndex: bfsIndex + branch,\n        };\n\n        bfsIndex = Math.floor((bfsIndex - 1) / 2);\n        parent += branch * stride / 2;\n        stride *= 2;\n      }\n\n      yield {\n        isRoot: true,\n        branch: 0,\n        bin: parent + start,\n        bfsIndex: 0,\n        siblingBin: parent + start,\n        siblingBfsIndex: 0,\n      };\n\n      return bins;\n    }\n\n    getConstituentSignatures(address) {\n      return Array.from(this.getConstituentHashBins(address)).map(({\n        siblingBin,\n        siblingBfsIndex,\n      }) => ({\n        bin: siblingBin,\n        signature: this.signatures[siblingBfsIndex],\n      }));\n    }\n\n    static from(values, rootAddress = new Address(MerkleHashTree.minSize(values.length) - 1)) {\n      const size = rootAddress.getChunkCount();\n      const hashes = new Array(size * 2 - 1);\n      for (let i = 0; i < size; i ++) {\n        hashes[i + size - 1] = merkleHashTreeFunction(values[i]);\n      }\n      for (let i = (size - 1) * 2; i > 0; i -= 2) {\n        hashes[Math.floor(i / 2) - 1] = Promise.all([hashes[i - 1], hashes[i]])\n          .then(siblings => merkleHashTreeFunction(...siblings));\n      }\n\n      return Promise.all(hashes).then(hashes => {\n        const signatures = hashes.map(hash => new Signature(hash, true));\n\n        return liveSignatureSignFunction(hashes[0]).then(rootHashSignature => {\n          signatures[0] = new SignedSignature(\n            signatures[0],\n            rootHashSignature,\n          );\n\n          return new MerkleHashTree(rootAddress, signatures);\n        });\n      });\n    }\n\n    static minSize(size) {\n      return Math.pow(2, Math.ceil(Math.log2(size)));\n    }\n  }\n\n  class MerkleHashTreeVerifier {\n    constructor(hashTree) {\n      this.hashTree = hashTree;\n      this.signatures = {};\n    }\n\n    setHash({bin}, hash) {\n      this.signatures[bin] = new Signature(hash);\n    }\n\n    setHashSignature({bin}, hash) {\n      this.signatures[bin] = new SignedSignature(this.signatures[bin], hash);\n    }\n\n    verifyChunk(address, value) {\n      const signatures = [];\n      let hashResult = merkleHashTreeFunction(value);\n\n      for (let bin of this.hashTree.getConstituentHashBins(address)) {\n        let siblingSignature = this.hashTree.signatures[bin.siblingBfsIndex];\n        if (siblingSignature === undefined) {\n          siblingSignature = this.signatures[bin.siblingBin];\n          signatures.push({\n            index: bin.siblingBfsIndex,\n            signature: siblingSignature,\n          });\n        }\n\n        // if the current branch has already been verified short circuit\n        const verifiedSignature = this.hashTree.signatures[bin.bfsIndex];\n        if (verifiedSignature !== undefined) {\n          hashResult = hashResult.then(hash => verifiedSignature.compare(hash));\n          break;\n        }\n\n        // verify the generated root hash using the one supplied to the verifier\n        if (bin.isRoot) {\n          hashResult = hashResult.then(hash => siblingSignature.compare(hash));\n          break;\n        }\n\n        // chain generating the next parent hash\n        hashResult = hashResult.then(hash => {\n          signatures.push({\n            index: bin.bfsIndex,\n            signature: new Signature(hash),\n          });\n\n          const siblingHash = siblingSignature.getHash();\n          const siblings = bin.branch === 1 ? [hash, siblingHash] : [siblingHash, hash];\n          return merkleHashTreeFunction(...siblings);\n        });\n      }\n\n      return hashResult.then(() => {\n        signatures.forEach(({index, signature}) => {\n          signature.markVerified();\n          this.hashTree.signatures[index] = signature;\n        });\n      });\n    }\n  }\n\n  class UnifiedMerkleHashTree {\n    constructor() {\n      this.subtrees = [];\n      this.nextStart = 0;\n      this.chunkCount = 0;\n    }\n\n    findSubtree({bin}) {\n      const index = binSearch(\n        this.subtrees.length - 1,\n        i => {\n          const {start, end} = this.subtrees[i].rootAddress;\n          return start <= bin && bin <= end ? 0 : start - bin;\n        },\n      );\n\n      return index < 0 ? undefined : this.subtrees[index];\n    }\n\n    insertSubtree(subtree) {\n      const storedSubtree = this.findSubtree(subtree.rootAddress);\n      if (storedSubtree !== undefined) {\n        if (storedSubtree !== subtree) {\n          subtree.copy(storedSubtree);\n        }\n\n        return storedSubtree;\n      }\n\n      this.subtrees.push(subtree);\n      this.subtrees.sort((a, b) => a.rootAddress.start - b.rootAddress.start);\n\n      this.chunkCount += subtree.getChunkCount();\n      this.pruneSubtrees();\n\n      return subtree;\n    }\n\n    pruneSubtrees() {\n      while (this.subtrees.length > 0 && this.chunkCount - this.subtrees[0].getChunkCount() > liveDiscardWindow) {\n        const removedTree = this.subtrees.shift();\n        this.chunkCount -= removedTree.getChunkCount();\n      }\n    }\n\n    appendSubtree(values) {\n      const treeSize = MerkleHashTree.minSize(values.length);\n      const nextAddress = new Address(\n        this.nextStart + treeSize - 1,\n        [this.nextStart, this.nextStart + (treeSize - 1) * 2],\n      );\n\n      this.nextStart += treeSize * 2;\n\n      return MerkleHashTree.from(values, nextAddress)\n        .then(subtree => this.insertSubtree(subtree));\n    }\n\n    createVerifier(address) {\n      let subtree = this.findSubtree(address) || new MerkleHashTree(address);\n      return new MerkleHashSubtreeVerifier(this, subtree);\n    }\n\n    getConstituentSignatures(address) {\n      const subtree = this.findSubtree(address);\n      if (subtree === undefined) {\n        return;\n      }\n\n      return subtree.getConstituentSignatures(address);\n    }\n  }\n\n  class MerkleHashSubtreeVerifier extends MerkleHashTreeVerifier {\n    constructor(unifiedHashTree, subtree) {\n      super(subtree);\n      this.unifiedHashTree = unifiedHashTree;\n    }\n\n    verifyChunk(address, value) {\n      return super.verifyChunk(address, value)\n        .then(this.unifiedHashTree.insertSubtree(this.hashTree));\n    }\n  }\n\n  class NoneVerifier {\n    setHash() {}\n\n    setHashSignature() {}\n\n    verifyChunk() {\n      return Promise.resolve();\n    }\n  }\n\n  class NoneVerifierFactory {\n    createVerifier() {\n      return new NoneVerifier();\n    }\n\n    getConstituentSignatures() {\n      return [];\n    }\n  }\n\n  // TODO: sign all method\n  switch (contentIntegrityProtectionMethod) {\n    case ContentIntegrityProtectionMethod.None:\n      return new NoneVerifierFactory();\n    case ContentIntegrityProtectionMethod.MerkleHashTree:\n      return new MerkleHashTree();\n    case ContentIntegrityProtectionMethod.UnifiedMerkleTree:\n      return new UnifiedMerkleHashTree();\n    default:\n      throw new Error('unsupported content integrity protection method');\n  }\n};\n","export default function binSearch(max, comparator) {\n  let left = 0;\n  let right = max;\n\n  while (left <= right) {\n    const mid = left + Math.floor((right - left) / 2);\n    const order = comparator(mid);\n\n    if (order < 0) {\n      left = mid + 1;\n    } else if (order > 0) {\n      right = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(left + 1);\n}\n","import {EventEmitter} from 'events';\nimport Injector from './ppspp/injector';\n\nconst DELIMITER = Buffer.from('4c93bf00ae13c37e5df3b7a9cea0413521fe1b08a627d065d7180b9d0738c666', 'hex');\nconst DELIMITER_LENGTH = DELIMITER.length;\nconst HEADER_INSTANCE_LENGTH = 37;\n\nexport class ChunkedWriteStream extends EventEmitter {\n  constructor(injector) {\n    super();\n    this.injector = injector;\n  }\n\n  write(buffer) {\n    const length = Buffer.alloc(4);\n    length.writeUInt32BE(buffer.length);\n    this.injector.appendData(Buffer.concat(\n      [\n        DELIMITER,\n        Buffer.from([0]),\n        length,\n        DELIMITER,\n        Buffer.from([1]),\n        length,\n      ],\n      HEADER_INSTANCE_LENGTH * 2,\n    ));\n\n    this.injector.appendData(buffer);\n  }\n}\n\nexport class ChunkedWriteStreamInjector extends EventEmitter {\n  start() {\n    const data = Buffer.alloc(3500000 / 8);\n    data.fill(255);\n\n    Injector.create().then(injector => {\n      this.injector = injector;\n\n      const writer = new ChunkedWriteStream(injector);\n      this.intervalId = setInterval(() => writer.write(data), 1000);\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n\nclass AbstractChunkedReadStream extends EventEmitter {\n  constructor(swarm) {\n    super();\n\n    this.swarm = swarm;\n\n    this.handleWarmupSwarmData = this.handleWarmupSwarmData.bind(this);\n    this.handleSwarmData = this.handleSwarmData.bind(this);\n\n    this.chunkBufferLength = 0;\n    this.nextDataOffset = 0;\n    this.nextDataLength = 0;\n\n    this.swarm.on('data', this.handleWarmupSwarmData);\n  }\n\n  handleWarmupSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const delimiterIndex = data[i].indexOf(DELIMITER);\n      if (delimiterIndex === -1 || delimiterIndex + HEADER_INSTANCE_LENGTH > data[i].length) {\n        continue;\n      }\n\n      this.swarm.removeListener('data', this.handleWarmupSwarmData);\n      this.swarm.on('data', this.handleSwarmData);\n\n      this.readHeader(data[i], delimiterIndex);\n      this.handleSwarmData(data.slice(i));\n\n      break;\n    }\n  }\n\n  readHeader(data, offset) {\n    const instance = data.readUInt8(offset + DELIMITER_LENGTH);\n    this.nextDataOffset = offset + HEADER_INSTANCE_LENGTH * (2 - instance);\n    this.nextDataLength = data.readUInt32BE(offset + DELIMITER_LENGTH + 1);\n  }\n\n  handleSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const lastChunkOffset = this.chunkBufferLength;\n\n      this.chunkBufferLength += data[i].length;\n\n      const nextDataEnd = this.nextDataOffset + this.nextDataLength;\n      if (this.chunkBufferLength < nextDataEnd) {\n        this.handleData(data[i], lastChunkOffset);\n        continue;\n      }\n\n      const lastChunkEnd = nextDataEnd - lastChunkOffset;\n      this.handleEndData(data[i], lastChunkEnd);\n\n      // find the next header or defer to handleWarmupSwarmData if it hasn't arrived\n      if (this.chunkBufferLength - nextDataEnd <= HEADER_INSTANCE_LENGTH) {\n        this.swarm.removeListener('data', this.handleSwarmData);\n        this.swarm.on('data', this.handleWarmupSwarmData);\n\n        this.chunkBufferLength = 0;\n        this.handleWarmupSwarmData(data.slice(i));\n        return;\n      }\n\n      this.chunkBufferLength = 0;\n      this.readHeader(data[i], lastChunkEnd);\n      i--;\n    }\n  }\n}\n\nexport class ChunkedFragmentedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.firstEmitted = false;\n  }\n\n  handleData(data, lastChunkOffset) {\n    if (!this.firstEmitted) {\n      if (this.chunkBufferLength > this.nextDataOffset) {\n        this.emit('start', data.slice(this.nextDataOffset - lastChunkOffset));\n        this.firstEmitted = true;\n      }\n\n      return;\n    }\n\n    this.emit('data', data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.emit('end', data.slice(0, lastChunkEnd));\n    this.firstEmitted = false;\n  }\n}\n\nexport class ChunkedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.chunkBuffer = [];\n  }\n\n  handleData(data) {\n    this.chunkBuffer.push(data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.chunkBuffer.push(data);\n\n    // trim export data range and emit\n    const chunkSlice = this.chunkBuffer.slice();\n\n    chunkSlice[chunkSlice.length - 1] = chunkSlice[chunkSlice.length - 1].slice(0, lastChunkEnd);\n\n    let firstChunkStart = this.nextDataOffset;\n    if (firstChunkStart > chunkSlice[0].length) {\n      firstChunkStart -= chunkSlice[0].length;\n      chunkSlice.shift();\n    }\n    chunkSlice[0] = chunkSlice[0].slice(firstChunkStart);\n\n    this.emit(\n      'data',\n      {\n        chunks: chunkSlice,\n        length: this.nextDataLength,\n      },\n    );\n\n    this.chunkBuffer = [];\n  }\n}\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport createRandomId from './utils/createRandomId';\n\nexport class Server {\n  constructor(props = {}) {\n    this.queue = [];\n    this.dhtClient = props.dhtClient || new dht.Client(createRandomId());\n    this.ppsppClient = props.ppsppClient || new ppspp.Client();\n  }\n}\n\nexport class ConnManager {\n  constructor(server) {\n    this.server = server;\n  }\n\n  bootstrap() {\n    const id = createRandomId();\n\n    const data = {\n      type: 'bootstrap',\n      bootstrapId: arrayBufferToHex(this.server.dhtClient.id),\n      id: arrayBufferToHex(id),\n    };\n    const conn = Conn.open();\n    const client = this.createClient(conn);\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.server.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.server.ppsppClient.createChannel(channel);\n      }\n    });\n\n    this.server.queue.push(client);\n    if (this.server.queue.length > 6) {\n      this.server.queue.shift().close();\n    }\n    // setTimeout(() => client.close(), Math.random() * 30000);\n\n    return Promise.resolve({data, conn: conn.remote});\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    mediator.on('connection', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Conn extends EventEmitter {\n  constructor(remote) {\n    super();\n\n    this.remote = remote || new Conn(this);\n    this.remote.remote = this;\n\n    this.readyState = this.remote.readyState || Conn.ReadyStates.CONNECTING;\n\n    this.onmessage = () => {};\n  }\n\n  send(data) {\n    if (this.readyState === Conn.ReadyStates.OPEN) {\n      setImmediate(() => {\n        this.remote.emit('message', {data});\n        this.remote.onmessage({data});\n      });\n    }\n  }\n\n  addEventListener(...args) {\n    this.on(...args);\n  }\n\n  removeEventListener(...args) {\n    this.removeListener(...args);\n  }\n\n  static open() {\n    const conn = new Conn();\n    conn.open();\n    conn.remote.open();\n    return conn;\n  }\n\n  open() {\n    this.readyState = Conn.ReadyStates.OPEN;\n    this.remote.readyState = Conn.ReadyStates.OPEN;\n    this.emit('open');\n  }\n\n  close() {\n    this.readyState = Conn.ReadyStates.CLOSING;\n    this.remote.readyState = Conn.ReadyStates.CLOSING;\n\n    this.remote.emit('close');\n    this.emit('close');\n\n    this.readyState = Conn.ReadyStates.CLOSED;\n    this.remote.readyState = Conn.ReadyStates.CLOSED;\n\n    this.removeAllListeners();\n    this.remote.removeAllListeners();\n  }\n}\n\nConn.ReadyStates = {\n  CONNECTING: 'connecting',\n  OPEN: 'open',\n  CLOSING: 'closing',\n  CLOSED: 'closed',\n};\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case 'connection':\n        this.handleConnection(data);\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  handleConnection({id}) {\n    const datachannels = Mediator.datachannels[id];\n    delete Mediator.datachannels[id];\n\n    Object.entries(datachannels).forEach(([label, channel]) => this.emit('datachannel', label, channel));\n    this.emit('open');\n  }\n\n  sendConnection(datachannels) {\n    const id = Mediator.nextId ++;\n    Mediator.datachannels[id] = datachannels;\n\n    this.conn.send(JSON.stringify({\n      type: 'connection',\n      id,\n    }));\n\n    this.emit('open');\n  }\n}\n\nMediator.nextId = 0;\nMediator.datachannels = {};\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.datachannels = {};\n    this.conns = [];\n\n    mediator.on('datachannel', this.handleDataChannel.bind(this));\n    mediator.once('open', this.handleOpen.bind(this));\n  }\n\n  handleDataChannel(label, conn) {\n    const channel = new ClientDataChannel(this, label, conn);\n    this.conns.push(channel);\n    this.emit('datachannel', {label, channel});\n  }\n\n  handleOpen() {\n    setImmediate(() => {\n      this.conns.forEach(conn => conn.open());\n      this.emit('open');\n    });\n  }\n\n  createDataChannel(label) {\n    const channel = new ClientDataChannel(this, label);\n    this.datachannels[label] = channel;\n    this.conns.push(channel);\n    return channel;\n  }\n\n  init() {\n    this.mediator.sendConnection(this.datachannels);\n  }\n\n  close() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n\n    this.conns.forEach(conn => conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n}\n\nexport class ClientDataChannel extends Conn {\n  constructor(client, label, remote) {\n    super(remote);\n\n    this.client = client;\n    this.label = label;\n  }\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","import {LiveSignatureAlgorithm} from './constants';\n\nconst isRsaAlgorithm = liveSignatureAlgorithm => {\n  const rsaAlgorithms = [\n    LiveSignatureAlgorithm.RSASHA1,\n    LiveSignatureAlgorithm.RSASHA256,\n  ];\n  return rsaAlgorithms.includes(liveSignatureAlgorithm);\n};\n\nexport default class SwarmId {\n  constructor(\n    liveSignatureAlgorithm,\n    publicKey,\n    publicExponent,\n    modulusLength,\n  ) {\n    this.liveSignatureAlgorithm = liveSignatureAlgorithm;\n    this.publicKey = Buffer.from(publicKey);\n    this.publicExponent = publicExponent;\n    this.modulusLength = modulusLength;\n  }\n\n  getLiveSignatureByteLength() {\n    switch (this.liveSignatureAlgorithm) {\n      case LiveSignatureAlgorithm.RSASHA1:\n      case LiveSignatureAlgorithm.RSASHA256:\n        return this.modulusLength / 8;\n      case LiveSignatureAlgorithm.ECDSAP256SHA256:\n        return 64;\n      case LiveSignatureAlgorithm.ECDSAP384SHA384:\n        return 96;\n      default:\n        throw new Error('unsupported live signature algorithm');\n    }\n  }\n\n  getKeyParams() {\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      return {\n        publicExponent: new Uint8Array(this.publicExponent),\n        modulusLength: this.modulusLength,\n      };\n    }\n    return {};\n  }\n\n  byteLength() {\n    const metadataLength = isRsaAlgorithm(this.liveSignatureAlgorithm) ? 9 : 1;\n    return this.publicKey.length + metadataLength;\n  }\n\n  toBuffer() {\n    const buffer = Buffer.alloc(this.byteLength());\n    let length = 0;\n\n    buffer.writeUInt8(this.liveSignatureAlgorithm, length);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      Buffer.from(this.publicExponent).copy(buffer, length + 4 - this.publicExponent.length);\n      length += 4;\n\n      buffer.writeUInt32BE(this.modulusLength, length);\n      length += 4;\n    }\n\n    this.publicKey.copy(buffer, length);\n\n    return buffer;\n  }\n\n  read(buffer) {\n    let length = 0;\n\n    this.liveSignatureAlgorithm = buffer.readUInt8(0);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      this.publicExponent = buffer.slice(length, length + 4);\n      length += 4;\n\n      this.modulusLength = buffer.readUInt32BE(length);\n      length += 4;\n    }\n\n    this.publicKey = buffer.slice(length);\n  }\n\n  static from(values) {\n    if (ArrayBuffer.isView(values)) {\n      const swarmId = Object.create(SwarmId.prototype);\n      swarmId.read(Buffer.from(values));\n      return swarmId;\n    }\n\n    return new SwarmId(\n      values.liveSignatureAlgorithm,\n      values.publicKey,\n      values.publicExponent,\n      values.modulusLength,\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport approx from 'approximate-number';\nimport {scaleLinear} from 'd3-scale';\n\nimport './index.css';\n\nclass ToggleButton extends Component {\n  static defaultProps = {\n    expanded: false,\n  };\n\n  render() {\n    const buttonClasses = classNames({\n      'diagnostic_menu__toggle_button': true,\n      'diagnostic_menu__toggle_button--expanded': this.props.expanded,\n    });\n\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={buttonClasses}\n      />\n    );\n  }\n}\n\nconst formatNumber = value => isFinite(value) ? approx(value) : String(value);\n\n// TODO: total downloaded\n// TODO: total discarded\n// TODO: upload/download rate\nclass SwarmState extends Component {\n  render() {\n    const {scheduler} = this.props.value;\n\n    const values = [\n      {\n        key: 'totalSends',\n        value: formatNumber(scheduler.totalSends),\n      },\n      {\n        key: 'totalRequests',\n        value: formatNumber(scheduler.totalRequests),\n      },\n      {\n        key: 'totalRequestsReceived',\n        value: formatNumber(scheduler.totalRequestsReceived),\n      },\n      {\n        key: 'totalDroppedRequests',\n        value: formatNumber(scheduler.totalDroppedRequests),\n      },\n      {\n        key: 'totalReceived',\n        value: formatNumber(scheduler.totalReceived),\n      },\n      {\n        key: 'totalAdded',\n        value: formatNumber(scheduler.totalAdded),\n      },\n      {\n        key: 'totalCancelled',\n        value: formatNumber(scheduler.totalCancelled),\n      },\n      {\n        key: 'ackUnknownSend',\n        value: formatNumber(scheduler.ackUnknownSend),\n      },\n      {\n        key: 'lastCompletedBin',\n        value: scheduler.lastCompletedBin,\n      },\n      {\n        key: 'picker.firstLoadedChunk',\n        value: scheduler.loadedChunks.min(),\n      },\n      {\n        key: 'picker.firstRequestedChunk',\n        value: scheduler.requestedChunks.min(),\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(scheduler.chunkRate.value()),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    return (\n      <div className=\"swarm_state__container\">\n        <table>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass PeerStateTable extends Component {\n  render() {\n    const peerState = this.props.value;\n\n    const values = [\n      {\n        key: 'chunkIntervalMean',\n        value: formatNumber(peerState.chunkIntervalMean.value()),\n      },\n      {\n        key: 'wasteRate',\n        value: formatNumber(peerState.wasteRate.value()),\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(peerState.chunkRate.value()),\n      },\n      {\n        key: 'ledbat.baseDelay',\n        value: formatNumber(peerState.ledbat.baseDelay.getMin()),\n      },\n      {\n        key: 'ledbat.currentDelay',\n        value: formatNumber(peerState.ledbat.currentDelay.getMin()),\n      },\n      {\n        key: 'ledbat.rttMean',\n        value: formatNumber(peerState.ledbat.rttMean.value()),\n      },\n      {\n        key: 'ledbat.rttVar',\n        value: formatNumber(peerState.ledbat.rttVar.value()),\n      },\n      {\n        key: 'ledbat.cwnd',\n        value: formatNumber(peerState.ledbat.cwnd),\n      },\n      {\n        key: 'ledbat.cto',\n        value: formatNumber(peerState.ledbat.cto),\n      },\n      {\n        key: 'ledbat.flightSize',\n        value: formatNumber(peerState.ledbat.flightSize),\n      },\n      {\n        key: 'validChunks',\n        value: formatNumber(peerState.validChunks),\n      },\n      {\n        key: 'requestQueue.length',\n        value: formatNumber(peerState.requestQueue.length),\n      },\n      {\n        key: 'requestedChunks.length',\n        value: formatNumber(peerState.requestedChunks.length),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    const {\n      startBin,\n      endBin,\n    } = this.props;\n\n    rows.push(\n      <tr key=\"availableChunks\">\n        <td colSpan=\"2\">\n          Available\n          <AvailabilityMapChart\n            value={this.props.value.availableChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"sentChunks\">\n        <td colSpan=\"2\">\n          Sent\n          <AvailabilityMapChart\n            value={this.props.value.sentChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"receivedChunks\">\n        <td colSpan=\"2\">\n          Received\n          <AvailabilityMapChart\n            value={this.props.value.receivedChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    return (\n      <table>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nclass AvailabilityMapChart extends Component {\n  static defaultProps = {\n    width: 300,\n    height: 20,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.canvas = React.createRef();\n    this.scratchCanvas = document.createElement('canvas');\n  }\n\n  componentDidUpdate() {\n    if (!this.canvas.current) {\n      return;\n    }\n\n    const {value} = this.props;\n    const min = isNaN(this.props.startBin)\n      ? value.min()\n      : this.props.startBin;\n    const max = isNaN(this.props.endBin)\n      ? value.max()\n      : this.props.endBin;\n\n    if (!isFinite(min) || !isFinite(max) || isNaN(min) || isNaN(max)) {\n      return;\n    }\n\n    this.scratchCanvas.height = this.props.height;\n    this.scratchCanvas.width = this.props.width;\n\n    const ctx = this.scratchCanvas.getContext('2d');\n\n    const scale = scaleLinear()\n      .domain([min, max])\n      .range([0, this.props.width]);\n\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, this.props.width, this.props.height);\n\n    ctx.fillStyle = '#ccc';\n\n    let lastStart = -1;\n    for (let i = min; i <= max; i += 2) {\n      if (!value.values.get((i + 2) / 2) || i === max) {\n        if (lastStart !== -1) {\n          ctx.fillRect(scale(lastStart), 0, scale(i) - scale(lastStart), 20);\n\n          lastStart = -1;\n        }\n      } else if (lastStart === -1) {\n        lastStart = i;\n      }\n    }\n\n    this.canvas.current.getContext('2d').drawImage(this.scratchCanvas, 0, 0);\n  }\n\n  render() {\n    return (\n      <canvas\n        height={this.props.height}\n        width={this.props.width}\n        ref={this.canvas}\n      />\n    );\n  }\n}\n\nclass PeerState extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n  }\n\n  render() {\n    let table;\n    if (this.state.expanded) {\n      table = (\n        <PeerStateTable\n          value={this.props.value}\n          startBin={this.props.startBin}\n          endBin={this.props.endBin}\n        />\n      );\n    }\n\n    return (\n      <div className=\"peer_state__container\">\n        <div className=\"peer_state__header\">\n          <ToggleButton\n            onClick={this.handleButtonClick}\n            expanded={this.state.expanded}\n          />\n          <h4 className=\"peer_state__title\">\n            {this.props.value.peer.localId} : {this.props.value.peer.remoteId}\n          </h4>\n        </div>\n        {table}\n      </div>\n    );\n  }\n}\n\nclass DiagnosticMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n\n    this.scheduleUpdate();\n  }\n\n  handleUpdate = () => {\n    if (this.state.expanded) {\n      this.forceUpdate(this.scheduleUpdate);\n    }\n  }\n\n  scheduleUpdate = () => {\n    window.requestAnimationFrame(this.handleUpdate);\n  }\n\n  render() {\n    const containerClasses = classNames(\n      this.props.containerClass,\n      {\n        'diagnostic_menu__container': true,\n        'diagnostic_menu__container--expanded': this.state.expanded,\n      },\n    );\n\n    const {\n      lastCompletedBin,\n      liveDiscardWindow,\n    } = this.props.swarm.scheduler;\n    const startBin = lastCompletedBin - liveDiscardWindow;\n    const endBin = lastCompletedBin + liveDiscardWindow;\n\n    let swarmState;\n    let peerStates;\n    if (this.state.expanded) {\n      swarmState = (\n        <SwarmState\n          value={this.props.swarm}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      );\n\n      peerStates = Object.entries(this.props.swarm.scheduler.peerStates).map(([key, peerState]) => (\n        <PeerState\n          key={key}\n          value={peerState}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      ));\n    }\n\n    return (\n      <div className={containerClasses}>\n        <ToggleButton\n          onClick={this.handleButtonClick}\n          expanded={this.state.expanded}\n        />\n        {swarmState}\n        {peerStates}\n      </div>\n    );\n  }\n}\n\nexport default DiagnosticMenu;\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport hexToUint8Array from './hexToUint8Array';\n\nexport class Client {\n  constructor(connManager, conn, bootstrap) {\n    const dhtClientId = hexToUint8Array(bootstrap.id);\n    const bootstrapId = hexToUint8Array(bootstrap.bootstrapId);\n\n    this.connManager = connManager;\n    this.bootstrap = bootstrap;\n    this.swarmUri = bootstrap.swarmUri;\n\n    const client = connManager.createClient(conn);\n\n    this.dhtClient = new dht.Client(dhtClientId);\n    this.dhtClient.on('peers.discover', this.handlePeersDiscover.bind(this));\n    this.dhtClient.on('receive.connect.request', this.handleReceiveConnectRequest.bind(this));\n    this.dhtClient.createChannel(bootstrapId, client.createDataChannel('dht'));\n\n    this.ppsppClient = new ppspp.Client();\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    client.init();\n  }\n\n  static create(connManager) {\n    return connManager.bootstrap().then(({data, conn}) => {\n      return new Client(connManager, conn, data);\n    });\n  }\n\n  handlePeersDiscover(id) {\n    // console.log('creating client for', ids);\n    const sub = new dht.SubChannel(this.dhtClient, id);\n    const client = this.connManager.createClient(sub);\n\n    const dhtChannel = client.createDataChannel('dht');\n    const ppsppChannel = client.createDataChannel('ppspp');\n\n    const timeout = setTimeout(() => client.close(), 10000);\n    const init = () => {\n      clearTimeout(timeout);\n      client.init();\n    };\n\n    dhtChannel.addEventListener('close', () => client.close());\n\n    this.dhtClient.createChannel(id, dhtChannel);\n    this.ppsppClient.createChannel(ppsppChannel);\n\n    this.dhtClient.send(id, 'connect.request', {channelId: sub.id}, init);\n  }\n\n  handleReceiveConnectRequest({data: {channelId, from}, callback}) {\n    // if (this.dhtClient.channels.count() > 10) {\n    //   return;\n    // }\n\n    // console.log('handleReceiveConnectRequest', {channelId, from, callback});\n    const id = new hexToUint8Array(from);\n    const client = this.connManager.createClient(new dht.SubChannel(this.dhtClient, id, channelId));\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.ppsppClient.createChannel(channel);\n      }\n    });\n\n    callback({});\n  }\n}\n","export default class EMA {\n  constructor(alpha) {\n    this.mean = 0;\n    this.alpha = alpha;\n    this.weight = 1;\n  }\n\n  update(value) {\n    this.mean = this.alpha * value + (1 - this.alpha) * this.mean;\n    this.weight *= this.alpha;\n  }\n\n  set(value) {\n    this.mean = value;\n    this.weight = 0;\n  }\n\n  isEmpty() {\n    return this.weight === 1;\n  }\n\n  value() {\n    return this.mean / (1 - this.weight);\n  }\n}\n","export default class RingBuffer {\n  constructor(capacity) {\n    this.setCapacity(capacity);\n  }\n\n  setCapacity(capacity) {\n    this.capacity = capacity;\n    this.lastIndex = capacity;\n    this.values = new Array(capacity);\n\n    for (let i = 0; i < capacity; i ++) {\n      this.values[i] = this.createEmptyValue(i);\n    }\n  }\n\n  advanceLastIndex(lastIndex) {\n    if (this.lastIndex > lastIndex) {\n      return;\n    }\n\n    let firstEmptyIndex = this.lastIndex;\n    if (lastIndex - firstEmptyIndex > this.capacity) {\n      firstEmptyIndex = lastIndex - this.capacity;\n    }\n    for (let i = firstEmptyIndex; i <= lastIndex; i ++) {\n      const index = i % this.capacity;\n      this.values[index] = this.createEmptyValue(i, this.values[index]);\n    }\n    this.lastIndex = lastIndex + 1;\n  }\n\n  createEmptyValue() {\n    return undefined;\n  }\n\n  set(index, value) {\n    this.advanceLastIndex(index);\n    this.values[index % this.capacity] = value;\n  }\n\n  get(index) {\n    if (index < this.lastIndex - this.capacity || index >= this.lastIndex) {\n      return undefined;\n    }\n    return this.values[index % this.capacity];\n  }\n\n  push(value) {\n    this.set(this.lastIndex, value);\n  }\n}\n","import EMA from './ema';\nimport RingBuffer from './RingBuffer';\n\nclass DelayBuffer extends RingBuffer {\n  constructor(capacity, window) {\n    super(capacity);\n    this.min = Infinity;\n    this.window = window;\n  }\n\n  createEmptyValue() {\n    return Infinity;\n  }\n\n  getMin() {\n    return this.min;\n  }\n\n  update(delay) {\n    const now = Math.floor(Date.now() / this.window);\n\n    if (now >= this.lastIndex) {\n      this.advanceLastIndex(now);\n      this.min = Math.min(...this.values);\n    }\n\n    if (delay < this.get(now)) {\n      this.set(now, delay);\n      this.min = Math.min(this.min, delay);\n    }\n  }\n}\n\n// rfc6817\nconst TARGET = 100;\nconst ALLOWED_INCREASE = 1;\nconst GAIN = 1;\nconst CURRENT_HISTORY = 4;\nconst CURRENT_HISTORY_INTERVAL = 1000;\nconst BASE_HISTORY = 10;\nconst BASE_HISTORY_INTERVAL = 60 * 1000;\nconst INIT_CWND = 2;\nconst MIN_CWND = 2;\n\n// max safe WebRTC data channel message size\nconst MSS = 8 * 1024;\n\n// rfc6298\nconst COEF_G = 1;\nconst COEF_K = 4;\n\n// jacobson, v. \"congestion avoidance and control\"\n// doi: 10.1145/52325.52356\nconst COEF_ALPHA = 0.125;\nconst COEF_BETA = 0.25;\n\nexport default class LEDBAT {\n  constructor(target = TARGET, mss = MSS) {\n    this.target = target;\n    this.mss = mss;\n    this.flightSize = 0;\n\n    // the amount of data that is allowed to be outstanding in an rtt in bytes\n    this.cwnd = INIT_CWND * MSS;\n\n    // the congestion timeout\n    this.cto = 1000;\n    this.currentDelay = new DelayBuffer(CURRENT_HISTORY, CURRENT_HISTORY_INTERVAL);\n    this.baseDelay = new DelayBuffer(BASE_HISTORY, BASE_HISTORY_INTERVAL);\n\n    this.lastDataLoss = 0;\n    this.lastAckTime = Infinity;\n    this.rttMean = new EMA(COEF_ALPHA);\n    this.rttVar = new EMA(COEF_BETA);\n\n    this.ackSize = 0;\n  }\n\n  addSent(bytes) {\n    this.flightSize += bytes;\n  }\n\n  addDelaySample(delaySample, bytes = MSS) {\n    this.currentDelay.update(delaySample);\n    this.baseDelay.update(delaySample);\n\n    this.ackSize += bytes;\n\n    this.lastAckTime = Date.now();\n  }\n\n  digestDelaySamples() {\n    this.checkCTO();\n\n    if (this.ackSize === 0) {\n      return;\n    }\n\n    const queuingDelay = Math.abs(this.currentDelay.getMin() - this.baseDelay.getMin());\n    const offTarget = (this.target - queuingDelay) / this.target;\n    this.cwnd += GAIN * offTarget * this.ackSize * this.mss / this.cwnd;\n\n    const maxAllowedCwnd = this.flightSize + ALLOWED_INCREASE * this.mss;\n    this.cwnd = Math.max(Math.min(this.cwnd, maxAllowedCwnd), MIN_CWND * this.mss);\n\n    this.flightSize = Math.max(0, this.flightSize - this.ackSize);\n    this.ackSize = 0;\n  }\n\n  checkCTO() {\n    if (this.flightSize > 0 && Date.now() - this.cto > this.lastAckTime) {\n      this.cwnd = this.mss;\n      this.cto = 2 * this.cto;\n    }\n  }\n\n  addRttSample(rtt) {\n    if (this.rttMean.isEmpty()) {\n      this.rttMean.set(rtt);\n      this.rttVar.set(rtt / 2);\n    } else {\n      this.rttVar.update(Math.abs(this.rttMean.value() - rtt));\n      this.rttMean.update(rtt);\n    }\n\n    this.cto = this.rttMean.value() + Math.max(COEF_G, COEF_K * this.rttVar.value());\n    if (this.cto < 1000) {\n      this.cto = 1000;\n    }\n  }\n\n  onDataLoss(bytes, retransmitting = false) {\n    const now = Date.now();\n    if (this.lastDataLoss !== 0 && now - this.lastDataLoss < this.rttMean.value()) {\n      return;\n    }\n    this.lastDataLoss = now;\n\n    this.cwnd = Math.min(this.cwnd, Math.max(this.cwnd / 2, MIN_CWND * this.mss));\n\n    if (!retransmitting) {\n      this.flightSize = Math.max(0, this.flightSize - bytes);\n    }\n  }\n\n  static computeOneWayDelay(timestamp) {\n    return Date.now() - timestamp;\n  }\n}\n","import {Buffer} from 'buffer';\nimport Address from './address';\nimport {MerkleHashTreeFunctionByteLengths} from './integrity';\n\nimport {\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n} from './constants';\n\nexport const createChunkAddressFieldType = (addressingMethod, chunkSize) => {\n  class Bin32ChunkAddress {\n    constructor(value = 0) {\n      this.type = ChunkAddressingMethod.Bin32;\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n\n    rangeByteLength() {\n      const [start, end] = Address.binBounds(this.value);\n      return (end - start + 1) * chunkSize;\n    }\n\n    static from({bin}) {\n      return new Bin32ChunkAddress(bin);\n    }\n  }\n\n  class ChunkRange32ChunkAddress {\n    constructor(start = 0, end = 0) {\n      this.type = ChunkAddressingMethod.ChunkRange32;\n      this.start = start;\n      this.end = end;\n    }\n\n    read(buffer, offset) {\n      this.start = buffer.readUInt32BE(offset);\n      this.end = buffer.readUInt32BE(offset + 4);\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.start, offset);\n      buffer.writeUInt32BE(this.end, offset + 4);\n    }\n\n    rangeByteLength() {\n      return (this.end - this.start + 1) * chunkSize;\n    }\n\n    static from({start, end}) {\n      return new ChunkRange32ChunkAddress(start, end);\n    }\n  }\n\n  switch (addressingMethod) {\n    case ChunkAddressingMethod.Bin32:\n      return Bin32ChunkAddress;\n    case ChunkAddressingMethod.ChunkRange32:\n      return ChunkRange32ChunkAddress;\n    default:\n      throw new Error('unsupported chunk addressing method');\n  }\n};\n\nconst createBufferFieldType = byteLength => {\n  class BufferField {\n    constructor(value = Buffer.alloc(byteLength)) {\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      buffer.copy(this.value, 0, offset, offset + byteLength);\n      return byteLength;\n    }\n\n    byteLength() {\n      return byteLength;\n    }\n\n    write(buffer, offset) {\n      this.value.copy(buffer, offset);\n    }\n  }\n\n  return BufferField;\n};\n\nexport const createLiveSignatureFieldType = (liveSignatureAlgorithm, swarmId) => {\n  const byteLength = swarmId.getLiveSignatureByteLength();\n\n  class LiveSignatureField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = liveSignatureAlgorithm;\n    }\n  }\n\n  return LiveSignatureField;\n};\n\nexport const createIntegrityHashFieldType = merkleHashTreeFunction => {\n  const byteLength = MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction];\n\n  class IntegrityHashField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = merkleHashTreeFunction;\n    }\n  }\n\n  return IntegrityHashField;\n};\n\nexport const createEncoding = (ChunkAddress, IntegrityHash, LiveSignature) => {\n  class Uint8ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt8(offset);\n      return 1;\n    }\n\n    byteLength() {\n      return 1;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt8(this.value, offset);\n    }\n  }\n\n  class Uint32ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n  }\n\n  class VersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.Version;\n    }\n  }\n\n  class MinimumVersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.MinimumVersion;\n    }\n  }\n\n  class SwarmIdentifierProtocolOption {\n    constructor(value = []) {\n      this.type = ProtocolOptions.SwarmIdentifier;\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt16BE(offset);\n      offset += 2;\n\n      this.value = buffer.slice(offset, offset + length);\n\n      return length + 2;\n    }\n\n    byteLength() {\n      return this.value.length + 2;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt16BE(this.value.length, offset);\n      this.value.copy(buffer, offset + 2);\n    }\n  }\n\n  class ContentIntegrityProtectionMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ContentIntegrityProtectionMethod.MerkleHashTree) {\n      super(method);\n      this.type = ProtocolOptions.ContentIntegrityProtectionMethod;\n    }\n  }\n\n  class MerkleHashTreeFunctionProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = MerkleHashTreeFunction.SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.MerkleHashTreeFunction;\n    }\n  }\n\n  class LiveSignatureAlgorithmProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = LiveSignatureAlgorithm.ECDSAP256SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.LiveSignatureAlgorithm;\n    }\n  }\n\n  class ChunkAddressingMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ChunkAddressingMethod.ChunkRange32) {\n      super(method);\n      this.type = ProtocolOptions.ChunkAddressingMethod;\n    }\n  }\n\n  class LiveDiscardWindowProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.LiveDiscardWindow;\n    }\n  }\n\n  class SupportedMessagesProtocolOption {\n    constructor(messageTypes = Object.values(MessageTypes).filter(v => !isNaN(v))) {\n      this.type = ProtocolOptions.SupportedMessages;\n      this.value = {};\n      messageTypes.forEach(type => this.value[type] = true);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt8(offset);\n      offset += 1;\n\n      for (let i = 0; i < length; i ++) {\n        const byte = buffer[offset + i];\n        for (let j = 0; j < 8; j ++) {\n          this.value[i * 8 + j] = Boolean(byte & (1 << 7 - j));\n        }\n      }\n\n      return length + 1;\n    }\n\n    bitmapByteLength() {\n      return Math.ceil(Math.max(...Object.keys(this.value)) / 8) + 1;\n    }\n\n    toBitmap() {\n      const length = this.bitmapByteLength();\n      const buffer = Buffer.alloc(length);\n\n      for (let i = 0; i < length; i ++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j ++) {\n          byte = (byte << 1) | (this.value[i * 8 + j] ? 1 : 0);\n        }\n        buffer.writeUInt8(byte, i);\n      }\n      return buffer;\n    }\n\n    byteLength() {\n      return this.bitmapByteLength() + 1;\n    }\n\n    write(buffer, offset) {\n      const bitmap = this.toBitmap();\n      buffer.writeUInt8(bitmap.length, offset);\n      bitmap.copy(buffer, offset + 1);\n    }\n  }\n\n  class ChunkSizeProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.ChunkSize;\n    }\n  }\n\n  const protocolOptionRecordTypes = {\n    [ProtocolOptions.Version]: VersionProtocolOption,\n    [ProtocolOptions.MinimumVersion]: MinimumVersionProtocolOption,\n    [ProtocolOptions.SwarmIdentifier]: SwarmIdentifierProtocolOption,\n    [ProtocolOptions.ContentIntegrityProtectionMethod]: ContentIntegrityProtectionMethodProtocolOption,\n    [ProtocolOptions.MerkleHashTreeFunction]: MerkleHashTreeFunctionProtocolOption,\n    [ProtocolOptions.LiveSignatureAlgorithm]: LiveSignatureAlgorithmProtocolOption,\n    [ProtocolOptions.ChunkAddressingMethod]: ChunkAddressingMethodProtocolOption,\n    [ProtocolOptions.LiveDiscardWindow]: LiveDiscardWindowProtocolOption,\n    [ProtocolOptions.SupportedMessages]: SupportedMessagesProtocolOption,\n    [ProtocolOptions.ChunkSize]: ChunkSizeProtocolOption,\n  };\n\n  class HandshakeMessage {\n    constructor(channelId = 0, options = []) {\n      this.type = MessageTypes.HANDSHAKE;\n      this.channelId = channelId;\n      this.options = options;\n    }\n\n    read(buffer, offset) {\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(offset);\n      length += 4;\n\n      while (offset + length < buffer.length) {\n        const code = buffer.readUInt8(offset + length);\n        length += 1;\n\n        if (code === ProtocolOptions.EndOption) {\n          break;\n        }\n\n        const RecordType = protocolOptionRecordTypes[code];\n        const option = new RecordType();\n\n        length += option.read(buffer, offset + length);\n        this.options.push(option);\n      }\n\n      return length;\n    }\n\n    byteLength() {\n      return this.options.reduce((length, option) => length + option.byteLength() + 1, 0) + 5;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, offset);\n      length += 4;\n\n      this.options.forEach(option => {\n        buffer.writeUInt8(option.type, offset + length);\n        length += 1;\n\n        option.write(buffer, offset + length);\n        length += option.byteLength();\n      });\n\n      buffer.writeUInt8(ProtocolOptions.EndOption, offset + length);\n      length += 1;\n\n      return length;\n    }\n  }\n\n  class Timestamp {\n    constructor(value = Date.now()) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      const seconds = buffer.readInt32BE(offset);\n      const nanoseconds = buffer.readInt32BE(offset + 4);\n      this.value = seconds * 1e3 + nanoseconds / 1e6;\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeInt32BE(Math.floor(this.value / 1e3), offset);\n      buffer.writeInt32BE((this.value % 1e3) * 1e6, offset + 4);\n    }\n  }\n\n  class DataMessage {\n    constructor(address = new ChunkAddress(), data = [], timestamp = new Timestamp()) {\n      this.type = MessageTypes.DATA;\n      this.address = address;\n      this.data = Buffer.from(data);\n      this.timestamp = timestamp;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n\n      offset += length;\n      const dataLength = Math.min(this.address.rangeByteLength(), buffer.length - offset);\n      this.data = buffer.slice(offset, offset + dataLength);\n\n      return length + dataLength;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.data.length + 8;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.data.copy(buffer, offset + length);\n    }\n  }\n\n  class AddressMessage {\n    constructor(address = new ChunkAddress()) {\n      this.address = address;\n    }\n\n    read(buffer, offset) {\n      return this.address.read(buffer, offset);\n    }\n\n    byteLength() {\n      return this.address.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n    }\n  }\n\n  class AckMessage {\n    constructor(address = new ChunkAddress(), delaySample = new Timestamp()) {\n      this.type = MessageTypes.ACK;\n      this.address = address;\n      this.delaySample = delaySample;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.delaySample.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.delaySample.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.delaySample.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class HaveMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.HAVE;\n    }\n  }\n\n  class IntegrityMessage {\n    constructor(address = new ChunkAddress(), hash = new IntegrityHash()) {\n      this.type = MessageTypes.INTEGRITY;\n      this.address = address;\n      this.hash = hash;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.hash.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.hash.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.hash.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class SignedIntegrityMessage {\n    constructor(\n      address = new ChunkAddress(),\n      timestamp = new Timestamp(),\n      signature = new LiveSignature(),\n    ) {\n      this.type = MessageTypes.SIGNED_INTEGRITY;\n      this.address = address;\n      this.timestamp = timestamp;\n      this.signature = signature;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n      length += this.signature.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.timestamp.byteLength() + this.signature.byteLength();\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.signature.write(buffer, offset + length);\n    }\n  }\n\n  class RequestMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.REQUEST;\n    }\n  }\n\n  class CancelMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.CANCEL;\n    }\n  }\n\n  class EmptyMessage {\n    read() {\n      return 0;\n    }\n\n    byteLength() {\n      return 0;\n    }\n\n    write() {}\n  }\n\n  class ChokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.CHOKE;\n    }\n  }\n\n  class UnchokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.UNCHOKE;\n    }\n  }\n\n  const messageRecordTypes = {\n    [MessageTypes.HANDSHAKE]: HandshakeMessage,\n    [MessageTypes.DATA]: DataMessage,\n    [MessageTypes.ACK]: AckMessage,\n    [MessageTypes.HAVE]: HaveMessage,\n    [MessageTypes.INTEGRITY]: IntegrityMessage,\n    [MessageTypes.SIGNED_INTEGRITY]: SignedIntegrityMessage,\n    [MessageTypes.REQUEST]: RequestMessage,\n    [MessageTypes.CANCEL]: CancelMessage,\n    [MessageTypes.CHOKE]: ChokeMessage,\n    [MessageTypes.UNCHOKE]: UnchokeMessage,\n  };\n\n  class Messages {\n    constructor(values = []) {\n      this.values = values;\n      this.buffer = null;\n      this.offset = 0;\n    }\n\n    static from(values) {\n      if (values instanceof Messages) {\n        return values;\n      }\n      if (Array.isArray(values)) {\n        return new Messages(values);\n      }\n      throw new Error('unable to create Messages from unsupported type');\n    }\n\n    next() {\n      if (this.offset >= this.buffer.length) {\n        return;\n      }\n\n      const messageType = this.buffer.readUInt8(this.offset);\n      this.offset += 1;\n\n      const RecordType = messageRecordTypes[messageType];\n      const message = new RecordType();\n      this.values.push(message);\n\n      this.offset += message.read(this.buffer, this.offset);\n\n      return message;\n    }\n\n    toArray() {\n      // eslint-disable-next-line no-empty\n      while (this.next()) {}\n      return this.values;\n    }\n\n    read(buffer, offset) {\n      this.buffer = buffer;\n      this.offset = offset;\n      return 0;\n    }\n\n    byteLength() {\n      return this.values.reduce((length, message) => length + message.byteLength() + 1, 0);\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.values.forEach(message => {\n        buffer.writeUInt8(message.type, offset + length);\n        length += 1;\n\n        message.write(buffer, offset + length);\n        length += message.byteLength();\n      });\n\n      return length;\n    }\n  }\n\n  class Datagram {\n    constructor(channelId = 0, messages = []) {\n      this.channelId = channelId;\n      this.messages = Messages.from(messages);\n    }\n\n    read(data) {\n      const buffer = Buffer.from(data);\n\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(0);\n      length += 4;\n\n      length += this.messages.read(buffer, length);\n\n      return length;\n    }\n\n    byteLength() {\n      return this.messages.byteLength() + 4;\n    }\n\n    write(buffer) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, 0);\n      length += 4;\n\n      length += this.messages.write(buffer, length);\n\n      return length;\n    }\n\n    toBuffer() {\n      const buffer = Buffer.alloc(this.byteLength());\n      this.write(buffer);\n      return buffer;\n    }\n\n    static from(buffer) {\n      const datagram = new Datagram();\n      datagram.read(buffer);\n      return datagram;\n    }\n  }\n\n  return {\n    VersionProtocolOption,\n    MinimumVersionProtocolOption,\n    SwarmIdentifierProtocolOption,\n    ContentIntegrityProtectionMethodProtocolOption,\n    MerkleHashTreeFunctionProtocolOption,\n    LiveSignatureAlgorithmProtocolOption,\n    ChunkAddressingMethodProtocolOption,\n    LiveDiscardWindowProtocolOption,\n    SupportedMessagesProtocolOption,\n    ChunkSizeProtocolOption,\n    HandshakeMessage,\n    Timestamp,\n    DataMessage,\n    AckMessage,\n    HaveMessage,\n    IntegrityMessage,\n    SignedIntegrityMessage,\n    RequestMessage,\n    CancelMessage,\n    ChokeMessage,\n    UnchokeMessage,\n    Datagram,\n    LiveSignature,\n    IntegrityHash,\n    ChunkAddress,\n  };\n};\n","function createMask(bits) {\n  let mask = 0;\n  for (let i = 0; i < bits; i ++) {\n    mask = (mask << 1) | 1;\n  }\n  return mask;\n}\n\nfunction applyMask(byte, mask, value) {\n  if (value) {\n    return byte | mask;\n  }\n  return byte & (255 ^ mask);\n}\n\nexport default class BitArray {\n  constructor(capacity = 0) {\n    this.offset = 0;\n    this.resize(capacity);\n  }\n\n  // TODO: copy old values..?\n  resize(capacity) {\n    this.capacity = capacity;\n    this.values = new Uint8Array(Math.ceil(capacity / 8));\n  }\n\n  adjustOffset(index) {\n    const {offset} = this;\n    const distance = (index - offset) - this.capacity;\n    if (distance <= 0) {\n      return;\n    }\n\n    this.offset += distance;\n    this.unsafelySetRange(offset + 1, offset + distance + 1, false);\n  }\n\n  getByteIndex(index) {\n    return Math.floor(index / 8) % this.values.length;\n  }\n\n  getBitIndex(index) {\n    return index % 8;\n  }\n\n  getIndexValue(byteIndex, bitIndex) {\n    const byteOffset = this.offset % (this.values.length * 8);\n    const offset = byteIndex < byteOffset\n      ? this.offset + (this.values.length * 8) - byteOffset\n      : this.offset;\n    return offset + (byteIndex * 8 + bitIndex);\n  }\n\n  setRange(start, end, value = true) {\n    if (end - start === 1) {\n      this.set(start, value);\n      return;\n    }\n\n    if (end <= this.offset) {\n      return;\n    }\n    start = Math.max(start, this.offset);\n\n    this.adjustOffset(end);\n    this.unsafelySetRange(start, end, value);\n  }\n\n  unsafelySetRange(start, end, value = true, fillEndByte = false) {\n    if (end - start >= this.capacity) {\n      this.values.fill(value ? 255 : 0);\n      return;\n    }\n\n    const startByteIndex = this.getByteIndex(start);\n    const endByteIndex = this.getByteIndex(end);\n    const startBitIndex = this.getBitIndex(start);\n    const endBitIndex = this.getBitIndex(end);\n\n    if (startByteIndex > endByteIndex) {\n      this.unsafelySetIndexRange(startByteIndex, startBitIndex, this.capacity, 0, value);\n      this.unsafelySetIndexRange(0, 0, endByteIndex, endBitIndex, value);\n      return;\n    }\n\n    this.unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value);\n  }\n\n  unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value) {\n    let startMask = createMask(8 - startBitIndex);\n    let endMask = 255 ^ createMask(8 - endBitIndex);\n\n    if (startByteIndex === endByteIndex) {\n      const mask = startMask & endMask;\n      this.values[startByteIndex] = applyMask(this.values[startByteIndex], mask, value);\n      return;\n    }\n\n    this.values[startByteIndex] = applyMask(this.values[startByteIndex], startMask, value);\n    this.values[endByteIndex] = applyMask(this.values[endByteIndex], endMask, value);\n\n    if (endByteIndex - startByteIndex > 1) {\n      this.values.fill(value ? 255 : 0, startByteIndex + 1, endByteIndex);\n    }\n  }\n\n  unsetRange(start, end) {\n    this.setRange(start, end, false);\n  }\n\n  set(index, value = true) {\n    if (index < this.offset) {\n      return;\n    }\n\n    this.adjustOffset(index);\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    this.values[byteIndex] = applyMask(this.values[byteIndex], mask, value);\n  }\n\n  unset(index) {\n    this.set(index, false);\n  }\n\n  get(index) {\n    if (index <= this.offset || index > this.offset + this.capacity) {\n      return false;\n    }\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    return (this.values[byteIndex] & mask) !== 0;\n  }\n\n  toValueArray() {\n    const values = [];\n    for (let i = 1; i <= this.capacity; i ++) {\n      if (this.get(this.offset + i)) {\n        values.push(this.offset + i);\n      }\n    }\n    return values;\n  }\n\n  min() {\n    for (let i = this.offset; i <= this.offset + this.capacity; i += 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const firstBit = Math.floor(i / 8) * 8;\n        for (let j = firstBit; j < firstBit + 8; j ++) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return Infinity;\n  }\n\n  max() {\n    for (let i = this.capacity + this.offset; i >= this.offset; i -= 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const lastBit = Math.ceil(i / 8) * 8 + 1;\n        for (let j = lastBit; j > lastBit - 8; j --) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return -Infinity;\n  }\n}\n","export class Flow {\n  constructor() {\n    this.lastVirtualFinish = 0;\n    this.nextVirtualFinish = Infinity;\n    this.queue = [];\n  }\n\n  computeWeight() {\n    return 1;\n  }\n}\n\nexport class Queue {\n  constructor(rate) {\n    this.rate = rate;\n    this.totalQueueSize = 0;\n    this.flows = [];\n  }\n\n  addFlow(flow) {\n    return this.flows.push(flow);\n  }\n\n  removeFlow(flow) {\n    const index = this.flows.indexOf(flow);\n    if (index !== -1) {\n      this.flows.splice(index, 1);\n    }\n  }\n\n  enqueue(flow, size, value) {\n    const weight = flow.computeWeight(this);\n    const rate = this.rate / weight;\n    const virtualFinish = Math.max(Date.now(), flow.lastVirtualFinish) + size / rate;\n\n    flow.queue.push({\n      virtualFinish,\n      size,\n      value,\n    });\n    flow.lastVirtualFinish = virtualFinish;\n    if (flow.queue.length === 1) {\n      flow.nextVirtualFinish = virtualFinish;\n    }\n  }\n\n  getNextScheduledFlow() {\n    let minVirtualFinish = Infinity;\n    let flow = null;\n    for (let i = 0; i < this.flows.length; i ++) {\n      if (this.flows[i].nextVirtualFinish < minVirtualFinish) {\n        flow = this.flows[i];\n        minVirtualFinish = flow.nextVirtualFinish;\n      }\n    }\n\n    return flow;\n  }\n\n  peek() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    return {\n      flow,\n      task: flow.queue[0],\n    };\n  }\n\n  dequeue() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    const task = flow.queue.shift();\n\n    flow.nextVirtualFinish = flow.queue.length !== 0\n      ? flow.queue[0].virtualFinish\n      : Infinity;\n\n    return {flow, task};\n  }\n}\n\nexport default {\n  Queue,\n  Flow,\n};\n","import BitArray from '../bitarray';\nimport Address from './address';\nimport wfq from '../wfq';\nimport EMA from '../ema';\nimport LEDBAT from '../ledbat';\nimport RingBuffer from '../RingBuffer';\n\nexport class AvailabilityMap {\n  constructor(capacity) {\n    this.values = new BitArray(capacity);\n  }\n\n  // TODO: ignore very large discard windows from remote peers...\n  setCapacity(capacity) {\n    this.values.resize(capacity);\n  }\n\n  set(address, value) {\n    this.values.setRange(address.start / 2, address.end / 2 + 1, value);\n  }\n\n  get({start, end = start}) {\n    for (let i = start; i <= end; i += 2) {\n      if (!this.values.get(i / 2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  min() {\n    return this.values.min() * 2;\n  }\n\n  max() {\n    return this.values.max() * 2;\n  }\n}\n\nexport class BinRingBuffer extends RingBuffer {\n  advanceLastBin(bin) {\n    super.advanceLastIndex(bin / 2);\n  }\n\n  setRange({start}, values) {\n    for (let i = 0; i < values.length; i ++) {\n      super.set(start / 2 + i, values[i]);\n    }\n  }\n\n  set({bin}, value) {\n    super.set(bin / 2, value);\n  }\n\n  get({bin}) {\n    return super.get(bin / 2);\n  }\n\n  forEach(callback) {\n    for (let i = this.lastIndex - this.capacity; i < this.lastIndex; i ++) {\n      if (callback(this.get(i), i * 2) === false) {\n        break;\n      }\n    }\n  }\n}\n\nexport class RateMeter {\n  constructor(windowMs, sampleWindowMs = 100) {\n    this.firstSampleWindow = Math.floor(Date.now() / sampleWindowMs);\n    this.lastSampleWindow = this.firstSampleWindow;\n    this.windowMs = windowMs;\n    this.sampleWindowMs = sampleWindowMs;\n    this.sum = 0;\n    this.values = new Array(Math.ceil(windowMs / sampleWindowMs));\n\n    this.values.fill(0);\n  }\n\n  adjustSampleWindow() {\n    const sampleWindow = Math.floor(Date.now() / this.sampleWindowMs);\n\n    for (let i = this.lastSampleWindow + 1; i <= sampleWindow; i ++) {\n      const index = i % this.values.length;\n      this.sum -= this.values[index];\n      this.values[index] = 0;\n    }\n    this.lastSampleWindow = sampleWindow;\n  }\n\n  update(value) {\n    this.adjustSampleWindow();\n    this.sum += value;\n    this.values[this.lastSampleWindow % this.values.length] += value;\n  }\n\n  value() {\n    this.adjustSampleWindow();\n    const accumulatedMs = Math.min(\n      (this.lastSampleWindow - this.firstSampleWindow) * this.sampleWindowMs,\n      this.windowMs,\n    );\n    return this.sum / accumulatedMs;\n  }\n}\n\nexport class ChunkRateMeter extends RateMeter {\n  constructor(windowMs = 15000) {\n    super(windowMs);\n    this.lastEndBin = 0;\n  }\n\n  update({start, end}) {\n    if (this.lastHeadBin === 0) {\n      super.update((end - start) / 2);\n    } else if (end > this.lastEndBin) {\n      super.update((end - this.lastEndBin) / 2);\n      this.lastEndBin = end;\n    }\n  }\n}\n\nexport class RequestFlow extends wfq.Flow {\n  constructor(id) {\n    super();\n    this.id = id;\n    this.queueSize = 0;\n  }\n\n  computeWeight(queue) {\n    return this.queueSize / queue.totalQueueSize;\n  }\n}\n\nexport class RequestQueue extends wfq.Queue {\n  constructor(rate) {\n    super(rate);\n    this.totalQueueSize = 0;\n  }\n\n  enqueue(flow, size, value) {\n    this.totalQueueSize += size;\n    flow.queueSize += size;\n    super.enqueue(flow, size, value);\n  }\n\n  cancel(flow, filter) {\n    flow.queue = flow.queue.filter(task => {\n      const remove = filter(task.value);\n\n      if (remove) {\n        this.totalQueueSize -= task.size;\n        flow.queueSize -= task.size;\n      }\n\n      return !remove;\n    });\n  }\n\n  dequeue() {\n    const result = super.dequeue();\n    if (result === null) {\n      return null;\n    }\n\n    this.totalQueueSize -= result.task.size;\n    result.flow.queueSize -= result.task.size;\n\n    return result;\n  }\n}\n\nexport class SchedulerChunkState {\n  constructor(bin) {\n    this.bin = bin;\n    this.reset();\n  }\n\n  reset() {\n    this.availableCopies = 0;\n    this.requestTime = [0, 0];\n    this.requestPeerId = 0;\n\n    this.requested = false;\n    this.received = false;\n    this.verified = false;\n  }\n}\n\nexport class SchedulerChunkRequestMap {\n  constructor() {\n    this.valueByBin = {};\n    this.head = undefined;\n    this.tail = undefined;\n    this.length = 0;\n  }\n\n  insert(address) {\n    const now = Date.now();\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      const value = {\n        address: new Address(i),\n        createdAt: now,\n        next: undefined,\n        prev: undefined,\n      };\n      this.valueByBin[i] = value;\n\n      if (this.head === undefined) {\n        this.head = value;\n      } else {\n        this.tail.next = value;\n      }\n      value.prev = this.tail;\n      this.tail = value;\n\n      this.length ++;\n    }\n  }\n\n  get({bin}) {\n    return this.valueByBin[bin];\n  }\n\n  remove({bin}) {\n    const value = this.valueByBin[bin];\n    if (value === undefined) {\n      return;\n    }\n    delete this.valueByBin[bin];\n\n    if (this.head === value) {\n      this.head = value.next;\n    }\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.prev !== undefined) {\n      value.prev.next = value.next;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = value.prev;\n    }\n\n    this.length --;\n  }\n\n  peek() {\n    return this.head;\n  }\n\n  pop() {\n    if (this.head === undefined) {\n      return;\n    }\n    const value = this.head;\n\n    this.head = value.next;\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = undefined;\n    }\n\n    delete this.valueByBin[value.address.bin];\n\n    this.length --;\n\n    return value;\n  }\n}\n\nexport class SchedulerChunkMap extends BinRingBuffer {\n  createEmptyValue(bin, value) {\n    if (value === undefined) {\n      return new SchedulerChunkState(bin);\n    }\n\n    // put the peer map here and when we advance the bin meme update\n    // the availability map here\n\n    value.reset();\n    return value;\n  }\n}\n\nexport class SchedulerPeerState {\n  constructor(peer, requestFlow) {\n    this.peer = peer;\n    this.requestFlow = requestFlow;\n    this.availableChunks = new AvailabilityMap();\n\n    this.ledbat = new LEDBAT();\n\n    // this.rttMean = new EMA(0.125);\n    // this.rttVar = new EMA(0.25);\n\n    this.rttMean = new EMA(0.05);\n    this.rttVar = new EMA(0.05);\n\n    this.chunkIntervalMean = new EMA(0.25);\n    this.chunkRate = new RateMeter(15000);\n    this.wasteRate = new RateMeter(15000);\n    this.lastChunkTime = null;\n\n    this.requestTimes = new BinRingBuffer();\n\n    this.requestedChunks = new SchedulerChunkRequestMap();\n    this.sentRequests = new SchedulerChunkRequestMap();\n\n    this.timeouts = 0;\n    this.validChunks = 0;\n    this.invalidChunks = 0;\n\n    this.requestQueue = [];\n\n    this.sentChunks = new AvailabilityMap();\n    this.receivedChunks = new AvailabilityMap();\n  }\n}\n\nexport class Scheduler {\n  constructor(chunkSize, clientOptions) {\n    const {\n      liveDiscardWindow,\n      uploadRateLimit,\n    } = clientOptions;\n\n    this.chunkSize = chunkSize;\n    this.liveDiscardWindow = liveDiscardWindow;\n\n    // where are we in the buffer\n\n    // how rare is a chunk\n    // how urgently is a chunk needed\n\n    // high/mid/low priority time bands\n\n    // high performance/reliability peers\n    // expected performance per peer\n\n    // request timeout/cancel\n    // send timeout/cancel?\n\n    // average stream bit rate\n    // position in available window\n    // position in theoretical window\n\n    // minimum needed bin\n\n    this.peerStates = {};\n    this.chunkStates = new SchedulerChunkMap(liveDiscardWindow);\n    this.definitelyLoadedChunks = [];\n    this.loadedChunks = new AvailabilityMap(liveDiscardWindow);\n    this.peerCount = 0;\n\n    this.chunkRate = new ChunkRateMeter();\n\n    this.requestQueue = new RequestQueue(uploadRateLimit / 1000);\n\n    // this.update = this.update.bind(this);\n    // setTimeout(this.update, 0);\n\n    this.timers = {};\n\n    this.lastExportedBin = -Infinity;\n    this.lastCompletedBin = -Infinity;\n    this.requestedChunks = new AvailabilityMap(liveDiscardWindow);\n\n    this.totalSends = 0;\n    this.totalRequests = 0;\n    this.totalRequestsReceived = 0;\n    this.totalReceived = 0;\n    this.totalAdded = 0;\n    this.totalCancelled = 0;\n    this.ackUnknownSend = 0;\n    this.totalDroppedRequests = 0;\n    this.sendDelay = new EMA(0.05);\n    // setInterval(this.debug.bind(this), 1000);\n\n    this.nextSendTime = 0;\n    this.nextSendTimeout = 0;\n  }\n\n  debug() {\n    console.log('---');\n    Object.values(this.peerStates).forEach((peerState) => {\n      if (!peerState.peer.isReady()) {\n        return;\n      }\n\n      let cto = peerState.ledbat.cto / (peerState.ledbat.cwnd / this.chunkSize);\n      const timeout = Math.ceil(Math.min(cto, 1000));\n\n      const availableChunks = peerState.availableChunks;\n\n      const firstLoadedChunk = this.loadedChunks.min();\n      const firstRequestedChunk = this.requestedChunks.min();\n      const startBin = Math.max(\n        availableChunks.min(),\n        isFinite(firstLoadedChunk) ? firstLoadedChunk : -Infinity,\n        isFinite(firstRequestedChunk) ? firstLoadedChunk : -Infinity,\n        this.lastCompletedBin,\n      );\n      const lastAvailableBin = Math.min(availableChunks.max(), startBin + this.liveDiscardWindow * 2);\n\n      const planFor = Math.min(1000, peerState.ledbat.rttMean.value() * 4);\n\n      const dip = peerState.chunkIntervalMean.value() || 0;\n      const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n      const cwnd = firstPlanPick - peerState.sentRequests.length;\n\n      console.log(JSON.stringify({\n        peer_remoteId: peerState.peer.remoteId,\n        peer_localId: peerState.peer.localId,\n        sentRequests: peerState.sentRequests.length,\n        swift_rtt: peerState.rttMean.value(),\n        swift_rttvar: peerState.rttVar.value(),\n        swift_chunkIntervalMean: peerState.chunkIntervalMean.value(),\n        chunkRate: peerState.chunkRate.value(),\n        wasteRate: peerState.wasteRate.value(),\n        swift_cwnd: cwnd,\n        ledbat_cwnd: peerState.ledbat.cwnd,\n        ledbat_cto: peerState.ledbat.cto,\n        ledbat_currentDelay: peerState.ledbat.currentDelay.getMin(),\n        ledbat_baseDelay: peerState.ledbat.baseDelay.getMin(),\n        ledbat_rttMean: peerState.ledbat.rttMean.value(),\n        ledbat_rttVar: peerState.ledbat.rttVar.value(),\n        ledbat_rtt: peerState.ledbat.rtt,\n        ledbat_flightSize: peerState.ledbat.flightSize,\n        // requestedChunks: peerState.requestedChunks,\n        timeouts: peerState.timeouts,\n        validChunks: peerState.validChunks,\n        invalidChunks: peerState.invalidChunks,\n        timeout: timeout,\n        picker_startBin: startBin,\n        picker_lastAvailableBin: lastAvailableBin,\n      }, true, 2));\n    });\n\n    console.log(JSON.stringify({\n      totalSends: this.totalSends,\n      totalRequests: this.totalRequests,\n      totalRequestsReceived: this.totalRequestsReceived,\n      totalDroppedRequests: this.totalDroppedRequests,\n      totalReceived: this.totalReceived,\n      totalAdded: this.totalAdded,\n      totalCancelled: this.totalCancelled,\n      ackUnknownSend: this.ackUnknownSend,\n      minIncompleteBin: this.lastCompletedBin,\n      sendDelay: this.sendDelay.value(),\n      picker_firstLoadedChunk: this.loadedChunks.min(),\n      picker_firstRequestedChunk: this.requestedChunks.min(),\n      chunkRate: this.chunkRate.value(),\n    }, true, 2));\n    // this.totalSends = 0;\n    // this.totalRequests = 0;\n    // this.totalRequestsReceived = 0;\n    // this.totalReceived = 0;\n    // // this.ackUnknownSend = 0;\n    // this.totalAdded = 0;\n    // this.totalCancelled = 0;\n    // this.totalDroppedRequests = 0;\n  }\n\n  update(peerState, update) {\n    if (!peerState.peer.isReady()) {\n      this.timers[peerState.localId] = setTimeout(update, 1000);\n      return;\n    }\n\n    const {\n      availableChunks,\n      ledbat,\n      sentRequests,\n    } = peerState;\n\n    const now = Date.now();\n    // const planFor = ledbat.rttMean.value();\n    // const planFor = ledbat.rttMean.value() * 2 + ledbat.rttVar.value() * 4;\n    const planFor = Math.max(1000, ledbat.rttMean.value() * 4);\n    const timeoutThreshold = now - ledbat.cto * 2;\n\n    const dip = peerState.chunkIntervalMean.value() || 0;\n    const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n    const cwnd = firstPlanPick - sentRequests.length;\n\n    const cancelledRequests = [];\n    while (sentRequests.peek() !== undefined\n      && sentRequests.peek().createdAt < timeoutThreshold) {\n      cancelledRequests.push(sentRequests.pop());\n    }\n\n    if (cancelledRequests.length > 0) {\n      this.totalCancelled += cancelledRequests.length;\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        sentRequests.remove(address);\n      });\n\n      // TODO: this is for ack timeout\n      ledbat.onDataLoss(cancelledRequests.length * this.chunkSize);\n      // console.log(cancelledRequests);\n    }\n\n    ledbat.digestDelaySamples();\n\n    const startBin = Math.max(\n      this.loadedChunks.values.offset * 2 + 2,\n      this.requestedChunks.values.offset * 2 + 2,\n      availableChunks.min(),\n      this.lastCompletedBin,\n    );\n    const endBin = Math.min(\n      startBin + this.liveDiscardWindow * 2,\n      availableChunks.max(),\n    );\n    const requestAddresses = [];\n    for (let i = startBin; i < endBin && requestAddresses.length < cwnd; i += 2) {\n      const address = new Address(i);\n      if (!this.loadedChunks.get(address)\n        && !this.requestedChunks.get(address)\n        && availableChunks.get(address)) {\n\n        if (Math.random() < 0.05) {\n          requestAddresses.push(address);\n          sentRequests.insert(address);\n          this.requestedChunks.set(address);\n        }\n      }\n    }\n    if (this.lastCompletedBin === -Infinity && requestAddresses.length !== 0) {\n      const firstRequestedBin = requestAddresses[0].bin;\n      this.lastCompletedBin = firstRequestedBin;\n      this.lastExportedBin = firstRequestedBin - 2;\n    }\n\n    if (cancelledRequests.length !== 0) {\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        peerState.peer.sendCancel(address);\n      });\n    }\n\n    if (requestAddresses.length !== 0) {\n      this.totalRequests += requestAddresses.length;\n      peerState.peer.sendRequest(...requestAddresses);\n\n      requestAddresses.forEach(address => {\n        if (peerState.requestTimes.get(address) === undefined) {\n          peerState.requestTimes.set(address, now);\n        }\n      });\n    }\n\n    while (ledbat.flightSize < ledbat.cwnd && peerState.requestQueue.length) {\n      const requestedAddress = peerState.requestQueue.shift();\n      if (requestedAddress !== undefined) {\n        const requestedChunk = peerState.requestedChunks.get(requestedAddress);\n        if (requestedChunk !== undefined) {\n          requestedChunk.sentAt = now;\n          peerState.ledbat.addSent(this.chunkSize);\n          peerState.peer.sendChunk(requestedAddress);\n          this.totalSends ++;\n        }\n      }\n\n      peerState.sentChunks.set(requestedAddress);\n\n      // TODO: volunteer bin we have and they don't?\n    }\n\n    peerState.peer.flush();\n    let sendInterval = Math.min(1000, (ledbat.rttMean.value() || 0) / (ledbat.cwnd / this.chunkSize));\n    this.timers[peerState.localId] = setTimeout(update, sendInterval);\n  }\n\n  addPeer(peer) {\n    const {localId} = peer;\n\n    const requestFlow = new RequestFlow(localId);\n    this.requestQueue.addFlow(requestFlow);\n\n    const peerState = new SchedulerPeerState(peer, requestFlow);\n    this.peerStates[localId] = peerState;\n\n    const update = () => this.update(peerState, update);\n    this.timers[localId] = setTimeout(update, 1000);\n  }\n\n  removePeer({localId}) {\n    const peerState = this.peerStates[localId];\n    if (peerState === undefined) {\n      return;\n    }\n\n    const {requestFlow} = peerState;\n    this.requestQueue.removeFlow(requestFlow);\n\n    delete this.peerStates[localId];\n\n    clearTimeout(this.timers[localId]);\n  }\n\n  getPeerState({localId}) {\n    return this.peerStates[localId];\n  }\n\n  getRecentChunks() {\n    // TODO: how to pick this... maybe remote discard window size?\n    const startBin = this.loadedChunks.max() - 64;\n\n    // bail if no chunks have been loaded yet\n    if (!isFinite(startBin)) {\n      return [];\n    }\n\n    const bins = [];\n\n    const endBin = this.loadedChunks.max();\n    for (let i = startBin; i <= endBin; i += 2) {\n      const address = new Address(i);\n      if (this.loadedChunks.get(address)) {\n        bins.push(address);\n      }\n    }\n\n    return bins;\n  }\n\n  setLiveDiscardWindow(peer, liveDiscardWindow) {\n    this.getPeerState(peer).availableChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).requestTimes.setCapacity(liveDiscardWindow);\n\n    this.getPeerState(peer).sentChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).receivedChunks.setCapacity(liveDiscardWindow);\n  }\n\n  markChunkReceived(peer, address, delaySample) {\n    const now = Date.now();\n\n    this.totalReceived ++;\n\n    const peerState = this.getPeerState(peer);\n    if (peerState === undefined) {\n      return;\n    }\n\n    if (this.loadedChunks.get(address)) {\n      peerState.wasteRate.update(1);\n    }\n\n    const request = peerState.sentRequests.get(address);\n    if (request === undefined) {\n      return;\n    }\n\n    if (peerState.lastChunkTime !== null) {\n      const chunkInterval = now - peerState.lastChunkTime;\n      peerState.chunkIntervalMean.update(chunkInterval);\n    }\n    peerState.lastChunkTime = now;\n    if (!this.loadedChunks.get(address)) {\n      peerState.chunkRate.update(1);\n    }\n\n    const requestTime = peerState.requestTimes.get(address);\n    if (requestTime !== undefined) {\n      peerState.ledbat.addRttSample(now - requestTime);\n    }\n\n    // peerState.rttMean.update(rtt);\n    // peerState.rttVar.update(Math.abs(rtt - peerState.rttMean.value()));\n\n    // TODO: double check LEDBAT to make sure we shouldn't be doing\n    // something here\n\n    peerState.sentRequests.remove(address);\n  }\n\n  markChunkVerified(peer, address) {\n    // this.chunkStates.get(address).verified = true;\n    this.getPeerState(peer).validChunks ++;\n    this.getPeerState(peer).receivedChunks.set(address);\n\n    // this.chunkStates.advanceLastBin(address.end);\n\n    this.definitelyLoadedChunks.push(address.bin);\n    this.chunkRate.update(address);\n    this.loadedChunks.set(address);\n\n    for (let i = this.lastCompletedBin; this.loadedChunks.get(new Address(i)); i += 2) {\n      this.lastCompletedBin = i;\n    }\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  getNewCompleteBins() {\n    const nextExportedBin = this.lastExportedBin + 2;\n    if (isFinite(nextExportedBin) && nextExportedBin <= this.lastCompletedBin) {\n      this.lastExportedBin = this.lastCompletedBin;\n      return [nextExportedBin, this.lastCompletedBin];\n    }\n  }\n\n  markChunkRejected(peer, address) {\n    this.requestedChunks.set(address, false);\n    this.getPeerState(peer).invalidChunks ++;\n  }\n\n  markChunkAvailable(peer, address) {\n    for (let i = address.start; i <= address.end; i += 2) {\n      if (!this.getPeerState(peer).availableChunks.get(new Address(i))) {\n        this.totalAdded ++;\n      }\n    }\n\n    this.getPeerState(peer).availableChunks.set(address);\n  }\n\n  markChunksLoaded(address) {\n    this.chunkStates.advanceLastBin(address.end);\n    this.loadedChunks.set(address);\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  markSendAcked(peer, address, delaySample) {\n    const peerState = this.getPeerState(peer);\n\n    peerState.ledbat.addDelaySample(delaySample, this.chunkSize);\n\n    const sentChunk = peerState.requestedChunks.get(address);\n    if (sentChunk === undefined) {\n      this.ackUnknownSend ++;\n      return;\n    }\n\n    // TODO: is this necessary?\n    if (sentChunk.sentAt) {\n      peerState.ledbat.addRttSample(Date.now() - sentChunk.sentAt);\n    }\n\n    peerState.requestedChunks.remove(address);\n  }\n\n  enqueueRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      this.totalRequestsReceived ++;\n      peerState.requestQueue.push(new Address(i));\n    }\n\n    peerState.requestedChunks.insert(address);\n  }\n\n  cancelRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n    const requestedChunk = peerState.requestedChunks.get(address);\n    if (requestedChunk && requestedChunk.sentAt) {\n      peerState.ledbat.onDataLoss(this.chunkSize);\n    }\n    peerState.requestedChunks.remove(address);\n\n    // this.requestQueue.cancel(\n    //   this.getPeerState(peer).requestFlow,\n    //   ({bin}) => address.containsBin(bin),\n    // );\n  }\n}\n","import {EventEmitter} from 'events';\nimport once from 'lodash.once';\nimport Address from './address';\nimport SwarmId from './swarmid';\nimport LEDBAT from '../ledbat';\nimport {\n  createChunkAddressFieldType,\n  createLiveSignatureFieldType,\n  createIntegrityHashFieldType,\n  createEncoding,\n} from './encoding';\nimport {\n  MaxChannelId,\n  ProtocolOptions,\n  MessageTypes,\n} from './constants';\nimport {\n  createMerkleHashTreeFunction,\n  createLiveSignatureVerifyFunction,\n  createLiveSignatureSignFunction,\n  createContentIntegrityVerifierFactory,\n} from './integrity';\nimport {\n  BinRingBuffer,\n  Scheduler,\n} from './scheduler';\n\nconst genericEncoding = createEncoding();\n\nconst BUFFER_SIZE = 3e7;\nconst MAX_UPLOAD_RATE = 1e6;\nconst HANDSHAKE_TIMEOUT = 5000;\n\nexport class Swarm extends EventEmitter {\n  constructor(uri, clientOptions) {\n    super();\n\n    const {swarmId} = uri;\n    const {\n      [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n      [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n      [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n      [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n      [ProtocolOptions.ChunkSize]: chunkSize,\n    } = uri.protocolOptions;\n    const {\n      liveDiscardWindow,\n      privateKey,\n    } = clientOptions;\n\n    this.uri = uri;\n\n    this.encoding = createEncoding(\n      createChunkAddressFieldType(chunkAddressingMethod, chunkSize),\n      createIntegrityHashFieldType(merkleHashTreeFunction),\n      createLiveSignatureFieldType(liveSignatureAlgorithm, swarmId),\n    );\n\n    const liveSignatureSignFunction = privateKey !== undefined\n      ? createLiveSignatureSignFunction(liveSignatureAlgorithm, privateKey)\n      : undefined;\n    this.contentIntegrity = createContentIntegrityVerifierFactory(\n      contentIntegrityProtectionMethod,\n      createMerkleHashTreeFunction(merkleHashTreeFunction),\n      createLiveSignatureVerifyFunction(liveSignatureAlgorithm, swarmId),\n      liveSignatureSignFunction,\n      liveDiscardWindow,\n    );\n\n    this.chunkBuffer = new BinRingBuffer(liveDiscardWindow);\n    this.scheduler = new Scheduler(chunkSize, clientOptions);\n\n    this.protocolOptions = [\n      new this.encoding.VersionProtocolOption(),\n      new this.encoding.MinimumVersionProtocolOption(),\n      new this.encoding.SwarmIdentifierProtocolOption(swarmId.toBuffer()),\n      new this.encoding.ContentIntegrityProtectionMethodProtocolOption(contentIntegrityProtectionMethod),\n      new this.encoding.MerkleHashTreeFunctionProtocolOption(merkleHashTreeFunction),\n      new this.encoding.LiveSignatureAlgorithmProtocolOption(liveSignatureAlgorithm),\n      new this.encoding.ChunkAddressingMethodProtocolOption(chunkAddressingMethod),\n      new this.encoding.ChunkSizeProtocolOption(chunkSize),\n      new this.encoding.LiveDiscardWindowProtocolOption(liveDiscardWindow),\n    ];\n  }\n\n  verifyProtocolOptions(protocolOptions) {\n    Object.entries(this.uri.protocolOptions)\n      .forEach(([protocolOption, value]) => {\n        if (protocolOptions[protocolOption] !== value) {\n          const protocolOptionName = ProtocolOptions.name(protocolOption);\n          throw new Error(`invalid peer options: ${protocolOptionName} mismatch`);\n        }\n      });\n  }\n\n  emitNewData() {\n    const newBins = this.scheduler.getNewCompleteBins();\n    if (newBins !== undefined) {\n      const [minNewBin, maxNewBin] = newBins;\n      const chunks = [];\n      for (let i = minNewBin; i <= maxNewBin; i += 2) {\n        chunks.push(this.chunkBuffer.get(new Address(i)));\n      }\n      this.emit('data', chunks);\n    }\n  }\n}\n\nconst PeerState = {\n  CONNECTING: 1,\n  AWAITING_HANDSHAKE: 2,\n  READY: 3,\n  CHOKED: 4,\n  DISCONNECTING: 5,\n  CLOSED: 6,\n};\n\nclass PeerDataHandlerContext {\n  constructor(swarm) {\n    this.swarm = swarm;\n    this.integrityVerifier = null;\n  }\n\n  getContentIntegrityVerifier(address) {\n    if (this.integrityVerifier === null) {\n      this.integrityVerifier = this.swarm.contentIntegrity.createVerifier(address);\n    }\n    return this.integrityVerifier;\n  }\n}\n\n// TODO: disconnect inactive peers\nclass Peer {\n  constructor(swarm, channel, remoteId = 0, localId = Peer.createChannelId()) {\n    this.swarm = swarm;\n    this.channel = channel;\n    this.remoteId = remoteId;\n    this.localId = localId;\n    this.state = PeerState.CONNECTING;\n\n    this.handlers = {\n      [MessageTypes.HANDSHAKE]: this.handleHandshakeMessage.bind(this),\n      [MessageTypes.DATA]: this.handleDataMessage.bind(this),\n      [MessageTypes.HAVE]: this.handleHaveMessage.bind(this),\n      [MessageTypes.ACK]: this.handleAckMessage.bind(this),\n      [MessageTypes.INTEGRITY]: this.handleIntegrityMessage.bind(this),\n      [MessageTypes.SIGNED_INTEGRITY]: this.handleSignedIntegrityMessage.bind(this),\n      [MessageTypes.REQUEST]: this.handleRequestMessage.bind(this),\n      [MessageTypes.CANCEL]: this.handleCancelMessage.bind(this),\n      [MessageTypes.CHOKE]: this.handleChokeMessage.bind(this),\n      [MessageTypes.UNCHOKE]: this.handleUnchokeMessage.bind(this),\n    };\n\n    this.sendBuffer = [];\n\n    this.swarm.scheduler.addPeer(this);\n  }\n\n  static createChannelId() {\n    return Math.round(Math.random() * MaxChannelId);\n  }\n\n  init() {\n    this.sendHandshake();\n    this.flush();\n\n    this.state = PeerState.AWAITING_HANDSHAKE;\n  }\n\n  close() {\n    this.state = PeerState.CLOSED;\n    this.swarm.scheduler.removePeer(this);\n  }\n\n  handleData(data) {\n    const context = new PeerDataHandlerContext(this.swarm);\n    data.messages.toArray().forEach(message => this.handleMessage(message, context));\n  }\n\n  handleMessage(message, context) {\n    const handler = this.handlers[message.type];\n    if (handler === undefined) {\n      throw new Error('unsupported message type');\n    }\n\n    // console.log(MessageTypes.name(message.type), this.remoteId, message);\n    handler(message, context);\n  }\n\n  handleHandshakeMessage(handshake) {\n    const options = handshake.options.reduce((options, {type, value}) => ({...options, [type]: value}), {});\n\n    const liveDiscardWindow = options[ProtocolOptions.LiveDiscardWindow];\n    if (liveDiscardWindow !== undefined) {\n      this.swarm.scheduler.setLiveDiscardWindow(this, liveDiscardWindow);\n    }\n\n    this.swarm.verifyProtocolOptions(options);\n\n    this.remoteId = handshake.channelId;\n\n    // console.log('received handshake message while in state', this.state);\n    if (this.state !== PeerState.READY) {\n      this.sendHandshake();\n      this.swarm.scheduler.getRecentChunks().forEach(address => this.sendHave(address));\n      this.flush();\n    }\n\n    this.state = PeerState.READY;\n  }\n\n  handleDataMessage(message, context) {\n    const address = Address.from(message.address);\n    const delaySample = LEDBAT.computeOneWayDelay(message.timestamp.value);\n\n    this.swarm.scheduler.markChunkReceived(this, address, delaySample);\n\n    const {encoding} = this.swarm;\n    this.channel.send(new encoding.Datagram(\n      this.remoteId,\n      [new encoding.AckMessage(message.address, new encoding.Timestamp(delaySample))],\n    ));\n\n    context.getContentIntegrityVerifier(address).verifyChunk(address, message.data)\n      .then(() => {\n        this.swarm.chunkBuffer.set(address, message.data);\n        this.swarm.scheduler.markChunkVerified(this, address);\n        this.swarm.emitNewData();\n      })\n      .catch((err) => {\n        console.log('error validating chunk', err);\n        debugger;\n        this.swarm.scheduler.markChunkRejected(this, address);\n      });\n  }\n\n  handleHaveMessage(message) {\n    this.swarm.scheduler.markChunkAvailable(this, Address.from(message.address));\n  }\n\n  handleAckMessage(message) {\n    const address = Address.from(message.address);\n    this.swarm.scheduler.markChunkAvailable(this, address);\n    this.swarm.scheduler.markSendAcked(this, address, message.delaySample.value);\n  }\n\n  handleIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHash(address, message.hash.value);\n  }\n\n  handleSignedIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHashSignature(address, message.signature.value);\n  }\n\n  handleRequestMessage(message) {\n    this.swarm.scheduler.enqueueRequest(this, Address.from(message.address));\n  }\n\n  handleCancelMessage(message) {\n    this.swarm.scheduler.cancelRequest(this, Address.from(message.address));\n  }\n\n  handleChokeMessage() {\n    this.state = PeerState.CHOKED;\n  }\n\n  handleUnchokeMessage() {\n    this.state = PeerState.READY;\n  }\n\n  isReady() {\n    return this.state === PeerState.READY;\n  }\n\n  isInitialized() {\n    return this.state !== PeerState.CONNECTING && this.state !== PeerState.AWAITING_HANDSHAKE;\n  }\n\n  sendHandshake() {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HandshakeMessage(\n      this.localId,\n      [\n        ...this.swarm.protocolOptions,\n        new encoding.SupportedMessagesProtocolOption(Object.keys(this.handlers)),\n      ],\n    ));\n  }\n\n  sendHave(address) {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HaveMessage(encoding.ChunkAddress.from(address)));\n  }\n\n  sendRequest(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.RequestMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendCancel(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.CancelMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendChunk(address, timestamp) {\n    const chunk = this.swarm.chunkBuffer.get(address);\n    if (chunk === undefined) {\n      return;\n    }\n\n    // TODO: omit signatures for bins the peer has already acked\n    const constituentSignatures = this.swarm.contentIntegrity.getConstituentSignatures(address);\n    if (constituentSignatures === undefined) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n\n    constituentSignatures\n      .reverse()\n      .forEach(({bin, signature}, i) => {\n        const address = encoding.ChunkAddress.from(new Address(bin));\n\n        this.sendBuffer.push(new encoding.IntegrityMessage(\n          address,\n          new encoding.IntegrityHash(signature.getHash()),\n        ));\n\n        if (i === 0) {\n          this.sendBuffer.push(new encoding.SignedIntegrityMessage(\n            address,\n            new encoding.Timestamp(timestamp),\n            new encoding.LiveSignature(signature.getSignatureHash()),\n          ));\n        }\n      });\n\n    this.sendBuffer.push(new encoding.DataMessage(encoding.ChunkAddress.from(address), chunk));\n\n    this.flush();\n  }\n\n  flush() {\n    if (this.sendBuffer.length === 0) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n    try {\n      this.channel.send(new encoding.Datagram(this.remoteId, this.sendBuffer));\n    } catch (e) {\n      console.log('error sending');\n      console.log(this.channel);\n      throw e;\n    }\n    this.sendBuffer = [];\n  }\n}\n\nclass SwarmSet extends EventEmitter {\n  constructor() {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.swarms = {};\n  }\n\n  insert(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] === undefined) {\n      this.swarms[key] = swarm;\n      this.emit('insert', swarm);\n    }\n  }\n\n  remove(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] !== undefined) {\n      delete this.swarms[key];\n      this.emit('remove', swarm);\n    }\n  }\n\n  get(swarmId) {\n    return this.swarms[SwarmSet.swarmIdToKey(swarmId)];\n  }\n\n  toArray() {\n    return Object.values(this.swarms);\n  }\n\n  static swarmIdToKey(swarmId) {\n    return swarmId.toBuffer().toString('base64');\n  }\n}\n\nexport class Client {\n  constructor() {\n    this.channels = [];\n\n    this.swarms = new SwarmSet();\n  }\n\n  publishSwarm(swarm) {\n    this.swarms.insert(swarm);\n  }\n\n  unpublishSwarm(swarm) {\n    this.swarms.remove(swarm);\n  }\n\n  joinSwarm(uri) {\n    const chunkSize = uri.protocolOptions[ProtocolOptions.ChunkSize];\n    const clientOptions = {\n      liveDiscardWindow: Math.ceil(BUFFER_SIZE / chunkSize),\n      uploadRateLimit: MAX_UPLOAD_RATE,\n    };\n\n    const swarm = new Swarm(uri, clientOptions);\n    this.swarms.insert(swarm);\n\n    return swarm;\n  }\n\n  createChannel(conn) {\n    const channel = new Channel(conn, this.swarms);\n    this.channels.push(channel);\n\n    channel.once('close', () => {\n      const index = this.channels.indexOf(channel);\n      this.channels.splice(index, 1);\n    });\n  }\n}\n\nexport class Channel extends EventEmitter {\n  constructor(conn, swarms) {\n    super();\n\n    this.conn = conn;\n    this.swarms = swarms;\n    this.peers = {};\n\n    this.handleSwarmInsert = this.getOrCreatePeer.bind(this);\n    this.swarms.on('insert', this.handleSwarmInsert);\n\n    const liveSwarms = swarms.toArray();\n    this.conn.addEventListener('open', () => liveSwarms.forEach(this.handleSwarmInsert));\n    this.conn.addEventListener('message', this.handleMessage.bind(this));\n    this.conn.addEventListener('error', err => console.log('connection error:', err));\n    this.conn.addEventListener('close', this.handleClose.bind(this));\n  }\n\n  handleMessage(event) {\n    let data = new genericEncoding.Datagram();\n    try {\n      data.read(event.data);\n    } catch (e) {\n      console.log(event.data);\n      throw e;\n    }\n\n    let peer = this.peers[data.channelId];\n    if (peer === undefined) {\n      if (data.channelId !== 0) {\n        return;\n      }\n\n      let handshake;\n      try {\n        handshake = data.messages.next();\n      } catch (error) {\n        console.log('error decoding mesasge', error);\n        return;\n      }\n      if (handshake === undefined || handshake.type !== MessageTypes.HANDSHAKE) {\n        console.log('rejected new peer without handshake');\n        return;\n      }\n      const swarmId = handshake.options.find(({type}) => type === ProtocolOptions.SwarmIdentifier);\n      if (swarmId === undefined) {\n        // console.log('rejecting new peer with invalid swarm id');\n        return;\n      }\n      const swarm = this.swarms.get(SwarmId.from(swarmId.value));\n      if (swarm === undefined) {\n        // console.log('rejecting new peer requesting unknown swarm');\n        return;\n      }\n\n      peer = this.getOrCreatePeer(swarm);\n    }\n\n    data = new peer.swarm.encoding.Datagram();\n    data.read(event.data);\n    // console.log('RECEIVED', data.messages.toArray());\n    peer.handleData(data);\n  }\n\n  send(data) {\n    if (this.conn.readyState !== 'open') {\n      this.conn.addEventListener('open', () => this.conn.send(data.toBuffer()));\n      return;\n    }\n\n    try {\n      this.conn.send(data.toBuffer());\n    } catch (e) {\n      this.conn.close();\n    }\n  }\n\n  handleClose() {\n    this.swarms.removeListener('insert', this.handleSwarmInsert);\n    Object.values(this.peers).forEach(peer => peer.close());\n    this.emit('close');\n  }\n\n  getOrCreatePeer(swarm) {\n    let peer = Object.values(this.peers).find(p => p.swarm === swarm);\n    return peer || this.createPeer(swarm);\n  }\n\n  createPeer(swarm) {\n    const {peers, swarms} = this;\n\n    const peer = new Peer(swarm, this);\n    peers[peer.localId] = peer;\n    peer.init();\n\n    const destroyPeer = once(() => {\n      delete peers[peer.localId];\n      peer.close();\n\n      swarms.removeListener('remove', handleRemove);\n    });\n    setTimeout(() => {\n      if (!peer.isInitialized()) {\n        destroyPeer();\n      }\n    }, HANDSHAKE_TIMEOUT);\n\n    const handleRemove = removedSwarm => {\n      if (removedSwarm === swarm) {\n        destroyPeer();\n      }\n    };\n    swarms.on('remove', handleRemove);\n\n    return peer;\n  }\n}\n","import KBucket from 'k-bucket';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport arrayEqual from 'array-equal';\nimport randomBytes from 'randombytes';\nimport LRU from 'lru-cache';\nimport hexToUint8Array from './hexToUint8Array';\nimport idx from 'idx';\n\nconst SEND_REPLICAS = 2;\nconst MAX_HOPS = 10;\nconst DEFAULT_PEER_REQUEST_COUNT = 10;\nconst NUMBER_OF_NODES_PER_BUCKET = 2;\n\n// TODO: implement get/set\n// TODO: implement connection dump rpc for network debugging\n\nexport class Client extends EventEmitter {\n  constructor(id) {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.id = id;\n\n    // managed/unmanaged?\n    this.channels = new KBucket({\n      numberOfNodesPerKBucket: NUMBER_OF_NODES_PER_BUCKET,\n      localNodeId: this.id,\n    });\n    this.allChannels = new KBucket({\n      numberOfNodesPerKBucket: 100,\n      localNodeId: this.id,\n    });\n\n    this.channels.on('ping', this.handlePing.bind(this));\n    this.channels.on('removed', this.handleRemoved.bind(this));\n    this.channels.on('updated', this.handleUpdated.bind(this));\n    this.channels.on('added', this.handleAdded.bind(this));\n\n    this.knownPeerIds = {};\n    this.channelMap = {};\n\n    this.seenIds = new LRU({max: 1024});\n    this.knownRoutes = new LRU({\n      max: 1024,\n      maxAge: 1000 * 60,\n    });\n    this.callbacks = new LRU({max: 1024});\n\n    this.on('receive.peers.request', this.handlePeersRequest.bind(this));\n    this.on('receive.ping.request', this.handlePingRequest.bind(this));\n    this.on('receive.trace.request', this.handleTraceRequest.bind(this));\n    this.on('receive.callback.response', this.handleCallbackResponse.bind(this));\n\n    this.startPeerRequests();\n  }\n\n  // TODO: this is leaking connections\n  close() {\n    this.stopPeerRequests();\n    this.allChannels.toArray().forEach(({conn}) => conn && conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n\n  startPeerRequests() {\n    let index = 0;\n\n    const next = () => {\n      let ids = Object.keys(this.knownPeerIds);\n\n      for (let retry = 0; retry <= ids.length; retry ++) {\n        if (index >= ids.length) {\n          index = 0;\n        }\n\n        const id = ids[index];\n        index ++;\n\n        if (id) {\n          return id;\n        }\n      }\n    };\n\n    this.peerRequestIvl = setInterval(() => {\n      const id = next();\n      if (id) {\n        this.sendPeerRequest(hexToUint8Array(id));\n      }\n    }, 5000);\n  }\n\n  stopPeerRequests() {\n    clearInterval(this.peerRequestIvl);\n  }\n\n  handlePing(channels, newChannel) {\n    // console.log('ping', channels, newChannel);\n    const PING_TIMEOUT = 10000;\n\n    channels.forEach(channel => {\n      const {id} = channel;\n\n      if (channel.isOpen()) {\n        this.addChannel(channel);\n        return;\n      }\n\n      setTimeout(() => {\n        const channel = this.getChannel(id);\n        if (channel && channel.isOpen()) {\n          this.addChannel(channel);\n          return;\n        }\n\n        this.removeChannel(id);\n        this.addChannel(newChannel);\n      }, PING_TIMEOUT);\n    });\n  }\n\n  addChannel(channel) {\n    this.channels.add(channel);\n    this.allChannels.add(channel);\n  }\n\n  removeChannel(id) {\n    this.channels.remove(id);\n    this.allChannels.remove(id);\n    // delete this.channelMap[arrayBufferToHex(id)];\n  }\n\n  getChannel(id) {\n    return this.channelMap[arrayBufferToHex(id)];\n  }\n\n  handleRemoved(channel) {\n    // console.log('remove', arrayBufferToHex(channel.id));\n    // console.trace();\n    if (channel.conn) {\n      channel.conn.close();\n    }\n    // console.log('handleRemoved', arrayBufferToHex(channel.id));\n  }\n\n  handleUpdated(oldChannel, newChannel) {\n    // console.log('update', {oldChannel, newChannel});\n    // console.log('handleUpdated', arrayBufferToHex(channel.id));\n  }\n\n  handleAdded(channel) {\n    if (channel.conn === undefined) {\n      // console.log('peers.discover', arrayBufferToHex(this.id), arrayBufferToHex(channel.id), this.channels.count());\n      this.emit('peers.discover', channel.id);\n    }\n    // console.log('add');\n    // emit event?\n    // console.log('handleAdded', arrayBufferToHex(channel.id));\n  }\n\n  createChannel(id, conn) {\n    const idHex = arrayBufferToHex(id);\n    const channel = new Channel(id, conn);\n\n    const oldChannel = this.channelMap[idHex];\n    if (oldChannel && oldChannel.conn) {\n      // console.warn('replacing open channel...');\n      oldChannel.conn.close();\n    }\n    this.channelMap[idHex] = channel;\n\n    const messages = [];\n    const bufferMessages = event => messages.push(event);\n    const handleMessage = this.handleMessage.bind(this, channel);\n\n    const handleOpen = () => {\n      // console.log('saw open', idHex);\n      this.addChannel(channel);\n\n      conn.removeEventListener('message', bufferMessages);\n      conn.addEventListener('message', handleMessage);\n      messages.forEach(handleMessage);\n\n      this.sendPeerRequest(id);\n    };\n\n    const handleClose = () => {\n      // console.log('saw close', idHex);\n      conn.removeEventListener('message', bufferMessages);\n      conn.removeEventListener('message', handleMessage);\n      conn.removeEventListener('open', handleOpen);\n\n      if (this.channelMap[idHex] === channel) {\n        this.removeChannel(id);\n        delete this.channelMap[idHex];\n      }\n    };\n\n    conn.addEventListener('message', bufferMessages);\n    conn.addEventListener('open', handleOpen, {once: true});\n    conn.addEventListener('close', handleClose, {once: true});\n  }\n\n  handleMessage(channel, event) {\n    // console.log('handleMessage', event.data);\n\n    channel.lastActive = Date.now();\n\n    let req;\n    try {\n      req = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n    const {type, id} = req;\n\n    if (req.trace) {\n      req.trace.push(arrayBufferToHex(this.id));\n      // console.log('TRACE', req);\n    }\n\n    if (this.seenIds.get(id)) {\n      // console.log('discarding seen message', id);\n      // if (req.trace) {\n      //   console.log('DROPPED', req);\n      // }\n      return;\n    }\n    this.seenIds.set(id, true);\n\n    if (!this.getChannel(channel.id)) {\n      console.warn('receiving channel is not known to dht', arrayBufferToHex(channel.id));\n    }\n\n    this.knownRoutes.set(req.from, channel.id);\n    // this.knownRoutes.set(req.from, arrayBufferToHex(channel.id));\n\n    const to = hexToUint8Array(req.to);\n    if (!arrayEqual(to, this.id)) {\n      this.forwardMessage(to, req);\n      return;\n    }\n\n    // if (req.trace) {\n    //   console.log('DELIVERED', req);\n    // }\n\n    const resCallback = (res={}, callback=null) => {\n      const from = hexToUint8Array(req.from);\n      const data = {re: id, ...res};\n      this.send(from, 'callback.response', data, callback);\n    };\n\n    // console.log(`emit receive.${type}`, req);\n    this.emit(`receive.${type}`, {data: req, callback: resCallback});\n  }\n\n  forwardMessage(to, data) {\n    // console.log('forwarding message', arrayBufferToHex(to), data);\n\n    if (data.hops >= MAX_HOPS) {\n      // console.log('discarding message with too many hops', data.id);\n      return;\n    }\n    data.hops ++;\n\n    this.sendRaw(to, JSON.stringify(data), data.trace);\n  }\n\n  sendPing(to, callback=()=>{}) {\n    this.send(to, 'ping.request', {}, callback);\n  }\n\n  handlePingRequest({data, callback}) {\n    // console.log('PING', data);\n    callback({});\n  }\n\n  handleTraceRequest({data, callback}) {\n    callback(data);\n  }\n\n  handleCallbackResponse({data, callback}) {\n    const reqCallback = this.callbacks.get(data.re);\n    if (reqCallback) {\n      reqCallback(data, callback);\n    } else {\n      // console.warn('<<< callback for %s expired', data.re);\n    }\n  }\n\n  sendPeerRequest(to, count=DEFAULT_PEER_REQUEST_COUNT) {\n    const timeout = setTimeout(() => {\n      delete this.knownPeerIds[arrayBufferToHex(to)];\n    }, 5000);\n    this.send(to, 'peers.request', {count}, res => {\n      clearTimeout(timeout);\n      this.handlePeersResponse(res);\n    });\n  }\n\n  handlePeersRequest({data: {count=DEFAULT_PEER_REQUEST_COUNT, from}, callback}) {\n    // console.log('handlePeersRequest');\n\n    const fromId = hexToUint8Array(from);\n\n    const ids = this.allChannels.closest(fromId)\n      .filter(({conn}) => conn != null)\n      .filter(({id}) => !arrayEqual(id, this.id) && !arrayEqual(id, fromId))\n      .map(({id}) => arrayBufferToHex(id))\n      .slice(0, count);\n    callback({ids});\n  }\n\n  handlePeersResponse(res) {\n    // console.log('handlePeersResponse', res.ids);\n\n    res.ids\n      .map(id => hexToUint8Array(id))\n      .filter(id => !arrayEqual(id, this.id))\n      .filter(id => {\n        const channel = this.getChannel(id);\n        return channel == null || channel.conn == null;\n      })\n      .forEach(id => {\n        // TODO: store peer provenance so we can ignore bad actors?\n        this.knownPeerIds[arrayBufferToHex(id)] = true;\n        this.addChannel(new Channel(id));\n      });\n  }\n\n  send(to, type, data={}, callback=null) {\n    if (typeof data === 'function') {\n      callback = data;\n      data = {};\n    }\n\n    const id = arrayBufferToHex(randomBytes(16));\n    this.seenIds.set(id, true);\n\n    if (callback != null) {\n      this.callbacks.set(id, callback);\n    }\n\n    const message = JSON.stringify({\n      id,\n      type,\n      from: arrayBufferToHex(this.id),\n      to: arrayBufferToHex(to),\n      trace: [arrayBufferToHex(this.id)],\n      hops: 0,\n      ...data,\n    });\n\n    // console.log('formatMessage', message);\n\n    this.sendRaw(to, message);\n  }\n\n  sendRaw(to, message, trace=[]) {\n    let closest = this.allChannels.closest(to)\n      .filter(channel => channel.isOpen())\n      .filter(({idHex}) => trace.indexOf(idHex) === -1)\n      .slice(0, SEND_REPLICAS);\n\n    const knownRoute = this.knownRoutes.get(arrayBufferToHex(to));\n    if (knownRoute) {\n      const channel = this.getChannel(knownRoute);\n      // const channel = this.allChannels.get(knownRoute);\n      if (channel != null && channel.isOpen()) {\n        closest.push(channel);\n      }\n    }\n\n    if (closest.length === 0) {\n      // console.warn(`closest value to ${arrayBufferToHex(to)} does not exist, dropping`, message);\n      return;\n    }\n\n    if (arrayEqual(closest[0].id, to)) {\n      closest = closest.slice(0, 1);\n    }\n    // console.log('send', closest.map(({id}) => arrayBufferToHex(id)), message);\n    // console.log(closest.length, closest.filter(({conn}) => !!conn).length, message);\n    closest.forEach(({id, conn}) => {\n      try {\n        // console.log('buffered amount before send', conn.bufferedAmount);\n        // console.log(message);\n        conn.send(message);\n      } catch (e) {\n        console.log('error sending to peer, closing', arrayBufferToHex(id), e);\n        conn.close();\n      }\n    });\n  }\n}\n\nexport class Channel {\n  constructor(id, conn) {\n    this.id = id;\n    this.idHex = arrayBufferToHex(id);\n    this.vectorClock = Date.now();\n    this.lastPing = Date.now();\n    this.conn = conn;\n\n    // console.log('channel', this);\n  }\n\n  isOpen() {\n    const readyState = idx(this, _ => _.conn.readyState);\n    return readyState === 1 || readyState === 'open';\n  }\n}\n\nexport class SubChannel {\n  constructor(client, peerId, id=arrayBufferToHex(randomBytes(16))) {\n    // console.log('subchannel created', id);\n    this.client = client;\n    this.peerId = peerId;\n    this.id = id;\n    this.readyState = SubChannel.ReadyStates.OPEN;\n    this.onmessage = () => {};\n\n    this.handleMessage = this.handleMessage.bind(this);\n    this.client.on('receive.subchannel.message', this.handleMessage);\n  }\n\n  handleMessage({data: {channelId, data}}) {\n    // console.log('receive.subchannel.message', channelId, this.id, data);\n\n    if (channelId === this.id) {\n      this.onmessage({data});\n    }\n  }\n\n  send(data) {\n    this.client.send(\n      this.peerId,\n      'subchannel.message',\n      {\n        channelId: this.id,\n        data: data,\n      },\n    );\n  }\n\n  close() {\n    this.readyState = SubChannel.ReadyStates.CLOSED;\n    this.client.removeListener('receive.subchannel.message', this.handleMessage);\n  }\n}\n\nSubChannel.ReadyStates = {\n  OPEN: 1,\n  CLOSED: 3,\n};\n","import URLSafeBase64 from 'urlsafe-base64';\nimport SwarmId from './swarmid';\nimport {ProtocolOptions} from './constants';\n\nconst protocolOptionToKey = {\n  [ProtocolOptions.ContentIntegrityProtectionMethod]: 'x.im',\n  [ProtocolOptions.MerkleHashTreeFunction]: 'x.hf',\n  [ProtocolOptions.LiveSignatureAlgorithm]: 'x.sa',\n  [ProtocolOptions.ChunkAddressingMethod]: 'x.am',\n  [ProtocolOptions.ChunkSize]: 'x.cs',\n};\n\n// TODO: dn with stream name\n// TODO: as to m3u8 url?\nexport default class URI {\n  constructor(swarmId, protocolOptions) {\n    this.swarmId = swarmId;\n    this.protocolOptions = protocolOptions;\n  }\n\n  toString() {\n    const swarmId = URLSafeBase64.encode(this.swarmId.toBuffer());\n    const protocolOptions = Object.entries(this.protocolOptions)\n      .map(([protocolOption, value]) => `${protocolOptionToKey[protocolOption]}=${value}`)\n      .join('&');\n    return `magnet:?xt=urn:ppspp:${swarmId}&${protocolOptions}`;\n  }\n\n  static parse(uriString) {\n    if (!uriString.startsWith('magnet:')) {\n      throw new Error('invalid uri: expected magnet');\n    }\n\n    const args = uriString.substring(8)\n      .split('&')\n      .map(query => {\n        const [key, value] = query.split('=');\n        return [key, decodeURIComponent(value)];\n      });\n\n    const protocolOptions = Object.entries(protocolOptionToKey)\n      .reduce((protocolOptions, [protocolOption, key]) => {\n        const arg = args.find(([argKey]) => argKey === key);\n        if (arg === undefined) {\n          throw new Error(`invalid uri: missing ${key}`);\n        }\n        return {...protocolOptions, [protocolOption]: parseFloat(arg[1])};\n      }, {});\n\n    const xt = args.find(([key, value]) => key === 'xt' && value.startsWith('urn:ppspp:'));\n    if (xt === undefined) {\n      throw new Error('invalid uri: missing suitable xt');\n    }\n    const swarmId = SwarmId.from(URLSafeBase64.decode(xt[1].substring(10)));\n\n    return new URI(swarmId, protocolOptions);\n  }\n}\n"],"sourceRoot":""}