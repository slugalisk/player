{"version":3,"sources":["ppspp/constants.js","utils/createRandomId.js","ppspp/injector.js","ppspp/address.js","ppspp/webcrypto.js","ppspp/crypto.js","DiagnosticMenu/index.js","SwarmPlayer.js","client.js","wrtc.js","App.js","Test.js","DhtGraph.js","Router.js","index.js","hexToUint8Array.js","ppspp/integrity.js","binSearch.js","ppspp/swarmid.js","ema.js","RingBuffer.js","ledbat.js","ppspp/encoding.js","bitarray.js","wfq.js","ppspp/scheduler.js","ppspp/index.js","dht.js","loopback.js","chunkedStream.js","ppspp/uri.js"],"names":["__webpack_require__","d","__webpack_exports__","MaxChannelId","ProtocolOptions","Version","ContentIntegrityProtectionMethod","MerkleHashTreeFunction","LiveSignatureAlgorithm","ChunkAddressingMethod","MessageTypes","lodash_invert__WEBPACK_IMPORTED_MODULE_0__","lodash_invert__WEBPACK_IMPORTED_MODULE_0___default","n","MinimumVersion","SwarmIdentifier","LiveDiscardWindow","SupportedMessages","ChunkSize","EndOption","RFC7574","None","MerkleHashTree","SignAll","UnifiedMerkleTree","SHA1","SHA224","SHA256","SHA384","SHA512","RSASHA1","RSASHA256","ECDSAP256SHA256","ECDSAP384SHA384","Bin32","ByteRange64","ChunkRange32","Bin64","ChunkRange64","HANDSHAKE","DATA","ACK","HAVE","INTEGRITY","PEX_RESv4","PEX_REQ","SIGNED_INTEGRITY","REQUEST","CANCEL","CHOKE","UNCHOKE","PEX_RESv6","PEX_REScert","forEach","enumType","names","invert","name","value","crypto__WEBPACK_IMPORTED_MODULE_0__","crypto__WEBPACK_IMPORTED_MODULE_0___default","createRandomId","id","Uint8Array","crypto","randomFillSync","Injector","swarm","chunkSize","chunksPerSignature","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","this","inputBuffer","Buffer","alloc","chunkBuffer","data","_this","length","concat","dataOffset","push","slice","i","Math","min","_loop","subtreeChunks","splice","contentIntegrity","appendSubtree","then","subtree","setRange","rootAddress","scheduler","markChunksLoaded","options","arguments","undefined","_options$chunkSize","_options$chunksPerSig","_options$liveDiscardW","liveDiscardWindow","ceil","_options$chunkAddress","chunkAddressingMethod","_options$contentInteg","contentIntegrityProtectionMethod","_options$merkleHashTr","merkleHashTreeFunction","_options$liveSignatur","liveSignatureAlgorithm","generateKeyPair","_ref","_ref2","swarmId","privateKey","uri","URI","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__","console","log","toString","clientOptions","uploadRateLimit","Swarm","EventEmitter","Address","bin","treeBounds","binBounds","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_treeBounds","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","start","end","address","type","Error","r","module","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0__","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0___default","exports","WebCrypto","window","ToggleButton","buttonClasses","classNames","diagnostic_menu__toggle_button","diagnostic_menu__toggle_button--expanded","props","expanded","react_default","a","createElement","onClick","className","Component","defaultProps","SwarmState","rows","key","totalSends","totalRequests","totalRequestsReceived","totalDroppedRequests","totalReceived","totalAdded","totalCancelled","ackUnknownSend","lastCompletedBin","loadedChunks","requestedChunks","chunkRate","map","PeerStateTable","peerState","chunkIntervalMean","wasteRate","ledbat","baseDelay","getMin","currentDelay","rttMean","rttVar","cwnd","cto","flightSize","validChunks","requestQueue","String","_this$props","startBin","endBin","colSpan","DiagnosticMenu_AvailabilityMapChart","availableChunks","sentChunks","receivedChunks","AvailabilityMapChart","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","canvas","React","createRef","current","isNaN","max","isFinite","ctx","getContext","scale","scaleLinear","domain","range","fillStyle","fillRect","lastStart","values","get","height","width","ref","PeerState","_this2","handleButtonClick","setState","state","table","DiagnosticMenu_PeerStateTable","DiagnosticMenu_ToggleButton","peer","localId","remoteId","DiagnosticMenu","_this3","scheduleUpdate","handleUpdate","forceUpdate","requestAnimationFrame","swarmState","peerStates","containerClasses","containerClass","diagnostic_menu__container","diagnostic_menu__container--expanded","_this$props$swarm$sch","DiagnosticMenu_SwarmState","entries","_ref3","_ref4","slicedToArray","DiagnosticMenu_PeerState","e","SwarmPlayer","handleSourceOpen","mediaSource","sourceBuffer","addSourceBuffer","addEventListener","videoSegments","initSet","appendBuffer","shift","transmuxer","muxjs","mp4","Transmuxer","on","event","buf","from","initSegment","updating","stream","ChunkedFragmentedReadStream","flush","video","MediaSource","src","URL","createObjectURL","Fragment","src_DiagnosticMenu_0","controls","Client","connManager","dhtClientId","bootstrapId","conn","swarmUri","client","createClient","dhtClient","dht","handlePeersDiscover","bind","handleReceiveConnectRequest","createChannel","createDataChannel","ppsppClient","ppspp","init","createClass","sub","timeout","setTimeout","close","send","channelId","clearTimeout","_ref$data","callback","hexToUint8Array","channel","label","bootstrap","ConnManager","bootstrapAddress","Promise","resolve","reject","WebSocket","onmessage","JSON","parse","mediator","Mediator","once","_EventEmitter","handleMessage","assertThisInitialized","inherits","emit","RTCSessionDescription","sdp","candidate","RTCIceCandidate","readyState","stringify","_EventEmitter2","initialized","waitingChannels","peerConn","RTCPeerConnection","iceServers","urls","sendIceCandidate","handleDataChannel","addIceCandidate","_ready","description","setRemoteDescription","createAnswer","catch","_this4","setLocalDescription","sendAnswer","error","_this5","resolveWaitingChannel","objectSpread","ordered","maxRetransmits","binaryType","_this6","createOffer","offer","sendOffer","App","_useState","useState","_useState2","setPpsppClient","_useState3","_useState4","setSwarmUri","_useState5","_useState6","setSwarm","useEffect","proto","location","protocol","host","create","SwarmPlayer_SwarmPlayer","onSubmit","preventDefault","joinSwarm","onChange","target","placeholder","defaultValue","Server","server","swarms","setSwarms","injector","ChunkedWriteStreamInjector","publishSwarm","unpublishSwarm","stop","diagnosticMenus","toConsumableArray","ChunkedReadStream","color","scaleOrdinal","schemeCategory10","reduceGraph","graph","objectWithoutProperties","nodes","links","filter","node","source","activity","link","_useGraph","gen","setGen","_useReducer","useReducer","_useReducer2","dispatchGraphAction","arrayBufferToHex","addNodes","all","Array","fill","clients","allChannels","toArray","_ref5","_ref6","_ref7","_ref8","oldConn","_ref9","useGraph","_useGraph2","handleNodeClick","setSource","sendPing","useNodePinger","react_force_graph_3d_module","graphData","nodeAutoColorBy","onNodeClick","linkColor","linkWidth","nodeRelSize","nodeVal","count","Router","HashRouter","Switch","Route","exact","path","component","Test","DhtGraph","ReactDOM","render","src_Router","document","getElementById","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0__","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0___default","v","hexToArrayBuffer","require","toUint8Array","MerkleHashTreeFunctionAlgorithms","_MerkleHashTreeFuncti","defineProperty","MerkleHashTreeFunctionByteLengths","_MerkleHashTreeFuncti2","createMerkleHashTreeFunction","algorithm","nullHash","_len","_key","every","arrayEqual","subtle","digest","LiveSignatureAlgorithms","_LiveSignatureAlgorit","modulusLength","publicExponent","hash","namedCurve","createLiveSignatureSignFunction","importResult","importKey","sign","createLiveSignatureVerifyFunction","getKeyParams","publicKey","signature","verify","generateKey","keyPair","exportKey","SwarmId","unavailableLiveSignatureSignFunction","createContentIntegrityVerifierFactory","liveSignatureVerifyFunction","liveSignatureSignFunction","Infinity","Signature","verified","SignedSignature","verificationResult","getHash","markVerified","verifyHash","compare","signatures","getChunkCount","MerkleHashTreeVerifier","hashTree","containsBin","bins","bfsIndex","stride","parent","branch","isRoot","siblingBin","siblingBfsIndex","floor","getConstituentHashBins","minSize","size","hashes","siblings","apply","rootHashSignature","pow","log2","hashResult","some","siblingSignature","index","verifiedSignature","siblingHash","UnifiedMerkleHashTree","subtrees","nextStart","chunkCount","comparator","left","right","mid","order","binSearch","_this5$subtrees$i$roo","storedSubtree","findSubtree","copy","sort","b","pruneSubtrees","removedTree","treeSize","nextAddress","insertSubtree","MerkleHashSubtreeVerifier","getConstituentSignatures","_MerkleHashTreeVerifi","unifiedHashTree","_this7","prototype","NoneVerifier","NoneVerifierFactory","isRsaAlgorithm","includes","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","metadataLength","buffer","byteLength","writeUInt8","writeUInt32BE","readUInt8","readUInt32BE","ArrayBuffer","isView","read","EMA","alpha","mean","weight","RingBuffer","capacity","setCapacity","lastIndex","createEmptyValue","firstEmptyIndex","advanceLastIndex","set","DelayBuffer","delay","now","Date","TARGET","CURRENT_HISTORY","CURRENT_HISTORY_INTERVAL","BASE_HISTORY","BASE_HISTORY_INTERVAL","INIT_CWND","MSS","COEF_ALPHA","COEF_BETA","LEDBAT","mss","lastDataLoss","lastAckTime","ackSize","bytes","delaySample","update","checkCTO","queuingDelay","abs","offTarget","maxAllowedCwnd","rtt","isEmpty","retransmitting","timestamp","createChunkAddressFieldType","addressingMethod","Bin32ChunkAddress","offset","_Address$binBounds","_Address$binBounds2","ChunkRange32ChunkAddress","createBufferFieldType","BufferField","createLiveSignatureFieldType","getLiveSignatureByteLength","_createBufferFieldTyp","LiveSignatureField","createIntegrityHashFieldType","_createBufferFieldTyp2","IntegrityHashField","createEncoding","ChunkAddress","IntegrityHash","LiveSignature","_protocolOptionRecord","_messageRecordTypes","Uint8ProtocolOption","Uint32ProtocolOption","VersionProtocolOption","_Uint8ProtocolOption","version","MinimumVersionProtocolOption","_Uint8ProtocolOption2","SwarmIdentifierProtocolOption","readUInt16BE","writeUInt16BE","ContentIntegrityProtectionMethodProtocolOption","_Uint8ProtocolOption3","method","MerkleHashTreeFunctionProtocolOption","_Uint8ProtocolOption4","LiveSignatureAlgorithmProtocolOption","_Uint8ProtocolOption5","ChunkAddressingMethodProtocolOption","_Uint8ProtocolOption6","_this8","LiveDiscardWindowProtocolOption","_Uint32ProtocolOption","_this9","SupportedMessagesProtocolOption","_this10","messageTypes","byte","j","Boolean","keys","bitmapByteLength","bitmap","toBitmap","ChunkSizeProtocolOption","_Uint32ProtocolOption2","_this11","protocolOptionRecordTypes","HandshakeMessage","code","option","RecordType","reduce","write","Timestamp","seconds","readInt32BE","nanoseconds","writeInt32BE","DataMessage","dataLength","rangeByteLength","AddressMessage","AckMessage","HaveMessage","_AddressMessage","_this12","IntegrityMessage","SignedIntegrityMessage","RequestMessage","_AddressMessage2","_this13","CancelMessage","_AddressMessage3","_this14","EmptyMessage","ChokeMessage","_EmptyMessage","_this15","UnchokeMessage","_EmptyMessage2","_this16","messageRecordTypes","Messages","messageType","message","next","isArray","Datagram","messages","datagram","createMask","bits","mask","applyMask","BitArray","resize","distance","unsafelySetRange","byteIndex","bitIndex","byteOffset","adjustOffset","startByteIndex","getByteIndex","endByteIndex","startBitIndex","getBitIndex","endBitIndex","unsafelySetIndexRange","startMask","endMask","firstBit","lastBit","Flow","lastVirtualFinish","nextVirtualFinish","queue","wfq","Queue","rate","totalQueueSize","flows","flow","indexOf","computeWeight","virtualFinish","minVirtualFinish","getNextScheduledFlow","task","AvailabilityMap","_ref$end","BinRingBuffer","_RingBuffer","esm_get","RateMeter","windowMs","sampleWindowMs","firstSampleWindow","lastSampleWindow","sum","sampleWindow","adjustSampleWindow","accumulatedMs","ChunkRateMeter","_RateMeter","lastEndBin","lastHeadBin","RequestFlow","_wfq$Flow","queueSize","RequestQueue","_wfq$Queue","remove","result","SchedulerChunkState","reset","availableCopies","requestTime","requestPeerId","requested","received","SchedulerChunkRequestMap","valueByBin","head","tail","createdAt","prev","SchedulerChunkMap","_BinRingBuffer","SchedulerPeerState","requestFlow","lastChunkTime","requestTimes","sentRequests","timeouts","invalidChunks","Scheduler","chunkStates","definitelyLoadedChunks","peerCount","timers","lastExportedBin","sendDelay","nextSendTime","nextSendTimeout","isReady","firstLoadedChunk","firstRequestedChunk","lastAvailableBin","planFor","dip","peer_remoteId","peer_localId","swift_rtt","swift_rttvar","swift_chunkIntervalMean","swift_cwnd","ledbat_cwnd","ledbat_cto","ledbat_currentDelay","ledbat_baseDelay","ledbat_rttMean","ledbat_rttVar","ledbat_rtt","ledbat_flightSize","picker_startBin","picker_lastAvailableBin","minIncompleteBin","picker_firstLoadedChunk","picker_firstRequestedChunk","digestDelaySamples","timeoutThreshold","cancelledRequests","peek","pop","_peerState$peer","requestAddresses","random","insert","firstRequestedBin","sendCancel","sendRequest","requestedAddress","requestedChunk","sentAt","addSent","sendChunk","sendInterval","addFlow","_ref10","removeFlow","_ref11","getPeerState","chunkInterval","addRttSample","_ref12","sendHave","nextExportedBin","advanceLastBin","_ref13","addDelaySample","sentChunk","onDataLoss","genericEncoding","_uri$protocolOptions","protocolOptions","encoding","toBuffer","protocolOption","protocolOptionName","newBins","getNewCompleteBins","_newBins","minNewBin","maxNewBin","chunks","CONNECTING","AWAITING_HANDSHAKE","READY","CHOKED","DISCONNECTING","CLOSED","PeerDataHandlerContext","integrityVerifier","createVerifier","Peer","_this$handlers","createChannelId","handlers","handleHandshakeMessage","handleDataMessage","handleHaveMessage","handleAckMessage","handleIntegrityMessage","handleSignedIntegrityMessage","handleRequestMessage","handleCancelMessage","handleChokeMessage","handleUnchokeMessage","sendBuffer","addPeer","sendHandshake","removePeer","context","handler","handshake","setLiveDiscardWindow","verifyProtocolOptions","getRecentChunks","computeOneWayDelay","markChunkReceived","getContentIntegrityVerifier","verifyChunk","markChunkVerified","emitNewData","err","markChunkRejected","markChunkAvailable","markSendAcked","setHash","setHashSignature","enqueueRequest","cancelRequest","addresses","_len2","_key2","chunk","constituentSignatures","reverse","getSignatureHash","round","SwarmSet","setMaxListeners","swarmIdToKey","channels","Channel","_EventEmitter3","peers","handleSwarmInsert","getOrCreatePeer","liveSwarms","find","handleData","handleClose","removeListener","p","createPeer","handleRemove","removedSwarm","NUMBER_OF_NODES_PER_BUCKET","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","KBucket","numberOfNodesPerKBucket","localNodeId","handlePing","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleRemoved","handleUpdated","handleAdded","knownPeerIds","channelMap","seenIds","LRU","knownRoutes","maxAge","callbacks","handlePeersRequest","handlePingRequest","handleTraceRequest","handleCallbackResponse","startPeerRequests","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","stopPeerRequests","removeChannel","ids","peerRequestIvl","setInterval","retry","sendPeerRequest","clearInterval","newChannel","lastPing","addChannel","replaceChannel","replaceChannelTimeout","getChannel","add","oldChannel","bufferMessages","handleOpen","removeEventListener","req","trace","warn","to","res","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","re","forwardMessage","hops","sendRaw","reqCallback","handlePeersResponse","_ref6$data","closest","randomBytes","idHex","knownRoute","vectorClock","SubChannel","peerId","ReadyStates","OPEN","_ref12$data","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__","Conn","remote","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","closed","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","setImmediate","handleConnection","datachannels","nextId","conns","ClientDataChannel","sendConnection","_Conn","open","DELIMITER","DELIMITER_LENGTH","ChunkedWriteStream","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","appendData","HEADER_INSTANCE_LENGTH","writer","intervalId","done","AbstractChunkedReadStream","handleWarmupSwarmData","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","handleSwarmData","chunkBufferLength","nextDataOffset","nextDataLength","delimiterIndex","readHeader","instance","lastChunkOffset","nextDataEnd","lastChunkEnd","handleEndData","_AbstractChunkedReadS","firstEmitted","_AbstractChunkedReadS2","chunkSlice","firstChunkStart","protocolOptionToKey","_protocolOptionToKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","URLSafeBase64","encode","_home_slugalisk_projects_ppspp_player_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","join","uriString","startsWith","args","substring","split","query","_query$split","_query$split2","decodeURIComponent","arg","parseFloat","xt","decode"],"mappings":"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","file":"static/js/main.ea15d732.chunk.js","sourcesContent":["import invert from 'lodash.invert';\n\nexport const MaxChannelId = 0xffffffff;\n\nexport const ProtocolOptions = {\n  Version: 0,\n  MinimumVersion: 1,\n  SwarmIdentifier: 2,\n  ContentIntegrityProtectionMethod: 3,\n  MerkleHashTreeFunction: 4,\n  LiveSignatureAlgorithm: 5,\n  ChunkAddressingMethod: 6,\n  LiveDiscardWindow: 7,\n  SupportedMessages: 8,\n  ChunkSize: 9,\n  EndOption: 255,\n};\n\nexport const Version = {\n  RFC7574: 1,\n};\n\nexport const ContentIntegrityProtectionMethod = {\n  None: 0,\n  MerkleHashTree: 1,\n  SignAll: 2,\n  UnifiedMerkleTree: 3,\n};\n\nexport const MerkleHashTreeFunction = {\n  SHA1: 0,\n  SHA224: 1,\n  SHA256: 2,\n  SHA384: 3,\n  SHA512: 4,\n};\n\nexport const LiveSignatureAlgorithm = {\n  RSASHA1: 5,\n  RSASHA256: 8,\n  ECDSAP256SHA256: 13,\n  ECDSAP384SHA384: 14,\n};\n\nexport const ChunkAddressingMethod = {\n  Bin32: 0,\n  ByteRange64: 1,\n  ChunkRange32: 2,\n  Bin64: 3,\n  ChunkRange64: 4,\n};\n\nexport const VariableChunkSize = 0xffffffff;\n\nexport const MessageTypes = {\n  HANDSHAKE: 0,\n  DATA: 1,\n  ACK: 2,\n  HAVE: 3,\n  INTEGRITY: 4,\n  PEX_RESv4: 5,\n  PEX_REQ: 6,\n  SIGNED_INTEGRITY: 7,\n  REQUEST: 8,\n  CANCEL: 9,\n  CHOKE: 10,\n  UNCHOKE: 11,\n  PEX_RESv6: 12,\n  PEX_REScert: 13,\n};\n\n[\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n].forEach(enumType => {\n  const names = invert(enumType);\n  enumType.name = value => names[value] || 'UNDEFINED';\n});\n","import crypto from 'crypto';\n\nconst createRandomId = () => {\n  const id = new Uint8Array(16);\n  crypto.randomFillSync(id);\n  return id;\n};\n\nexport default createRandomId;\n","import {EventEmitter} from 'events';\nimport crypto from 'crypto';\nimport {generateKeyPair} from './integrity';\nimport URI from './uri';\nimport {\n  ChunkAddressingMethod,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ProtocolOptions,\n} from './constants';\nimport {Swarm} from '../ppspp';\n\nexport default class Injector {\n  constructor(swarm, chunkSize, chunksPerSignature) {\n    this.swarm = swarm;\n    this.chunkSize = chunkSize;\n    this.chunksPerSignature = chunksPerSignature;\n    this.inputBuffer = Buffer.alloc(0);\n    this.chunkBuffer = [];\n  }\n\n  appendData(data) {\n    if (this.inputBuffer.length + data.length < this.chunkSize) {\n      this.inputBuffer = Buffer.concat([this.inputBuffer, data]);\n      return;\n    }\n\n    let dataOffset = 0;\n    if (this.inputBuffer.length > 0) {\n      dataOffset = this.chunkSize - this.inputBuffer.length;\n      this.chunkBuffer.push(Buffer.concat([this.inputBuffer, data.slice(0, dataOffset)], this.chunkSize));\n    }\n\n    for (let i = dataOffset; i + this.chunkSize < data.length; i += this.chunkSize) {\n      this.chunkBuffer.push(data.slice(i, Math.min(data.length, i + this.chunkSize)));\n      dataOffset = i + this.chunkSize;\n    }\n\n    if (dataOffset < data.length) {\n      this.inputBuffer = data.slice(dataOffset);\n    }\n\n    while (this.chunkBuffer.length > this.chunksPerSignature) {\n      const subtreeChunks = this.chunkBuffer.splice(0, this.chunksPerSignature);\n      this.swarm.contentIntegrity.appendSubtree(subtreeChunks).then(subtree => {\n        this.swarm.chunkBuffer.setRange(subtree.rootAddress, subtreeChunks);\n        this.swarm.scheduler.markChunksLoaded(subtree.rootAddress);\n      });\n    }\n  }\n\n  static create(options = {}) {\n    const {\n      chunkSize = 8 * 1024,\n      chunksPerSignature = 64,\n      liveDiscardWindow = Math.ceil(15 * 3500 * 1024 / chunkSize),\n      chunkAddressingMethod = ChunkAddressingMethod.Bin32,\n      contentIntegrityProtectionMethod = ContentIntegrityProtectionMethod.UnifiedMerkleTree,\n      merkleHashTreeFunction = MerkleHashTreeFunction.SHA256,\n      liveSignatureAlgorithm = LiveSignatureAlgorithm.ECDSAP256SHA256,\n    } = options;\n\n    return generateKeyPair(liveSignatureAlgorithm).then(({swarmId, privateKey}) => {\n      const uri = new URI(\n        swarmId,\n        {\n          [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n          [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n          [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n          [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n          [ProtocolOptions.ChunkSize]: chunkSize,\n        }\n      );\n\n      console.log('swarm uri:', uri.toString());\n\n      const clientOptions = {\n        liveDiscardWindow,\n        privateKey,\n        uploadRateLimit: 10e6,\n      };\n\n      return new Swarm(uri, clientOptions);\n    }).then(swarm => new Injector(swarm, chunkSize, chunksPerSignature));\n  }\n}\n\nexport class NoiseInjector extends EventEmitter {\n  constructor(dataRate = 3.5e6 / 8, interval = 250) {\n    super();\n    this.dataRate = dataRate * (interval / 1000);\n    this.interval = interval;\n  }\n\n  start() {\n    const data = Buffer.alloc(this.dataRate);\n    crypto.randomFillSync(data);\n\n    Injector.create().then(injector => {\n      this.intervalId = setInterval(() => injector.appendChunk(data), this.interval);\n      this.injector = injector;\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n","import {ChunkAddressingMethod} from './constants';\n\nexport default class Address {\n  constructor(bin = 0, treeBounds = Address.binBounds(bin)) {\n    this.bin = bin;\n    [this.start, this.end] = treeBounds;\n  }\n\n  containsBin(bin) {\n    return this.start <= bin && bin <= this.end;\n  }\n\n  getChunkCount() {\n    return (this.end - this.start) / 2 + 1;\n  }\n\n  static from(address) {\n    if (address instanceof Address) {\n      return address;\n    }\n\n    switch (address.type) {\n      case ChunkAddressingMethod.Bin32:\n        return new Address(address.value);\n      case ChunkAddressingMethod.ChunkRange32: {\n        const {start, end} = address;\n        return new Address((end - start) / 2, [start, end]);\n      }\n      default:\n        throw new Error('unsupported address type');\n    }\n  }\n\n  static binBounds(bin) {\n    return [\n      bin & (bin + 1),\n      (bin | (bin + 1)) - 1,\n    ];\n  }\n}\n","import WebCrypto from 'node-webcrypto-ossl';\n\nmodule.exports = new WebCrypto();\n","module.exports = window.crypto;\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport {scaleLinear} from 'd3-scale';\n\nimport './index.css';\n\nclass ToggleButton extends Component {\n  static defaultProps = {\n    expanded: false,\n  };\n\n  render() {\n    const buttonClasses = classNames({\n      'diagnostic_menu__toggle_button': true,\n      'diagnostic_menu__toggle_button--expanded': this.props.expanded,\n    });\n\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={buttonClasses}\n      />\n    );\n  }\n}\n\nclass SwarmState extends Component {\n  render() {\n    const {scheduler} = this.props.value;\n\n    const values = [\n      {\n        key: 'totalSends',\n        value: scheduler.totalSends,\n      },\n      {\n        key: 'totalRequests',\n        value: scheduler.totalRequests,\n      },\n      {\n        key: 'totalRequestsReceived',\n        value: scheduler.totalRequestsReceived,\n      },\n      {\n        key: 'totalDroppedRequests',\n        value: scheduler.totalDroppedRequests,\n      },\n      {\n        key: 'totalReceived',\n        value: scheduler.totalReceived,\n      },\n      {\n        key: 'totalAdded',\n        value: scheduler.totalAdded,\n      },\n      {\n        key: 'totalCancelled',\n        value: scheduler.totalCancelled,\n      },\n      {\n        key: 'ackUnknownSend',\n        value: scheduler.ackUnknownSend,\n      },\n      {\n        key: 'lastCompletedBin',\n        value: scheduler.lastCompletedBin,\n      },\n      {\n        key: 'picker.firstLoadedChunk',\n        value: scheduler.loadedChunks.min(),\n      },\n      {\n        key: 'picker.firstRequestedChunk',\n        value: scheduler.requestedChunks.min(),\n      },\n      {\n        key: 'chunkRate',\n        value: scheduler.chunkRate.value(),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    return (\n      <div className=\"swarm_state__container\">\n        <table>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass PeerStateTable extends Component {\n  render() {\n    const peerState = this.props.value;\n\n    const values = [\n      {\n        key: 'chunkIntervalMean',\n        value: peerState.chunkIntervalMean.value(),\n      },\n      {\n        key: 'wasteRate',\n        value: peerState.wasteRate.value(),\n      },\n      {\n        key: 'chunkRate',\n        value: peerState.chunkRate.value(),\n      },\n      {\n        key: 'ledbat.baseDelay',\n        value: peerState.ledbat.baseDelay.getMin(),\n      },\n      {\n        key: 'ledbat.currentDelay',\n        value: peerState.ledbat.currentDelay.getMin(),\n      },\n      {\n        key: 'ledbat.rttMean',\n        value: peerState.ledbat.rttMean.value(),\n      },\n      {\n        key: 'ledbat.rttVar',\n        value: peerState.ledbat.rttVar.value(),\n      },\n      {\n        key: 'ledbat.cwnd',\n        value: peerState.ledbat.cwnd,\n      },\n      {\n        key: 'ledbat.cto',\n        value: peerState.ledbat.cto,\n      },\n      {\n        key: 'ledbat.flightSize',\n        value: peerState.ledbat.flightSize,\n      },\n      {\n        key: 'validChunks',\n        value: peerState.validChunks,\n      },\n      {\n        key: 'requestQueue.length',\n        value: peerState.requestQueue.length,\n      },\n      {\n        key: 'requestedChunks.length',\n        value: peerState.requestedChunks.length,\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{String(value)}</td>\n      </tr>\n    ));\n\n    const {\n      startBin,\n      endBin,\n    } = this.props;\n\n    rows.push(\n      <tr key=\"availableChunks\">\n        <td colSpan=\"2\">\n          Available\n          <AvailabilityMapChart\n            value={this.props.value.availableChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"sentChunks\">\n        <td colSpan=\"2\">\n          Sent\n          <AvailabilityMapChart\n            value={this.props.value.sentChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"receivedChunks\">\n        <td colSpan=\"2\">\n          Received\n          <AvailabilityMapChart\n            value={this.props.value.receivedChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    return (\n      <table>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nclass AvailabilityMapChart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (!this.canvas.current) {\n      return;\n    }\n\n    const {value} = this.props;\n    const min = isNaN(this.props.startBin)\n      ? value.min()\n      : this.props.startBin;\n    const max = isNaN(this.props.endBin)\n      ? value.max()\n      : this.props.endBin;\n\n    if (!isFinite(min) || !isFinite(max) || isNaN(min) || isNaN(max)) {\n      return;\n    }\n\n    const ctx = this.canvas.current.getContext('2d');\n    const width = 500;\n    const height = 20;\n\n    const scale = scaleLinear()\n      .domain([min, max])\n      .range([0, width]);\n\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n\n    ctx.fillStyle = '#ccc';\n\n    let lastStart = -1;\n    for (let i = min; i <= max; i += 2) {\n      if (!value.values.get((i + 2) / 2) || i === max) {\n        if (lastStart !== -1) {\n          ctx.fillRect(scale(lastStart), 0, scale(i) - scale(lastStart), 20);\n\n          lastStart = -1;\n        }\n      } else if (lastStart === -1) {\n        lastStart = i;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <canvas\n        height=\"20\"\n        width=\"500\"\n        ref={this.canvas}\n      />\n    );\n  }\n}\n\nclass PeerState extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n  }\n\n  render() {\n    let table;\n    if (this.state.expanded) {\n      table = (\n        <PeerStateTable\n          value={this.props.value}\n          startBin={this.props.startBin}\n          endBin={this.props.endBin}\n        />\n      );\n    }\n\n    return (\n      <div className=\"peer_state__container\">\n        <div className=\"peer_state__header\">\n          <ToggleButton\n            onClick={this.handleButtonClick}\n            expanded={this.state.expanded}\n          />\n          <h4 className=\"peer_state__title\">\n            {this.props.value.peer.localId} : {this.props.value.peer.remoteId}\n          </h4>\n        </div>\n        {table}\n      </div>\n    );\n  }\n}\n\nclass DiagnosticMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n\n    this.scheduleUpdate();\n  }\n\n  handleUpdate = () => {\n    if (this.state.expanded) {\n      this.forceUpdate(this.scheduleUpdate);\n    }\n  }\n\n  scheduleUpdate = () => {\n    window.requestAnimationFrame(this.handleUpdate);\n  }\n\n  render() {\n    const containerClasses = classNames(\n      this.props.containerClass,\n      {\n        'diagnostic_menu__container': true,\n        'diagnostic_menu__container--expanded': this.state.expanded,\n      },\n    );\n\n    const {\n      lastCompletedBin,\n      liveDiscardWindow,\n    } = this.props.swarm.scheduler;\n    const startBin = lastCompletedBin - liveDiscardWindow;\n    const endBin = lastCompletedBin + liveDiscardWindow;\n\n    let swarmState;\n    let peerStates;\n    if (this.state.expanded) {\n      swarmState = (\n        <SwarmState\n          value={this.props.swarm}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      );\n\n      peerStates = Object.entries(this.props.swarm.scheduler.peerStates).map(([key, peerState]) => (\n        <PeerState\n          key={key}\n          value={peerState}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      ));\n    }\n\n    return (\n      <div className={containerClasses}>\n        <ToggleButton\n          onClick={this.handleButtonClick}\n          expanded={this.state.expanded}\n        />\n        {swarmState}\n        {peerStates}\n      </div>\n    );\n  }\n}\n\nexport default DiagnosticMenu;\n","import React, {Component} from 'react';\nimport muxjs from 'mux.js';\nimport {ChunkedFragmentedReadStream} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport {Buffer} from 'buffer';\n\nimport './SwarmPlayer.css';\n\nconst log = e => console.log(e);\n\nexport default class SwarmPlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.video = React.createRef();\n  }\n\n  componentDidMount() {\n    const mediaSource = new MediaSource();\n\n    this.video.current.addEventListener('error', log);\n    this.video.current.src = URL.createObjectURL(mediaSource);\n\n    mediaSource.addEventListener('sourceopen', () => this.handleSourceOpen(mediaSource));\n  }\n\n  handleSourceOpen = (mediaSource) => {\n    const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"mp4a.40.5,avc1.64001F\"');\n    sourceBuffer.addEventListener('updatestart', log);\n    sourceBuffer.addEventListener('updateend', log);\n    sourceBuffer.addEventListener('error', log);\n\n    const videoSegments = [];\n    let initSet = false;\n\n    sourceBuffer.addEventListener('updateend', () => {\n      if (videoSegments.length) {\n        sourceBuffer.appendBuffer(videoSegments.shift());\n      }\n    });\n\n    var transmuxer = new muxjs.mp4.Transmuxer();\n    transmuxer.on('data', event => {\n      if (event.type === 'combined') {\n        const buf = initSet\n          ? event.data\n          : Buffer.concat([Buffer.from(event.initSegment), Buffer.from(event.data)]);\n        initSet = true;\n\n        if (sourceBuffer.updating) {\n          videoSegments.push(new Uint8Array(buf));\n        } else {\n          sourceBuffer.appendBuffer(new Uint8Array(buf));\n        }\n      } else {\n        console.log('unhandled event', event.type);\n      }\n    });\n\n    const stream = new ChunkedFragmentedReadStream(this.props.swarm);\n    stream.on('start', data => transmuxer.push(new Uint8Array(data)));\n    stream.on('data', data => transmuxer.push(new Uint8Array(data)));\n    stream.on('end', data => {\n      transmuxer.push(new Uint8Array(data));\n      transmuxer.flush();\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <DiagnosticMenu swarm={this.props.swarm} />\n        <video\n          controls\n          className=\"swarm-player-video\"\n          ref={this.video}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport hexToUint8Array from './hexToUint8Array';\n\nexport class Client {\n  constructor(connManager, dhtClientId, bootstrapId, conn, swarmUri) {\n    this.connManager = connManager;\n    this.swarmUri = swarmUri;\n\n    const client = connManager.createClient(conn);\n\n    this.dhtClient = new dht.Client(dhtClientId);\n    this.dhtClient.on('peers.discover', this.handlePeersDiscover.bind(this));\n    this.dhtClient.on('receive.connect.request', this.handleReceiveConnectRequest.bind(this));\n    this.dhtClient.createChannel(bootstrapId, client.createDataChannel('dht'));\n\n    this.ppsppClient = new ppspp.Client();\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    client.init();\n  }\n\n  static create(connManager) {\n    return connManager.bootstrap().then(({data, conn}) => {\n      return new Client(\n        connManager,\n        hexToUint8Array(data.id),\n        hexToUint8Array(data.bootstrapId),\n        conn,\n        data.swarmUri,\n      );\n    });\n  }\n\n  handlePeersDiscover(id) {\n    // console.log('creating client for', ids);\n    const sub = new dht.SubChannel(this.dhtClient, id);\n    const client = this.connManager.createClient(sub);\n\n    this.dhtClient.createChannel(id, client.createDataChannel('dht'));\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    const timeout = setTimeout(() => client.close(), 10000);\n\n    const init = () => {\n      clearTimeout(timeout);\n      client.init();\n    };\n\n    this.dhtClient.send(id, 'connect.request', {channelId: sub.id}, init);\n  }\n\n  handleReceiveConnectRequest({data: {channelId, from}, callback}) {\n    // if (this.dhtClient.channels.count() > 10) {\n    //   return;\n    // }\n\n    // console.log('handleReceiveConnectRequest', {channelId, from, callback});\n    const id = new hexToUint8Array(from);\n    const client = this.connManager.createClient(new dht.SubChannel(this.dhtClient, id, channelId));\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.ppsppClient.createChannel(channel);\n      }\n    });\n\n    callback({});\n  }\n}\n","import {EventEmitter} from 'events';\nimport {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from 'wrtc';\n\nexport class ConnManager {\n  constructor(bootstrapAddress) {\n    this.bootstrapAddress = bootstrapAddress;\n  }\n\n  bootstrap() {\n    return new Promise((resolve, reject) => {\n      const conn = new WebSocket(this.bootstrapAddress);\n      conn.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'bootstrap') {\n          resolve({data, conn});\n        } else {\n          reject(new Error(`expected bootstrap, received: ${event.data}`));\n        }\n      };\n    });\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    // TODO: retry?\n    mediator.once('error', () => conn.close());\n    client.once('open', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n\n    switch (data.type) {\n      case 'offer':\n      case 'answer':\n        this.emit('remotedescription', new RTCSessionDescription(data));\n        break;\n      case 'icecandidate':\n        if (data.sdp && data.sdp.candidate) {\n          this.emit('icecandidate', new RTCIceCandidate(data.sdp));\n        }\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  sendOffer(event) {\n    this.send(event);\n  }\n\n  sendAnswer(event) {\n    this.send(event);\n  }\n\n  sendIceCandidate(event) {\n    if (event.candidate) {\n      this.send({\n        type: 'icecandidate',\n        sdp: event.candidate,\n      });\n    }\n  }\n\n  send(event) {\n    if (this.conn.readyState !== 1) {\n      this.emit('error', new Error('connection in invalid state'));\n      return;\n    }\n\n    this.conn.send(JSON.stringify(event));\n  }\n}\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.initialized = false;\n    this.waitingChannels = 0;\n\n    this.peerConn = new RTCPeerConnection({\n      iceServers: [{urls: 'stun:stun.l.google.com:19302'}],\n    });\n\n    this.peerConn.addEventListener('icecandidate', candidate => this.mediator.sendIceCandidate(candidate));\n    this.peerConn.addEventListener('datachannel', this.handleDataChannel.bind(this));\n\n    mediator.once('error', () => this.peerConn.close());\n    mediator.on('icecandidate', candidate => this.addIceCandidate(candidate));\n\n    this._ready = new Promise((resolve, reject) => {\n      mediator.on('remotedescription', description => {\n        this.peerConn.setRemoteDescription(description)\n          .then(() => {\n            resolve();\n            this.createAnswer();\n          })\n          .catch(reject);\n      });\n    });\n  }\n\n  createAnswer() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n\n    this.peerConn.createAnswer()\n      .then((description) => {\n        this.peerConn.setLocalDescription(description);\n        this.mediator.sendAnswer(description);\n      })\n      .catch(error => console.error(error));\n  }\n\n  addIceCandidate(candidate) {\n    this._ready.then(() => this.peerConn.addIceCandidate(candidate));\n  }\n\n  handleDataChannel(event) {\n    this.waitingChannels ++;\n    event.channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    this.emit('datachannel', event);\n  }\n\n  createDataChannel(label, options = {}) {\n    options = {\n      ordered: true,\n      maxRetransmits: 10,\n      ...options,\n    };\n\n    const channel = this.peerConn.createDataChannel(label, options);\n    channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    return channel;\n  }\n\n  resolveWaitingChannel() {\n    if (-- this.waitingChannels === 0) {\n      console.log('wrtc client opened');\n      this.emit('open');\n    }\n  }\n\n  init() {\n    this.peerConn.createOffer()\n      .then(offer => {\n        this.initialized = true;\n        // console.log('initial offer', offer);\n        this.peerConn.setLocalDescription(offer);\n        this.mediator.sendOffer(offer);\n      });\n  }\n\n  close() {\n    console.log('wrtc client closed');\n    this.peerConn.close();\n    this.emit('close');\n  }\n}\n","import React, {useEffect, useState} from 'react';\nimport URI from './ppspp/uri';\n// import DiagnosticMenu from './DiagnosticMenu';\nimport SwarmPlayer from './SwarmPlayer';\nimport {Client} from './client';\nimport {ConnManager} from './wrtc';\n// import {ChunkedReadStream} from './chunkedStream';\n\nimport './App.css';\n\nconst App = () => {\n  const [ppsppClient, setPpsppClient] = useState(null);\n  const [swarmUri, setSwarmUri] = useState('');\n  const [swarm, setSwarm] = useState(null);\n\n  useEffect(() => {\n    const proto = window.location.protocol === 'https:' ? 'wss' : 'ws';\n    const host = process.env.NODE_ENV === 'development'\n      ? window.location.hostname + ':8080'\n      : window.location.host;\n    const bootstrapAddress = `${proto}://${host}`;\n\n    console.log({bootstrapAddress});\n\n    const connManager = new ConnManager(bootstrapAddress);\n\n    Client.create(connManager).then(({ppsppClient, swarmUri}) => {\n      setPpsppClient(ppsppClient);\n      setSwarmUri(swarmUri);\n    });\n  }, []);\n\n  if (swarm) {\n    // return <DiagnosticMenu swarm={swarm} />;\n    return <SwarmPlayer swarm={swarm} />;\n  }\n\n  const onJoinSubmit = e => {\n    e.preventDefault();\n\n    console.log(swarmUri);\n    const uri = URI.parse(swarmUri);\n    console.log('joining', uri);\n\n    const swarm = ppsppClient.joinSwarm(uri);\n    // const stream = new ChunkedReadStream(swarm);\n    // stream.on('data', d => console.log(`received ${d.length} bytes`));\n    setSwarm(swarm);\n  };\n\n  const onInputChange = e => {\n    setSwarmUri(e.target.value);\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"idle\">\n        <div className=\"scanner\"></div>\n        <div className=\"noise\"></div>\n      </div>\n      <form className=\"join-form\" onSubmit={onJoinSubmit}>\n        <input\n          onChange={onInputChange}\n          placeholder=\"Enter Swarm URI\"\n          defaultValue={swarmUri}\n        />\n        <button>Join</button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React, {useEffect, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport {ChunkedReadStream, ChunkedWriteStreamInjector} from './chunkedStream';\nimport DiagnosticMenu from './DiagnosticMenu';\n\nimport './App.css';\n\nconst App = () => {\n  const [server] = useState(new Server());\n  const [swarms, setSwarms] = useState([]);\n  const [swarmUri, setSwarmUri] = useState('');\n\n  useEffect(() => {\n    const injector = new ChunkedWriteStreamInjector();\n\n    injector.on('publish', ({swarm}) => {\n      setSwarmUri(swarm.uri);\n      server.ppsppClient.publishSwarm(swarm);\n    });\n\n    injector.on('unpublish', ({swarm}) => {\n      server.ppsppClient.unpublishSwarm(swarm);\n    });\n\n    injector.start();\n\n    return () => injector.stop();\n  }, []);\n\n  const handleAddPeerClick = () => {\n    Client.create(new ConnManager(server)).then(({ppsppClient}) => {\n      const swarm = ppsppClient.joinSwarm(swarmUri);\n      // console.log(ppsppClient);\n\n      setSwarms([...swarms, swarm]);\n\n      const stream = new ChunkedReadStream(swarm);\n      stream.on('data', d => console.log(`received ${d.length} bytes`));\n    });\n  };\n\n  const diagnosticMenus = swarms.map((swarm, i) => (\n    <DiagnosticMenu\n      key={i}\n      swarm={swarm}\n      containerClass={`diagnostic-menu--indent-${i}`}\n    />\n  ));\n\n  return (\n    <div>\n      {diagnosticMenus}\n      <button onClick={handleAddPeerClick}>add peer</button>\n    </div>\n  );\n};\n\nexport default App;\n","import React, {useEffect, useReducer, useState} from 'react';\nimport {Server, ConnManager} from './loopback';\nimport {Client} from './client';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport {schemeCategory10} from 'd3-scale-chromatic';\nimport {scaleOrdinal} from 'd3-scale';\n// import SpriteText from 'three-spritetext';\n// import {Mesh, SphereBufferGeometry, MeshLambertMaterial} from 'three';\n\nimport './App.css';\n\nconst color = scaleOrdinal(schemeCategory10);\n\nconst reduceGraph = (graph, {type, ...data}) => {\n  switch (type) {\n    case 'ADD_NODE':\n      return {\n        nodes: [...graph.nodes, data],\n        links: graph.links,\n      };\n    case 'REMOVE_NODE':\n      return {\n        nodes: graph.nodes.filter(node => node.id !== data.id),\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.id && target.id !== data.id;\n        }),\n      };\n    case 'ADD_LINK':\n      return {\n        nodes: graph.nodes,\n        links: [...graph.links, {...data, activity: 0}],\n      };\n    case 'UPDATE_LINK':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            ...data,\n          };\n        }),\n      };\n    case 'INCR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity + 1,\n          };\n        }),\n      };\n    case 'DECR_LINK_ACTIVITY':\n      return {\n        nodes: graph.nodes,\n        links: graph.links.map((link) => {\n          const {source, target} = link;\n          if (source.id !== data.source || target.id !== data.target) {\n            return link;\n          }\n          return {\n            ...link,\n            activity: link.activity - 1,\n          };\n        }),\n      };\n    case 'REMOVE_LINK':\n      console.log(data);\n      return {\n        nodes: graph.nodes,\n        links: graph.links.filter(({source, target}) => {\n          return source.id !== data.source || target.id !== data.target;\n        }),\n      };\n    default:\n      return graph;\n  }\n};\n\nconst useGraph = () => {\n  const [server] = useState(new Server());\n  const [gen, setGen] = useState(1);\n  const [graph, dispatchGraphAction] = useReducer(reduceGraph, {nodes: [], links: []});\n\n  useEffect(() => {\n    const source = arrayBufferToHex(server.dhtClient.id);\n    dispatchGraphAction({\n      type: 'ADD_NODE',\n      id: source,\n      color: color(0),\n      dhtClient: server.dhtClient,\n    });\n  }, []);\n\n  const addNodes = (n = 1, props = {}) => {\n    setGen(gen + 1);\n\n    Promise.all(new Array(n).fill(0).map(() => Client.create(new ConnManager(server))))\n      .then(clients => clients.forEach(({dhtClient}) => {\n        // if (Math.random() > 0.5) {\n        //   setTimeout(() => dhtClient.close(), Math.random() * 30000);\n        // }\n\n        const {id, allChannels} = dhtClient;\n        console.log(allChannels);\n\n        const source = arrayBufferToHex(id);\n        dispatchGraphAction({\n          type: 'ADD_NODE',\n          id: source,\n          color: color(gen),\n          dhtClient,\n          ...props,\n        });\n        dhtClient.on('close', () => dispatchGraphAction({\n          type: 'REMOVE_NODE',\n          id: source,\n        }));\n\n        allChannels.toArray().forEach(({id, conn}) => {\n          if (conn != null) {\n            dispatchGraphAction({\n              type: 'ADD_LINK',\n              source,\n              target: arrayBufferToHex(id),\n              color: conn ? '#fff' : '#66f',\n            });\n          }\n        });\n\n        // const registerConnObservers = (target, conn) => {\n        //   const handleMessage = () => {\n        //     dispatchGraphAction({type: 'INCR_LINK_ACTIVITY', source, target});\n        //     setTimeout(() => dispatchGraphAction({type: 'DECR_LINK_ACTIVITY', source, target}), 10000);\n        //   };\n\n        //   conn.on('message', handleMessage);\n        //   conn.remote.on('message', handleMessage);\n        // };\n\n        allChannels.on('added', ({id, conn}) => {\n          if (conn != null) {\n            const target = arrayBufferToHex(id);\n            dispatchGraphAction({\n              type: 'ADD_LINK',\n              source,\n              target,\n              color: conn ? '#fff' : '#66f',\n            });\n\n\n            // registerConnObservers(target, conn);\n          }\n        });\n        allChannels.on('updated', ({conn: oldConn}, {id, conn}) => {\n          if (conn !== oldConn) {\n            const target = arrayBufferToHex(id);\n            // dispatchGraphAction({\n            //   type: 'UPDATE_LINK',\n            //   source,\n            //   target,\n            //   color: conn ? '#fff' : '#66f',\n            // });\n\n            dispatchGraphAction({\n              type: 'ADD_LINK',\n              source,\n              target,\n              color: conn ? '#fff' : '#66f',\n            });\n\n\n            // registerConnObservers(target, conn);\n          }\n        });\n        allChannels.on('removed', ({id}) => dispatchGraphAction({\n          type: 'REMOVE_LINK',\n          source,\n          target: arrayBufferToHex(id),\n        }));\n      }));\n  };\n\n  return [graph, {addNodes}];\n};\n\nconst useNodePinger = () => {\n  const [source, setSource] = useState(null);\n\n  const handleNodeClick = node => {\n    console.log(node);\n    if (source === null) {\n      setSource(node);\n      console.log('set source', arrayBufferToHex(node.dhtClient.id));\n      return;\n    }\n\n    console.log('pinging %s > %s', arrayBufferToHex(source.dhtClient.id), arrayBufferToHex(node.dhtClient.id))\n    source.dhtClient.sendPing(node.dhtClient.id, (data) => {\n      console.log('received ping response', data);\n    });\n    setSource(null);\n  };\n\n  return handleNodeClick;\n};\n\nconst App = () => {\n  const [graph, {addNodes}] = useGraph();\n  const handleNodeClick = useNodePinger();\n\n  console.log(graph);\n\n  // useEffect(() => {\n  //   let n = 1;\n  //   const ivl = setInterval(() => {\n  //     addNodes(1, {color: color(n)});\n  //     if (++ n == 50) {\n  //       clearInterval(ivl);\n  //     }\n  //   }, 1000);\n  //   return () => clearInterval(ivl);\n  // }, []);\n\n  return (\n    <div>\n      <div className=\"graph-buttons\">\n        <button onClick={() => addNodes(1)}>add 1 peer</button>\n        <button onClick={() => addNodes(5)}>add 5 peers</button>\n        <button onClick={() => addNodes(10)}>add 10 peers</button>\n      </div>\n      <ForceGraph3D\n        graphData={graph}\n        nodeAutoColorBy=\"gen\"\n        onNodeClick={handleNodeClick}\n        linkColor={link => link.color}\n        linkWidth={1.5}\n        nodeRelSize={2}\n        nodeVal={node => node.dhtClient.allChannels.count()}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport App from './App';\nimport Test from './Test';\nimport DhtGraph from './DhtGraph';\n\nconst Router = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/test\" component={Test} />\n      <Route exact path=\"/dht-graph\" component={DhtGraph} />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './Router';\n\nimport './index.css';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n","import hexToArrayBuffer from 'hex-to-array-buffer';\n\nexport default function hexToUint8Array(v) {\n  return new Uint8Array(hexToArrayBuffer(v));\n}\n","import {Buffer} from 'buffer';\nimport arrayEqual from 'array-equal';\nimport binSearch from '../binSearch';\nimport Address from './address';\nimport SwarmId from './swarmid';\n\nimport {\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n} from './constants';\n\nconst crypto = typeof window === 'undefined'\n  ? require('./webcrypto')\n  : require('./crypto');\n\nconst toUint8Array = data => new Uint8Array(data);\n\nexport const MerkleHashTreeFunctionAlgorithms = {\n  [MerkleHashTreeFunction.SHA1]: 'SHA-1',\n  [MerkleHashTreeFunction.SHA224]: 'SHA-224',\n  [MerkleHashTreeFunction.SHA256]: 'SHA-256',\n  [MerkleHashTreeFunction.SHA384]: 'SHA-384',\n  [MerkleHashTreeFunction.SHA512]: 'SHA-512',\n};\n\nexport const MerkleHashTreeFunctionByteLengths = {\n  [MerkleHashTreeFunction.SHA1]: 20,\n  [MerkleHashTreeFunction.SHA224]: 28,\n  [MerkleHashTreeFunction.SHA256]: 32,\n  [MerkleHashTreeFunction.SHA384]: 48,\n  [MerkleHashTreeFunction.SHA512]: 64,\n};\n\nexport const createMerkleHashTreeFunction = (merkleHashTreeFunction) => {\n  const algorithm = MerkleHashTreeFunctionAlgorithms[merkleHashTreeFunction];\n  if (algorithm === undefined) {\n    throw new Error('invalid merkle hash tree function');\n  }\n\n  const nullHash = new Uint8Array(MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction]);\n\n  return (...values) => {\n    values = values.map(value => value === undefined ? nullHash : value);\n\n    if (values.every(value => arrayEqual(value, nullHash))) {\n      return Promise.resolve(nullHash);\n    }\n\n    if (values.length > 1) {\n      values = new Uint8Array(Buffer.concat(values.map(value => Buffer.from(value))));\n    } else {\n      values = values[0];\n    }\n\n    return crypto.subtle.digest(algorithm, values).then(toUint8Array);\n  };\n};\n\nexport const LiveSignatureAlgorithms = {\n  [LiveSignatureAlgorithm.RSASHA1]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-1'},\n  },\n  [LiveSignatureAlgorithm.RSASHA256]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP256SHA256]: {\n    name: 'ECDSA',\n    namedCurve: 'P-256',\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP384SHA384]: {\n    name: 'ECDSA',\n    namedCurve: 'P-384',\n    hash: {name: 'SHA-384'},\n  },\n};\n\nexport const createLiveSignatureSignFunction = (liveSignatureAlgorithm, privateKey, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  const importResult = crypto.subtle.importKey('pkcs8', privateKey, algorithm, false, ['sign']);\n\n  return data => importResult\n    .then(privateKey => crypto.subtle.sign(algorithm, privateKey, data))\n    .then(toUint8Array);\n};\n\nexport const createLiveSignatureVerifyFunction = (liveSignatureAlgorithm, swarmId, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...swarmId.getKeyParams(),\n    ...algorithm,\n  };\n\n  const publicKey = new Uint8Array(swarmId.publicKey);\n  const importResult = crypto.subtle.importKey('spki', publicKey, algorithm, false, ['verify']);\n\n  return (signature, data) => importResult\n    .then(publicKey => crypto.subtle.verify(algorithm, publicKey, signature, data))\n    .then(toUint8Array);\n};\n\nexport const generateKeyPair = (liveSignatureAlgorithm, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  return crypto.subtle.generateKey(algorithm, true, ['sign', 'verify'])\n    .then(keyPair => Promise.all([\n      crypto.subtle.exportKey('pkcs8', keyPair.privateKey),\n      crypto.subtle.exportKey('spki', keyPair.publicKey),\n    ]))\n    .then(([privateKey, publicKey]) => ({\n      privateKey,\n      publicKey,\n      swarmId: SwarmId.from({\n        ...algorithm,\n        liveSignatureAlgorithm,\n        publicKey,\n      }),\n    }));\n};\n\nconst unavailableLiveSignatureSignFunction = () => Promise.reject('live signature function not available');\n\nexport const createContentIntegrityVerifierFactory = (\n  contentIntegrityProtectionMethod,\n  merkleHashTreeFunction,\n  liveSignatureVerifyFunction,\n  liveSignatureSignFunction = unavailableLiveSignatureSignFunction,\n  liveDiscardWindow = Infinity,\n) => {\n  class Signature {\n    constructor(hash, verified = false) {\n      this.hash = hash;\n      this.verified = verified;\n    }\n\n    markVerified() {\n      this.verified = true;\n    }\n\n    getHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return !this.verified\n        ? Promise.reject('cannot use unverified signature')\n        : Promise.resolve(arrayEqual(this.hash, value));\n    }\n  }\n\n  // TODO: timestamp in hash?\n  class SignedSignature {\n    constructor(signature, hash) {\n      this.signature = signature;\n      this.hash = hash;\n      this.verificationResult = undefined;\n    }\n\n    verifyHash() {\n      if (this.verificationResult === undefined) {\n        this.verificationResult = liveSignatureVerifyFunction(this.hash, this.getHash())\n          .then(() => this.markVerified());\n      }\n      return this.verificationResult;\n    }\n\n    markVerified() {\n      this.signature.markVerified();\n    }\n\n    getHash() {\n      return this.signature.getHash();\n    }\n\n    getSignatureHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return this.verifyHash().then(() => this.signature.compare(value));\n    }\n  }\n\n  class MerkleHashTree {\n    constructor(rootAddress, signatures = new Array(rootAddress.getChunkCount() * 2 - 1)) {\n      this.rootAddress = rootAddress;\n      this.signatures = signatures;\n    }\n\n    createVerifier() {\n      return new MerkleHashTreeVerifier(this);\n    }\n\n    copy(hashTree) {\n      for (let i = 0; i < this.signatures.length; i ++) {\n        if (hashTree.signatures[i] === undefined) {\n          hashTree.signatures[i] = this.signatures[i];\n        }\n      }\n    }\n\n    getChunkCount() {\n      return this.rootAddress.getChunkCount();\n    }\n\n    getConstituentHashBins({bin}) {\n      if (!this.rootAddress.containsBin(bin)) {\n        throw new Error('bin out of range');\n      }\n\n      const {start} = this.rootAddress;\n      bin -= start;\n\n      const bins = [];\n      let bfsIndex = this.rootAddress.getChunkCount() + bin / 2 - 1;\n      let stride = 2;\n      let parent = bin;\n\n      while (bfsIndex !== 0) {\n        const branch = (bfsIndex & 1) === 1 ? 1 : -1;\n\n        bins.push({\n          isRoot: false,\n          branch,\n          bin: parent + start,\n          bfsIndex,\n          siblingBin: parent + branch * stride + start,\n          siblingBfsIndex: bfsIndex + branch,\n        });\n\n        bfsIndex = Math.floor((bfsIndex - 1) / 2);\n        parent += branch * stride / 2;\n        stride *= 2;\n      }\n\n      bins.push({\n        isRoot: true,\n        branch: 0,\n        bin: parent + start,\n        bfsIndex: 0,\n        siblingBin: parent + start,\n        siblingBfsIndex: 0,\n      });\n\n      return bins;\n    }\n\n    getConstituentSignatures(address) {\n      return this.getConstituentHashBins(address).map(({\n        siblingBin,\n        siblingBfsIndex,\n      }) => ({\n        bin: siblingBin,\n        signature: this.signatures[siblingBfsIndex],\n      }));\n    }\n\n    static from(values, rootAddress = new Address(MerkleHashTree.minSize(values.length) - 1)) {\n      const size = rootAddress.getChunkCount();\n      const hashes = new Array(size * 2 - 1);\n      for (let i = 0; i < size; i ++) {\n        hashes[i + size - 1] = merkleHashTreeFunction(values[i]);\n      }\n      for (let i = (size - 1) * 2; i > 0; i -= 2) {\n        hashes[Math.floor(i / 2) - 1] = Promise.all([hashes[i - 1], hashes[i]])\n          .then(siblings => merkleHashTreeFunction(...siblings));\n      }\n\n      return Promise.all(hashes).then(hashes => {\n        const signatures = hashes.map(hash => new Signature(hash, true));\n\n        return liveSignatureSignFunction(hashes[0]).then(rootHashSignature => {\n          signatures[0] = new SignedSignature(\n            signatures[0],\n            rootHashSignature,\n          );\n\n          return new MerkleHashTree(rootAddress, signatures);\n        });\n      });\n    }\n\n    static minSize(size) {\n      return Math.pow(2, Math.ceil(Math.log2(size)));\n    }\n  }\n\n  class MerkleHashTreeVerifier {\n    constructor(hashTree) {\n      this.hashTree = hashTree;\n      this.signatures = {};\n    }\n\n    setHash({bin}, hash) {\n      this.signatures[bin] = new Signature(hash);\n    }\n\n    setHashSignature({bin}, hash) {\n      const signature = new SignedSignature(this.signatures[bin], hash);\n      this.signatures[bin] = signature;\n    }\n\n    verifyChunk(address, value) {\n      const signatures = [];\n      let hashResult = merkleHashTreeFunction(value);\n\n      this.hashTree.getConstituentHashBins(address).some(({\n        isRoot,\n        branch,\n        bfsIndex,\n        siblingBin,\n        siblingBfsIndex,\n      }) => {\n        let siblingSignature = this.hashTree.signatures[siblingBfsIndex];\n        if (siblingSignature === undefined) {\n          siblingSignature = this.signatures[siblingBin];\n          signatures.push({\n            index: siblingBfsIndex,\n            signature: siblingSignature,\n          });\n        }\n\n        // if the current branch has already been verified short circuit\n        const verifiedSignature = this.hashTree.signatures[bfsIndex];\n        if (verifiedSignature !== undefined) {\n          hashResult = hashResult.then(hash => verifiedSignature.compare(hash));\n          return true;\n        }\n\n        // verify the generated root hash using the one supplied to the mutator\n        if (isRoot) {\n          hashResult = hashResult.then(hash => siblingSignature.compare(hash));\n          return true;\n        }\n\n        // chain generating the next parent hash\n        hashResult = hashResult.then(hash => {\n          signatures.push({\n            index: bfsIndex,\n            signature: new Signature(hash),\n          });\n\n          const siblingHash = siblingSignature.getHash();\n          const siblings = branch === 1 ? [hash, siblingHash] : [siblingHash, hash];\n          return merkleHashTreeFunction(...siblings);\n        });\n        return false;\n      });\n\n      return hashResult.then(() => {\n        signatures.forEach(({index, signature}) => {\n          signature.markVerified();\n          this.hashTree.signatures[index] = signature;\n        });\n      });\n    }\n  }\n\n  class UnifiedMerkleHashTree {\n    constructor() {\n      this.subtrees = [];\n      this.nextStart = 0;\n      this.chunkCount = 0;\n    }\n\n    findSubtree({bin}) {\n      const index = binSearch(\n        this.subtrees.length - 1,\n        i => {\n          const {start, end} = this.subtrees[i].rootAddress;\n          return start <= bin && bin <= end ? 0 : start - bin;\n        },\n      );\n\n      return index < 0 ? undefined : this.subtrees[index];\n    }\n\n    insertSubtree(subtree) {\n      const storedSubtree = this.findSubtree(subtree.rootAddress);\n      if (storedSubtree !== undefined) {\n        if (storedSubtree !== subtree) {\n          subtree.copy(storedSubtree);\n        }\n\n        return storedSubtree;\n      }\n\n      this.subtrees.push(subtree);\n      this.subtrees.sort((a, b) => a.rootAddress.start - b.rootAddress.start);\n\n      this.chunkCount += subtree.getChunkCount();\n      this.pruneSubtrees();\n\n      return subtree;\n    }\n\n    pruneSubtrees() {\n      while (this.subtrees.length > 0 && this.chunkCount - this.subtrees[0].getChunkCount() > liveDiscardWindow) {\n        const removedTree = this.subtrees.shift();\n        this.chunkCount -= removedTree.getChunkCount();\n      }\n    }\n\n    appendSubtree(values) {\n      const treeSize = MerkleHashTree.minSize(values.length);\n      const nextAddress = new Address(\n        this.nextStart + treeSize - 1,\n        [this.nextStart, this.nextStart + (treeSize - 1) * 2],\n      );\n\n      this.nextStart += treeSize * 2;\n\n      return MerkleHashTree.from(values, nextAddress)\n        .then(subtree => this.insertSubtree(subtree));\n    }\n\n    createVerifier(address) {\n      let subtree = this.findSubtree(address) || new MerkleHashTree(address);\n      return new MerkleHashSubtreeVerifier(this, subtree);\n    }\n\n    getConstituentSignatures(address) {\n      const subtree = this.findSubtree(address);\n      if (subtree === undefined) {\n        return;\n      }\n\n      return subtree.getConstituentSignatures(address);\n    }\n  }\n\n  class MerkleHashSubtreeVerifier extends MerkleHashTreeVerifier {\n    constructor(unifiedHashTree, subtree) {\n      super(subtree);\n      this.unifiedHashTree = unifiedHashTree;\n    }\n\n    verifyChunk(address, value) {\n      return super.verifyChunk(address, value)\n        .then(this.unifiedHashTree.insertSubtree(this.hashTree));\n    }\n  }\n\n  class NoneVerifier {\n    setHash() {}\n\n    setHashSignature() {}\n\n    verifyChunk() {\n      return Promise.resolve();\n    }\n  }\n\n  class NoneVerifierFactory {\n    createVerifier() {\n      return new NoneVerifier();\n    }\n\n    getConstituentSignatures() {\n      return [];\n    }\n  }\n\n  // TODO: sign all method\n  switch (contentIntegrityProtectionMethod) {\n    case ContentIntegrityProtectionMethod.None:\n      return new NoneVerifierFactory();\n    case ContentIntegrityProtectionMethod.MerkleHashTree:\n      return new MerkleHashTree();\n    case ContentIntegrityProtectionMethod.UnifiedMerkleTree:\n      return new UnifiedMerkleHashTree();\n    default:\n      throw new Error('unsupported content integrity protection method');\n  }\n};\n","export default function binSearch(max, comparator) {\n  let left = 0;\n  let right = max;\n\n  while (left <= right) {\n    const mid = left + Math.floor((right - left) / 2);\n    const order = comparator(mid);\n\n    if (order < 0) {\n      left = mid + 1;\n    } else if (order > 0) {\n      right = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(left + 1);\n}\n","import {LiveSignatureAlgorithm} from './constants';\n\nconst isRsaAlgorithm = liveSignatureAlgorithm => {\n  const rsaAlgorithms = [\n    LiveSignatureAlgorithm.RSASHA1,\n    LiveSignatureAlgorithm.RSASHA256,\n  ];\n  return rsaAlgorithms.includes(liveSignatureAlgorithm);\n};\n\nexport default class SwarmId {\n  constructor(\n    liveSignatureAlgorithm,\n    publicKey,\n    publicExponent,\n    modulusLength,\n  ) {\n    this.liveSignatureAlgorithm = liveSignatureAlgorithm;\n    this.publicKey = Buffer.from(publicKey);\n    this.publicExponent = publicExponent;\n    this.modulusLength = modulusLength;\n  }\n\n  getLiveSignatureByteLength() {\n    switch (this.liveSignatureAlgorithm) {\n      case LiveSignatureAlgorithm.RSASHA1:\n      case LiveSignatureAlgorithm.RSASHA256:\n        return this.modulusLength / 8;\n      case LiveSignatureAlgorithm.ECDSAP256SHA256:\n        return 64;\n      case LiveSignatureAlgorithm.ECDSAP384SHA384:\n        return 96;\n      default:\n        throw new Error('unsupported live signature algorithm');\n    }\n  }\n\n  getKeyParams() {\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      return {\n        publicExponent: new Uint8Array(this.publicExponent),\n        modulusLength: this.modulusLength,\n      };\n    }\n    return {};\n  }\n\n  byteLength() {\n    const metadataLength = isRsaAlgorithm(this.liveSignatureAlgorithm) ? 9 : 1;\n    return this.publicKey.length + metadataLength;\n  }\n\n  toBuffer() {\n    const buffer = Buffer.alloc(this.byteLength());\n    let length = 0;\n\n    buffer.writeUInt8(this.liveSignatureAlgorithm, length);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      Buffer.from(this.publicExponent).copy(buffer, length + 4 - this.publicExponent.length);\n      length += 4;\n\n      buffer.writeUInt32BE(this.modulusLength, length);\n      length += 4;\n    }\n\n    this.publicKey.copy(buffer, length);\n\n    return buffer;\n  }\n\n  read(buffer) {\n    let length = 0;\n\n    this.liveSignatureAlgorithm = buffer.readUInt8(0);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      this.publicExponent = buffer.slice(length, length + 4);\n      length += 4;\n\n      this.modulusLength = buffer.readUInt32BE(length);\n      length += 4;\n    }\n\n    this.publicKey = buffer.slice(length);\n  }\n\n  static from(values) {\n    if (ArrayBuffer.isView(values)) {\n      const swarmId = Object.create(SwarmId.prototype);\n      swarmId.read(Buffer.from(values));\n      return swarmId;\n    }\n\n    return new SwarmId(\n      values.liveSignatureAlgorithm,\n      values.publicKey,\n      values.publicExponent,\n      values.modulusLength,\n    );\n  }\n}\n","export default class EMA {\n  constructor(alpha) {\n    this.mean = 0;\n    this.alpha = alpha;\n    this.weight = 1;\n  }\n\n  update(value) {\n    this.mean = this.alpha * value + (1 - this.alpha) * this.mean;\n    this.weight *= this.alpha;\n  }\n\n  set(value) {\n    this.mean = value;\n    this.weight = 0;\n  }\n\n  isEmpty() {\n    return this.weight === 1;\n  }\n\n  value() {\n    return this.mean / (1 - this.weight);\n  }\n}\n","export default class RingBuffer {\n  constructor(capacity) {\n    this.setCapacity(capacity);\n  }\n\n  setCapacity(capacity) {\n    this.capacity = capacity;\n    this.lastIndex = capacity;\n    this.values = new Array(capacity);\n\n    for (let i = 0; i < capacity; i ++) {\n      this.values[i] = this.createEmptyValue(i);\n    }\n  }\n\n  advanceLastIndex(lastIndex) {\n    if (this.lastIndex > lastIndex) {\n      return;\n    }\n\n    let firstEmptyIndex = this.lastIndex;\n    if (lastIndex - firstEmptyIndex > this.capacity) {\n      firstEmptyIndex = lastIndex - this.capacity;\n    }\n    for (let i = firstEmptyIndex; i <= lastIndex; i ++) {\n      const index = i % this.capacity;\n      this.values[index] = this.createEmptyValue(i, this.values[index]);\n    }\n    this.lastIndex = lastIndex + 1;\n  }\n\n  createEmptyValue() {\n    return undefined;\n  }\n\n  set(index, value) {\n    this.advanceLastIndex(index);\n    this.values[index % this.capacity] = value;\n  }\n\n  get(index) {\n    if (index < this.lastIndex - this.capacity || index >= this.lastIndex) {\n      return undefined;\n    }\n    return this.values[index % this.capacity];\n  }\n\n  push(value) {\n    this.set(this.lastIndex, value);\n  }\n}\n","import EMA from './ema';\nimport RingBuffer from './RingBuffer';\n\nclass DelayBuffer extends RingBuffer {\n  constructor(capacity, window) {\n    super(capacity);\n    this.min = Infinity;\n    this.window = window;\n  }\n\n  createEmptyValue() {\n    return Infinity;\n  }\n\n  getMin() {\n    return this.min;\n  }\n\n  update(delay) {\n    const now = Math.floor(Date.now() / this.window);\n\n    if (now >= this.lastIndex) {\n      this.advanceLastIndex(now);\n      this.min = Math.min(...this.values);\n    }\n\n    if (delay < this.get(now)) {\n      this.set(now, delay);\n      this.min = Math.min(this.min, delay);\n    }\n  }\n}\n\n// rfc6817\nconst TARGET = 100;\nconst ALLOWED_INCREASE = 1;\nconst GAIN = 1;\nconst CURRENT_HISTORY = 4;\nconst CURRENT_HISTORY_INTERVAL = 1000;\nconst BASE_HISTORY = 10;\nconst BASE_HISTORY_INTERVAL = 60 * 1000;\nconst INIT_CWND = 2;\nconst MIN_CWND = 2;\n\n// max safe WebRTC data channel message size\nconst MSS = 8 * 1024;\n\n// rfc6298\nconst COEF_G = 1;\nconst COEF_K = 4;\n\n// jacobson, v. \"congestion avoidance and control\"\n// doi: 10.1145/52325.52356\nconst COEF_ALPHA = 0.125;\nconst COEF_BETA = 0.25;\n\nexport default class LEDBAT {\n  constructor(target = TARGET, mss = MSS) {\n    this.target = target;\n    this.mss = mss;\n    this.flightSize = 0;\n\n    // the amount of data that is allowed to be outstanding in an rtt in bytes\n    this.cwnd = INIT_CWND * MSS;\n\n    // the congestion timeout\n    this.cto = 1000;\n    this.currentDelay = new DelayBuffer(CURRENT_HISTORY, CURRENT_HISTORY_INTERVAL);\n    this.baseDelay = new DelayBuffer(BASE_HISTORY, BASE_HISTORY_INTERVAL);\n\n    this.lastDataLoss = 0;\n    this.lastAckTime = Infinity;\n    this.rttMean = new EMA(COEF_ALPHA);\n    this.rttVar = new EMA(COEF_BETA);\n\n    this.ackSize = 0;\n  }\n\n  addSent(bytes) {\n    this.flightSize += bytes;\n  }\n\n  addDelaySample(delaySample, bytes = MSS) {\n    this.currentDelay.update(delaySample);\n    this.baseDelay.update(delaySample);\n\n    this.ackSize += bytes;\n\n    this.lastAckTime = Date.now();\n  }\n\n  digestDelaySamples() {\n    this.checkCTO();\n\n    if (this.ackSize === 0) {\n      return;\n    }\n\n    const queuingDelay = Math.abs(this.currentDelay.getMin() - this.baseDelay.getMin());\n    const offTarget = (this.target - queuingDelay) / this.target;\n    this.cwnd += GAIN * offTarget * this.ackSize * this.mss / this.cwnd;\n\n    const maxAllowedCwnd = this.flightSize + ALLOWED_INCREASE * this.mss;\n    this.cwnd = Math.max(Math.min(this.cwnd, maxAllowedCwnd), MIN_CWND * this.mss);\n\n    this.flightSize = Math.max(0, this.flightSize - this.ackSize);\n    this.ackSize = 0;\n  }\n\n  checkCTO() {\n    if (this.flightSize > 0 && Date.now() - this.cto > this.lastAckTime) {\n      this.cwnd = this.mss;\n      this.cto = 2 * this.cto;\n    }\n  }\n\n  addRttSample(rtt) {\n    if (this.rttMean.isEmpty()) {\n      this.rttMean.set(rtt);\n      this.rttVar.set(rtt / 2);\n    } else {\n      this.rttVar.update(Math.abs(this.rttMean.value() - rtt));\n      this.rttMean.update(rtt);\n    }\n\n    this.cto = this.rttMean.value() + Math.max(COEF_G, COEF_K * this.rttVar.value());\n    if (this.cto < 1000) {\n      this.cto = 1000;\n    }\n  }\n\n  onDataLoss(bytes, retransmitting = false) {\n    const now = Date.now();\n    if (this.lastDataLoss !== 0 && now - this.lastDataLoss < this.rttMean.value()) {\n      return;\n    }\n    this.lastDataLoss = now;\n\n    this.cwnd = Math.min(this.cwnd, Math.max(this.cwnd / 2, MIN_CWND * this.mss));\n\n    if (!retransmitting) {\n      this.flightSize = Math.max(0, this.flightSize - bytes);\n    }\n  }\n\n  static computeOneWayDelay(timestamp) {\n    return Date.now() - timestamp;\n  }\n}\n","import {Buffer} from 'buffer';\nimport Address from './address';\nimport {MerkleHashTreeFunctionByteLengths} from './integrity';\n\nimport {\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n} from './constants';\n\nexport const createChunkAddressFieldType = (addressingMethod, chunkSize) => {\n  class Bin32ChunkAddress {\n    constructor(value = 0) {\n      this.type = ChunkAddressingMethod.Bin32;\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n\n    rangeByteLength() {\n      const [start, end] = Address.binBounds(this.value);\n      return (end - start + 1) * chunkSize;\n    }\n\n    static from({bin}) {\n      return new Bin32ChunkAddress(bin);\n    }\n  }\n\n  class ChunkRange32ChunkAddress {\n    constructor(start = 0, end = 0) {\n      this.type = ChunkAddressingMethod.ChunkRange32;\n      this.start = start;\n      this.end = end;\n    }\n\n    read(buffer, offset) {\n      this.start = buffer.readUInt32BE(offset);\n      this.end = buffer.readUInt32BE(offset + 4);\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.start, offset);\n      buffer.writeUInt32BE(this.end, offset + 4);\n    }\n\n    rangeByteLength() {\n      return (this.end - this.start + 1) * chunkSize;\n    }\n\n    static from({start, end}) {\n      return new ChunkRange32ChunkAddress(start, end);\n    }\n  }\n\n  switch (addressingMethod) {\n    case ChunkAddressingMethod.Bin32:\n      return Bin32ChunkAddress;\n    case ChunkAddressingMethod.ChunkRange32:\n      return ChunkRange32ChunkAddress;\n    default:\n      throw new Error('unsupported chunk addressing method');\n  }\n};\n\nconst createBufferFieldType = byteLength => {\n  class BufferField {\n    constructor(value = Buffer.alloc(byteLength)) {\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      buffer.copy(this.value, 0, offset, offset + byteLength);\n      return byteLength;\n    }\n\n    byteLength() {\n      return byteLength;\n    }\n\n    write(buffer, offset) {\n      this.value.copy(buffer, offset);\n    }\n  }\n\n  return BufferField;\n};\n\nexport const createLiveSignatureFieldType = (liveSignatureAlgorithm, swarmId) => {\n  const byteLength = swarmId.getLiveSignatureByteLength();\n\n  class LiveSignatureField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = liveSignatureAlgorithm;\n    }\n  }\n\n  return LiveSignatureField;\n};\n\nexport const createIntegrityHashFieldType = merkleHashTreeFunction => {\n  const byteLength = MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction];\n\n  class IntegrityHashField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = merkleHashTreeFunction;\n    }\n  }\n\n  return IntegrityHashField;\n};\n\nexport const createEncoding = (ChunkAddress, IntegrityHash, LiveSignature) => {\n  class Uint8ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt8(offset);\n      return 1;\n    }\n\n    byteLength() {\n      return 1;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt8(this.value, offset);\n    }\n  }\n\n  class Uint32ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n  }\n\n  class VersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.Version;\n    }\n  }\n\n  class MinimumVersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.MinimumVersion;\n    }\n  }\n\n  class SwarmIdentifierProtocolOption {\n    constructor(value = []) {\n      this.type = ProtocolOptions.SwarmIdentifier;\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt16BE(offset);\n      offset += 2;\n\n      this.value = buffer.slice(offset, offset + length);\n\n      return length + 2;\n    }\n\n    byteLength() {\n      return this.value.length + 2;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt16BE(this.value.length, offset);\n      this.value.copy(buffer, offset + 2);\n    }\n  }\n\n  class ContentIntegrityProtectionMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ContentIntegrityProtectionMethod.MerkleHashTree) {\n      super(method);\n      this.type = ProtocolOptions.ContentIntegrityProtectionMethod;\n    }\n  }\n\n  class MerkleHashTreeFunctionProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = MerkleHashTreeFunction.SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.MerkleHashTreeFunction;\n    }\n  }\n\n  class LiveSignatureAlgorithmProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = LiveSignatureAlgorithm.ECDSAP256SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.LiveSignatureAlgorithm;\n    }\n  }\n\n  class ChunkAddressingMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ChunkAddressingMethod.ChunkRange32) {\n      super(method);\n      this.type = ProtocolOptions.ChunkAddressingMethod;\n    }\n  }\n\n  class LiveDiscardWindowProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.LiveDiscardWindow;\n    }\n  }\n\n  class SupportedMessagesProtocolOption {\n    constructor(messageTypes = Object.values(MessageTypes).filter(v => !isNaN(v))) {\n      this.type = ProtocolOptions.SupportedMessages;\n      this.value = {};\n      messageTypes.forEach(type => this.value[type] = true);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt8(offset);\n      offset += 1;\n\n      for (let i = 0; i < length; i ++) {\n        const byte = buffer[offset + i];\n        for (let j = 0; j < 8; j ++) {\n          this.value[i * 8 + j] = Boolean(byte & (1 << 7 - j));\n        }\n      }\n\n      return length + 1;\n    }\n\n    bitmapByteLength() {\n      return Math.ceil(Math.max(...Object.keys(this.value)) / 8) + 1;\n    }\n\n    toBitmap() {\n      const length = this.bitmapByteLength();\n      const buffer = Buffer.alloc(length);\n\n      for (let i = 0; i < length; i ++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j ++) {\n          byte = (byte << 1) | (this.value[i * 8 + j] ? 1 : 0);\n        }\n        buffer.writeUInt8(byte, i);\n      }\n      return buffer;\n    }\n\n    byteLength() {\n      return this.bitmapByteLength() + 1;\n    }\n\n    write(buffer, offset) {\n      const bitmap = this.toBitmap();\n      buffer.writeUInt8(bitmap.length, offset);\n      bitmap.copy(buffer, offset + 1);\n    }\n  }\n\n  class ChunkSizeProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.ChunkSize;\n    }\n  }\n\n  const protocolOptionRecordTypes = {\n    [ProtocolOptions.Version]: VersionProtocolOption,\n    [ProtocolOptions.MinimumVersion]: MinimumVersionProtocolOption,\n    [ProtocolOptions.SwarmIdentifier]: SwarmIdentifierProtocolOption,\n    [ProtocolOptions.ContentIntegrityProtectionMethod]: ContentIntegrityProtectionMethodProtocolOption,\n    [ProtocolOptions.MerkleHashTreeFunction]: MerkleHashTreeFunctionProtocolOption,\n    [ProtocolOptions.LiveSignatureAlgorithm]: LiveSignatureAlgorithmProtocolOption,\n    [ProtocolOptions.ChunkAddressingMethod]: ChunkAddressingMethodProtocolOption,\n    [ProtocolOptions.LiveDiscardWindow]: LiveDiscardWindowProtocolOption,\n    [ProtocolOptions.SupportedMessages]: SupportedMessagesProtocolOption,\n    [ProtocolOptions.ChunkSize]: ChunkSizeProtocolOption,\n  };\n\n  class HandshakeMessage {\n    constructor(channelId = 0, options = []) {\n      this.type = MessageTypes.HANDSHAKE;\n      this.channelId = channelId;\n      this.options = options;\n    }\n\n    read(buffer, offset) {\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(offset);\n      length += 4;\n\n      while (offset + length < buffer.length) {\n        const code = buffer.readUInt8(offset + length);\n        length += 1;\n\n        if (code === ProtocolOptions.EndOption) {\n          break;\n        }\n\n        const RecordType = protocolOptionRecordTypes[code];\n        const option = new RecordType();\n\n        length += option.read(buffer, offset + length);\n        this.options.push(option);\n      }\n\n      return length;\n    }\n\n    byteLength() {\n      return this.options.reduce((length, option) => length + option.byteLength() + 1, 0) + 5;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, offset);\n      length += 4;\n\n      this.options.forEach(option => {\n        buffer.writeUInt8(option.type, offset + length);\n        length += 1;\n\n        option.write(buffer, offset + length);\n        length += option.byteLength();\n      });\n\n      buffer.writeUInt8(ProtocolOptions.EndOption, offset + length);\n      length += 1;\n\n      return length;\n    }\n  }\n\n  class Timestamp {\n    constructor(value = Date.now()) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      const seconds = buffer.readInt32BE(offset);\n      const nanoseconds = buffer.readInt32BE(offset + 4);\n      this.value = seconds * 1e3 + nanoseconds / 1e6;\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeInt32BE(Math.floor(this.value / 1e3), offset);\n      buffer.writeInt32BE((this.value % 1e3) * 1e6, offset + 4);\n    }\n  }\n\n  class DataMessage {\n    constructor(address = new ChunkAddress(), data = [], timestamp = new Timestamp()) {\n      this.type = MessageTypes.DATA;\n      this.address = address;\n      this.data = Buffer.from(data);\n      this.timestamp = timestamp;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n\n      offset += length;\n      const dataLength = Math.min(this.address.rangeByteLength(), buffer.length - offset);\n      this.data = buffer.slice(offset, offset + dataLength);\n\n      return length + dataLength;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.data.length + 8;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.data.copy(buffer, offset + length);\n    }\n  }\n\n  class AddressMessage {\n    constructor(address = new ChunkAddress()) {\n      this.address = address;\n    }\n\n    read(buffer, offset) {\n      return this.address.read(buffer, offset);\n    }\n\n    byteLength() {\n      return this.address.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n    }\n  }\n\n  class AckMessage {\n    constructor(address = new ChunkAddress(), delaySample = new Timestamp()) {\n      this.type = MessageTypes.ACK;\n      this.address = address;\n      this.delaySample = delaySample;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.delaySample.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.delaySample.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.delaySample.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class HaveMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.HAVE;\n    }\n  }\n\n  class IntegrityMessage {\n    constructor(address = new ChunkAddress(), hash = new IntegrityHash()) {\n      this.type = MessageTypes.INTEGRITY;\n      this.address = address;\n      this.hash = hash;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.hash.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.hash.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.hash.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class SignedIntegrityMessage {\n    constructor(\n      address = new ChunkAddress(),\n      timestamp = new Timestamp(),\n      signature = new LiveSignature(),\n    ) {\n      this.type = MessageTypes.SIGNED_INTEGRITY;\n      this.address = address;\n      this.timestamp = timestamp;\n      this.signature = signature;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n      length += this.signature.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.timestamp.byteLength() + this.signature.byteLength();\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.signature.write(buffer, offset + length);\n    }\n  }\n\n  class RequestMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.REQUEST;\n    }\n  }\n\n  class CancelMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.CANCEL;\n    }\n  }\n\n  class EmptyMessage {\n    read() {\n      return 0;\n    }\n\n    byteLength() {\n      return 0;\n    }\n\n    write() {}\n  }\n\n  class ChokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.CHOKE;\n    }\n  }\n\n  class UnchokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.UNCHOKE;\n    }\n  }\n\n  const messageRecordTypes = {\n    [MessageTypes.HANDSHAKE]: HandshakeMessage,\n    [MessageTypes.DATA]: DataMessage,\n    [MessageTypes.ACK]: AckMessage,\n    [MessageTypes.HAVE]: HaveMessage,\n    [MessageTypes.INTEGRITY]: IntegrityMessage,\n    [MessageTypes.SIGNED_INTEGRITY]: SignedIntegrityMessage,\n    [MessageTypes.REQUEST]: RequestMessage,\n    [MessageTypes.CANCEL]: CancelMessage,\n    [MessageTypes.CHOKE]: ChokeMessage,\n    [MessageTypes.UNCHOKE]: UnchokeMessage,\n  };\n\n  class Messages {\n    constructor(values = []) {\n      this.values = values;\n      this.buffer = null;\n      this.offset = 0;\n    }\n\n    static from(values) {\n      if (values instanceof Messages) {\n        return values;\n      }\n      if (Array.isArray(values)) {\n        return new Messages(values);\n      }\n      throw new Error('unable to create Messages from unsupported type');\n    }\n\n    next() {\n      if (this.offset >= this.buffer.length) {\n        return;\n      }\n\n      const messageType = this.buffer.readUInt8(this.offset);\n      this.offset += 1;\n\n      const RecordType = messageRecordTypes[messageType];\n      const message = new RecordType();\n      this.values.push(message);\n\n      this.offset += message.read(this.buffer, this.offset);\n\n      return message;\n    }\n\n    toArray() {\n      // eslint-disable-next-line no-empty\n      while (this.next()) {}\n      return this.values;\n    }\n\n    read(buffer, offset) {\n      this.buffer = buffer;\n      this.offset = offset;\n      return 0;\n    }\n\n    byteLength() {\n      return this.values.reduce((length, message) => length + message.byteLength() + 1, 0);\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.values.forEach(message => {\n        buffer.writeUInt8(message.type, offset + length);\n        length += 1;\n\n        message.write(buffer, offset + length);\n        length += message.byteLength();\n      });\n\n      return length;\n    }\n  }\n\n  class Datagram {\n    constructor(channelId = 0, messages = []) {\n      this.channelId = channelId;\n      this.messages = Messages.from(messages);\n    }\n\n    read(data) {\n      const buffer = Buffer.from(data);\n\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(0);\n      length += 4;\n\n      length += this.messages.read(buffer, length);\n\n      return length;\n    }\n\n    byteLength() {\n      return this.messages.byteLength() + 4;\n    }\n\n    write(buffer) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, 0);\n      length += 4;\n\n      length += this.messages.write(buffer, length);\n\n      return length;\n    }\n\n    toBuffer() {\n      const buffer = Buffer.alloc(this.byteLength());\n      this.write(buffer);\n      return buffer;\n    }\n\n    static from(buffer) {\n      const datagram = new Datagram();\n      datagram.read(buffer);\n      return datagram;\n    }\n  }\n\n  return {\n    VersionProtocolOption,\n    MinimumVersionProtocolOption,\n    SwarmIdentifierProtocolOption,\n    ContentIntegrityProtectionMethodProtocolOption,\n    MerkleHashTreeFunctionProtocolOption,\n    LiveSignatureAlgorithmProtocolOption,\n    ChunkAddressingMethodProtocolOption,\n    LiveDiscardWindowProtocolOption,\n    SupportedMessagesProtocolOption,\n    ChunkSizeProtocolOption,\n    HandshakeMessage,\n    Timestamp,\n    DataMessage,\n    AckMessage,\n    HaveMessage,\n    IntegrityMessage,\n    SignedIntegrityMessage,\n    RequestMessage,\n    CancelMessage,\n    ChokeMessage,\n    UnchokeMessage,\n    Datagram,\n    LiveSignature,\n    IntegrityHash,\n    ChunkAddress,\n  };\n};\n","function createMask(bits) {\n  let mask = 0;\n  for (let i = 0; i < bits; i ++) {\n    mask = (mask << 1) | 1;\n  }\n  return mask;\n}\n\nfunction applyMask(byte, mask, value) {\n  if (value) {\n    return byte | mask;\n  }\n  return byte & (255 ^ mask);\n}\n\nexport default class BitArray {\n  constructor(capacity = 0) {\n    this.offset = 0;\n    this.resize(capacity);\n  }\n\n  // TODO: copy old values..?\n  resize(capacity) {\n    this.capacity = capacity;\n    this.values = new Uint8Array(Math.ceil(capacity / 8));\n  }\n\n  adjustOffset(index) {\n    const {offset} = this;\n    const distance = (index - offset) - this.capacity;\n    if (distance <= 0) {\n      return;\n    }\n\n    this.offset += distance;\n    this.unsafelySetRange(offset + 1, offset + distance + 1, false);\n  }\n\n  getByteIndex(index) {\n    return Math.floor(index / 8) % this.values.length;\n  }\n\n  getBitIndex(index) {\n    return index % 8;\n  }\n\n  getIndexValue(byteIndex, bitIndex) {\n    const byteOffset = this.offset % (this.values.length * 8);\n    const offset = byteIndex < byteOffset\n      ? this.offset + (this.values.length * 8) - byteOffset\n      : this.offset;\n    return offset + (byteIndex * 8 + bitIndex);\n  }\n\n  setRange(start, end, value = true) {\n    if (end - start === 1) {\n      this.set(start, value);\n      return;\n    }\n\n    if (end <= this.offset) {\n      return;\n    }\n    start = Math.max(start, this.offset);\n\n    this.adjustOffset(end);\n    this.unsafelySetRange(start, end, value);\n  }\n\n  unsafelySetRange(start, end, value = true, fillEndByte = false) {\n    if (end - start >= this.capacity) {\n      this.values.fill(value ? 255 : 0);\n      return;\n    }\n\n    const startByteIndex = this.getByteIndex(start);\n    const endByteIndex = this.getByteIndex(end);\n    const startBitIndex = this.getBitIndex(start);\n    const endBitIndex = this.getBitIndex(end);\n\n    if (startByteIndex > endByteIndex) {\n      this.unsafelySetIndexRange(startByteIndex, startBitIndex, this.capacity, 0, value);\n      this.unsafelySetIndexRange(0, 0, endByteIndex, endBitIndex, value);\n      return;\n    }\n\n    this.unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value);\n  }\n\n  unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value) {\n    let startMask = createMask(8 - startBitIndex);\n    let endMask = 255 ^ createMask(8 - endBitIndex);\n\n    if (startByteIndex === endByteIndex) {\n      const mask = startMask & endMask;\n      this.values[startByteIndex] = applyMask(this.values[startByteIndex], mask, value);\n      return;\n    }\n\n    this.values[startByteIndex] = applyMask(this.values[startByteIndex], startMask, value);\n    this.values[endByteIndex] = applyMask(this.values[endByteIndex], endMask, value);\n\n    if (endByteIndex - startByteIndex > 1) {\n      this.values.fill(value ? 255 : 0, startByteIndex + 1, endByteIndex);\n    }\n  }\n\n  unsetRange(start, end) {\n    this.setRange(start, end, false);\n  }\n\n  set(index, value = true) {\n    if (index < this.offset) {\n      return;\n    }\n\n    this.adjustOffset(index);\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    this.values[byteIndex] = applyMask(this.values[byteIndex], mask, value);\n  }\n\n  unset(index) {\n    this.set(index, false);\n  }\n\n  get(index) {\n    if (index <= this.offset || index > this.offset + this.capacity) {\n      return false;\n    }\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    return (this.values[byteIndex] & mask) !== 0;\n  }\n\n  toValueArray() {\n    const values = [];\n    for (let i = 1; i <= this.capacity; i ++) {\n      if (this.get(this.offset + i)) {\n        values.push(this.offset + i);\n      }\n    }\n    return values;\n  }\n\n  min() {\n    for (let i = this.offset; i <= this.offset + this.capacity; i += 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const firstBit = Math.floor(i / 8) * 8;\n        for (let j = firstBit; j < firstBit + 8; j ++) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return Infinity;\n  }\n\n  max() {\n    for (let i = this.capacity + this.offset; i >= this.offset; i -= 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const lastBit = Math.ceil(i / 8) * 8 + 1;\n        for (let j = lastBit; j > lastBit - 8; j --) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return -Infinity;\n  }\n}\n","export class Flow {\n  constructor() {\n    this.lastVirtualFinish = 0;\n    this.nextVirtualFinish = Infinity;\n    this.queue = [];\n  }\n\n  computeWeight() {\n    return 1;\n  }\n}\n\nexport class Queue {\n  constructor(rate) {\n    this.rate = rate;\n    this.totalQueueSize = 0;\n    this.flows = [];\n  }\n\n  addFlow(flow) {\n    return this.flows.push(flow);\n  }\n\n  removeFlow(flow) {\n    const index = this.flows.indexOf(flow);\n    if (index !== -1) {\n      this.flows.splice(index, 1);\n    }\n  }\n\n  enqueue(flow, size, value) {\n    const weight = flow.computeWeight(this);\n    const rate = this.rate / weight;\n    const virtualFinish = Math.max(Date.now(), flow.lastVirtualFinish) + size / rate;\n\n    flow.queue.push({\n      virtualFinish,\n      size,\n      value,\n    });\n    flow.lastVirtualFinish = virtualFinish;\n    if (flow.queue.length === 1) {\n      flow.nextVirtualFinish = virtualFinish;\n    }\n  }\n\n  getNextScheduledFlow() {\n    let minVirtualFinish = Infinity;\n    let flow = null;\n    for (let i = 0; i < this.flows.length; i ++) {\n      if (this.flows[i].nextVirtualFinish < minVirtualFinish) {\n        flow = this.flows[i];\n        minVirtualFinish = flow.nextVirtualFinish;\n      }\n    }\n\n    return flow;\n  }\n\n  peek() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    return {\n      flow,\n      task: flow.queue[0],\n    };\n  }\n\n  dequeue() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    const task = flow.queue.shift();\n\n    flow.nextVirtualFinish = flow.queue.length !== 0\n      ? flow.queue[0].virtualFinish\n      : Infinity;\n\n    return {flow, task};\n  }\n}\n\nexport default {\n  Queue,\n  Flow,\n};\n","import BitArray from '../bitarray';\nimport Address from './address';\nimport wfq from '../wfq';\nimport EMA from '../ema';\nimport LEDBAT from '../ledbat';\nimport RingBuffer from '../RingBuffer';\n\nexport class AvailabilityMap {\n  constructor(capacity) {\n    this.values = new BitArray(capacity);\n  }\n\n  // TODO: ignore very large discard windows from remote peers...\n  setCapacity(capacity) {\n    this.values.resize(capacity);\n  }\n\n  set(address, value) {\n    this.values.setRange(address.start / 2, address.end / 2 + 1, value);\n  }\n\n  get({start, end = start}) {\n    for (let i = start; i <= end; i += 2) {\n      if (!this.values.get(i / 2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  min() {\n    return this.values.min() * 2;\n  }\n\n  max() {\n    return this.values.max() * 2;\n  }\n}\n\nexport class BinRingBuffer extends RingBuffer {\n  advanceLastBin(bin) {\n    super.advanceLastIndex(bin / 2);\n  }\n\n  setRange({start}, values) {\n    for (let i = 0; i < values.length; i ++) {\n      super.set(start / 2 + i, values[i]);\n    }\n  }\n\n  set({bin}, value) {\n    super.set(bin / 2, value);\n  }\n\n  get({bin}) {\n    return super.get(bin / 2);\n  }\n\n  forEach(callback) {\n    for (let i = this.lastIndex - this.capacity; i < this.lastIndex; i ++) {\n      if (callback(this.get(i), i * 2) === false) {\n        break;\n      }\n    }\n  }\n}\n\nexport class RateMeter {\n  constructor(windowMs, sampleWindowMs = 100) {\n    this.firstSampleWindow = Math.floor(Date.now() / sampleWindowMs);\n    this.lastSampleWindow = this.firstSampleWindow;\n    this.windowMs = windowMs;\n    this.sampleWindowMs = sampleWindowMs;\n    this.sum = 0;\n    this.values = new Array(Math.ceil(windowMs / sampleWindowMs));\n\n    this.values.fill(0);\n  }\n\n  adjustSampleWindow() {\n    const sampleWindow = Math.floor(Date.now() / this.sampleWindowMs);\n\n    for (let i = this.lastSampleWindow + 1; i <= sampleWindow; i ++) {\n      const index = i % this.values.length;\n      this.sum -= this.values[index];\n      this.values[index] = 0;\n    }\n    this.lastSampleWindow = sampleWindow;\n  }\n\n  update(value) {\n    this.adjustSampleWindow();\n    this.sum += value;\n    this.values[this.lastSampleWindow % this.values.length] += value;\n  }\n\n  value() {\n    this.adjustSampleWindow();\n    const accumulatedMs = Math.min(\n      (this.lastSampleWindow - this.firstSampleWindow) * this.sampleWindowMs,\n      this.windowMs,\n    );\n    return this.sum / accumulatedMs;\n  }\n}\n\nexport class ChunkRateMeter extends RateMeter {\n  constructor(windowMs = 15000) {\n    super(windowMs);\n    this.lastEndBin = 0;\n  }\n\n  update({start, end}) {\n    if (this.lastHeadBin === 0) {\n      super.update((end - start) / 2);\n    } else if (end > this.lastEndBin) {\n      super.update((end - this.lastEndBin) / 2);\n      this.lastEndBin = end;\n    }\n  }\n}\n\nexport class RequestFlow extends wfq.Flow {\n  constructor(id) {\n    super();\n    this.id = id;\n    this.queueSize = 0;\n  }\n\n  computeWeight(queue) {\n    return this.queueSize / queue.totalQueueSize;\n  }\n}\n\nexport class RequestQueue extends wfq.Queue {\n  constructor(rate) {\n    super(rate);\n    this.totalQueueSize = 0;\n  }\n\n  enqueue(flow, size, value) {\n    this.totalQueueSize += size;\n    flow.queueSize += size;\n    super.enqueue(flow, size, value);\n  }\n\n  cancel(flow, filter) {\n    flow.queue = flow.queue.filter(task => {\n      const remove = filter(task.value);\n\n      if (remove) {\n        this.totalQueueSize -= task.size;\n        flow.queueSize -= task.size;\n      }\n\n      return !remove;\n    });\n  }\n\n  dequeue() {\n    const result = super.dequeue();\n    if (result === null) {\n      return null;\n    }\n\n    this.totalQueueSize -= result.task.size;\n    result.flow.queueSize -= result.task.size;\n\n    return result;\n  }\n}\n\nexport class SchedulerChunkState {\n  constructor(bin) {\n    this.bin = bin;\n    this.reset();\n  }\n\n  reset() {\n    this.availableCopies = 0;\n    this.requestTime = [0, 0];\n    this.requestPeerId = 0;\n\n    this.requested = false;\n    this.received = false;\n    this.verified = false;\n  }\n}\n\nexport class SchedulerChunkRequestMap {\n  constructor() {\n    this.valueByBin = {};\n    this.head = undefined;\n    this.tail = undefined;\n    this.length = 0;\n  }\n\n  insert(address) {\n    const now = Date.now();\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      const value = {\n        address: new Address(i),\n        createdAt: now,\n        next: undefined,\n        prev: undefined,\n      };\n      this.valueByBin[i] = value;\n\n      if (this.head === undefined) {\n        this.head = value;\n      } else {\n        this.tail.next = value;\n      }\n      value.prev = this.tail;\n      this.tail = value;\n\n      this.length ++;\n    }\n  }\n\n  get({bin}) {\n    return this.valueByBin[bin];\n  }\n\n  remove({bin}) {\n    const value = this.valueByBin[bin];\n    if (value === undefined) {\n      return;\n    }\n    delete this.valueByBin[bin];\n\n    if (this.head === value) {\n      this.head = value.next;\n    }\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.prev !== undefined) {\n      value.prev.next = value.next;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = value.prev;\n    }\n\n    this.length --;\n  }\n\n  peek() {\n    return this.head;\n  }\n\n  pop() {\n    if (this.head === undefined) {\n      return;\n    }\n    const value = this.head;\n\n    this.head = value.next;\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = undefined;\n    }\n\n    delete this.valueByBin[value.address.bin];\n\n    this.length --;\n\n    return value;\n  }\n}\n\nexport class SchedulerChunkMap extends BinRingBuffer {\n  createEmptyValue(bin, value) {\n    if (value === undefined) {\n      return new SchedulerChunkState(bin);\n    }\n\n    // put the peer map here and when we advance the bin meme update\n    // the availability map here\n\n    value.reset();\n    return value;\n  }\n}\n\nexport class SchedulerPeerState {\n  constructor(peer, requestFlow) {\n    this.peer = peer;\n    this.requestFlow = requestFlow;\n    this.availableChunks = new AvailabilityMap();\n\n    this.ledbat = new LEDBAT();\n\n    // this.rttMean = new EMA(0.125);\n    // this.rttVar = new EMA(0.25);\n\n    this.rttMean = new EMA(0.05);\n    this.rttVar = new EMA(0.05);\n\n    this.chunkIntervalMean = new EMA(0.25);\n    this.chunkRate = new RateMeter(15000);\n    this.wasteRate = new RateMeter(15000);\n    this.lastChunkTime = null;\n\n    this.requestTimes = new BinRingBuffer();\n\n    this.requestedChunks = new SchedulerChunkRequestMap();\n    this.sentRequests = new SchedulerChunkRequestMap();\n\n    this.timeouts = 0;\n    this.validChunks = 0;\n    this.invalidChunks = 0;\n\n    this.requestQueue = [];\n\n    this.sentChunks = new AvailabilityMap();\n    this.receivedChunks = new AvailabilityMap();\n  }\n}\n\nexport class Scheduler {\n  constructor(chunkSize, clientOptions) {\n    const {\n      liveDiscardWindow,\n      uploadRateLimit,\n    } = clientOptions;\n\n    this.chunkSize = chunkSize;\n    this.liveDiscardWindow = liveDiscardWindow;\n\n    // where are we in the buffer\n\n    // how rare is a chunk\n    // how urgently is a chunk needed\n\n    // high/mid/low priority time bands\n\n    // high performance/reliability peers\n    // expected performance per peer\n\n    // request timeout/cancel\n    // send timeout/cancel?\n\n    // average stream bit rate\n    // position in available window\n    // position in theoretical window\n\n    // minimum needed bin\n\n    this.peerStates = {};\n    this.chunkStates = new SchedulerChunkMap(liveDiscardWindow);\n    this.definitelyLoadedChunks = [];\n    this.loadedChunks = new AvailabilityMap(liveDiscardWindow);\n    this.peerCount = 0;\n\n    this.chunkRate = new ChunkRateMeter();\n\n    this.requestQueue = new RequestQueue(uploadRateLimit / 1000);\n\n    // this.update = this.update.bind(this);\n    // setTimeout(this.update, 0);\n\n    this.timers = {};\n\n    this.lastExportedBin = -Infinity;\n    this.lastCompletedBin = -Infinity;\n    this.requestedChunks = new AvailabilityMap(liveDiscardWindow);\n\n    this.totalSends = 0;\n    this.totalRequests = 0;\n    this.totalRequestsReceived = 0;\n    this.totalReceived = 0;\n    this.totalAdded = 0;\n    this.totalCancelled = 0;\n    this.ackUnknownSend = 0;\n    this.totalDroppedRequests = 0;\n    this.sendDelay = new EMA(0.05);\n    // setInterval(this.debug.bind(this), 1000);\n\n    this.nextSendTime = 0;\n    this.nextSendTimeout = 0;\n  }\n\n  debug() {\n    console.log('---');\n    Object.values(this.peerStates).forEach((peerState) => {\n      if (!peerState.peer.isReady()) {\n        return;\n      }\n\n      let cto = peerState.ledbat.cto / (peerState.ledbat.cwnd / this.chunkSize);\n      const timeout = Math.ceil(Math.min(cto, 1000));\n\n      const availableChunks = peerState.availableChunks;\n\n      const firstLoadedChunk = this.loadedChunks.min();\n      const firstRequestedChunk = this.requestedChunks.min();\n      const startBin = Math.max(\n        availableChunks.min(),\n        isFinite(firstLoadedChunk) ? firstLoadedChunk : -Infinity,\n        isFinite(firstRequestedChunk) ? firstLoadedChunk : -Infinity,\n        this.lastCompletedBin,\n      );\n      const lastAvailableBin = Math.min(availableChunks.max(), startBin + this.liveDiscardWindow * 2);\n\n      const planFor = Math.min(1000, peerState.ledbat.rttMean.value() * 4);\n\n      const dip = peerState.chunkIntervalMean.value() || 0;\n      const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n      const cwnd = firstPlanPick - peerState.sentRequests.length;\n\n      console.log(JSON.stringify({\n        peer_remoteId: peerState.peer.remoteId,\n        peer_localId: peerState.peer.localId,\n        sentRequests: peerState.sentRequests.length,\n        swift_rtt: peerState.rttMean.value(),\n        swift_rttvar: peerState.rttVar.value(),\n        swift_chunkIntervalMean: peerState.chunkIntervalMean.value(),\n        chunkRate: peerState.chunkRate.value(),\n        wasteRate: peerState.wasteRate.value(),\n        swift_cwnd: cwnd,\n        ledbat_cwnd: peerState.ledbat.cwnd,\n        ledbat_cto: peerState.ledbat.cto,\n        ledbat_currentDelay: peerState.ledbat.currentDelay.getMin(),\n        ledbat_baseDelay: peerState.ledbat.baseDelay.getMin(),\n        ledbat_rttMean: peerState.ledbat.rttMean.value(),\n        ledbat_rttVar: peerState.ledbat.rttVar.value(),\n        ledbat_rtt: peerState.ledbat.rtt,\n        ledbat_flightSize: peerState.ledbat.flightSize,\n        // requestedChunks: peerState.requestedChunks,\n        timeouts: peerState.timeouts,\n        validChunks: peerState.validChunks,\n        invalidChunks: peerState.invalidChunks,\n        timeout: timeout,\n        picker_startBin: startBin,\n        picker_lastAvailableBin: lastAvailableBin,\n      }, true, 2));\n    });\n\n    console.log(JSON.stringify({\n      totalSends: this.totalSends,\n      totalRequests: this.totalRequests,\n      totalRequestsReceived: this.totalRequestsReceived,\n      totalDroppedRequests: this.totalDroppedRequests,\n      totalReceived: this.totalReceived,\n      totalAdded: this.totalAdded,\n      totalCancelled: this.totalCancelled,\n      ackUnknownSend: this.ackUnknownSend,\n      minIncompleteBin: this.lastCompletedBin,\n      sendDelay: this.sendDelay.value(),\n      picker_firstLoadedChunk: this.loadedChunks.min(),\n      picker_firstRequestedChunk: this.requestedChunks.min(),\n      chunkRate: this.chunkRate.value(),\n    }, true, 2));\n    // this.totalSends = 0;\n    // this.totalRequests = 0;\n    // this.totalRequestsReceived = 0;\n    // this.totalReceived = 0;\n    // // this.ackUnknownSend = 0;\n    // this.totalAdded = 0;\n    // this.totalCancelled = 0;\n    // this.totalDroppedRequests = 0;\n  }\n\n  update(peerState, update) {\n    if (!peerState.peer.isReady()) {\n      this.timers[peerState.localId] = setTimeout(update, 1000);\n      return;\n    }\n\n    const {\n      availableChunks,\n      ledbat,\n      sentRequests,\n    } = peerState;\n\n    ledbat.digestDelaySamples();\n\n    const now = Date.now();\n    // const planFor = ledbat.rttMean.value();\n    // const planFor = ledbat.rttMean.value() * 2 + ledbat.rttVar.value() * 4;\n    const planFor = Math.max(1000, ledbat.rttMean.value() * 4);\n    const timeoutThreshold = now - ledbat.cto * 2;\n\n    const dip = peerState.chunkIntervalMean.value() || 0;\n    const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n    const cwnd = firstPlanPick - sentRequests.length;\n\n    const cancelledRequests = [];\n    while (sentRequests.peek() !== undefined\n      && sentRequests.peek().createdAt < timeoutThreshold) {\n      cancelledRequests.push(sentRequests.pop());\n    }\n\n    if (cancelledRequests.length > 0) {\n      this.totalCancelled += cancelledRequests.length;\n      cancelledRequests.forEach(({address}) => sentRequests.remove(address));\n\n      // TODO: this is for ack timeout\n      // ledbat.onDataLoss(cancelledRequests.length * this.chunkSize);\n    }\n\n    const startBin = Math.max(\n      this.loadedChunks.values.offset * 2 + 2,\n      this.requestedChunks.values.offset * 2 + 2,\n      availableChunks.min(),\n      this.lastCompletedBin,\n    );\n    const endBin = Math.min(\n      startBin + this.liveDiscardWindow * 2,\n      availableChunks.max(),\n    );\n    const requestAddresses = [];\n    for (let i = startBin; i < endBin && requestAddresses.length < cwnd; i += 2) {\n      const address = new Address(i);\n      if (!this.loadedChunks.get(address)\n        && !this.requestedChunks.get(address)\n        && availableChunks.get(address)) {\n\n        if (Math.random() < 0.05) {\n          requestAddresses.push(address);\n          sentRequests.insert(address);\n          this.requestedChunks.set(address);\n        }\n      }\n    }\n    if (this.lastCompletedBin === -Infinity && requestAddresses.length !== 0) {\n      const firstRequestedBin = requestAddresses[0].bin;\n      this.lastCompletedBin = firstRequestedBin;\n      this.lastExportedBin = firstRequestedBin - 2;\n    }\n\n    if (cancelledRequests.length !== 0) {\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        peerState.peer.sendCancel(address);\n      });\n    }\n\n    if (requestAddresses.length !== 0) {\n      this.totalRequests += requestAddresses.length;\n      peerState.peer.sendRequest(...requestAddresses);\n\n      requestAddresses.forEach(address => {\n        if (peerState.requestTimes.get(address) === undefined) {\n          peerState.requestTimes.set(address, now);\n        }\n      });\n    }\n\n    while (ledbat.flightSize < ledbat.cwnd && peerState.requestQueue.length) {\n      const requestedAddress = peerState.requestQueue.shift();\n      if (requestedAddress !== undefined) {\n        const requestedChunk = peerState.requestedChunks.get(requestedAddress);\n        if (requestedChunk !== undefined) {\n          requestedChunk.sentAt = now;\n          peerState.ledbat.addSent(this.chunkSize);\n          peerState.peer.sendChunk(requestedAddress);\n          this.totalSends ++;\n        }\n      }\n\n      peerState.sentChunks.set(requestedAddress);\n\n      // TODO: volunteer bin we have and they don't?\n    }\n\n    peerState.peer.flush();\n    let sendInterval = Math.min(1000, (ledbat.rttMean.value() || 0) / (ledbat.cwnd / this.chunkSize));\n    this.timers[peerState.localId] = setTimeout(update, sendInterval);\n  }\n\n  addPeer(peer) {\n    const {localId} = peer;\n\n    const requestFlow = new RequestFlow(localId);\n    this.requestQueue.addFlow(requestFlow);\n\n    const peerState = new SchedulerPeerState(peer, requestFlow);\n    this.peerStates[localId] = peerState;\n\n    const update = () => this.update(peerState, update);\n    this.timers[localId] = setTimeout(update, 1000);\n  }\n\n  removePeer({localId}) {\n    const peerState = this.peerStates[localId];\n    if (peerState === undefined) {\n      return;\n    }\n\n    const {requestFlow} = peerState;\n    this.requestQueue.removeFlow(requestFlow);\n\n    delete this.peerStates[localId];\n\n    clearTimeout(this.timers[localId]);\n  }\n\n  getPeerState({localId}) {\n    return this.peerStates[localId];\n  }\n\n  getRecentChunks() {\n    // TODO: how to pick this... maybe remote discard window size?\n    const startBin = this.loadedChunks.max() - 512;\n\n    // bail if no chunks have been loaded yet\n    if (!isFinite(startBin)) {\n      return [];\n    }\n\n    const bins = [];\n\n    const endBin = this.loadedChunks.max();\n    for (let i = startBin; i <= endBin; i += 2) {\n      const address = new Address(i);\n      if (this.loadedChunks.get(address)) {\n        bins.push(address);\n      }\n    }\n\n    return bins;\n  }\n\n  setLiveDiscardWindow(peer, liveDiscardWindow) {\n    this.getPeerState(peer).availableChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).requestTimes.setCapacity(liveDiscardWindow);\n\n    this.getPeerState(peer).sentChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).receivedChunks.setCapacity(liveDiscardWindow);\n  }\n\n  markChunkReceived(peer, address, delaySample) {\n    const now = Date.now();\n\n    this.totalReceived ++;\n\n    const peerState = this.getPeerState(peer);\n    if (peerState === undefined) {\n      return;\n    }\n\n    if (this.loadedChunks.get(address)) {\n      peerState.wasteRate.update(1);\n    }\n\n    const request = peerState.sentRequests.get(address);\n    if (request === undefined) {\n      return;\n    }\n\n    if (peerState.lastChunkTime !== null) {\n      const chunkInterval = now - peerState.lastChunkTime;\n      peerState.chunkIntervalMean.update(chunkInterval);\n    }\n    peerState.lastChunkTime = now;\n    if (!this.loadedChunks.get(address)) {\n      peerState.chunkRate.update(1);\n    }\n\n    const requestTime = peerState.requestTimes.get(address);\n    if (requestTime !== undefined) {\n      peerState.ledbat.addRttSample(now - requestTime);\n    }\n\n    // peerState.rttMean.update(rtt);\n    // peerState.rttVar.update(Math.abs(rtt - peerState.rttMean.value()));\n\n    // TODO: double check LEDBAT to make sure we shouldn't be doing\n    // something here\n\n    peerState.sentRequests.remove(address);\n  }\n\n  markChunkVerified(peer, address) {\n    // this.chunkStates.get(address).verified = true;\n    this.getPeerState(peer).validChunks ++;\n    this.getPeerState(peer).receivedChunks.set(address);\n\n    // this.chunkStates.advanceLastBin(address.end);\n\n    this.definitelyLoadedChunks.push(address.bin);\n    this.chunkRate.update(address);\n    this.loadedChunks.set(address);\n\n    for (let i = this.lastCompletedBin; this.loadedChunks.get(new Address(i)); i += 2) {\n      this.lastCompletedBin = i;\n    }\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  getNewCompleteBins() {\n    const nextExportedBin = this.lastExportedBin + 2;\n    if (nextExportedBin <= this.lastCompletedBin) {\n      this.lastExportedBin = this.lastCompletedBin;\n      return [nextExportedBin, this.lastCompletedBin];\n    }\n  }\n\n  markChunkRejected(peer, address) {\n    this.requestedChunks.set(address, false);\n    this.getPeerState(peer).invalidChunks ++;\n  }\n\n  markChunkAvailable(peer, address) {\n    for (let i = address.start; i <= address.end; i += 2) {\n      if (!this.getPeerState(peer).availableChunks.get(new Address(i))) {\n        this.totalAdded ++;\n      }\n    }\n\n    this.getPeerState(peer).availableChunks.set(address);\n  }\n\n  markChunksLoaded(address) {\n    this.chunkStates.advanceLastBin(address.end);\n    this.loadedChunks.set(address);\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  markSendAcked(peer, address, delaySample) {\n    const peerState = this.getPeerState(peer);\n\n    peerState.ledbat.addDelaySample(delaySample, this.chunkSize);\n\n    const sentChunk = peerState.requestedChunks.get(address);\n    if (sentChunk === undefined) {\n      this.ackUnknownSend ++;\n      return;\n    }\n\n    // TODO: is this necessary?\n    if (sentChunk.sentAt) {\n      peerState.ledbat.addRttSample(Date.now() - sentChunk.sentAt);\n    }\n\n    peerState.requestedChunks.remove(address);\n  }\n\n  enqueueRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      this.totalRequestsReceived ++;\n      peerState.requestQueue.push(new Address(i));\n    }\n\n    peerState.requestedChunks.insert(address);\n  }\n\n  cancelRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n    const requestedChunk = peerState.requestedChunks.get(address);\n    if (requestedChunk && requestedChunk.sentAt) {\n      peerState.ledbat.onDataLoss(this.chunkSize);\n    }\n    peerState.requestedChunks.remove(address);\n\n    // this.requestQueue.cancel(\n    //   this.getPeerState(peer).requestFlow,\n    //   ({bin}) => address.containsBin(bin),\n    // );\n  }\n}\n","import {EventEmitter} from 'events';\nimport Address from './address';\nimport SwarmId from './swarmid';\nimport LEDBAT from '../ledbat';\nimport {\n  createChunkAddressFieldType,\n  createLiveSignatureFieldType,\n  createIntegrityHashFieldType,\n  createEncoding,\n} from './encoding';\nimport {\n  MaxChannelId,\n  ProtocolOptions,\n  MessageTypes,\n} from './constants';\nimport {\n  createMerkleHashTreeFunction,\n  createLiveSignatureVerifyFunction,\n  createLiveSignatureSignFunction,\n  createContentIntegrityVerifierFactory,\n} from './integrity';\nimport {\n  BinRingBuffer,\n  Scheduler,\n} from './scheduler';\n\nconst genericEncoding = createEncoding();\n\nconst BUFFER_SIZE = 1e7;\nconst MAX_UPLOAD_RATE = 1e6;\n\nexport class Swarm extends EventEmitter {\n  constructor(uri, clientOptions) {\n    super();\n\n    const {swarmId} = uri;\n    const {\n      [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n      [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n      [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n      [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n      [ProtocolOptions.ChunkSize]: chunkSize,\n    } = uri.protocolOptions;\n    const {\n      liveDiscardWindow,\n      privateKey,\n    } = clientOptions;\n\n    this.uri = uri;\n\n    this.encoding = createEncoding(\n      createChunkAddressFieldType(chunkAddressingMethod, chunkSize),\n      createIntegrityHashFieldType(merkleHashTreeFunction),\n      createLiveSignatureFieldType(liveSignatureAlgorithm, swarmId),\n    );\n\n    const liveSignatureSignFunction = privateKey !== undefined\n      ? createLiveSignatureSignFunction(liveSignatureAlgorithm, privateKey)\n      : undefined;\n    this.contentIntegrity = createContentIntegrityVerifierFactory(\n      contentIntegrityProtectionMethod,\n      createMerkleHashTreeFunction(merkleHashTreeFunction),\n      createLiveSignatureVerifyFunction(liveSignatureAlgorithm, swarmId),\n      liveSignatureSignFunction,\n      liveDiscardWindow,\n    );\n\n    this.chunkBuffer = new BinRingBuffer(liveDiscardWindow);\n    this.scheduler = new Scheduler(chunkSize, clientOptions);\n\n    this.protocolOptions = [\n      new this.encoding.VersionProtocolOption(),\n      new this.encoding.MinimumVersionProtocolOption(),\n      new this.encoding.SwarmIdentifierProtocolOption(swarmId.toBuffer()),\n      new this.encoding.ContentIntegrityProtectionMethodProtocolOption(contentIntegrityProtectionMethod),\n      new this.encoding.MerkleHashTreeFunctionProtocolOption(merkleHashTreeFunction),\n      new this.encoding.LiveSignatureAlgorithmProtocolOption(liveSignatureAlgorithm),\n      new this.encoding.ChunkAddressingMethodProtocolOption(chunkAddressingMethod),\n      new this.encoding.ChunkSizeProtocolOption(chunkSize),\n      new this.encoding.LiveDiscardWindowProtocolOption(liveDiscardWindow),\n    ];\n  }\n\n  verifyProtocolOptions(protocolOptions) {\n    Object.entries(this.uri.protocolOptions)\n      .forEach(([protocolOption, value]) => {\n        if (protocolOptions[protocolOption] !== value) {\n          const protocolOptionName = ProtocolOptions.name(protocolOption);\n          throw new Error(`invalid peer options: ${protocolOptionName} mismatch`);\n        }\n      });\n  }\n\n  emitNewData() {\n    const newBins = this.scheduler.getNewCompleteBins();\n    if (newBins !== undefined) {\n      const [minNewBin, maxNewBin] = newBins;\n      const chunks = [];\n      for (let i = minNewBin; i <= maxNewBin; i += 2) {\n        chunks.push(this.chunkBuffer.get(new Address(i)));\n      }\n      this.emit('data', chunks);\n    }\n  }\n}\n\nconst PeerState = {\n  CONNECTING: 1,\n  AWAITING_HANDSHAKE: 2,\n  READY: 3,\n  CHOKED: 4,\n  DISCONNECTING: 5,\n  CLOSED: 6,\n};\n\nclass PeerDataHandlerContext {\n  constructor(swarm) {\n    this.swarm = swarm;\n    this.integrityVerifier = null;\n  }\n\n  getContentIntegrityVerifier(address) {\n    if (this.integrityVerifier === null) {\n      this.integrityVerifier = this.swarm.contentIntegrity.createVerifier(address);\n    }\n    return this.integrityVerifier;\n  }\n}\n\n// TODO: disconnect inactive peers\nclass Peer {\n  constructor(swarm, channel, remoteId = 0, localId = Peer.createChannelId()) {\n    this.swarm = swarm;\n    this.channel = channel;\n    this.remoteId = remoteId;\n    this.localId = localId;\n    this.state = PeerState.CONNECTING;\n\n    this.handlers = {\n      [MessageTypes.HANDSHAKE]: this.handleHandshakeMessage.bind(this),\n      [MessageTypes.DATA]: this.handleDataMessage.bind(this),\n      [MessageTypes.HAVE]: this.handleHaveMessage.bind(this),\n      [MessageTypes.ACK]: this.handleAckMessage.bind(this),\n      [MessageTypes.INTEGRITY]: this.handleIntegrityMessage.bind(this),\n      [MessageTypes.SIGNED_INTEGRITY]: this.handleSignedIntegrityMessage.bind(this),\n      [MessageTypes.REQUEST]: this.handleRequestMessage.bind(this),\n      [MessageTypes.CANCEL]: this.handleCancelMessage.bind(this),\n      [MessageTypes.CHOKE]: this.handleChokeMessage.bind(this),\n      [MessageTypes.UNCHOKE]: this.handleUnchokeMessage.bind(this),\n    };\n\n    this.sendBuffer = [];\n\n    this.swarm.scheduler.addPeer(this);\n  }\n\n  static createChannelId() {\n    return Math.round(Math.random() * MaxChannelId);\n  }\n\n  init() {\n    this.sendHandshake();\n    this.flush();\n\n    this.state = PeerState.AWAITING_HANDSHAKE;\n  }\n\n  close() {\n    this.state = PeerState.CLOSED;\n    this.swarm.scheduler.removePeer(this);\n  }\n\n  handleData(data) {\n    const context = new PeerDataHandlerContext(this.swarm);\n    data.messages.toArray().forEach(message => this.handleMessage(message, context));\n  }\n\n  handleMessage(message, context) {\n    const handler = this.handlers[message.type];\n    if (handler === undefined) {\n      throw new Error('unsupported message type');\n    }\n\n    // console.log(MessageTypes.name(message.type), this.remoteId, message);\n    handler(message, context);\n  }\n\n  handleHandshakeMessage(handshake) {\n    const options = handshake.options.reduce((options, {type, value}) => ({...options, [type]: value}), {});\n\n    const liveDiscardWindow = options[ProtocolOptions.LiveDiscardWindow];\n    if (liveDiscardWindow !== undefined) {\n      this.swarm.scheduler.setLiveDiscardWindow(this, liveDiscardWindow);\n    }\n\n    this.swarm.verifyProtocolOptions(options);\n\n    this.remoteId = handshake.channelId;\n\n    console.log('received handshake message while in state', this.state);\n    if (this.state !== PeerState.READY) {\n      this.sendHandshake();\n      this.swarm.scheduler.getRecentChunks().forEach(address => this.sendHave(address));\n      this.flush();\n    }\n\n    this.state = PeerState.READY;\n  }\n\n  handleDataMessage(message, context) {\n    const address = Address.from(message.address);\n    const delaySample = LEDBAT.computeOneWayDelay(message.timestamp.value);\n\n    this.swarm.scheduler.markChunkReceived(this, address, delaySample);\n\n    const {encoding} = this.swarm;\n    this.channel.send(new encoding.Datagram(\n      this.remoteId,\n      [new encoding.AckMessage(message.address, new encoding.Timestamp(delaySample))],\n    ));\n\n    context.getContentIntegrityVerifier(address).verifyChunk(address, message.data)\n      .then(() => {\n        this.swarm.chunkBuffer.set(address, message.data);\n        this.swarm.scheduler.markChunkVerified(this, address);\n        this.swarm.emitNewData();\n      })\n      .catch((err) => {\n        console.log('error validating chunk', err);\n        this.swarm.scheduler.markChunkRejected(this, address);\n      });\n  }\n\n  handleHaveMessage(message) {\n    this.swarm.scheduler.markChunkAvailable(this, Address.from(message.address));\n  }\n\n  handleAckMessage(message) {\n    const address = Address.from(message.address);\n    this.swarm.scheduler.markChunkAvailable(this, address);\n    this.swarm.scheduler.markSendAcked(this, address, message.delaySample.value);\n  }\n\n  handleIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHash(address, message.hash.value);\n  }\n\n  handleSignedIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHashSignature(address, message.signature.value);\n  }\n\n  handleRequestMessage(message) {\n    this.swarm.scheduler.enqueueRequest(this, Address.from(message.address));\n  }\n\n  handleCancelMessage(message) {\n    this.swarm.scheduler.cancelRequest(this, Address.from(message.address));\n  }\n\n  handleChokeMessage() {\n    this.state = PeerState.CHOKED;\n  }\n\n  handleUnchokeMessage() {\n    this.state = PeerState.READY;\n  }\n\n  isReady() {\n    return this.state === PeerState.READY;\n  }\n\n  sendHandshake() {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HandshakeMessage(\n      this.localId,\n      [\n        ...this.swarm.protocolOptions,\n        new encoding.SupportedMessagesProtocolOption(Object.keys(this.handlers)),\n      ],\n    ));\n  }\n\n  sendHave(address) {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HaveMessage(encoding.ChunkAddress.from(address)));\n  }\n\n  sendRequest(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.RequestMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendCancel(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.CancelMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendChunk(address, timestamp) {\n    const chunk = this.swarm.chunkBuffer.get(address);\n    if (chunk === undefined) {\n      return;\n    }\n\n    // TODO: omit signatures for bins the peer has already acked\n    const constituentSignatures = this.swarm.contentIntegrity.getConstituentSignatures(address);\n    if (constituentSignatures === undefined) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n\n    constituentSignatures\n      .reverse()\n      .forEach(({bin, signature}, i) => {\n        const address = encoding.ChunkAddress.from(new Address(bin));\n\n        this.sendBuffer.push(new encoding.IntegrityMessage(\n          address,\n          new encoding.IntegrityHash(signature.getHash()),\n        ));\n\n        if (i === 0) {\n          this.sendBuffer.push(new encoding.SignedIntegrityMessage(\n            address,\n            new encoding.Timestamp(timestamp),\n            new encoding.LiveSignature(signature.getSignatureHash()),\n          ));\n        }\n      });\n\n    this.sendBuffer.push(new encoding.DataMessage(encoding.ChunkAddress.from(address), chunk));\n\n    this.flush();\n  }\n\n  flush() {\n    if (this.sendBuffer.length === 0) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n    this.channel.send(new encoding.Datagram(this.remoteId, this.sendBuffer));\n    this.sendBuffer = [];\n  }\n}\n\nclass SwarmSet extends EventEmitter {\n  constructor() {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.swarms = {};\n  }\n\n  insert(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] === undefined) {\n      this.swarms[key] = swarm;\n      this.emit('insert', swarm);\n    }\n  }\n\n  remove(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] !== undefined) {\n      delete this.swarms[key];\n      this.emit('remove', swarm);\n    }\n  }\n\n  get(swarmId) {\n    return this.swarms[SwarmSet.swarmIdToKey(swarmId)];\n  }\n\n  toArray() {\n    return Object.values(this.swarms);\n  }\n\n  static swarmIdToKey(swarmId) {\n    return swarmId.toBuffer().toString('base64');\n  }\n}\n\nexport class Client {\n  constructor() {\n    this.channels = [];\n\n    this.swarms = new SwarmSet();\n  }\n\n  publishSwarm(swarm) {\n    this.swarms.insert(swarm);\n  }\n\n  unpublishSwarm(swarm) {\n    this.swarms.remove(swarm);\n  }\n\n  joinSwarm(uri) {\n    const chunkSize = uri.protocolOptions[ProtocolOptions.ChunkSize];\n    const clientOptions = {\n      liveDiscardWindow: Math.ceil(BUFFER_SIZE / chunkSize),\n      uploadRateLimit: MAX_UPLOAD_RATE,\n    };\n\n    const swarm = new Swarm(uri, clientOptions);\n    this.swarms.insert(swarm);\n\n    return swarm;\n  }\n\n  createChannel(conn) {\n    const channel = new Channel(conn, this.swarms);\n    this.channels.push(channel);\n\n    channel.once('close', () => {\n      const index = this.channels.indexOf(channel);\n      this.channels.splice(index, 1);\n    });\n  }\n}\n\nexport class Channel extends EventEmitter {\n  constructor(conn, swarms) {\n    super();\n\n    this.conn = conn;\n    this.swarms = swarms;\n    this.peers = {};\n\n    this.handleSwarmInsert = this.getOrCreatePeer.bind(this);\n    this.swarms.on('insert', this.handleSwarmInsert);\n\n    const liveSwarms = swarms.toArray();\n    this.conn.addEventListener('open', () => liveSwarms.forEach(this.handleSwarmInsert));\n    this.conn.addEventListener('message', this.handleMessage.bind(this));\n    this.conn.addEventListener('error', err => console.log('connection error:', err));\n  }\n\n  handleMessage(event) {\n    let data = new genericEncoding.Datagram();\n    data.read(event.data);\n\n    let peer = this.peers[data.channelId];\n    if (peer === undefined) {\n      if (data.channelId !== 0) {\n        return;\n      }\n\n      let handshake;\n      try {\n        handshake = data.messages.next();\n      } catch (error) {\n        console.log('error decoding mesasge', error);\n        return;\n      }\n      if (handshake === undefined || handshake.type !== MessageTypes.HANDSHAKE) {\n        console.log('rejected new peer without handshake');\n        return;\n      }\n      const swarmId = handshake.options.find(({type}) => type === ProtocolOptions.SwarmIdentifier);\n      if (swarmId === undefined) {\n        console.log('rejecting new peer with invalid swarm id');\n        return;\n      }\n      const swarm = this.swarms.get(SwarmId.from(swarmId.value));\n      if (swarm === undefined) {\n        console.log('rejecting new peer requesting unknown swarm');\n        return;\n      }\n\n      peer = this.getOrCreatePeer(swarm);\n    }\n\n    data = new peer.swarm.encoding.Datagram();\n    data.read(event.data);\n    // console.log('RECEIVED', data.messages.toArray());\n    peer.handleData(data);\n  }\n\n  send(data) {\n    try {\n      // console.log('SENT', data);\n      this.conn.send(data.toBuffer());\n    } catch (error) {\n      console.log('encountered error while sending', error);\n      this.handleClose();\n    }\n  }\n\n  handleClose() {\n    this.swarms.removeListener('insert', this.handleSwarmInsert);\n    Object.values(this.peers).forEach(peer => peer.close());\n    this.emit('close');\n  }\n\n  getOrCreatePeer(swarm) {\n    let peer = Object.values(this.peers).find(p => p.swarm === swarm);\n    return peer || this.createPeer(swarm);\n  }\n\n  createPeer(swarm) {\n    const {peers, swarms} = this;\n\n    const peer = new Peer(swarm, this);\n    peers[peer.localId] = peer;\n    peer.init();\n\n    function handleRemove(removedSwarm) {\n      if (removedSwarm === swarm) {\n        delete peers[peer.localId];\n        peer.close();\n\n        swarms.removeListener('remove', handleRemove);\n      }\n    }\n\n    swarms.on('remove', handleRemove);\n\n    return peer;\n  }\n}\n","import KBucket from 'k-bucket';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport arrayEqual from 'array-equal';\nimport randomBytes from 'randombytes';\nimport LRU from 'lru-cache';\nimport hexToUint8Array from './hexToUint8Array';\n\nconst SEND_REPLICAS = 2;\nconst MAX_HOPS = 10;\nconst DEFAULT_PEER_REQUEST_COUNT = 10;\nconst NUMBER_OF_NODES_PER_BUCKET = 2;\n\n// TODO: implement get/set\n// TODO: implement connection dump rpc for network debugging\n\nexport class Client extends EventEmitter {\n  constructor(id) {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.id = id;\n\n    // managed/unmanaged?\n    this.channels = new KBucket({\n      numberOfNodesPerKBucket: NUMBER_OF_NODES_PER_BUCKET,\n      localNodeId: this.id,\n    });\n    this.allChannels = new KBucket({\n      numberOfNodesPerKBucket: 100,\n      localNodeId: this.id,\n    });\n\n    this.channels.on('ping', this.handlePing.bind(this));\n    this.channels.on('removed', this.handleRemoved.bind(this));\n    this.channels.on('updated', this.handleUpdated.bind(this));\n    this.channels.on('added', this.handleAdded.bind(this));\n\n    this.knownPeerIds = {};\n    this.channelMap = {};\n\n    this.seenIds = new LRU({max: 1024});\n    this.knownRoutes = new LRU({\n      max: 1024,\n      maxAge: 1000 * 60,\n    });\n    this.callbacks = new LRU({max: 1024});\n\n    this.on('receive.peers.request', this.handlePeersRequest.bind(this));\n    this.on('receive.ping.request', this.handlePingRequest.bind(this));\n    this.on('receive.trace.request', this.handleTraceRequest.bind(this));\n    this.on('receive.callback.response', this.handleCallbackResponse.bind(this));\n\n    this.startPeerRequests();\n  }\n\n  close() {\n    this.stopPeerRequests();\n    this.channels.toArray().forEach(({id}) => this.removeChannel(id));\n    this.emit('close');\n  }\n\n  startPeerRequests() {\n    let index = 0;\n    let ids = Object.keys(this.knownPeerIds);\n\n    const next = () => {\n      for (let retry = 0; retry <= ids.length; retry ++) {\n        if (index >= ids.length) {\n          index = 0;\n          ids = Object.keys(this.knownPeerIds);\n        }\n\n        const id = ids[index];\n        index ++;\n\n        if (id) {\n          return id;\n        }\n      }\n    };\n\n    this.peerRequestIvl = setInterval(() => {\n      const id = next();\n      if (id) {\n        this.sendPeerRequest(hexToUint8Array(id));\n      }\n    }, 5000);\n  }\n\n  stopPeerRequests() {\n    clearInterval(this.peerRequestIvl);\n  }\n\n  handlePing(channels, newChannel) {\n    // console.log('ping', channels, newChannel);\n    const PING_TIMEOUT = 1000;\n    const CONNECT_TIMEOUT = 1000;\n\n    const now = Date.now();\n\n    channels.forEach(channel => {\n      const {id, lastPing} = channel;\n\n      if (now - lastPing < 30000) {\n        this.addChannel(channel);\n        return;\n      }\n\n      // console.log('>>> conn exists, pinging');\n      // TODO: maybe keep track of how recently we pinged? debounce\n      const replaceChannel = () => {\n        console.log('ping timeout removing', arrayBufferToHex(id));\n        this.removeChannel(id);\n        this.addChannel(newChannel);\n      };\n\n      // TODO: connection up/down getter\n      if (channel.conn == null) {\n        // console.log('>>> channel undefined, waiting to see if it gets replaced');\n        setTimeout(() => {\n          const channel = this.getChannel(id);\n          if (channel != null && channel.conn != null) {\n            this.addChannel(channel);\n            return;\n          }\n          replaceChannel();\n        }, CONNECT_TIMEOUT);\n\n        return;\n      }\n\n      // console.log('ping', arrayBufferToHex(id));\n      const replaceChannelTimeout = setTimeout(replaceChannel, PING_TIMEOUT);\n      const clearReplaceChannelTimeout = () => {\n        clearTimeout(replaceChannelTimeout);\n        channel.lastPing = now;\n        this.addChannel(channel);\n      };\n      this.sendPing(id, clearReplaceChannelTimeout);\n    });\n  }\n\n  addChannel(channel) {\n    this.channels.add(channel);\n    this.allChannels.add(channel);\n  }\n\n  removeChannel(id) {\n    this.channels.remove(id);\n    this.allChannels.remove(id);\n    delete this.channelMap[arrayBufferToHex(id)];\n  }\n\n  getChannel(id) {\n    return this.channelMap[arrayBufferToHex(id)];\n  }\n\n  handleRemoved(channel) {\n    console.log('remove', arrayBufferToHex(channel.id));\n    if (channel.conn) {\n      channel.conn.close();\n    }\n    // console.log('handleRemoved', arrayBufferToHex(channel.id));\n  }\n\n  handleUpdated(oldChannel, newChannel) {\n    // console.log('update', {oldChannel, newChannel});\n    // console.log('handleUpdated', arrayBufferToHex(channel.id));\n  }\n\n  handleAdded(channel) {\n    if (channel.conn === undefined) {\n      // console.log('peers.discover', arrayBufferToHex(this.id), arrayBufferToHex(channel.id), this.channels.count());\n      this.emit('peers.discover', channel.id);\n    }\n    // console.log('add');\n    // emit event?\n    // console.log('handleAdded', arrayBufferToHex(channel.id));\n  }\n\n  createChannel(id, conn) {\n    const channel = new Channel(id, conn);\n\n    this.channelMap[arrayBufferToHex(id)] = channel;\n\n    const messages = [];\n    const bufferMessages = event => messages.push(event);\n    const handleMessage = this.handleMessage.bind(this, channel);\n\n    // let requestPeersIvl = setInterval(() => this.sendPeerRequest(id), 30000);\n\n    const handleOpen = () => {\n      // console.log('opened', arrayBufferToHex(channel.id));\n      this.addChannel(channel);\n\n      conn.removeEventListener('message', bufferMessages);\n      conn.addEventListener('message', handleMessage);\n      messages.forEach(handleMessage);\n\n      this.sendPeerRequest(id);\n      setTimeout(() => this.sendPeerRequest(id), 1000);\n    };\n\n    const handleClose = () => {\n      // clearInterval(requestPeersIvl);\n      conn.removeEventListener('message', bufferMessages);\n      conn.removeEventListener('message', handleMessage);\n      conn.removeEventListener('open', handleOpen);\n      conn.removeEventListener('close', handleClose);\n      this.handleClose(channel);\n    };\n\n    conn.addEventListener('message', bufferMessages);\n    conn.addEventListener('open', handleOpen, {once: true});\n    conn.addEventListener('close', handleClose, {once: true});\n  }\n\n  handleMessage(channel, event) {\n    // console.log('handleMessage', event.data);\n\n    const req = JSON.parse(event.data);\n    const {type, id} = req;\n\n    if (req.trace) {\n      req.trace.push(arrayBufferToHex(this.id));\n      // console.log('TRACE', req);\n    }\n\n    if (this.seenIds.get(id)) {\n      // console.log('discarding seen message', id);\n      // if (req.trace) {\n      //   console.log('DROPPED', req);\n      // }\n      return;\n    }\n    this.seenIds.set(id, true);\n\n    if (!this.getChannel(channel.id)) {\n      console.warn('receiving channel is not known to dht', arrayBufferToHex(channel.id));\n    }\n\n    this.knownRoutes.set(req.from, channel.id);\n    // this.knownRoutes.set(req.from, arrayBufferToHex(channel.id));\n\n    const to = hexToUint8Array(req.to);\n    if (!arrayEqual(to, this.id)) {\n      this.forwardMessage(to, req);\n      return;\n    }\n\n    // if (req.trace) {\n    //   console.log('DELIVERED', req);\n    // }\n\n    const resCallback = (res={}, callback=null) => {\n      const from = hexToUint8Array(req.from);\n      const data = {re: id, ...res};\n      this.send(from, 'callback.response', data, callback);\n    };\n\n    // console.log(`emit receive.${type}`, req);\n    this.emit(`receive.${type}`, {data: req, callback: resCallback});\n  }\n\n  forwardMessage(to, data) {\n    // console.log('forwarding message', arrayBufferToHex(to), data);\n\n    if (data.hops >= MAX_HOPS) {\n      // console.log('discarding message with too many hops', data.id);\n      return;\n    }\n    data.hops ++;\n\n    this.sendRaw(to, JSON.stringify(data), data.trace);\n  }\n\n  handleClose({id}) {\n    console.warn('handleClose', arrayBufferToHex(id));\n    this.removeChannel(id);\n    delete this.channelMap[arrayBufferToHex(id)];\n  }\n\n  sendPing(to, callback=()=>{}) {\n    this.send(to, 'ping.request', {}, callback);\n  }\n\n  handlePingRequest({data, callback}) {\n    // console.log('PING', data);\n    callback({});\n  }\n\n  handleTraceRequest({data, callback}) {\n    callback(data);\n  }\n\n  handleCallbackResponse({data, callback}) {\n    const reqCallback = this.callbacks.get(data.re);\n    if (reqCallback) {\n      reqCallback(data, callback);\n    } else {\n      // console.warn('<<< callback for %s expired', data.re);\n    }\n  }\n\n  sendPeerRequest(to, count=DEFAULT_PEER_REQUEST_COUNT) {\n    const timeout = setTimeout(() => {\n      delete this.knownPeerIds[arrayBufferToHex(to)];\n    }, 5000);\n    this.send(to, 'peers.request', {count}, res => {\n      clearTimeout(timeout);\n      this.handlePeersResponse(res);\n    });\n  }\n\n  handlePeersRequest({data: {count=DEFAULT_PEER_REQUEST_COUNT, from}, callback}) {\n    // console.log('handlePeersRequest');\n\n    const ids = this.allChannels.closest(hexToUint8Array(from))\n      .filter(({conn}) => conn != null)\n      .map(({id}) => arrayBufferToHex(id));\n    callback({ids});\n  }\n\n  handlePeersResponse(res) {\n    // console.log('handlePeersResponse', res.ids);\n\n    res.ids\n      .map(id => hexToUint8Array(id))\n      .filter(id => !arrayEqual(id, this.id))\n      .filter(id => {\n        const channel = this.getChannel(id);\n        return channel == null || channel.conn == null;\n      })\n      .forEach(id => {\n        // TODO: store peer provenance so we can ignore bad actors?\n        this.knownPeerIds[arrayBufferToHex(id)] = true;\n        this.addChannel(new Channel(id));\n      });\n  }\n\n  send(to, type, data={}, callback=null) {\n    if (typeof data === 'function') {\n      callback = data;\n      data = {};\n    }\n\n    const id = arrayBufferToHex(randomBytes(16));\n    this.seenIds.set(id, true);\n\n    if (callback != null) {\n      this.callbacks.set(id, callback);\n    }\n\n    const message = JSON.stringify({\n      id,\n      type,\n      from: arrayBufferToHex(this.id),\n      to: arrayBufferToHex(to),\n      trace: [arrayBufferToHex(this.id)],\n      hops: 0,\n      ...data,\n    });\n\n    // console.log('formatMessage', message);\n\n    this.sendRaw(to, message);\n  }\n\n  sendRaw(to, message, trace=[]) {\n    let closest = this.allChannels.closest(to)\n      .filter(({conn}) => conn != null)\n      .filter(({idHex}) => trace.indexOf(idHex) === -1)\n      .slice(0, SEND_REPLICAS);\n\n    const knownRoute = this.knownRoutes.get(arrayBufferToHex(to));\n    if (knownRoute) {\n      const channel = this.getChannel(knownRoute);\n      // const channel = this.allChannels.get(knownRoute);\n      if (channel != null && channel.conn != null) {\n        closest.push(channel);\n      }\n    }\n\n    if (closest.length === 0) {\n      // console.warn(`closest value to ${arrayBufferToHex(to)} does not exist, dropping`, message);\n      return;\n    }\n\n    if (arrayEqual(closest[0].id, to)) {\n      closest = closest.slice(0, 1);\n    }\n    // console.log('send', closest.map(({id}) => arrayBufferToHex(id)), message);\n    // console.log(closest.length, closest.filter(({conn}) => !!conn).length, message);\n    closest.forEach(({conn}) => conn.send(message));\n  }\n}\n\nexport class Channel {\n  constructor(id, conn) {\n    this.id = id;\n    this.idHex = arrayBufferToHex(id);\n    this.vectorClock = Date.now();\n    this.lastPing = Date.now();\n    this.conn = conn;\n\n    // console.log('channel', this);\n  }\n}\n\nexport class SubChannel {\n  constructor(client, peerId, id=arrayBufferToHex(randomBytes(16))) {\n    // console.log('subchannel created', id);\n    this.client = client;\n    this.peerId = peerId;\n    this.id = id;\n    this.readyState = SubChannel.ReadyStates.OPEN;\n    this.onmessage = () => {};\n\n    this.handleMessage = this.handleMessage.bind(this);\n    this.client.on('receive.subchannel.message', this.handleMessage);\n  }\n\n  handleMessage({data: {channelId, data}}) {\n    // console.log('receive.subchannel.message', channelId, this.id, data);\n\n    if (channelId === this.id) {\n      this.onmessage({data});\n    }\n  }\n\n  send(data) {\n    this.client.send(\n      this.peerId,\n      'subchannel.message',\n      {\n        channelId: this.id,\n        data: data,\n      },\n    );\n  }\n\n  close() {\n    this.readyState = SubChannel.ReadyStates.CLOSED;\n    this.client.removeListener('receive.subchannel.message', this.handleMessage);\n  }\n}\n\nSubChannel.ReadyStates = {\n  OPEN: 1,\n  CLOSED: 3,\n};\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport createRandomId from './utils/createRandomId';\n\nexport class Server {\n  constructor() {\n    this.dhtClient = new dht.Client(createRandomId());\n    this.ppsppClient = new ppspp.Client();\n  }\n}\n\nconst queue = [];\n\nexport class ConnManager {\n  constructor(server) {\n    this.server = server;\n  }\n\n  bootstrap() {\n    const id = createRandomId();\n\n    const data = {\n      type: 'bootstrap',\n      bootstrapId: arrayBufferToHex(this.server.dhtClient.id),\n      id: arrayBufferToHex(id),\n    };\n    const conn = new Conn();\n    const client = this.createClient(conn);\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.server.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.server.ppsppClient.createChannel(channel);\n      }\n    });\n\n    queue.push(client);\n    if (queue.length > 11) {\n      queue.shift().close();\n    }\n    // setTimeout(() => client.close(), Math.random() * 30000);\n\n    return Promise.resolve({data, conn: conn.remote});\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    mediator.on('connection', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Conn extends EventEmitter {\n  constructor(remote) {\n    super();\n    this.remote = remote || new Conn(this);\n    this.remote.remote = this;\n    this.onmessage = () => {};\n    this.closed = false;\n  }\n\n  send(data) {\n    if (!this.closed) {\n      setImmediate(() => {\n        this.remote.emit('message', {data});\n        this.remote.onmessage({data});\n      });\n    }\n  }\n\n  addEventListener(...args) {\n    this.on(...args);\n  }\n\n  removeEventListener(...args) {\n    this.removeListener(...args);\n  }\n\n  close() {\n    this.closed = true;\n    this.remote.emit('close');\n    this.emit('close');\n  }\n}\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    switch (data.type) {\n      case 'connection':\n        this.handleConnection(data);\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  handleConnection({id}) {\n    const datachannels = Mediator.datachannels[id];\n    delete Mediator.datachannels[id];\n\n    Object.entries(datachannels).forEach(([label, channel]) => this.emit('datachannel', label, channel));\n    this.emit('open');\n  }\n\n  sendConnection(datachannels) {\n    const id = Mediator.nextId ++;\n    Mediator.datachannels[id] = datachannels;\n\n    this.conn.send(JSON.stringify({\n      type: 'connection',\n      id,\n    }));\n\n    this.emit('open');\n  }\n}\n\nMediator.nextId = 0;\nMediator.datachannels = {};\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.datachannels = {};\n    this.conns = [];\n\n    mediator.on('datachannel', this.handleDataChannel.bind(this));\n    mediator.once('open', this.handleOpen.bind(this));\n  }\n\n  handleDataChannel(label, conn) {\n    const channel = new ClientDataChannel(this, label, conn);\n    this.conns.push(channel);\n    this.emit('datachannel', {label, channel});\n  }\n\n  handleOpen() {\n    setImmediate(() => this.emit('open'));\n  }\n\n  createDataChannel(label) {\n    const channel = new ClientDataChannel(this, label);\n    this.datachannels[label] = channel;\n    this.conns.push(channel);\n    return channel;\n  }\n\n  init() {\n    this.mediator.sendConnection(this.datachannels);\n  }\n\n  close() {\n    this.conns.forEach(conn => conn.close());\n    this.emit('close');\n  }\n}\n\nexport class ClientDataChannel extends Conn {\n  constructor(client, label, remote) {\n    super(remote);\n\n    this.client = client;\n    this.label = label;\n    this.open = false;\n\n    this.client.on('open', () => {\n      this.emit('open');\n      this.open = true;\n    });\n  }\n}\n","import {EventEmitter} from 'events';\nimport Injector from './ppspp/injector';\n\nconst DELIMITER = Buffer.from('4c93bf00ae13c37e5df3b7a9cea0413521fe1b08a627d065d7180b9d0738c666', 'hex');\nconst DELIMITER_LENGTH = DELIMITER.length;\nconst HEADER_INSTANCE_LENGTH = 37;\n\nexport class ChunkedWriteStream extends EventEmitter {\n  constructor(injector) {\n    super();\n    this.injector = injector;\n  }\n\n  write(buffer) {\n    const length = Buffer.alloc(4);\n    length.writeUInt32BE(buffer.length);\n    this.injector.appendData(Buffer.concat(\n      [\n        DELIMITER,\n        Buffer.from([0]),\n        length,\n        DELIMITER,\n        Buffer.from([1]),\n        length,\n      ],\n      HEADER_INSTANCE_LENGTH * 2,\n    ));\n\n    this.injector.appendData(buffer);\n  }\n}\n\nexport class ChunkedWriteStreamInjector extends EventEmitter {\n  start() {\n    const data = Buffer.alloc(3500000 / 8);\n    data.fill(255);\n\n    Injector.create().then(injector => {\n      this.injector = injector;\n\n      const writer = new ChunkedWriteStream(injector);\n      this.intervalId = setInterval(() => writer.write(data), 1000);\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n\nclass AbstractChunkedReadStream extends EventEmitter {\n  constructor(swarm) {\n    super();\n\n    this.swarm = swarm;\n\n    this.handleWarmupSwarmData = this.handleWarmupSwarmData.bind(this);\n    this.handleSwarmData = this.handleSwarmData.bind(this);\n\n    this.chunkBufferLength = 0;\n    this.nextDataOffset = 0;\n    this.nextDataLength = 0;\n\n    this.swarm.on('data', this.handleWarmupSwarmData);\n  }\n\n  handleWarmupSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const delimiterIndex = data[i].indexOf(DELIMITER);\n      if (delimiterIndex === -1 || delimiterIndex + HEADER_INSTANCE_LENGTH > data[i].length) {\n        continue;\n      }\n\n      this.swarm.removeListener('data', this.handleWarmupSwarmData);\n      this.swarm.on('data', this.handleSwarmData);\n\n      this.readHeader(data[i], delimiterIndex);\n      this.handleSwarmData(data.slice(i));\n\n      break;\n    }\n  }\n\n  readHeader(data, offset) {\n    const instance = data.readUInt8(offset + DELIMITER_LENGTH);\n    this.nextDataOffset = offset + HEADER_INSTANCE_LENGTH * (2 - instance);\n    this.nextDataLength = data.readUInt32BE(offset + DELIMITER_LENGTH + 1);\n  }\n\n  handleSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const lastChunkOffset = this.chunkBufferLength;\n\n      this.chunkBufferLength += data[i].length;\n\n      const nextDataEnd = this.nextDataOffset + this.nextDataLength;\n      if (this.chunkBufferLength < nextDataEnd) {\n        this.handleData(data[i], lastChunkOffset);\n        continue;\n      }\n\n      const lastChunkEnd = nextDataEnd - lastChunkOffset;\n      this.handleEndData(data[i], lastChunkEnd);\n\n      // find the next header or defer to handleWarmupSwarmData if it hasn't arrived\n      if (this.chunkBufferLength - nextDataEnd <= HEADER_INSTANCE_LENGTH) {\n        this.swarm.removeListener('data', this.handleSwarmData);\n        this.swarm.on('data', this.handleWarmupSwarmData);\n\n        this.chunkBufferLength = 0;\n        this.handleWarmupSwarmData(data.slice(i));\n        return;\n      }\n\n      this.chunkBufferLength = 0;\n      this.readHeader(data[i], lastChunkEnd);\n      i--;\n    }\n  }\n}\n\nexport class ChunkedFragmentedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.firstEmitted = false;\n  }\n\n  handleData(data, lastChunkOffset) {\n    if (!this.firstEmitted) {\n      if (this.chunkBufferLength > this.nextDataOffset) {\n        this.emit('start', data.slice(this.nextDataOffset - lastChunkOffset));\n        this.firstEmitted = true;\n      }\n\n      return;\n    }\n\n    this.emit('data', data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.emit('end', data.slice(0, lastChunkEnd));\n    this.firstEmitted = false;\n  }\n}\n\nexport class ChunkedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.chunkBuffer = [];\n  }\n\n  handleData(data) {\n    this.chunkBuffer.push(data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.chunkBuffer.push(data);\n\n    // trim export data range and emit\n    const chunkSlice = this.chunkBuffer.slice();\n\n    chunkSlice[chunkSlice.length - 1] = chunkSlice[chunkSlice.length - 1].slice(0, lastChunkEnd);\n\n    let firstChunkStart = this.nextDataOffset;\n    if (firstChunkStart > chunkSlice[0].length) {\n      firstChunkStart -= chunkSlice[0].length;\n      chunkSlice.shift();\n    }\n    chunkSlice[0] = chunkSlice[0].slice(firstChunkStart);\n\n    this.emit(\n      'data',\n      {\n        chunks: chunkSlice,\n        length: this.nextDataLength,\n      },\n    );\n\n    this.chunkBuffer = [];\n  }\n}\n","import URLSafeBase64 from 'urlsafe-base64';\nimport SwarmId from './swarmid';\nimport {ProtocolOptions} from './constants';\n\nconst protocolOptionToKey = {\n  [ProtocolOptions.ContentIntegrityProtectionMethod]: 'x.im',\n  [ProtocolOptions.MerkleHashTreeFunction]: 'x.hf',\n  [ProtocolOptions.LiveSignatureAlgorithm]: 'x.sa',\n  [ProtocolOptions.ChunkAddressingMethod]: 'x.am',\n  [ProtocolOptions.ChunkSize]: 'x.cs',\n};\n\n// TODO: dn with stream name\n// TODO: as to m3u8 url?\nexport default class URI {\n  constructor(swarmId, protocolOptions) {\n    this.swarmId = swarmId;\n    this.protocolOptions = protocolOptions;\n  }\n\n  toString() {\n    const swarmId = URLSafeBase64.encode(this.swarmId.toBuffer());\n    const protocolOptions = Object.entries(this.protocolOptions)\n      .map(([protocolOption, value]) => `${protocolOptionToKey[protocolOption]}=${value}`)\n      .join('&');\n    return `magnet:?xt=urn:ppspp:${swarmId}&${protocolOptions}`;\n  }\n\n  static parse(uriString) {\n    if (!uriString.startsWith('magnet:')) {\n      throw new Error('invalid uri: expected magnet');\n    }\n\n    const args = uriString.substring(8)\n      .split('&')\n      .map(query => {\n        const [key, value] = query.split('=');\n        return [key, decodeURIComponent(value)];\n      });\n\n    const protocolOptions = Object.entries(protocolOptionToKey)\n      .reduce((protocolOptions, [protocolOption, key]) => {\n        const arg = args.find(([argKey]) => argKey === key);\n        if (arg === undefined) {\n          throw new Error(`invalid uri: missing ${key}`);\n        }\n        return {...protocolOptions, [protocolOption]: parseFloat(arg[1])};\n      }, {});\n\n    const xt = args.find(([key, value]) => key === 'xt' && value.startsWith('urn:ppspp:'));\n    if (xt === undefined) {\n      throw new Error('invalid uri: missing suitable xt');\n    }\n    const swarmId = SwarmId.from(URLSafeBase64.decode(xt[1].substring(10)));\n\n    return new URI(swarmId, protocolOptions);\n  }\n}\n"],"sourceRoot":""}