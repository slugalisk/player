{"version":3,"sources":["ppspp/constants.js","components/DiagnosticMenu/index.js","chunkedStream.js","client.js","ppspp/injector.js","components/App.js","wrtc.js","ppspp/address.js","compat/ws/index.js","hooks/useQuery.js","hooks/useMediaSource.js","hooks/useSwarmMediaSource.js","hooks/useVideo.js","hooks/useIdleTimeout.js","hooks/useUpdates.js","components/VideoVolume.js","components/VideoProgressBar.js","components/VideoControls.js","components/VideoPlayer.js","hexToUint8Array.js","ppspp/integrity.js","compat/crypto/index.js","compat/crypto/node.js","compat/crypto/browser.js","compat/ws/node.js","compat/ws/browser.js","compat/wrtc/node.js","compat/wrtc/browser.js","components/Router.js","index.js","hooks/useReady.js","ppspp/swarmid.js","components/LogoButton.js","ema.js","RingBuffer.js","ledbat.js","ppspp/encoding.js","bitarray.js","wfq.js","ppspp/scheduler.js","ppspp/index.js","dht.js","ppspp/uri.js","binSearch.js","compat/wrtc/index.js"],"names":["__webpack_require__","d","__webpack_exports__","MaxChannelId","ProtocolOptions","Version","ContentIntegrityProtectionMethod","MerkleHashTreeFunction","LiveSignatureAlgorithm","ChunkAddressingMethod","MessageTypes","lodash_invert__WEBPACK_IMPORTED_MODULE_0__","lodash_invert__WEBPACK_IMPORTED_MODULE_0___default","n","MinimumVersion","SwarmIdentifier","LiveDiscardWindow","SupportedMessages","ChunkSize","EndOption","RFC7574","None","MerkleHashTree","SignAll","UnifiedMerkleTree","SHA1","SHA224","SHA256","SHA384","SHA512","RSASHA1","RSASHA256","ECDSAP256SHA256","ECDSAP384SHA384","Bin32","ByteRange64","ChunkRange32","Bin64","ChunkRange64","HANDSHAKE","DATA","ACK","HAVE","INTEGRITY","PEX_RESv4","PEX_REQ","SIGNED_INTEGRITY","REQUEST","CANCEL","CHOKE","UNCHOKE","PEX_RESv6","PEX_REScert","forEach","enumType","names","invert","name","value","ToggleButton","buttonClasses","classNames","diagnostic_menu__toggle_button","diagnostic_menu__toggle_button--expanded","this","props","expanded","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","onClick","className","Component","defaultProps","formatNumber","isFinite","approx","String","SwarmState","scheduler","rows","key","totalSends","totalRequests","totalRequestsReceived","totalDroppedRequests","totalReceived","totalAdded","totalCancelled","ackUnknownSend","lastCompletedBin","loadedChunks","min","requestedChunks","chunkRate","map","_ref","PeerStateTable","peerState","chunkIntervalMean","wasteRate","ledbat","baseDelay","getMin","currentDelay","rttMean","rttVar","cwnd","cto","flightSize","validChunks","requestQueue","length","_ref2","_this$props","startBin","endBin","push","colSpan","AvailabilityMapChart","availableChunks","sentChunks","receivedChunks","_this","Object","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","canvas","React","createRef","scratchCanvas","document","current","isNaN","max","height","width","ctx","getContext","scale","scaleLinear","domain","range","fillStyle","fillRect","lastStart","i","values","get","drawImage","ref","PeerState","_this2","handleButtonClick","setState","state","table","peer","localId","remoteId","DiagnosticMenu","_this3","scheduleUpdate","handleUpdate","forceUpdate","window","requestAnimationFrame","swarmState","peerStates","containerClasses","containerClass","diagnostic_menu__container","diagnostic_menu__container--expanded","_this$props$swarm$sch","swarm","liveDiscardWindow","entries","_ref3","_ref4","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","DELIMITER","Buffer","from","DELIMITER_LENGTH","ChunkedWriteStream","_EventEmitter","injector","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","buffer","alloc","writeUInt32BE","appendData","concat","HEADER_INSTANCE_LENGTH","flush","EventEmitter","ChunkedWriteStreamInjector","_EventEmitter2","apply","arguments","undefined","_ref$name","_ref$bitRate","bitRate","injectorOptions","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","data","fill","Injector","create","then","writer","intervalId","setInterval","write","emit","contentType","done","clearInterval","setTimeout","AbstractChunkedReadStream","handleWarmupSwarmData","bind","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","handleSwarmData","chunkBufferLength","nextDataOffset","nextDataLength","on","nextChunkOffset","delimiterIndex","indexOf","removeListener","readHeader","slice","offset","instance","readUInt8","readUInt32BE","lastChunkOffset","nextDataEnd","handleData","lastChunkEnd","handleEndData","ChunkedFragmentedReadStream","_AbstractChunkedReadS","_this4","firstEmitted","ChunkedReadStream","_AbstractChunkedReadS2","_this5","chunkBuffer","chunkSlice","firstChunkStart","shift","chunks","Client","connManager","conn","bootstrap","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","dhtClientId","hexToUint8Array","id","bootstrapId","swarmUri","client","createClient","dhtClient","dht","handlePeersDiscover","handleReceiveConnectRequest","createChannel","createDataChannel","ppsppClient","ppspp","init","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","sub","dhtChannel","ppsppChannel","timeout","close","addEventListener","send","channelId","clearTimeout","_ref$data","callback","channel","label","chunkSize","chunksPerSignature","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__","inputBuffer","inputBufferSize","outputResult","Promise","resolve","signatureSize","buf","outputChunks","Math","all","contentIntegrity","appendSubtree","subtree","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_4__","setRange","rootAddress","markChunksLoaded","emitNewData","options","_options$chunkSize","_options$chunksPerSig","_options$liveDiscardW","ceil","_options$chunkAddress","chunkAddressingMethod","_options$contentInteg","contentIntegrityProtectionMethod","_options$merkleHashTr","merkleHashTreeFunction","_options$liveSignatur","liveSignatureAlgorithm","generateKeyPair","swarmId","privateKey","uri","URI","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__","console","log","toString","clientOptions","uploadRateLimit","Swarm","NoiseLogger","lazy","e","PubSubLogger","getDefaultBootstrapAddress","proto","location","protocol","host","useSwarm","_useState","useState","_useState2","setSwarm","joinSwarm","parse","App","params","match","_ref2$clientTimeoutMs","clientTimeoutMs","query","useQuery","search","autoPlay","bootstrapAddress","swarmName","clientTimeout","useTimeout","_useAsync","useAsync","ConnManager","clientLoading","loading","clientError","error","_useSwarm","_useSwarm2","_useState3","_useState4","swarmUriState","setSwarmUri","swarmDesc","swarms","find","desc","useReady","setImmediate","application/octet-stream","application/json","video/mpeg-ts","VideoPlayer","react__WEBPACK_IMPORTED_MODULE_1___default","logoButton","_LogoButton__WEBPACK_IMPORTED_MODULE_5__","disabled","pulse","flicker","blur","uriForm","onSubmit","onChange","target","placeholder","Fragment","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_6__","reject","WebSocket","onerror","onmessage","event","JSON","type","Error","mediator","Mediator","once","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_2__","handleMessage","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","RTCSessionDescription","sdp","candidate","RTCIceCandidate","readyState","stringify","initialized","waitingChannels","peerConn","RTCPeerConnection","iceServers","urls","sendIceCandidate","handleDataChannel","handleIceConnectionStateChange","addIceCandidate","_ready","description","setRemoteDescription","createAnswer","catch","setLocalDescription","sendAnswer","binaryType","resolveWaitingChannel","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","ordered","maxRetransmits","iceConnectionState","_this6","createOffer","offer","sendOffer","Address","bin","treeBounds","binBounds","_treeBounds","start","end","address","module","exports","require","react__WEBPACK_IMPORTED_MODULE_0__","qs__WEBPACK_IMPORTED_MODULE_1__","qs__WEBPACK_IMPORTED_MODULE_1___default","queryString","useMemo","qs","ignoreQueryPrefix","useMediaSource","mimeType","_useGetSet","useGetSet","_useGetSet2","getSourceBuffer","setSourceBuffer","operations","transform","newOperation","sourceBuffer","readOnly","updating","operation","unshift","mediaSource","MediaSource","addSourceBuffer","useEffect","handleError","handleUpdateEnd","removeEventListener","removeSourceBuffer","appendBuffer","prune","duration","buffered","remove","useSwarmMediaSource","_ref$mimeType","_useMediaSource","_useMediaSource2","slicedToArray","_useMediaSource2$","transmuxer","muxjs","mp4","Transmuxer","initSet","initSegment","warn","stream","useVideo","_ref$current","useRef","loaded","setLoaded","playing","setPlaying","_useState5","_useState6","paused","setPaused","_useState7","_useState8","ended","setEnded","_useState9","_useState10","waiting","setWaiting","_useState11","_useState12","muted","setMuted","_useState13","_useState14","volume","unsafelySetVolume","_useState15","_useState16","savedVolume","setSavedVolume","_useState17","_useState18","setReadyState","_useState19","_useState20","bufferStart","setBufferStart","_useState21","_useState22","bufferEnd","setBufferEnd","_useState23","_useState24","setDuration","_useState25","_useState26","currentTime","unsafelySetCurrentTime","_useState27","_useState28","seekableStart","setSeekableStart","_useState29","_useState30","seekableEnd","setSeekableEnd","setVolume","play","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","t1","stop","clampedVolume","supportPiP","pictureInPictureEnabled","disablePictureInPicture","pip","pictureInPictureElement","togglePiP","_callee2","_context2","exitPictureInPicture","requestPictureInPicture","src","onEnded","onPause","onPlaying","onCanPlay","onCanPlayThrough","onVolumeChange","onWaiting","onDurationChange","onLoadedMetadata","onLoadedData","onTimeUpdate","video","seekable","mute","unmute","pause","setCurrentTime","time","setSrc","useIdleTimout","initialState","idle","setIdle","lastActive","setLastActive","useDebounce","Date","now","useUpdates","effect","deps","Handle","_ref$domain","_ref$handle","handle","percent","getHandleProps","react_default","assign","role","aria-valuemin","aria-valuemax","aria-valuenow","style","left","Track","source","getTrackProps","VideoVolume","onUpdate","onSlideStart","onSlideEnd","dragging","setDragging","_useIdleTimeout","useIdleTimeout","_useIdleTimeout2","renewIdleTimeout","sliderClassNames","video_volume__slider","active","es","mode","step","getRailProps","_ref5","handles","VideoVolume_Handle","right","_ref6","tracks","_ref7","VideoVolume_Track","VideoProgressBar","videoState","videoControls","wasPlaying","setWasPlaying","setValue","domainStart","setDomainStart","domainEnd","setDomainEnd","video_progress_bar__slider","domainWidth","bufferRailWidth","bufferStyle","clampedValue","clampValue","VideoProgressBar_Handle","_ref8","_ref9","VideoProgressBar_Track","Button","tooltip","Icon","icon","data-tip","PiPButton","supported","toggle","VideoControls_Button","PictureInPictureAlt","FullscreenButton","enabled","FullscreenExit","Fullscreen","VolumeControl","onUpdateStart","onUpdateEnd","volumeIcons","VolumeOff","VolumeMute","VolumeDown","VolumeUp","volumeLevel","VolumeIcon","components_VideoVolume","VideoControls","setActive","visible","visible100","setVisible100","visible500","setVisible500","controlsClassName","video_player__controls","onMouseMove","onMouseLeave","Pause","PlayArrow","VideoControls_VolumeControl","components_VideoProgressBar","VideoControls_PiPButton","VideoControls_FullscreenButton","fullscreenEnabled","fullscreen","toggleFullscreen","SwarmPlayer","_ref$volumeStepSize","volumeStepSize","_ref$useMediaSource","rootRef","controlsHidden","renewControlsTimeout","clearControlsTimeout","_useFullscreen","useFullscreen","_useFullscreen2","isFullscreen","_useVideo","_useVideo2","videoProps","truncateMediaSource","URL","createObjectURL","waitingSpinner","index_es","LogoButton","spin","handleToggleFullscreen","onDoubleClick","onWheel","direction","deltaY","preventDefault","components_VideoControls","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0__","hex_to_array_buffer__WEBPACK_IMPORTED_MODULE_0___default","v","Uint8Array","hexToArrayBuffer","crypto","toUint8Array","MerkleHashTreeFunctionAlgorithms","_MerkleHashTreeFuncti","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_10__","MerkleHashTreeFunctionByteLengths","_MerkleHashTreeFuncti2","createMerkleHashTreeFunction","algorithm","nullHash","_len","Array","_key","every","arrayEqual","subtle","digest","LiveSignatureAlgorithms","_LiveSignatureAlgorit","modulusLength","publicExponent","hash","namedCurve","createLiveSignatureSignFunction","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_9__","importResult","importKey","sign","createLiveSignatureVerifyFunction","getKeyParams","publicKey","signature","verify","generateKey","keyPair","exportKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_8__","SwarmId","unavailableLiveSignatureSignFunction","createContentIntegrityVerifierFactory","liveSignatureVerifyFunction","liveSignatureSignFunction","Infinity","Signature","verified","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_7__","SignedSignature","verificationResult","getHash","markVerified","verifyHash","compare","signatures","getChunkCount","contains","MerkleHashTreeVerifier","hashTree","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_5___default","getConstituentHashBins","bfsIndex","stride","parent","branch","containsBin","isRoot","siblingBin","siblingBfsIndex","floor","minSize","size","hashes","siblings","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__","rootHashSignature","pow","log2","hashResult","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","siblingSignature","index","verifiedSignature","siblingHash","_iterator","Symbol","iterator","err","return","UnifiedMerkleHashTree","subtrees","nextStart","chunkCount","binSearch","_this5$subtrees$i$roo","storedSubtree","findSubtree","copy","sort","b","pruneSubtrees","removedTree","treeSize","nextAddress","insertSubtree","MerkleHashSubtreeVerifier","getConstituentSignatures","_MerkleHashTreeVerifi","unifiedHashTree","_this7","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_2__","prototype","NoneVerifier","NoneVerifierFactory","r","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0__","node_webcrypto_ossl__WEBPACK_IMPORTED_MODULE_0___default","WebCrypto","ws__WEBPACK_IMPORTED_MODULE_0__","ws__WEBPACK_IMPORTED_MODULE_0___default","ws","wrtc__WEBPACK_IMPORTED_MODULE_0__","LocalSwarm","DhtGraph","MediaDeviceTest","Router","HashRouter","react","fallback","Switch","Route","exact","path","component","Redirect","to","ReactDOM","render","components_Router","getElementById","isRsaAlgorithm","includes","metadataLength","byteLength","writeUInt8","ArrayBuffer","isView","read","_ref$spin","_ref$flicker","_ref$pulse","_ref$disabled","_ref$visible","_ref$blur","_ref$error","_ref$onClick","_ref$idleTimeout","idleTimeout","currentVisibility","setCurrentVisibility","_useHover","useHover","_useHover2","hovering","hoverEventHandlers","mouseIdle","setMouseIdle","hidden","hoverClasses","logo_button_wrap","logo_button","clickable","exiting","xmlns","viewBox","cx","cy","points","EMA","alpha","classCallCheck","mean","weight","RingBuffer","capacity","setCapacity","lastIndex","createEmptyValue","firstEmptyIndex","advanceLastIndex","set","firstIndex","DelayBuffer","possibleConstructorReturn","getPrototypeOf","delay","toConsumableArray","TARGET","CURRENT_HISTORY","CURRENT_HISTORY_INTERVAL","BASE_HISTORY","BASE_HISTORY_INTERVAL","INIT_CWND","MSS","COEF_ALPHA","COEF_BETA","LEDBAT","mss","lastDataLoss","lastAckTime","ackSize","bytes","delaySample","update","checkCTO","queuingDelay","abs","offTarget","maxAllowedCwnd","rtt","isEmpty","retransmitting","timestamp","createChunkAddressFieldType","addressingMethod","Bin32ChunkAddress","createClass","_Address$binBounds","_Address$binBounds2","ChunkRange32ChunkAddress","createBufferFieldType","BufferField","createLiveSignatureFieldType","getLiveSignatureByteLength","_createBufferFieldTyp","LiveSignatureField","inherits","createIntegrityHashFieldType","_createBufferFieldTyp2","IntegrityHashField","createEncoding","ChunkAddress","IntegrityHash","LiveSignature","_protocolOptionRecord","_messageRecordTypes","Uint8ProtocolOption","Uint32ProtocolOption","VersionProtocolOption","_Uint8ProtocolOption","version","MinimumVersionProtocolOption","_Uint8ProtocolOption2","SwarmIdentifierProtocolOption","readUInt16BE","writeUInt16BE","ContentIntegrityProtectionMethodProtocolOption","_Uint8ProtocolOption3","method","MerkleHashTreeFunctionProtocolOption","_Uint8ProtocolOption4","LiveSignatureAlgorithmProtocolOption","_Uint8ProtocolOption5","ChunkAddressingMethodProtocolOption","_Uint8ProtocolOption6","_this8","LiveDiscardWindowProtocolOption","_Uint32ProtocolOption","_this9","SupportedMessagesProtocolOption","_this10","messageTypes","filter","byte","j","Boolean","keys","bitmapByteLength","bitmap","toBitmap","ChunkSizeProtocolOption","_Uint32ProtocolOption2","_this11","protocolOptionRecordTypes","defineProperty","HandshakeMessage","code","option","RecordType","reduce","Timestamp","seconds","readInt32BE","nanoseconds","writeInt32BE","DataMessage","dataLength","rangeByteLength","AddressMessage","AckMessage","HaveMessage","_AddressMessage","_this12","IntegrityMessage","SignedIntegrityMessage","RequestMessage","_AddressMessage2","_this13","CancelMessage","_AddressMessage3","_this14","EmptyMessage","ChokeMessage","_EmptyMessage","_this15","UnchokeMessage","_EmptyMessage2","_this16","messageRecordTypes","Messages","messageType","message","isArray","Datagram","messages","datagram","createMask","bits","mask","applyMask","BitArray","resize","distance","unsafelySetRange","byteIndex","bitIndex","byteOffset","adjustOffset","startByteIndex","getByteIndex","endByteIndex","startBitIndex","getBitIndex","endBitIndex","unsafelySetIndexRange","startMask","endMask","firstBit","lastBit","Flow","lastVirtualFinish","nextVirtualFinish","queue","wfq","Queue","rate","totalQueueSize","flows","flow","splice","computeWeight","virtualFinish","minVirtualFinish","getNextScheduledFlow","task","AvailabilityMap","_ref$end","BinRingBuffer","_RingBuffer","esm_get","RateMeter","windowMs","sampleWindowMs","firstSampleWindow","lastSampleWindow","sum","sampleWindow","adjustSampleWindow","accumulatedMs","ChunkRateMeter","_RateMeter","lastEndBin","lastHeadBin","RequestFlow","_wfq$Flow","queueSize","RequestQueue","_wfq$Queue","result","SchedulerChunkRequestMap","valueByBin","head","tail","fromBase","createdAt","SchedulerPeerState","requestFlow","lastChunkTime","requestTimes","sentRequests","timeouts","invalidChunks","Scheduler","peerCount","timers","lastExportedBin","priorityBinThreshold","sendDelay","nextSendTime","nextSendTimeout","isReady","firstLoadedChunk","firstRequestedChunk","lastAvailableBin","planFor","dip","peer_remoteId","peer_localId","swift_rtt","swift_rttvar","swift_chunkIntervalMean","swift_cwnd","ledbat_cwnd","ledbat_cto","ledbat_currentDelay","ledbat_baseDelay","ledbat_rttMean","ledbat_rttVar","ledbat_rtt","ledbat_flightSize","picker_startBin","picker_lastAvailableBin","minIncompleteBin","picker_firstLoadedChunk","picker_firstRequestedChunk","timeoutThreshold","cancelledRequests","peek","pop","_ref10","onDataLoss","digestDelaySamples","_peerState$peer","requestAddresses","random","insert","firstRequestedBin","_ref11","sendCancel","sendRequest","requestedAddress","requestedChunk","sentAt","addSent","sendChunk","sendInterval","addFlow","_ref12","removeFlow","_ref13","bins","getPeerState","chunkInterval","requestTime","addRttSample","_ref14","sendHave","nextExportedBin","_ref15","addDelaySample","sentChunk","genericEncoding","_uri$protocolOptions","protocolOptions","encoding","toBuffer","protocolOption","protocolOptionName","newBins","getNewCompleteBins","_newBins","minNewBin","maxNewBin","chunk","CONNECTING","AWAITING_HANDSHAKE","READY","CHOKED","DISCONNECTING","CLOSED","PeerDataHandlerContext","integrityVerifier","createVerifier","Peer","_this$handlers","createChannelId","handlers","handleHandshakeMessage","handleDataMessage","handleHaveMessage","handleAckMessage","handleIntegrityMessage","handleSignedIntegrityMessage","handleRequestMessage","handleCancelMessage","handleChokeMessage","handleUnchokeMessage","sendBuffer","addPeer","sendHandshake","removePeer","context","toArray","handler","handshake","objectSpread","setLiveDiscardWindow","verifyProtocolOptions","getRecentChunks","computeOneWayDelay","markChunkReceived","getContentIntegrityVerifier","verifyChunk","markChunkVerified","markChunkRejected","markChunkAvailable","markSendAcked","setHash","setHashSignature","enqueueRequest","cancelRequest","addresses","_len2","_key2","constituentSignatures","reverse","getSignatureHash","round","SwarmSet","setMaxListeners","swarmIdToKey","channels","Channel","_EventEmitter3","peers","handleSwarmInsert","getOrCreatePeer","assertThisInitialized","liveSwarms","handleClose","p","createPeer","destroyPeer","handleRemove","isInitialized","removedSwarm","NUMBER_OF_NODES_PER_BUCKET","KBucket","numberOfNodesPerKBucket","localNodeId","allChannels","handlePing","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleRemoved","handleUpdated","handleAdded","knownPeerIds","channelMap","seenIds","LRU","knownRoutes","maxAge","callbacks","handlePeersRequest","handlePingRequest","handleTraceRequest","handleCallbackResponse","startPeerRequests","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","stopPeerRequests","removeAllListeners","peerRequestIvl","ids","retry","sendPeerRequest","newChannel","isOpen","addChannel","getChannel","removeChannel","add","arrayBufferToHex","oldChannel","idHex","bufferMessages","handleOpen","req","_req","trace","res","re","forwardMessage","hops","sendRaw","reqCallback","count","handlePeersResponse","_ref5$data","_ref5$data$count","fromId","closest","randomBytes","knownRoute","vectorClock","lastPing","idx","_","SubChannel","peerId","ReadyStates","OPEN","_ref11$data","protocolOptionToKey","_protocolOptionToKey","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_4__","URLSafeBase64","encode","_home_slugalisk_projects_ppspp_player_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","join","uriString","startsWith","args","substring","split","_query$split","_query$split2","decodeURIComponent","arg","parseFloat","xt","decode","comparator","mid","order"],"mappings":"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","file":"static/js/main.88e24dce.chunk.js","sourcesContent":["import invert from 'lodash.invert';\n\nexport const MaxChannelId = 0xffffffff;\n\nexport const ProtocolOptions = {\n  Version: 0,\n  MinimumVersion: 1,\n  SwarmIdentifier: 2,\n  ContentIntegrityProtectionMethod: 3,\n  MerkleHashTreeFunction: 4,\n  LiveSignatureAlgorithm: 5,\n  ChunkAddressingMethod: 6,\n  LiveDiscardWindow: 7,\n  SupportedMessages: 8,\n  ChunkSize: 9,\n  EndOption: 255,\n};\n\nexport const Version = {\n  RFC7574: 1,\n};\n\nexport const ContentIntegrityProtectionMethod = {\n  None: 0,\n  MerkleHashTree: 1,\n  SignAll: 2,\n  UnifiedMerkleTree: 3,\n};\n\nexport const MerkleHashTreeFunction = {\n  SHA1: 0,\n  SHA224: 1,\n  SHA256: 2,\n  SHA384: 3,\n  SHA512: 4,\n};\n\nexport const LiveSignatureAlgorithm = {\n  RSASHA1: 5,\n  RSASHA256: 8,\n  ECDSAP256SHA256: 13,\n  ECDSAP384SHA384: 14,\n};\n\nexport const ChunkAddressingMethod = {\n  Bin32: 0,\n  ByteRange64: 1,\n  ChunkRange32: 2,\n  Bin64: 3,\n  ChunkRange64: 4,\n};\n\nexport const VariableChunkSize = 0xffffffff;\n\nexport const MessageTypes = {\n  HANDSHAKE: 0,\n  DATA: 1,\n  ACK: 2,\n  HAVE: 3,\n  INTEGRITY: 4,\n  PEX_RESv4: 5,\n  PEX_REQ: 6,\n  SIGNED_INTEGRITY: 7,\n  REQUEST: 8,\n  CANCEL: 9,\n  CHOKE: 10,\n  UNCHOKE: 11,\n  PEX_RESv6: 12,\n  PEX_REScert: 13,\n};\n\n[\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n].forEach(enumType => {\n  const names = invert(enumType);\n  enumType.name = value => names[value] || 'UNDEFINED';\n});\n","import React, {Component} from 'react';\nimport classNames from 'classnames';\nimport approx from 'approximate-number';\nimport {scaleLinear} from 'd3-scale';\n\nimport './index.css';\n\nclass ToggleButton extends Component {\n  static defaultProps = {\n    expanded: false,\n  };\n\n  render() {\n    const buttonClasses = classNames({\n      'diagnostic_menu__toggle_button': true,\n      'diagnostic_menu__toggle_button--expanded': this.props.expanded,\n    });\n\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={buttonClasses}\n      />\n    );\n  }\n}\n\nconst formatNumber = value => isFinite(value) ? approx(value) : String(value);\n\n// TODO: total downloaded\n// TODO: total discarded\n// TODO: upload/download rate\nclass SwarmState extends Component {\n  render() {\n    const {scheduler} = this.props.value;\n\n    const values = [\n      {\n        key: 'totalSends',\n        value: formatNumber(scheduler.totalSends),\n      },\n      {\n        key: 'totalRequests',\n        value: formatNumber(scheduler.totalRequests),\n      },\n      {\n        key: 'totalRequestsReceived',\n        value: formatNumber(scheduler.totalRequestsReceived),\n      },\n      {\n        key: 'totalDroppedRequests',\n        value: formatNumber(scheduler.totalDroppedRequests),\n      },\n      {\n        key: 'totalReceived',\n        value: formatNumber(scheduler.totalReceived),\n      },\n      {\n        key: 'totalAdded',\n        value: formatNumber(scheduler.totalAdded),\n      },\n      {\n        key: 'totalCancelled',\n        value: formatNumber(scheduler.totalCancelled),\n      },\n      {\n        key: 'ackUnknownSend',\n        value: formatNumber(scheduler.ackUnknownSend),\n      },\n      {\n        key: 'lastCompletedBin',\n        value: scheduler.lastCompletedBin,\n      },\n      {\n        key: 'picker.firstLoadedChunk',\n        value: scheduler.loadedChunks.min(),\n      },\n      {\n        key: 'picker.firstRequestedChunk',\n        value: scheduler.requestedChunks.min(),\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(scheduler.chunkRate.value() * 1000) + '/s',\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    return (\n      <div className=\"swarm_state__container\">\n        <table>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nclass PeerStateTable extends Component {\n  render() {\n    const peerState = this.props.value;\n\n    const values = [\n      {\n        key: 'chunkIntervalMean',\n        value: formatNumber(peerState.chunkIntervalMean.value()),\n      },\n      {\n        key: 'wasteRate',\n        value: formatNumber(peerState.wasteRate.value() * 1000) + '/s',\n      },\n      {\n        key: 'chunkRate',\n        value: formatNumber(peerState.chunkRate.value() * 1000) + '/s',\n      },\n      {\n        key: 'ledbat.baseDelay',\n        value: formatNumber(peerState.ledbat.baseDelay.getMin()),\n      },\n      {\n        key: 'ledbat.currentDelay',\n        value: formatNumber(peerState.ledbat.currentDelay.getMin()),\n      },\n      {\n        key: 'ledbat.rttMean',\n        value: formatNumber(peerState.ledbat.rttMean.value()),\n      },\n      {\n        key: 'ledbat.rttVar',\n        value: formatNumber(peerState.ledbat.rttVar.value()),\n      },\n      {\n        key: 'ledbat.cwnd',\n        value: formatNumber(peerState.ledbat.cwnd),\n      },\n      {\n        key: 'ledbat.cto',\n        value: formatNumber(peerState.ledbat.cto),\n      },\n      {\n        key: 'ledbat.flightSize',\n        value: formatNumber(peerState.ledbat.flightSize),\n      },\n      {\n        key: 'validChunks',\n        value: formatNumber(peerState.validChunks),\n      },\n      {\n        key: 'requestQueue.length',\n        value: formatNumber(peerState.requestQueue.length),\n      },\n      {\n        key: 'requestedChunks.length',\n        value: formatNumber(peerState.requestedChunks.length),\n      },\n    ];\n\n    const rows = values.map(({key, value}) => (\n      <tr key={key}>\n        <td className=\"diagnostic_table__key_cell\">{key}</td>\n        <td>{value}</td>\n      </tr>\n    ));\n\n    const {\n      startBin,\n      endBin,\n    } = this.props;\n\n    rows.push(\n      <tr key=\"availableChunks\">\n        <td colSpan=\"2\">\n          Available\n          <AvailabilityMapChart\n            value={this.props.value.availableChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"sentChunks\">\n        <td colSpan=\"2\">\n          Sent\n          <AvailabilityMapChart\n            value={this.props.value.sentChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    rows.push(\n      <tr key=\"receivedChunks\">\n        <td colSpan=\"2\">\n          Received\n          <AvailabilityMapChart\n            value={this.props.value.receivedChunks}\n            startBin={startBin}\n            endBin={endBin}\n          />\n        </td>\n      </tr>\n    );\n\n    return (\n      <table>\n        <tbody>\n          {rows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nclass AvailabilityMapChart extends Component {\n  static defaultProps = {\n    width: 300,\n    height: 20,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.canvas = React.createRef();\n    this.scratchCanvas = document.createElement('canvas');\n  }\n\n  componentDidUpdate() {\n    if (!this.canvas.current) {\n      return;\n    }\n\n    const {value} = this.props;\n    const min = isNaN(this.props.startBin)\n      ? value.min()\n      : this.props.startBin;\n    const max = isNaN(this.props.endBin)\n      ? value.max()\n      : this.props.endBin;\n\n    if (!isFinite(min) || !isFinite(max) || isNaN(min) || isNaN(max)) {\n      return;\n    }\n\n    this.scratchCanvas.height = this.props.height;\n    this.scratchCanvas.width = this.props.width;\n\n    const ctx = this.scratchCanvas.getContext('2d');\n\n    const scale = scaleLinear()\n      .domain([min, max])\n      .range([0, this.props.width]);\n\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, this.props.width, this.props.height);\n\n    ctx.fillStyle = '#ccc';\n\n    let lastStart = -1;\n    for (let i = min; i <= max; i += 2) {\n      if (!value.values.get((i + 2) / 2) || i === max) {\n        if (lastStart !== -1) {\n          ctx.fillRect(scale(lastStart), 0, scale(i) - scale(lastStart), 20);\n\n          lastStart = -1;\n        }\n      } else if (lastStart === -1) {\n        lastStart = i;\n      }\n    }\n\n    this.canvas.current.getContext('2d').drawImage(this.scratchCanvas, 0, 0);\n  }\n\n  render() {\n    return (\n      <canvas\n        height={this.props.height}\n        width={this.props.width}\n        ref={this.canvas}\n      />\n    );\n  }\n}\n\nclass PeerState extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n  }\n\n  render() {\n    let table;\n    if (this.state.expanded) {\n      table = (\n        <PeerStateTable\n          value={this.props.value}\n          startBin={this.props.startBin}\n          endBin={this.props.endBin}\n        />\n      );\n    }\n\n    return (\n      <div className=\"peer_state__container\">\n        <div className=\"peer_state__header\">\n          <ToggleButton\n            onClick={this.handleButtonClick}\n            expanded={this.state.expanded}\n          />\n          <h4 className=\"peer_state__title\">\n            {this.props.value.peer.localId} : {this.props.value.peer.remoteId}\n          </h4>\n        </div>\n        {table}\n      </div>\n    );\n  }\n}\n\nclass DiagnosticMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n    };\n  }\n\n  handleButtonClick = () => {\n    this.setState({expanded: !this.state.expanded});\n\n    this.scheduleUpdate();\n  }\n\n  handleUpdate = () => {\n    if (this.state.expanded) {\n      this.forceUpdate(this.scheduleUpdate);\n    }\n  }\n\n  scheduleUpdate = () => {\n    window.requestAnimationFrame(this.handleUpdate);\n  }\n\n  render() {\n    const containerClasses = classNames(\n      this.props.containerClass,\n      {\n        'diagnostic_menu__container': true,\n        'diagnostic_menu__container--expanded': this.state.expanded,\n      },\n    );\n\n    const {\n      lastCompletedBin,\n      liveDiscardWindow,\n    } = this.props.swarm.scheduler;\n    const startBin = lastCompletedBin - liveDiscardWindow;\n    const endBin = lastCompletedBin + liveDiscardWindow;\n\n    let swarmState;\n    let peerStates;\n    if (this.state.expanded) {\n      swarmState = (\n        <SwarmState\n          value={this.props.swarm}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      );\n\n      peerStates = Object.entries(this.props.swarm.scheduler.peerStates).map(([key, peerState]) => (\n        <PeerState\n          key={key}\n          value={peerState}\n          startBin={startBin}\n          endBin={endBin}\n        />\n      ));\n    }\n\n    return (\n      <div className={containerClasses}>\n        <ToggleButton\n          onClick={this.handleButtonClick}\n          expanded={this.state.expanded}\n        />\n        {swarmState}\n        {peerStates}\n      </div>\n    );\n  }\n}\n\nexport default DiagnosticMenu;\n","import {EventEmitter} from 'events';\nimport Injector from './ppspp/injector';\n\nconst DELIMITER = Buffer.from('4c93bf00ae13c37e5df3b7a9cea0413521fe1b08a627d065d7180b9d0738c666', 'hex');\nconst DELIMITER_LENGTH = DELIMITER.length;\nconst HEADER_INSTANCE_LENGTH = 37;\n\nexport class ChunkedWriteStream extends EventEmitter {\n  constructor(injector) {\n    super();\n    this.injector = injector;\n  }\n\n  write(buffer) {\n    const length = Buffer.alloc(4);\n    length.writeUInt32BE(buffer.length);\n    this.injector.appendData(Buffer.concat(\n      [\n        DELIMITER,\n        Buffer.from([0]),\n        length,\n        DELIMITER,\n        Buffer.from([1]),\n        length,\n      ],\n      HEADER_INSTANCE_LENGTH * 2,\n    ));\n\n    this.injector.appendData(buffer);\n  }\n\n  flush() {\n    this.injector.flush();\n  }\n}\n\nexport class ChunkedWriteStreamInjector extends EventEmitter {\n  start({\n    name = 'chunked-stream',\n    bitRate = 3500000,\n    ...injectorOptions\n  } = {}) {\n    this.name = name;\n\n    const data = Buffer.alloc(bitRate / 8);\n    data.fill(255);\n\n    Injector.create(injectorOptions).then(injector => {\n      this.injector = injector;\n\n      const writer = new ChunkedWriteStream(injector);\n      this.intervalId = setInterval(() => writer.write(data), 1000);\n      this.emit('publish', {\n        name,\n        contentType: 'application/octet-stream',\n        injector,\n      });\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', {name: this.name, injector: this.injector});\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n\nclass AbstractChunkedReadStream extends EventEmitter {\n  constructor(swarm) {\n    super();\n\n    this.swarm = swarm;\n\n    this.handleWarmupSwarmData = this.handleWarmupSwarmData.bind(this);\n    this.handleSwarmData = this.handleSwarmData.bind(this);\n\n    this.chunkBufferLength = 0;\n    this.nextDataOffset = 0;\n    this.nextDataLength = 0;\n\n    this.swarm.on('data', this.handleWarmupSwarmData);\n  }\n\n  handleWarmupSwarmData(data, offset = 0) {\n    let nextChunkOffset = offset;\n\n    for (let i = 0; i < data.length; i ++) {\n      const delimiterIndex = data[i].indexOf(DELIMITER, nextChunkOffset);\n      nextChunkOffset = 0;\n      if (delimiterIndex === -1 || delimiterIndex + HEADER_INSTANCE_LENGTH > data[i].length) {\n        continue;\n      }\n\n      this.swarm.removeListener('data', this.handleWarmupSwarmData);\n      this.swarm.on('data', this.handleSwarmData);\n\n      this.readHeader(data[i], delimiterIndex);\n      this.handleSwarmData(data.slice(i));\n\n      break;\n    }\n  }\n\n  readHeader(data, offset) {\n    const instance = data.readUInt8(offset + DELIMITER_LENGTH);\n    this.nextDataOffset = offset + HEADER_INSTANCE_LENGTH * (2 - instance);\n    this.nextDataLength = data.readUInt32BE(offset + DELIMITER_LENGTH + 1);\n  }\n\n  handleSwarmData(data) {\n    for (let i = 0; i < data.length; i ++) {\n      const lastChunkOffset = this.chunkBufferLength;\n\n      this.chunkBufferLength += data[i].length;\n\n      const nextDataEnd = this.nextDataOffset + this.nextDataLength;\n      if (this.chunkBufferLength < nextDataEnd) {\n        this.handleData(data[i], lastChunkOffset);\n        continue;\n      }\n\n      const lastChunkEnd = nextDataEnd - lastChunkOffset;\n      this.handleEndData(data[i], lastChunkEnd);\n\n      // find the next header or defer to handleWarmupSwarmData if it hasn't arrived\n      if (this.chunkBufferLength - nextDataEnd <= HEADER_INSTANCE_LENGTH) {\n        this.swarm.removeListener('data', this.handleSwarmData);\n        this.swarm.on('data', this.handleWarmupSwarmData);\n\n        this.chunkBufferLength = 0;\n        this.handleWarmupSwarmData(data.slice(i), lastChunkEnd);\n        return;\n      }\n\n      this.chunkBufferLength = 0;\n      this.readHeader(data[i], lastChunkEnd);\n      i--;\n    }\n  }\n}\n\nexport class ChunkedFragmentedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.firstEmitted = false;\n  }\n\n  handleData(data, lastChunkOffset) {\n    if (!this.firstEmitted) {\n      if (this.chunkBufferLength > this.nextDataOffset) {\n        this.emit('start', data.slice(this.nextDataOffset - lastChunkOffset));\n        this.firstEmitted = true;\n      }\n\n      return;\n    }\n\n    this.emit('data', data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.emit('end', data.slice(0, lastChunkEnd));\n    this.firstEmitted = false;\n  }\n}\n\nexport class ChunkedReadStream extends AbstractChunkedReadStream {\n  constructor(swarm) {\n    super(swarm);\n\n    this.chunkBuffer = [];\n  }\n\n  handleData(data) {\n    this.chunkBuffer.push(data);\n  }\n\n  handleEndData(data, lastChunkEnd) {\n    this.chunkBuffer.push(data);\n\n    // trim export data range and emit\n    const chunkSlice = this.chunkBuffer.slice();\n\n    chunkSlice[chunkSlice.length - 1] = chunkSlice[chunkSlice.length - 1].slice(0, lastChunkEnd);\n\n    let firstChunkStart = this.nextDataOffset;\n    if (firstChunkStart >= chunkSlice[0].length) {\n      firstChunkStart -= chunkSlice[0].length;\n      chunkSlice.shift();\n    }\n    chunkSlice[0] = chunkSlice[0].slice(firstChunkStart);\n\n    this.emit(\n      'data',\n      {\n        chunks: chunkSlice,\n        length: this.nextDataLength,\n      },\n    );\n\n    this.chunkBuffer = [];\n  }\n}\n","import * as ppspp from './ppspp';\nimport * as dht from './dht';\nimport hexToUint8Array from './hexToUint8Array';\n\nexport class Client {\n  constructor(connManager, conn, bootstrap) {\n    const dhtClientId = hexToUint8Array(bootstrap.id);\n    const bootstrapId = hexToUint8Array(bootstrap.bootstrapId);\n\n    this.connManager = connManager;\n    this.bootstrap = bootstrap;\n    this.swarmUri = bootstrap.swarmUri;\n\n    const client = connManager.createClient(conn);\n\n    this.dhtClient = new dht.Client(dhtClientId);\n    this.dhtClient.on('peers.discover', this.handlePeersDiscover.bind(this));\n    this.dhtClient.on('receive.connect.request', this.handleReceiveConnectRequest.bind(this));\n    this.dhtClient.createChannel(bootstrapId, client.createDataChannel('dht'));\n\n    this.ppsppClient = new ppspp.Client();\n    this.ppsppClient.createChannel(client.createDataChannel('ppspp'));\n\n    client.init();\n  }\n\n  static create(connManager) {\n    return connManager.bootstrap().then(({data, conn}) => {\n      return new Client(connManager, conn, data);\n    });\n  }\n\n  handlePeersDiscover(id) {\n    // console.log('creating client for', ids);\n    const sub = new dht.SubChannel(this.dhtClient, id);\n    const client = this.connManager.createClient(sub);\n\n    const dhtChannel = client.createDataChannel('dht');\n    const ppsppChannel = client.createDataChannel('ppspp');\n\n    const timeout = setTimeout(() => client.close(), 10000);\n    const init = () => {\n      clearTimeout(timeout);\n      client.init();\n    };\n\n    dhtChannel.addEventListener('close', () => client.close());\n\n    this.dhtClient.createChannel(id, dhtChannel);\n    this.ppsppClient.createChannel(ppsppChannel);\n\n    this.dhtClient.send(id, 'connect.request', {channelId: sub.id}, init);\n  }\n\n  handleReceiveConnectRequest({data: {channelId, from}, callback}) {\n    // if (this.dhtClient.channels.count() > 10) {\n    //   return;\n    // }\n\n    // console.log('handleReceiveConnectRequest', {channelId, from, callback});\n    const id = new hexToUint8Array(from);\n    const client = this.connManager.createClient(new dht.SubChannel(this.dhtClient, id, channelId));\n\n    client.on('datachannel', ({channel}) => {\n      if (channel.label === 'dht') {\n        this.dhtClient.createChannel(id, channel);\n      } else if (channel.label === 'ppspp') {\n        this.ppsppClient.createChannel(channel);\n      }\n    });\n\n    callback({});\n  }\n}\n","import {EventEmitter} from 'events';\nimport crypto from 'crypto';\nimport {generateKeyPair} from './integrity';\nimport URI from './uri';\nimport {\n  ChunkAddressingMethod,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ProtocolOptions,\n} from './constants';\nimport {Swarm} from '../ppspp';\n\nexport default class Injector {\n  constructor(swarm, chunkSize, chunksPerSignature) {\n    this.swarm = swarm;\n    this.chunkSize = chunkSize;\n    this.chunksPerSignature = chunksPerSignature;\n    this.inputBuffer = [];\n    this.inputBufferSize = 0;\n    this.outputResult = Promise.resolve();\n  }\n\n  appendData(data) {\n    this.inputBuffer.push(data);\n    this.inputBufferSize += data.length;\n\n    const signatureSize = this.chunkSize * this.chunksPerSignature;\n    if (this.inputBufferSize < signatureSize) {\n      return;\n    }\n\n    let buf = Buffer.concat(this.inputBuffer, this.inputBufferSize);\n    while (buf.length > signatureSize) {\n      this.outputChunks(buf.slice(0, signatureSize));\n      buf = buf.slice(signatureSize);\n    }\n\n    this.inputBuffer = [buf];\n    this.inputBufferSize = buf.length;\n  }\n\n  flush() {\n    if (this.inputBufferSize === 0) {\n      return;\n    }\n\n    const signatureSize = this.chunkSize * this.chunksPerSignature;\n    let buf = Buffer.concat(this.inputBuffer, this.inputBufferSize);\n    while (buf.length > 0) {\n      this.outputChunks(buf.slice(0, Math.min(buf.length, signatureSize)));\n      buf = buf.slice(signatureSize);\n    }\n\n    this.inputBuffer = [];\n    this.inputBufferSize = 0;\n  }\n\n  outputChunks(buf) {\n    var chunks = [];\n    for (let i = 0; i < this.chunksPerSignature; i ++) {\n      const offset = i * this.chunkSize;\n      chunks.push(buf.slice(offset, offset + this.chunkSize));\n    }\n\n    this.outputResult = Promise.all([\n      this.swarm.contentIntegrity.appendSubtree(chunks),\n      this.outputResult,\n    ]).then(([subtree]) => {\n      this.swarm.chunkBuffer.setRange(subtree.rootAddress, chunks);\n      this.swarm.scheduler.markChunksLoaded(subtree.rootAddress);\n      this.swarm.emitNewData();\n    });\n  }\n\n  static create(options = {}) {\n    const {\n      chunkSize = 8 * 1024,\n      chunksPerSignature = 64,\n      liveDiscardWindow = Math.ceil(15 * 3500 * 1024 / chunkSize),\n      chunkAddressingMethod = ChunkAddressingMethod.Bin32,\n      contentIntegrityProtectionMethod = ContentIntegrityProtectionMethod.UnifiedMerkleTree,\n      merkleHashTreeFunction = MerkleHashTreeFunction.SHA256,\n      liveSignatureAlgorithm = LiveSignatureAlgorithm.ECDSAP256SHA256,\n    } = options;\n\n    return generateKeyPair(liveSignatureAlgorithm).then(({swarmId, privateKey}) => {\n      const uri = new URI(\n        swarmId,\n        {\n          [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n          [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n          [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n          [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n          [ProtocolOptions.ChunkSize]: chunkSize,\n        }\n      );\n\n      console.log('swarm uri:', uri.toString());\n\n      const clientOptions = {\n        liveDiscardWindow,\n        privateKey,\n        uploadRateLimit: 10e6,\n      };\n\n      return new Swarm(uri, clientOptions);\n    }).then(swarm => new Injector(swarm, chunkSize, chunksPerSignature));\n  }\n}\n\nexport class NoiseInjector extends EventEmitter {\n  constructor(dataRate = 3.5e6 / 8, interval = 250) {\n    super();\n    this.dataRate = dataRate * (interval / 1000);\n    this.interval = interval;\n  }\n\n  start() {\n    const data = Buffer.alloc(this.dataRate);\n    crypto.randomFillSync(data);\n\n    Injector.create().then(injector => {\n      this.intervalId = setInterval(() => injector.appendChunk(data), this.interval);\n      this.injector = injector;\n      this.emit('publish', injector);\n    });\n  }\n\n  stop(done) {\n    clearInterval(this.intervalId);\n    this.emit('unpublish', this.injector);\n    if (done) {\n      setTimeout(done);\n    }\n  }\n}\n","import React, {useState} from 'react';\nimport URI from '../ppspp/uri';\nimport {Client} from '../client';\nimport {ConnManager} from '../wrtc';\nimport LogoButton from './LogoButton';\nimport {useTimeout, useAsync} from 'react-use';\nimport useQuery from '../hooks/useQuery';\nimport VideoPlayer from './VideoPlayer';\nimport useReady from '../hooks/useReady';\n\nimport './App.scss';\n\nconst NoiseLogger = React.lazy(() => import('./NoiseLogger'));\nconst PubSubLogger = React.lazy(() => import('./PubSubLogger'));\n\nexport const getDefaultBootstrapAddress = () => {\n  const proto = window.location.protocol === 'https:' ? 'wss' : 'ws';\n  const host = process.env.NODE_ENV === 'development'\n    ? window.location.hostname + ':8080'\n    : window.location.host;\n  return `${proto}://${host}`;\n};\n\nexport const useSwarm = ({ppsppClient} = {}) => {\n  const [swarm, setSwarm] = useState(null);\n  const join = uri => setSwarm(ppsppClient.joinSwarm(URI.parse(uri)));\n  return [swarm, join];\n};\n\nconst App = ({\n  location,\n  match: {params},\n  clientTimeoutMs = 5000,\n}) => {\n  const query = useQuery(location.search);\n  const autoPlay = 'autoplay' in query;\n  const bootstrapAddress = query.bootstrap || getDefaultBootstrapAddress();\n  const swarmName = params.name;\n\n  const clientTimeout = useTimeout(clientTimeoutMs);\n  const {\n    loading: clientLoading,\n    error: clientError,\n    value: client,\n  } = useAsync(() =>  Client.create(new ConnManager(bootstrapAddress)), []);\n\n  const [swarm, joinSwarm] = useSwarm(client);\n  const [swarmUriState, setSwarmUri] = useState('');\n\n  const swarmDesc = client?.bootstrap.swarms.find(desc => desc.name === swarmName);\n  const error = clientError || (autoPlay && clientTimeout) || !(clientLoading || swarmDesc);\n\n  useReady(() => {\n    if (autoPlay) {\n      setImmediate(() => joinSwarm(swarmDesc.uri));\n    }\n  }, [autoPlay, swarmDesc?.uri]);\n\n  if (swarm) {\n    const Component = {\n      'application/octet-stream': NoiseLogger,\n      'application/json': PubSubLogger,\n      'video/mpeg-ts': VideoPlayer,\n    }[swarmDesc.contentType];\n\n    return (\n      <Component swarm={swarm} />\n    );\n  }\n\n  const logoButton = (\n    <LogoButton\n      disabled={clientLoading || autoPlay || error}\n      onClick={() => joinSwarm(swarmDesc?.uri)}\n      pulse={!clientLoading && !autoPlay}\n      flicker={clientLoading || autoPlay}\n      error={error}\n      blur\n    />\n  );\n\n  const handleUriChange = e => setSwarmUri(e.target.value);\n\n  const swarmUri = swarmUriState || swarmDesc?.uri || '';\n\n  const uriForm = (\n    <form className=\"join-form\" onSubmit={() => joinSwarm(swarmUri)}>\n      <input\n        onChange={handleUriChange}\n        placeholder=\"Enter Swarm URI\"\n        value={swarmUri}\n      />\n      <button>Join</button>\n    </form>\n  );\n\n  return (\n    <>\n      <div className=\"idle\">\n        <div className=\"noise\" />\n        {autoPlay ? logoButton : uriForm}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import {EventEmitter} from 'events';\nimport WebSocket from './compat/ws';\nimport {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from './compat/wrtc';\n\nexport class ConnManager {\n  constructor(bootstrapAddress) {\n    this.bootstrapAddress = bootstrapAddress;\n  }\n\n  bootstrap() {\n    return new Promise((resolve, reject) => {\n      const conn = new WebSocket(this.bootstrapAddress);\n      conn.onerror = reject;\n      conn.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'bootstrap') {\n          resolve({data, conn});\n        } else {\n          reject(new Error(`expected bootstrap, received: ${event.data}`));\n        }\n      };\n    });\n  }\n\n  createClient(conn) {\n    const mediator = new Mediator(conn);\n    const client = new Client(mediator);\n\n    // firefox seems to continue generating ice messages after the datachannel\n    // has opened...\n    mediator.once('error', () => conn.close());\n    client.once('open', () => conn.close());\n\n    return client;\n  }\n}\n\nexport class Mediator extends EventEmitter {\n  constructor(conn) {\n    super();\n\n    this.conn = conn;\n    this.conn.onmessage = this.handleMessage.bind(this);\n  }\n\n  handleMessage(event) {\n    const data = JSON.parse(event.data);\n    // console.log('mediator message', data);\n\n    switch (data.type) {\n      case 'offer':\n      case 'answer':\n        this.emit('remotedescription', new RTCSessionDescription(data));\n        break;\n      case 'icecandidate':\n        if (data.sdp && data.sdp.candidate) {\n          this.emit('icecandidate', new RTCIceCandidate(data.sdp));\n        }\n        break;\n      default:\n        this.emit('error', new Error('unsupported mediator event type'));\n    }\n  }\n\n  sendOffer(event) {\n    this.send(event);\n  }\n\n  sendAnswer(event) {\n    this.send(event);\n  }\n\n  sendIceCandidate(event) {\n    if (event.candidate) {\n      this.send({\n        type: 'icecandidate',\n        sdp: event.candidate,\n      });\n    }\n  }\n\n  send(event) {\n    if (this.conn.readyState !== 1) {\n      console.log('mediator tried to send after closing its connection');\n      // console.log('send error', this.conn);\n      // console.trace();\n      // this.emit('error', new Error('connection in invalid state'));\n      return;\n    }\n\n    this.conn.send(JSON.stringify(event));\n  }\n}\n\nexport class Client extends EventEmitter {\n  constructor(mediator) {\n    super();\n\n    this.mediator = mediator;\n    this.initialized = false;\n    this.waitingChannels = 0;\n\n    this.peerConn = new RTCPeerConnection({\n      iceServers: [{urls: 'stun:stun.l.google.com:19302'}],\n    });\n\n    this.peerConn.addEventListener('icecandidate', candidate => this.mediator.sendIceCandidate(candidate));\n    this.peerConn.addEventListener('datachannel', this.handleDataChannel.bind(this));\n    this.peerConn.addEventListener('iceconnectionstatechange', this.handleIceConnectionStateChange.bind(this));\n\n    mediator.once('error', () => this.peerConn.close());\n    mediator.on('icecandidate', candidate => this.addIceCandidate(candidate));\n\n    this._ready = new Promise((resolve, reject) => {\n      mediator.on('remotedescription', description => {\n        this.peerConn.setRemoteDescription(description)\n          .then(() => {\n            resolve();\n            this.createAnswer();\n          })\n          .catch(reject);\n      });\n    });\n  }\n\n  createAnswer() {\n    if (this.initialized) {\n      return;\n    }\n    this.initialized = true;\n\n    this.peerConn.createAnswer()\n      .then((description) => {\n        this.peerConn.setLocalDescription(description);\n        this.mediator.sendAnswer(description);\n      })\n      .catch(error => console.error(error));\n  }\n\n  addIceCandidate(candidate) {\n    this._ready.then(() => this.peerConn.addIceCandidate(candidate));\n  }\n\n  handleDataChannel(event) {\n    // event.channel.addEventListener('close', e => console.log('< begin close event handlers'));\n    event.channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    event.channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('< received data channel', event);\n    // event.channel.addEventListener('error', e => console.log('< data channel emitted error', e));\n    // event.channel.addEventListener('open', e => console.log('< data channel opened', e));\n    // event.channel.addEventListener('bufferedamountlow', e => console.log('< data channel bufferamountlow', e));\n    // event.channel.addEventListener('close', e => console.log('< data channel closed', e));\n\n    this.emit('datachannel', event);\n  }\n\n  createDataChannel(label, options = {}) {\n    options = {\n      ordered: true,\n      maxRetransmits: 10,\n      ...options,\n    };\n\n    const channel = this.peerConn.createDataChannel(label, options);\n    // channel.addEventListener('close', e => console.log('> begin close event handlers'));\n    channel.binaryType = 'arraybuffer';\n\n    this.waitingChannels ++;\n    channel.addEventListener('open', this.resolveWaitingChannel.bind(this), {once: true});\n\n    // console.log('> received data channel', {channel});\n    // channel.addEventListener('error', e => console.log('> data channel emitted error', e));\n    // channel.addEventListener('open', e => console.log('> data channel opened', e));\n    // channel.addEventListener('bufferedamountlow', e => console.log('> data channel bufferedamountlow', e));\n    // channel.addEventListener('close', e => console.log('> data channel closed', e));\n\n    return channel;\n  }\n\n  resolveWaitingChannel() {\n    if (-- this.waitingChannels === 0) {\n      this.emit('open');\n    }\n  }\n\n  handleIceConnectionStateChange() {\n    // this seems to be the most reliable way to get connection state in chrome\n    if (this.peerConn.iceConnectionState === 'failed') {\n      this.peerConn.close();\n    }\n  }\n\n  init() {\n    this.peerConn.createOffer()\n      .then(offer => {\n        this.initialized = true;\n        // console.log('initial offer', offer);\n        this.peerConn.setLocalDescription(offer);\n        this.mediator.sendOffer(offer);\n      });\n  }\n\n  close() {\n    // console.log('wrtc client closed');\n    // console.trace();\n    this.peerConn.close();\n    this.emit('close');\n  }\n}\n","import {ChunkAddressingMethod} from './constants';\n\nexport default class Address {\n  constructor(bin = 0, treeBounds = Address.binBounds(bin)) {\n    this.bin = bin;\n    [this.start, this.end] = treeBounds;\n  }\n\n  containsBin(bin) {\n    return this.start <= bin && bin <= this.end;\n  }\n\n  getChunkCount() {\n    return (this.end - this.start) / 2 + 1;\n  }\n\n  static from(address) {\n    if (address instanceof Address) {\n      return address;\n    }\n\n    switch (address.type) {\n      case ChunkAddressingMethod.Bin32:\n        return new Address(address.value);\n      case ChunkAddressingMethod.ChunkRange32: {\n        const {start, end} = address;\n        return new Address((end - start) / 2, [start, end]);\n      }\n      default:\n        throw new Error('unsupported address type');\n    }\n  }\n\n  static fromBase(bin) {\n    return new Address(bin, [bin, bin]);\n  }\n\n  static binBounds(bin) {\n    return [\n      bin & (bin + 1),\n      (bin | (bin + 1)) - 1,\n    ];\n  }\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","\n\nimport {useMemo} from 'react';\nimport qs from 'qs';\n\nconst useQuery = queryString => useMemo(() => {\n  return qs.parse(queryString, {ignoreQueryPrefix: true}) || {};\n}, [queryString]);\n\nexport default useQuery;\n","import {useState, useEffect} from 'react';\nimport {useGetSet} from 'react-use';\n\nconst useMediaSource = ({mimeType}) => {\n  const [getSourceBuffer, setSourceBuffer] = useGetSet(null);\n  const [operations] = useState([]);\n\n  const transform = newOperation => {\n    const sourceBuffer = getSourceBuffer();\n    const readOnly = sourceBuffer === null || sourceBuffer.updating;\n\n    if (newOperation !== undefined && (operations.length !== 0 || readOnly)) {\n      operations.push(newOperation);\n      setImmediate(transform);\n      return;\n    }\n\n    if (readOnly) {\n      return;\n    }\n\n    const operation = newOperation || operations.shift();\n    if (operation === undefined) {\n      return;\n    }\n\n    try {\n      operation(sourceBuffer);\n    } catch (e) {\n      operations.unshift(operation);\n      setImmediate(transform);\n    }\n  };\n\n  const [mediaSource] = useState(() => {\n    const mediaSource = new MediaSource();\n\n    const handleSourceOpen = () => setSourceBuffer(mediaSource.addSourceBuffer(mimeType));\n    mediaSource.addEventListener('sourceopen', handleSourceOpen, {once: true});\n\n    return mediaSource;\n  }, []);\n\n  useEffect(() => {\n    const sourceBuffer = getSourceBuffer();\n    if (sourceBuffer === null) {\n      return;\n    }\n\n    const handleError = e => console.log(e);\n    const handleUpdateEnd = () => transform();\n\n    sourceBuffer.addEventListener('error', handleError);\n    sourceBuffer.addEventListener('updateend', handleUpdateEnd);\n\n    return () => {\n      sourceBuffer.removeEventListener('error', handleError);\n      sourceBuffer.removeEventListener('updateend', handleUpdateEnd);\n      mediaSource.removeSourceBuffer(sourceBuffer, handleUpdateEnd);\n    };\n  }, [getSourceBuffer()]);\n\n  const appendBuffer = buf => transform(sourceBuffer => sourceBuffer.appendBuffer(buf));\n\n  const prune = duration => transform(sourceBuffer => {\n    const buffered = sourceBuffer?.buffered;\n    if (buffered?.length && buffered.end(0) > duration) {\n      const offset = buffered.end(0) - duration;\n      sourceBuffer.remove(0, offset);\n    }\n  });\n\n  return [mediaSource, {appendBuffer, prune, transform}];\n};\n\nexport default useMediaSource;\n","import muxjs from 'mux.js';\nimport {ChunkedFragmentedReadStream} from '../chunkedStream';\nimport {Buffer} from 'buffer';\nimport useReady from './useReady';\nimport useMediaSource from './useMediaSource';\n\nconst useSwarmMediaSource = (swarm, {\n  mimeType = 'video/mp4; codecs=\"mp4a.40.5,avc1.64001F\"',\n} = {}) => {\n  const [mediaSource, {appendBuffer, prune}] = useMediaSource({\n    mimeType,\n  });\n\n  useReady(() => {\n    const transmuxer = new muxjs.mp4.Transmuxer();\n\n    let initSet = false;\n    transmuxer.on('data', event => {\n      if (event.type === 'combined') {\n        const buf = initSet\n          ? event.data\n          : Buffer.concat([Buffer.from(event.initSegment), Buffer.from(event.data)]);\n        initSet = true;\n\n        appendBuffer(buf);\n      } else {\n        console.warn('unhandled event', event.type);\n      }\n    });\n\n    const stream = new ChunkedFragmentedReadStream(swarm);\n    stream.on('start', data => transmuxer.push(data));\n    stream.on('data', data => transmuxer.push(data));\n    stream.on('end', data => {\n      transmuxer.push(data);\n      transmuxer.flush();\n    });\n  }, [swarm]);\n\n  return [mediaSource, prune];\n};\n\nexport default useSwarmMediaSource;\n","import {useRef, useState} from 'react';\nimport useReady from './useReady';\n\nexport const VideoReadyState = {\n  // No information is available about the media resource.\n  HAVE_NOTHING: 0,\n  // Enough of the media resource has been retrieved that the metadata attributes\n  // are initialized. Seeking will no longer raise an exception.\n  HAVE_METADATA: 1,\n  // Data is available for the current playback position, but not enough to\n  // actually play more than one frame.\n  HAVE_CURRENT_DATA: 2,\n  // Data for the current playback position as well as for at least a little\n  // bit of time into the future is available (in other words, at least two frames of video, for example).\n  HAVE_FUTURE_DATA: 3,\n  // Enough data is available—and the download rate is high enough—that the\n  // media can be played through to the end without interruption.\n  HAVE_ENOUGH_DATA: 4,\n};\n\nconst useVideo = () => {\n  const ref = useRef();\n  const [loaded, setLoaded] = useState(false);\n  const [playing, setPlaying] = useState(false);\n  const [paused, setPaused] = useState(false);\n  const [ended, setEnded] = useState(true);\n  const [waiting, setWaiting] = useState(true);\n  const [muted, setMuted] = useState(null);\n  const [volume, unsafelySetVolume] = useState(null);\n  const [savedVolume, setSavedVolume] = useState(null);\n  const [readyState, setReadyState] = useState(0);\n  const [bufferStart, setBufferStart] = useState(0);\n  const [bufferEnd, setBufferEnd] = useState(1);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, unsafelySetCurrentTime] = useState(0);\n  const [seekableStart, setSeekableStart] = useState(0);\n  const [seekableEnd, setSeekableEnd] = useState(0);\n\n  useReady(() => {\n    setMuted(ref.current.muted);\n    setVolume(ref.current.volume);\n    setPaused(ref.current.paused);\n    setReadyState(ref.current.readyState);\n  }, [ref.current]);\n\n  const onEnded = () => {\n    setPlaying(false);\n    setEnded(false);\n    setWaiting(false);\n  };\n\n  const onPause = () => {\n    setPlaying(false);\n    setPaused(true);\n  };\n\n  const onPlaying = () => {\n    setPaused(false);\n    setPlaying(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onCanPlay = () => {\n    setWaiting(false);\n    setLoaded(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onCanPlayThrough = () => {\n    setWaiting(false);\n    setLoaded(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onVolumeChange = () => {\n    setVolume(ref.current.volume);\n  };\n\n  const onWaiting = () => {\n    setPlaying(false);\n    setWaiting(true);\n    setReadyState(ref.current.readyState);\n  };\n\n  const onDurationChange = () => {\n    setReadyState(ref.current.readyState);\n  };\n\n  const onLoadedMetadata = (e) => {\n    setReadyState(ref.current.readyState);\n  };\n\n  const onLoadedData = () => {\n    setReadyState(ref.current.readyState);\n  };\n\n  const onTimeUpdate = () => {\n    const video = ref.current;\n    const {buffered, seekable} = video;\n\n    if (buffered.length === 0 || seekable.length === 0) {\n      return;\n    }\n\n    const bufferEnd = buffered.end(buffered.length - 1);\n\n    setBufferStart(buffered.start(0));\n    setBufferEnd(bufferEnd);\n    setDuration(video.duration);\n    unsafelySetCurrentTime(video.currentTime);\n    setSeekableStart(seekable.start(0));\n    setSeekableEnd(seekable.end(0));\n  };\n\n  const play = async () => {\n    try {\n      await ref.current.play();\n    } catch (e) {\n      ref.current.muted = true;\n      try {\n        await ref.current.play();\n      } catch (e) {\n        console.warn('error playing video', e);\n      }\n    }\n  };\n\n  const mute = () => {\n    setSavedVolume(ref.current.volume);\n    ref.current.volume = 0;\n  };\n\n  const unmute = () => {\n    ref.current.volume = savedVolume || 0.5;\n  };\n\n  const setVolume = volume => {\n    if (ref.current) {\n      const clampedVolume = Math.max(0, Math.min(1, volume));\n      unsafelySetVolume(clampedVolume);\n      ref.current.volume = clampedVolume;\n    }\n  };\n\n  const setCurrentTime = time => {\n    if (!ref.current) {\n      return;\n    }\n\n    ref.current.currentTime = time;\n    unsafelySetCurrentTime(time);\n  };\n\n  const supportPiP = document.pictureInPictureEnabled && (ref.current && !ref.current.disablePictureInPicture);\n  const pip = ref.current ===document.pictureInPictureElement;\n\n  const togglePiP = async () => {\n    try {\n      if (pip) {\n        await document.exitPictureInPicture();\n      } else {\n        await ref.current.requestPictureInPicture();\n      }\n    } catch (e) {\n      console.warn('error opening pip', e);\n    }\n  };\n\n  const src = ref.current?.src;\n  const setSrc = src => (ref.current && src) && (ref.current.src = src);\n\n  return [\n    {\n      readyState,\n      loaded,\n      playing,\n      paused,\n      ended,\n      waiting,\n      muted,\n      volume,\n      bufferStart,\n      bufferEnd,\n      duration,\n      currentTime,\n      seekableStart,\n      seekableEnd,\n      supportPiP,\n      pip,\n      src,\n    },\n    {\n      ref,\n      onEnded,\n      onPause,\n      onPlaying,\n      onCanPlay,\n      onCanPlayThrough,\n      onVolumeChange,\n      onWaiting,\n      onDurationChange,\n      onLoadedMetadata,\n      onLoadedData,\n      onTimeUpdate,\n    },\n    {\n      mute,\n      unmute,\n      pause: () => ref.current && ref.current.pause(),\n      play,\n      setCurrentTime,\n      setVolume,\n      togglePiP,\n      setSrc,\n    },\n  ];\n};\n\nexport default useVideo;\n","import {useState} from 'react';\nimport {useDebounce} from 'react-use';\n\nconst useIdleTimout = (timeout = 3000, initialState = true) => {\n  const [idle, setIdle] = useState(initialState);\n  const [lastActive, setLastActive] = useState(0);\n\n  useDebounce(() => setIdle(true), timeout, [lastActive]);\n\n  const renewTimeout = () => {\n    setIdle(false);\n    setLastActive(Date.now());\n  };\n\n  const clearTimeout = () => setIdle(true);\n\n  return [idle, renewTimeout, clearTimeout];\n};\n\nexport default useIdleTimout;\n","import {useEffect, useState} from 'react';\n\nconst useUpdates = (effect, deps) => {\n  const [init] = useState({});\n\n  useEffect(() => {\n    if (init.done) {\n      effect();\n    }\n  }, deps);\n\n  useEffect(() => {\n    init.done = true;\n  }, []);\n};\n\nexport default useUpdates;\n","import React, {useState} from 'react';\nimport {Slider, Rail, Handles, Tracks} from 'react-compound-slider';\nimport classNames from 'classnames';\nimport useIdleTimeout from '../hooks/useIdleTimeout';\nimport useUpdates from '../hooks/useUpdates';\n\nexport const Handle = ({\n  domain: [min, max],\n  handle: {id, value, percent},\n  getHandleProps,\n}) => (\n  <div\n    role=\"slider\"\n    aria-valuemin={min}\n    aria-valuemax={max}\n    aria-valuenow={value}\n    style={{left: `${percent}%`}}\n    className=\"video_volume__handle\"\n    {...getHandleProps(id)}\n  />\n);\n\nexport const Track = ({source, target, getTrackProps}) => (\n  <div\n    className=\"video_volume__track\"\n    style={{\n      left: `${source.percent}%`,\n      width: `${target.percent - source.percent}%`,\n    }}\n    {...getTrackProps()}\n  />\n);\n\nconst VideoVolume = ({\n  value,\n  onUpdate,\n  onSlideStart,\n  onSlideEnd,\n}) => {\n  const [dragging, setDragging] = useState(false);\n  const [idle, renewIdleTimeout] = useIdleTimeout();\n\n  useUpdates(renewIdleTimeout, [value]);\n\n  const sliderClassNames = classNames({\n    video_volume__slider: true,\n    dragging,\n    active: !idle,\n  });\n\n  const handleUpdate = values => {\n    if (dragging) {\n      onUpdate(values[0]);\n    }\n  };\n\n  const handleSlideStart = values => {\n    onSlideStart(values);\n    setDragging(true);\n  };\n\n  const handleSlideEnd = values => {\n    onSlideEnd(values);\n    setDragging(false);\n  };\n\n  return (\n    <Slider\n      mode={1}\n      step={0.01}\n      className={sliderClassNames}\n      domain={[0, 1]}\n      onUpdate={handleUpdate}\n      onSlideStart={handleSlideStart}\n      onSlideEnd={handleSlideEnd}\n      values={[value]}\n    >\n      <Rail>\n        {({getRailProps}) => <div className=\"video_volume__rail\" {...getRailProps()} />}\n      </Rail>\n      <Handles>\n        {({handles, getHandleProps}) => (\n          <div>\n            {handles.map(handle => (\n              <Handle\n                key={handle.id}\n                handle={handle}\n                domain={[0, 1]}\n                getHandleProps={getHandleProps}\n              />\n            ))}\n          </div>\n        )}\n      </Handles>\n      <Tracks right={false}>\n        {({tracks, getTrackProps}) => (\n          <div>\n            {tracks.map(({id, source, target}) => (\n              <Track\n                key={id}\n                source={source}\n                target={target}\n                getTrackProps={getTrackProps}\n              />\n            ))}\n          </div>\n        )}\n      </Tracks>\n    </Slider>\n  );\n};\n\nexport default VideoVolume;\n","import React, {useEffect, useState} from 'react';\nimport {Slider, Rail, Handles, Tracks} from 'react-compound-slider';\nimport classNames from 'classnames';\n\nexport const Handle = ({\n  domain: [min, max],\n  handle: {id, value, percent},\n  getHandleProps,\n}) => (\n  <div\n    role=\"slider\"\n    aria-valuemin={min}\n    aria-valuemax={max}\n    aria-valuenow={value}\n    style={{left: `${percent}%`}}\n    className=\"video_progress_bar__handle\"\n    {...getHandleProps(id)}\n  />\n);\n\nexport const Track = ({source, target, getTrackProps}) => (\n  <div\n    className=\"video_progress_bar__track\"\n    style={{\n      left: `${source.percent}%`,\n      width: `${target.percent - source.percent}%`,\n    }}\n    {...getTrackProps()}\n  />\n);\n\nconst VideoProgressBar = ({\n  videoState,\n  videoControls,\n}) => {\n  const {\n    playing,\n    bufferStart,\n    bufferEnd,\n    currentTime,\n  } = videoState;\n\n  const {\n    pause,\n    play,\n    setCurrentTime,\n  } = videoControls;\n\n  const [dragging, setDragging] = useState(false);\n  const [wasPlaying, setWasPlaying] = useState(false);\n  const [value, setValue] = useState(0);\n  const [domainStart, setDomainStart] = useState(0);\n  const [domainEnd, setDomainEnd] = useState(1);\n\n  useEffect(() => {\n    if (!dragging) {\n      setValue(currentTime);\n    }\n  }, [dragging, currentTime]);\n\n  // TODO: domain end from bitrate and last announced chunk?\n  useEffect(() => {\n    setDomainStart(bufferStart);\n    setDomainEnd(bufferEnd);\n  }, [bufferStart, bufferEnd]);\n\n  const sliderClassNames = classNames({\n    video_progress_bar__slider: true,\n    dragging,\n  });\n\n  const clampValue = value => Math.min(bufferEnd, value);\n\n  const handleUpdate = ([newValue]) => {\n    const clampedValue = clampValue(newValue);\n    if (dragging && clampedValue !== value) {\n      setCurrentTime(clampedValue);\n      setValue(clampedValue);\n    }\n  };\n\n  const handleSlideStart = values => {\n    setDragging(true);\n    setWasPlaying(playing);\n    pause();\n  };\n\n  const handleSlideEnd = values => {\n    setDragging(false);\n\n    if (wasPlaying) {\n      play();\n    }\n  };\n\n  const domainWidth = domainEnd - domainStart;\n  const bufferRailStart = (bufferStart - domainStart) / domainWidth * 100;\n  const bufferRailWidth = (bufferEnd - bufferStart) / domainWidth * 100;\n  const bufferStyle = {\n    left: `${bufferRailStart}%`,\n    width: `${bufferRailWidth}%`,\n  };\n\n  return (\n    <Slider\n      mode={1}\n      step={0.01}\n      className={sliderClassNames}\n      domain={[domainStart, domainEnd]}\n      onUpdate={handleUpdate}\n      onSlideStart={handleSlideStart}\n      onSlideEnd={handleSlideEnd}\n      values={[value]}\n    >\n      <Rail>\n        {({getRailProps}) => (\n          <div className=\"video_progress_bar__rail\"  {...getRailProps()}>\n            <div className=\"video_progress_bar__rail__buffer\" style={bufferStyle} />\n          </div>\n        )}\n      </Rail>\n      <Handles>\n        {({handles, getHandleProps}) => (\n          <div>\n            {handles.map(handle => (\n              <Handle\n                key={handle.id}\n                handle={handle}\n                domain={[0, 1]}\n                getHandleProps={getHandleProps}\n              />\n            ))}\n          </div>\n        )}\n      </Handles>\n      <Tracks right={false}>\n        {({tracks, getTrackProps}) => (\n          <div>\n            {tracks.map(({id, source, target}) => (\n              <Track\n                key={id}\n                source={source}\n                target={target}\n                getTrackProps={getTrackProps}\n              />\n            ))}\n          </div>\n        )}\n      </Tracks>\n    </Slider>\n  );\n};\n\nexport default VideoProgressBar;\n","import React, {useState} from 'react';\nimport VideoVolume from './VideoVolume';\nimport classNames from 'classnames';\nimport {\n  Pause,\n  PlayArrow,\n  VolumeOff,\n  VolumeMute,\n  VolumeDown,\n  VolumeUp,\n  Fullscreen,\n  FullscreenExit,\n  PictureInPictureAlt,\n} from '@material-ui/icons';\nimport VideoProgressBar from './VideoProgressBar';\nimport {useDebounce} from 'react-use';\n\nimport './VideoPlayer.scss';\n\nconst Button = ({className, tooltip, icon: Icon, onClick}) => (\n  <div className={classNames('button-wrap', className)}>\n    <button\n      data-tip={tooltip}\n      onClick={onClick}\n    >\n      <Icon />\n    </button>\n  </div>\n);\n\nconst PiPButton = ({supported, toggle}) => !supported ? null : (\n  <Button\n    className=\"pip\"\n    tooltip=\"Miniplayer\"\n    onClick={toggle}\n    icon={PictureInPictureAlt}\n  />\n);\n\nconst FullscreenButton = ({supported, enabled, toggle}) => !supported ? null : (\n  <Button\n    className=\"fullscreen\"\n    tooltip={enabled ? 'Exit full screen' : 'Full screen'}\n    onClick={toggle}\n    icon={enabled ? FullscreenExit : Fullscreen}\n  />\n);\n\nconst VolumeControl = ({\n  volume,\n  videoControls,\n  onUpdateStart,\n  onUpdateEnd,\n}) => {\n  const volumeIcons = [\n    VolumeOff,\n    VolumeMute,\n    VolumeDown,\n    VolumeUp,\n  ];\n  const volumeLevel = Math.ceil(volume * (volumeIcons.length - 1));\n  const VolumeIcon = volumeIcons[volumeLevel];\n  const handleVolumeClick = () => volume === 0 ? videoControls.unmute() : videoControls.mute();\n\n  return (\n    <div className=\"volume button-wrap\">\n      <button\n        data-tip={volume === 0 ? 'Unmute' : 'Mute'}\n        onClick={handleVolumeClick}\n      >\n        <VolumeIcon className={`volume-level-${volumeLevel}`} />\n      </button>\n      <VideoVolume\n        onUpdate={videoControls.setVolume}\n        onSlideStart={onUpdateStart}\n        onSlideEnd={onUpdateEnd}\n        value={volume}\n      />\n    </div>\n  );\n};\n\nconst VideoControls = props => {\n  const [active, setActive] = useState(false);\n  const visible = props.visible || active;\n\n  const [visible100, setVisible100] = useState(false);\n  const [visible500, setVisible500] = useState(false);\n  useDebounce(() => setVisible100(visible), 100, [visible]);\n  useDebounce(() => setVisible500(visible), 500, [visible]);\n\n  if (!visible && !visible500) {\n    return null;\n  }\n\n  const {\n    videoState,\n    videoControls,\n  } = props;\n\n  const {playing} = videoState;\n\n  const controlsClassName = classNames({\n    video_player__controls: true,\n    visible,\n    visible100,\n    visible500,\n  });\n\n  return (\n    <div\n      className={controlsClassName}\n      onMouseMove={() => setActive(true)}\n      onMouseLeave={() => setActive(false)}\n    >\n      <div className=\"controls_group left\">\n        <Button\n          className=\"play\"\n          tooltip={playing === 0 ? 'Pause' : 'Play'}\n          onClick={playing ? videoControls.pause : videoControls.play}\n          icon={playing ? Pause : PlayArrow}\n        />\n        <VolumeControl\n          volume={videoState.volume}\n          videoControls={videoControls}\n          onUpdateStart={() => setActive(true)}\n          onUpdateEnd={() => setActive(false)}\n        />\n      </div>\n      <div className=\"progress_bar\">\n        <VideoProgressBar\n          videoState={videoState}\n          videoControls={videoControls}\n        />\n      </div>\n      <div className=\"controls_group right\">\n        <PiPButton\n          supported={videoState.supportPiP}\n          toggle={videoControls.togglePiP}\n        />\n        <FullscreenButton\n          supported={document.fullscreenEnabled}\n          enabled={props.fullscreen}\n          toggle={props.toggleFullscreen}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default VideoControls;\n","import React, {useEffect, useRef} from 'react';\nimport DiagnosticMenu from './DiagnosticMenu';\nimport LogoButton from './LogoButton';\nimport useSwarmMediaSource from '../hooks/useSwarmMediaSource';\nimport useVideo from '../hooks/useVideo';\nimport useFullscreen from 'use-fullscreen';\nimport {Loop} from '@material-ui/icons';\nimport VideoControls from './VideoControls';\nimport useIdleTimeout from '../hooks/useIdleTimeout';\n\nimport './VideoPlayer.scss';\n\nconst SwarmPlayer = ({\n  swarm,\n  volumeStepSize = 0.1,\n  mimeType,\n  useMediaSource = useSwarmMediaSource,\n}) => {\n  const rootRef = useRef();\n  const [controlsHidden, renewControlsTimeout, clearControlsTimeout] = useIdleTimeout();\n  const [isFullscreen, toggleFullscreen] = useFullscreen();\n  const [videoState, videoProps, videoControls] = useVideo();\n  const [mediaSource, truncateMediaSource] = useMediaSource(swarm, {mimeType});\n\n  useEffect(() => {\n    videoControls.setSrc(URL.createObjectURL(mediaSource));\n    videoControls.play();\n  }, [videoProps.ref, mediaSource]);\n\n  useEffect(() => truncateMediaSource(60), [videoState.bufferEnd]);\n\n  const waitingSpinner = (videoState.waiting && videoState.loaded)\n    ? (\n      <div className=\"video_player__waiting_spinner\">\n        <Loop />\n      </div>\n    ) : (\n      <LogoButton\n        visible={!videoState.playing && !videoState.paused}\n        onClick={videoControls.play}\n        flicker={videoState.ended && !videoState.loaded}\n        spin={videoState.waiting && videoState.loaded}\n        disabled={videoState.waiting || !videoState.loaded}\n        blur={true}\n      />\n    );\n\n  const handleToggleFullscreen = () => toggleFullscreen(rootRef.current);\n\n  const handleWheel = e => {\n    const direction = e.deltaY < 0 ? 1 : -1;\n    videoControls.setVolume(videoState.volume + direction * volumeStepSize);\n    renewControlsTimeout();\n  };\n\n  return (\n    <div\n      className=\"video_player\"\n      onMouseMove={renewControlsTimeout}\n      onMouseLeave={clearControlsTimeout}\n      onDoubleClick={handleToggleFullscreen}\n      onWheel={handleWheel}\n      ref={rootRef}\n    >\n      <DiagnosticMenu swarm={swarm} />\n      <video\n        onClick={e => e.preventDefault()}\n        className=\"video_player__video\"\n        {...videoProps}\n      />\n      {waitingSpinner}\n      <VideoControls\n        videoState={videoState}\n        videoControls={videoControls}\n        visible={!controlsHidden}\n        fullscreen={isFullscreen}\n        toggleFullscreen={handleToggleFullscreen}\n      />\n    </div>\n  );\n};\n\nexport default SwarmPlayer;\n","import hexToArrayBuffer from 'hex-to-array-buffer';\n\nexport default function hexToUint8Array(v) {\n  return new Uint8Array(hexToArrayBuffer(v));\n}\n","import {Buffer} from 'buffer';\nimport arrayEqual from 'array-equal';\nimport binSearch from '../binSearch';\nimport Address from './address';\nimport SwarmId from './swarmid';\n\nimport {\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n} from './constants';\n\nconst crypto = require('../compat/crypto');\n\nconst toUint8Array = data => new Uint8Array(data);\n\nexport const MerkleHashTreeFunctionAlgorithms = {\n  [MerkleHashTreeFunction.SHA1]: 'SHA-1',\n  [MerkleHashTreeFunction.SHA224]: 'SHA-224',\n  [MerkleHashTreeFunction.SHA256]: 'SHA-256',\n  [MerkleHashTreeFunction.SHA384]: 'SHA-384',\n  [MerkleHashTreeFunction.SHA512]: 'SHA-512',\n};\n\nexport const MerkleHashTreeFunctionByteLengths = {\n  [MerkleHashTreeFunction.SHA1]: 20,\n  [MerkleHashTreeFunction.SHA224]: 28,\n  [MerkleHashTreeFunction.SHA256]: 32,\n  [MerkleHashTreeFunction.SHA384]: 48,\n  [MerkleHashTreeFunction.SHA512]: 64,\n};\n\nexport const createMerkleHashTreeFunction = (merkleHashTreeFunction) => {\n  const algorithm = MerkleHashTreeFunctionAlgorithms[merkleHashTreeFunction];\n  if (algorithm === undefined) {\n    throw new Error('invalid merkle hash tree function');\n  }\n\n  const nullHash = new Uint8Array(MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction]);\n\n  return (...values) => {\n    values = values.map(value => value === undefined ? nullHash : value);\n\n    if (values.every(value => arrayEqual(value, nullHash))) {\n      return Promise.resolve(nullHash);\n    }\n\n    if (values.length > 1) {\n      values = new Uint8Array(Buffer.concat(values.map(value => Buffer.from(value))));\n    } else {\n      values = values[0];\n    }\n\n    return crypto.subtle.digest(algorithm, values).then(toUint8Array);\n  };\n};\n\nexport const LiveSignatureAlgorithms = {\n  [LiveSignatureAlgorithm.RSASHA1]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-1'},\n  },\n  [LiveSignatureAlgorithm.RSASHA256]: {\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: 2048,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP256SHA256]: {\n    name: 'ECDSA',\n    namedCurve: 'P-256',\n    hash: {name: 'SHA-256'},\n  },\n  [LiveSignatureAlgorithm.ECDSAP384SHA384]: {\n    name: 'ECDSA',\n    namedCurve: 'P-384',\n    hash: {name: 'SHA-384'},\n  },\n};\n\nexport const createLiveSignatureSignFunction = (liveSignatureAlgorithm, privateKey, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  const importResult = crypto.subtle.importKey('pkcs8', privateKey, algorithm, false, ['sign']);\n\n  return data => importResult\n    .then(privateKey => crypto.subtle.sign(algorithm, privateKey, data))\n    .then(toUint8Array);\n};\n\nexport const createLiveSignatureVerifyFunction = (liveSignatureAlgorithm, swarmId, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...swarmId.getKeyParams(),\n    ...algorithm,\n  };\n\n  const publicKey = new Uint8Array(swarmId.publicKey);\n  const importResult = crypto.subtle.importKey('spki', publicKey, algorithm, false, ['verify']);\n\n  return (signature, data) => importResult\n    .then(publicKey => crypto.subtle.verify(algorithm, publicKey, signature, data))\n    .then(toUint8Array);\n};\n\nexport const generateKeyPair = (liveSignatureAlgorithm, algorithm = {}) => {\n  algorithm = {\n    ...LiveSignatureAlgorithms[liveSignatureAlgorithm],\n    ...algorithm,\n  };\n\n  return crypto.subtle.generateKey(algorithm, true, ['sign', 'verify'])\n    .then(keyPair => Promise.all([\n      crypto.subtle.exportKey('pkcs8', keyPair.privateKey),\n      crypto.subtle.exportKey('spki', keyPair.publicKey),\n    ]))\n    .then(([privateKey, publicKey]) => ({\n      privateKey,\n      publicKey,\n      swarmId: SwarmId.from({\n        ...algorithm,\n        liveSignatureAlgorithm,\n        publicKey,\n      }),\n    }));\n};\n\nconst unavailableLiveSignatureSignFunction = () => Promise.reject('live signature function not available');\n\nexport const createContentIntegrityVerifierFactory = (\n  contentIntegrityProtectionMethod,\n  merkleHashTreeFunction,\n  liveSignatureVerifyFunction,\n  liveSignatureSignFunction = unavailableLiveSignatureSignFunction,\n  liveDiscardWindow = Infinity,\n) => {\n  class Signature {\n    constructor(hash, verified = false) {\n      this.hash = hash;\n      this.verified = verified;\n    }\n\n    markVerified() {\n      this.verified = true;\n    }\n\n    getHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return !this.verified\n        ? Promise.reject('cannot use unverified signature')\n        : Promise.resolve(arrayEqual(this.hash, value));\n    }\n  }\n\n  // TODO: timestamp in hash?\n  class SignedSignature {\n    constructor(signature, hash) {\n      this.signature = signature;\n      this.hash = hash;\n      this.verificationResult = undefined;\n    }\n\n    verifyHash() {\n      if (this.verificationResult === undefined) {\n        this.verificationResult = liveSignatureVerifyFunction(this.hash, this.getHash())\n          .then(() => this.markVerified());\n      }\n      return this.verificationResult;\n    }\n\n    markVerified() {\n      this.signature.markVerified();\n    }\n\n    getHash() {\n      return this.signature.getHash();\n    }\n\n    getSignatureHash() {\n      return this.hash;\n    }\n\n    compare(value) {\n      return this.verifyHash().then(() => this.signature.compare(value));\n    }\n  }\n\n  class MerkleHashTree {\n    constructor(rootAddress = new Address(0), signatures = new Array(rootAddress.getChunkCount() * 2 - 1)) {\n      this.rootAddress = rootAddress;\n      this.signatures = signatures;\n    }\n\n    createVerifier(address) {\n      if (address.contains(this.rootAddress)) {\n        const {signatures} = this;\n\n        this.rootAddress = address;\n        this.signatures = new Array(address.getChunkCount() * 2 - 1);\n\n        for (let i = 0; i < signatures.length; i ++) {\n          if (signatures[i] !== undefined) {\n            this.signatures[i] = signatures[i];\n          }\n        }\n      }\n\n      return new MerkleHashTreeVerifier(this);\n    }\n\n    copy(hashTree) {\n      for (let i = 0; i < this.signatures.length; i ++) {\n        if (hashTree.signatures[i] === undefined) {\n          hashTree.signatures[i] = this.signatures[i];\n        }\n      }\n    }\n\n    getChunkCount() {\n      return this.rootAddress.getChunkCount();\n    }\n\n    *getConstituentHashBins({bin}) {\n      if (!this.rootAddress.containsBin(bin)) {\n        throw new Error('bin out of range');\n      }\n\n      const {start} = this.rootAddress;\n      bin -= start;\n\n      let bfsIndex = this.rootAddress.getChunkCount() + bin / 2 - 1;\n      let stride = 2;\n      let parent = bin;\n\n      while (bfsIndex !== 0) {\n        const branch = (bfsIndex & 1) === 1 ? 1 : -1;\n\n        yield {\n          isRoot: false,\n          branch,\n          bin: parent + start,\n          bfsIndex,\n          siblingBin: parent + branch * stride + start,\n          siblingBfsIndex: bfsIndex + branch,\n        };\n\n        bfsIndex = Math.floor((bfsIndex - 1) / 2);\n        parent += branch * stride / 2;\n        stride *= 2;\n      }\n\n      yield {\n        isRoot: true,\n        branch: 0,\n        bin: parent + start,\n        bfsIndex: 0,\n        siblingBin: parent + start,\n        siblingBfsIndex: 0,\n      };\n    }\n\n    getConstituentSignatures(address) {\n      return Array.from(this.getConstituentHashBins(address)).map(({\n        siblingBin,\n        siblingBfsIndex,\n      }) => ({\n        bin: siblingBin,\n        signature: this.signatures[siblingBfsIndex],\n      }));\n    }\n\n    static from(values, rootAddress = new Address(MerkleHashTree.minSize(values.length) - 1)) {\n      const size = rootAddress.getChunkCount();\n      const hashes = new Array(size * 2 - 1);\n      for (let i = 0; i < size; i ++) {\n        hashes[i + size - 1] = merkleHashTreeFunction(values[i]);\n      }\n      for (let i = (size - 1) * 2; i > 0; i -= 2) {\n        hashes[Math.floor(i / 2) - 1] = Promise.all([hashes[i - 1], hashes[i]])\n          .then(siblings => merkleHashTreeFunction(...siblings));\n      }\n\n      return Promise.all(hashes).then(hashes => {\n        const signatures = hashes.map(hash => new Signature(hash, true));\n\n        return liveSignatureSignFunction(hashes[0]).then(rootHashSignature => {\n          signatures[0] = new SignedSignature(\n            signatures[0],\n            rootHashSignature,\n          );\n\n          return new MerkleHashTree(rootAddress, signatures);\n        });\n      });\n    }\n\n    static minSize(size) {\n      return Math.pow(2, Math.ceil(Math.log2(size)));\n    }\n  }\n\n  class MerkleHashTreeVerifier {\n    constructor(hashTree) {\n      this.hashTree = hashTree;\n      this.signatures = {};\n    }\n\n    setHash({bin}, hash) {\n      this.signatures[bin] = new Signature(hash);\n    }\n\n    setHashSignature({bin}, hash) {\n      this.signatures[bin] = new SignedSignature(this.signatures[bin], hash);\n    }\n\n    verifyChunk(address, value) {\n      const signatures = [];\n      let hashResult = merkleHashTreeFunction(value);\n\n      for (let bin of this.hashTree.getConstituentHashBins(address)) {\n        let siblingSignature = this.hashTree.signatures[bin.siblingBfsIndex];\n        if (siblingSignature === undefined) {\n          siblingSignature = this.signatures[bin.siblingBin];\n          signatures.push({\n            index: bin.siblingBfsIndex,\n            signature: siblingSignature,\n          });\n        }\n\n        // if the current branch has already been verified short circuit\n        const verifiedSignature = this.hashTree.signatures[bin.bfsIndex];\n        if (verifiedSignature !== undefined) {\n          hashResult = hashResult.then(hash => verifiedSignature.compare(hash));\n          break;\n        }\n\n        // verify the generated root hash using the one supplied to the verifier\n        if (bin.isRoot) {\n          hashResult = hashResult.then(hash => siblingSignature.compare(hash));\n          break;\n        }\n\n        // chain generating the next parent hash\n        hashResult = hashResult.then(hash => {\n          signatures.push({\n            index: bin.bfsIndex,\n            signature: new Signature(hash),\n          });\n\n          const siblingHash = siblingSignature.getHash();\n          return bin.branch === 1\n            ? merkleHashTreeFunction(hash, siblingHash)\n            : merkleHashTreeFunction(siblingHash, hash);\n        });\n      }\n\n      return hashResult.then(() => {\n        signatures.forEach(({index, signature}) => {\n          signature.markVerified();\n          this.hashTree.signatures[index] = signature;\n        });\n      });\n    }\n  }\n\n  class UnifiedMerkleHashTree {\n    constructor() {\n      this.subtrees = [];\n      this.nextStart = 0;\n      this.chunkCount = 0;\n    }\n\n    findSubtree({bin}) {\n      const index = binSearch(\n        this.subtrees.length - 1,\n        i => {\n          const {start, end} = this.subtrees[i].rootAddress;\n          return start <= bin && bin <= end ? 0 : start - bin;\n        },\n      );\n\n      return index < 0 ? undefined : this.subtrees[index];\n    }\n\n    insertSubtree(subtree) {\n      const storedSubtree = this.findSubtree(subtree.rootAddress);\n      if (storedSubtree !== undefined) {\n        if (storedSubtree !== subtree) {\n          subtree.copy(storedSubtree);\n        }\n\n        return storedSubtree;\n      }\n\n      this.subtrees.push(subtree);\n      this.subtrees.sort((a, b) => a.rootAddress.start - b.rootAddress.start);\n\n      this.chunkCount += subtree.getChunkCount();\n      this.pruneSubtrees();\n\n      return subtree;\n    }\n\n    pruneSubtrees() {\n      while (this.subtrees.length > 0 && this.chunkCount - this.subtrees[0].getChunkCount() > liveDiscardWindow) {\n        const removedTree = this.subtrees.shift();\n        this.chunkCount -= removedTree.getChunkCount();\n      }\n    }\n\n    appendSubtree(values) {\n      const treeSize = MerkleHashTree.minSize(values.length);\n      const nextAddress = new Address(\n        this.nextStart + treeSize - 1,\n        [this.nextStart, this.nextStart + (treeSize - 1) * 2],\n      );\n\n      this.nextStart += treeSize * 2;\n\n      return MerkleHashTree.from(values, nextAddress)\n        .then(subtree => this.insertSubtree(subtree));\n    }\n\n    createVerifier(address) {\n      let subtree = this.findSubtree(address) || new MerkleHashTree(address);\n      return new MerkleHashSubtreeVerifier(this, subtree);\n    }\n\n    getConstituentSignatures(address) {\n      const subtree = this.findSubtree(address);\n      if (subtree === undefined) {\n        return;\n      }\n\n      return subtree.getConstituentSignatures(address);\n    }\n  }\n\n  class MerkleHashSubtreeVerifier extends MerkleHashTreeVerifier {\n    constructor(unifiedHashTree, subtree) {\n      super(subtree);\n      this.unifiedHashTree = unifiedHashTree;\n    }\n\n    verifyChunk(address, value) {\n      return super.verifyChunk(address, value)\n        .then(this.unifiedHashTree.insertSubtree(this.hashTree));\n    }\n  }\n\n  class NoneVerifier {\n    setHash() {}\n\n    setHashSignature() {}\n\n    verifyChunk() {\n      return Promise.resolve();\n    }\n  }\n\n  class NoneVerifierFactory {\n    createVerifier() {\n      return new NoneVerifier();\n    }\n\n    getConstituentSignatures() {\n      return [];\n    }\n  }\n\n  // TODO: sign all method\n  switch (contentIntegrityProtectionMethod) {\n    case ContentIntegrityProtectionMethod.None:\n      return new NoneVerifierFactory();\n    case ContentIntegrityProtectionMethod.MerkleHashTree:\n      return new MerkleHashTree();\n    case ContentIntegrityProtectionMethod.UnifiedMerkleTree:\n      return new UnifiedMerkleHashTree();\n    default:\n      throw new Error('unsupported content integrity protection method');\n  }\n};\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n","import WebCrypto from 'node-webcrypto-ossl';\n\nmodule.exports = new WebCrypto();\n","module.exports = crypto;\n","import ws from 'ws';\n\nexport default ws;\n","module.exports = WebSocket;\n","import {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n} from 'wrtc';\n\nmodule.exports = {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCIceCandidate,\n};\n","module.exports = {\n  RTCPeerConnection: window.RTCPeerConnection,\n  RTCSessionDescription: window.RTCSessionDescription,\n  RTCIceCandidate: window.RTCIceCandidate,\n};\n","import React, {Suspense, lazy} from 'react';\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport App from './App';\nimport LogoButton from './LogoButton';\n\nconst LocalSwarm = lazy(() => import('./LocalSwarm'));\nconst DhtGraph = lazy(() => import('./DhtGraph'));\nconst MediaDeviceTest = lazy(() => import('./MediaDeviceTest'));\n\nconst Router = () => (\n  <HashRouter>\n    <Suspense fallback={<LogoButton disabled={true} flicker={true} blur />}>\n      <Switch>\n        <Route exact path=\"/test/local-swarm\" component={props => <LocalSwarm {...props} />} />\n        <Route exact path=\"/test/dht-graph\" component={props => <DhtGraph {...props} />} />\n        <Route exact path=\"/test/media-device\" component={props => <MediaDeviceTest {...props} />} />\n        <Route exact path=\"/:name([\\w\\-]*)\" component={App} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </Suspense>\n  </HashRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './components/Router';\n\nimport './index.css';\n\n// if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {\n//   window.addEventListener('load', function() {\n//     navigator.serviceWorker.register('/service-worker.js');\n//   });\n// }\n\nReactDOM.render(<Router />, document.getElementById('root'));\n","import {useEffect} from 'react';\n\nconst useReady = (effect, deps) => useEffect(() => {\n  for (let i = 0; i < deps.length; i ++) {\n    if (deps[i] == null) {\n      return;\n    }\n  }\n\n  return effect();\n}, deps);\n\nexport default useReady;\n","import {LiveSignatureAlgorithm} from './constants';\n\nconst isRsaAlgorithm = liveSignatureAlgorithm => {\n  const rsaAlgorithms = [\n    LiveSignatureAlgorithm.RSASHA1,\n    LiveSignatureAlgorithm.RSASHA256,\n  ];\n  return rsaAlgorithms.includes(liveSignatureAlgorithm);\n};\n\nexport default class SwarmId {\n  constructor(\n    liveSignatureAlgorithm,\n    publicKey,\n    publicExponent,\n    modulusLength,\n  ) {\n    this.liveSignatureAlgorithm = liveSignatureAlgorithm;\n    this.publicKey = Buffer.from(publicKey);\n    this.publicExponent = publicExponent;\n    this.modulusLength = modulusLength;\n  }\n\n  getLiveSignatureByteLength() {\n    switch (this.liveSignatureAlgorithm) {\n      case LiveSignatureAlgorithm.RSASHA1:\n      case LiveSignatureAlgorithm.RSASHA256:\n        return this.modulusLength / 8;\n      case LiveSignatureAlgorithm.ECDSAP256SHA256:\n        return 64;\n      case LiveSignatureAlgorithm.ECDSAP384SHA384:\n        return 96;\n      default:\n        throw new Error('unsupported live signature algorithm');\n    }\n  }\n\n  getKeyParams() {\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      return {\n        publicExponent: new Uint8Array(this.publicExponent),\n        modulusLength: this.modulusLength,\n      };\n    }\n    return {};\n  }\n\n  byteLength() {\n    const metadataLength = isRsaAlgorithm(this.liveSignatureAlgorithm) ? 9 : 1;\n    return this.publicKey.length + metadataLength;\n  }\n\n  toBuffer() {\n    const buffer = Buffer.alloc(this.byteLength());\n    let length = 0;\n\n    buffer.writeUInt8(this.liveSignatureAlgorithm, length);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      Buffer.from(this.publicExponent).copy(buffer, length + 4 - this.publicExponent.length);\n      length += 4;\n\n      buffer.writeUInt32BE(this.modulusLength, length);\n      length += 4;\n    }\n\n    this.publicKey.copy(buffer, length);\n\n    return buffer;\n  }\n\n  read(buffer) {\n    let length = 0;\n\n    this.liveSignatureAlgorithm = buffer.readUInt8(0);\n    length += 1;\n\n    if (isRsaAlgorithm(this.liveSignatureAlgorithm)) {\n      this.publicExponent = buffer.slice(length, length + 4);\n      length += 4;\n\n      this.modulusLength = buffer.readUInt32BE(length);\n      length += 4;\n    }\n\n    this.publicKey = buffer.slice(length);\n  }\n\n  static from(values) {\n    if (ArrayBuffer.isView(values)) {\n      const swarmId = Object.create(SwarmId.prototype);\n      swarmId.read(Buffer.from(values));\n      return swarmId;\n    }\n\n    return new SwarmId(\n      values.liveSignatureAlgorithm,\n      values.publicKey,\n      values.publicExponent,\n      values.modulusLength,\n    );\n  }\n}\n","import React, {useEffect, useState} from 'react';\nimport classNames from 'classnames';\nimport {useHover} from 'use-events';\nimport {useDebounce} from 'react-use';\n\nimport './LogoButton.scss';\n\nconst LogoButton = ({\n  spin = false,\n  flicker = false,\n  pulse = false,\n  disabled = false,\n  visible = true,\n  blur = false,\n  error = false,\n  onClick = null,\n  idleTimeout = 2000,\n}) => {\n  const [currentVisibility, setCurrentVisibility] = useState(true);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => setCurrentVisibility(visible), 300);\n    return () => clearTimeout(timeout);\n  }, [visible]);\n\n  const [hovering, hoverEventHandlers] = useHover();\n  const [mouseIdle, setMouseIdle] = useState(false);\n\n  useDebounce(() => setMouseIdle(hovering), idleTimeout, [hovering]);\n  useEffect(() => {\n    if (!hovering) {\n      setMouseIdle(false);\n    }\n  }, [hovering]);\n\n  const hidden = !visible && !currentVisibility;\n\n  const hoverClasses = classNames({\n    logo_button_wrap: true,\n    hovering: mouseIdle,\n    hidden,\n    disabled,\n  });\n\n  const buttonClasses = classNames({\n    logo_button: true,\n    clickable: onClick != null && !disabled,\n    exiting: !visible && currentVisibility,\n    hidden,\n    spin,\n    flicker,\n    pulse,\n    blur,\n    error,\n    disabled,\n  });\n\n  return (\n    <div className={hoverClasses}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 926 926\"\n        className={buttonClasses}\n        onClick={disabled ? undefined : onClick}\n        {...hoverEventHandlers}\n      >\n        <g className=\"background\">\n          <circle cx=\"463\" cy=\"463\" r=\"463\"/>\n        </g>\n        <g className=\"network\">\n          <circle cx=\"327\" cy=\"229\" r=\"139\"/>\n          <circle cx=\"732\" cy=\"463\" r=\"139\"/>\n          <circle cx=\"327\" cy=\"697\" r=\"139\"/>\n          <polygon points=\"854 463 269 125 269 801 854 463\"/>\n        </g>\n        <g className=\"button\">\n          <path d=\"M658,524c23-13,23-36,0-50L457,358c-23-13-43-2-43,25V616c0,27,19,38,43,25Z\" transform=\"translate(-45 -36)\"/>\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default LogoButton;\n","export default class EMA {\n  constructor(alpha) {\n    this.mean = 0;\n    this.alpha = alpha;\n    this.weight = 1;\n  }\n\n  update(value) {\n    this.mean = this.alpha * value + (1 - this.alpha) * this.mean;\n    this.weight *= this.alpha;\n  }\n\n  set(value) {\n    this.mean = value;\n    this.weight = 0;\n  }\n\n  isEmpty() {\n    return this.weight === 1;\n  }\n\n  value() {\n    return this.mean / (1 - this.weight);\n  }\n}\n","export default class RingBuffer {\n  constructor(capacity) {\n    this.setCapacity(capacity);\n  }\n\n  setCapacity(capacity) {\n    this.capacity = capacity;\n    this.lastIndex = capacity;\n    this.values = new Array(capacity);\n\n    for (let i = 0; i < capacity; i ++) {\n      this.values[i] = this.createEmptyValue(i);\n    }\n  }\n\n  advanceLastIndex(lastIndex) {\n    if (this.lastIndex > lastIndex) {\n      return;\n    }\n\n    let firstEmptyIndex = this.lastIndex;\n    if (lastIndex - firstEmptyIndex > this.capacity) {\n      firstEmptyIndex = lastIndex - this.capacity;\n    }\n    for (let i = firstEmptyIndex; i <= lastIndex; i ++) {\n      const index = i % this.capacity;\n      this.values[index] = this.createEmptyValue(i, this.values[index]);\n    }\n    this.lastIndex = lastIndex + 1;\n  }\n\n  createEmptyValue() {\n    return undefined;\n  }\n\n  set(index, value) {\n    this.advanceLastIndex(index);\n    this.values[index % this.capacity] = value;\n  }\n\n  push(value) {\n    this.set(this.lastIndex, value);\n  }\n\n  get firstIndex() {\n    return this.lastIndex - this.capacity;\n  }\n\n  get(index) {\n    if (index < this.firstIndex || index >= this.lastIndex) {\n      return this.createEmptyValue(index);\n    }\n    return this.values[index % this.capacity];\n  }\n}\n","import EMA from './ema';\nimport RingBuffer from './RingBuffer';\n\nclass DelayBuffer extends RingBuffer {\n  constructor(capacity, window) {\n    super(capacity);\n    this.min = Infinity;\n    this.window = window;\n  }\n\n  createEmptyValue() {\n    return Infinity;\n  }\n\n  getMin() {\n    return this.min;\n  }\n\n  update(delay) {\n    const now = Math.floor(Date.now() / this.window);\n\n    if (now >= this.lastIndex) {\n      this.advanceLastIndex(now);\n      this.min = Math.min(...this.values);\n    }\n\n    if (delay < this.get(now)) {\n      this.set(now, delay);\n      this.min = Math.min(this.min, delay);\n    }\n  }\n}\n\n// rfc6817\nconst TARGET = 100;\nconst ALLOWED_INCREASE = 1;\nconst GAIN = 1;\nconst CURRENT_HISTORY = 4;\nconst CURRENT_HISTORY_INTERVAL = 1000;\nconst BASE_HISTORY = 10;\nconst BASE_HISTORY_INTERVAL = 60 * 1000;\nconst INIT_CWND = 2;\nconst MIN_CWND = 2;\n\n// max safe WebRTC data channel message size\nconst MSS = 8 * 1024;\n\n// rfc6298\nconst COEF_G = 1;\nconst COEF_K = 4;\n\n// jacobson, v. \"congestion avoidance and control\"\n// doi: 10.1145/52325.52356\nconst COEF_ALPHA = 0.125;\nconst COEF_BETA = 0.25;\n\nexport default class LEDBAT {\n  constructor(target = TARGET, mss = MSS) {\n    this.target = target;\n    this.mss = mss;\n    this.flightSize = 0;\n\n    // the amount of data that is allowed to be outstanding in an rtt in bytes\n    this.cwnd = INIT_CWND * MSS;\n\n    // the congestion timeout\n    this.cto = 1000;\n    this.currentDelay = new DelayBuffer(CURRENT_HISTORY, CURRENT_HISTORY_INTERVAL);\n    this.baseDelay = new DelayBuffer(BASE_HISTORY, BASE_HISTORY_INTERVAL);\n\n    this.lastDataLoss = 0;\n    this.lastAckTime = Infinity;\n    this.rttMean = new EMA(COEF_ALPHA);\n    this.rttVar = new EMA(COEF_BETA);\n\n    this.ackSize = 0;\n  }\n\n  addSent(bytes) {\n    this.flightSize += bytes;\n  }\n\n  addDelaySample(delaySample, bytes = MSS) {\n    this.currentDelay.update(delaySample);\n    this.baseDelay.update(delaySample);\n\n    this.ackSize += bytes;\n\n    this.lastAckTime = Date.now();\n  }\n\n  digestDelaySamples() {\n    this.checkCTO();\n\n    if (this.ackSize === 0) {\n      return;\n    }\n\n    const queuingDelay = Math.abs(this.currentDelay.getMin() - this.baseDelay.getMin());\n    const offTarget = (this.target - queuingDelay) / this.target;\n    this.cwnd += GAIN * offTarget * this.ackSize * this.mss / this.cwnd;\n\n    const maxAllowedCwnd = this.flightSize + ALLOWED_INCREASE * this.mss;\n    this.cwnd = Math.max(Math.min(this.cwnd, maxAllowedCwnd), MIN_CWND * this.mss);\n\n    this.flightSize = Math.max(0, this.flightSize - this.ackSize);\n    this.ackSize = 0;\n  }\n\n  checkCTO() {\n    if (this.flightSize > 0 && Date.now() - this.cto > this.lastAckTime) {\n      this.cwnd = this.mss;\n      this.cto = 2 * this.cto;\n    }\n  }\n\n  addRttSample(rtt) {\n    if (this.rttMean.isEmpty()) {\n      this.rttMean.set(rtt);\n      this.rttVar.set(rtt / 2);\n    } else {\n      this.rttVar.update(Math.abs(this.rttMean.value() - rtt));\n      this.rttMean.update(rtt);\n    }\n\n    this.cto = this.rttMean.value() + Math.max(COEF_G, COEF_K * this.rttVar.value());\n    if (this.cto < 1000) {\n      this.cto = 1000;\n    }\n  }\n\n  onDataLoss(bytes, retransmitting = false) {\n    const now = Date.now();\n    if (this.lastDataLoss !== 0 && now - this.lastDataLoss < this.rttMean.value()) {\n      return;\n    }\n    this.lastDataLoss = now;\n\n    this.cwnd = Math.min(this.cwnd, Math.max(this.cwnd / 2, MIN_CWND * this.mss));\n\n    if (!retransmitting) {\n      this.flightSize = Math.max(0, this.flightSize - bytes);\n    }\n  }\n\n  static computeOneWayDelay(timestamp) {\n    return Date.now() - timestamp;\n  }\n}\n","import {Buffer} from 'buffer';\nimport Address from './address';\nimport {MerkleHashTreeFunctionByteLengths} from './integrity';\n\nimport {\n  ProtocolOptions,\n  Version,\n  ContentIntegrityProtectionMethod,\n  MerkleHashTreeFunction,\n  LiveSignatureAlgorithm,\n  ChunkAddressingMethod,\n  MessageTypes,\n} from './constants';\n\nexport const createChunkAddressFieldType = (addressingMethod, chunkSize) => {\n  class Bin32ChunkAddress {\n    constructor(value = 0) {\n      this.type = ChunkAddressingMethod.Bin32;\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n\n    rangeByteLength() {\n      const [start, end] = Address.binBounds(this.value);\n      return (end - start + 1) * chunkSize;\n    }\n\n    static from({bin}) {\n      return new Bin32ChunkAddress(bin);\n    }\n  }\n\n  class ChunkRange32ChunkAddress {\n    constructor(start = 0, end = 0) {\n      this.type = ChunkAddressingMethod.ChunkRange32;\n      this.start = start;\n      this.end = end;\n    }\n\n    read(buffer, offset) {\n      this.start = buffer.readUInt32BE(offset);\n      this.end = buffer.readUInt32BE(offset + 4);\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.start, offset);\n      buffer.writeUInt32BE(this.end, offset + 4);\n    }\n\n    rangeByteLength() {\n      return (this.end - this.start + 1) * chunkSize;\n    }\n\n    static from({start, end}) {\n      return new ChunkRange32ChunkAddress(start, end);\n    }\n  }\n\n  switch (addressingMethod) {\n    case ChunkAddressingMethod.Bin32:\n      return Bin32ChunkAddress;\n    case ChunkAddressingMethod.ChunkRange32:\n      return ChunkRange32ChunkAddress;\n    default:\n      throw new Error('unsupported chunk addressing method');\n  }\n};\n\nconst createBufferFieldType = byteLength => {\n  class BufferField {\n    constructor(value = Buffer.alloc(byteLength)) {\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      buffer.copy(this.value, 0, offset, offset + byteLength);\n      return byteLength;\n    }\n\n    byteLength() {\n      return byteLength;\n    }\n\n    write(buffer, offset) {\n      this.value.copy(buffer, offset);\n    }\n  }\n\n  return BufferField;\n};\n\nexport const createLiveSignatureFieldType = (liveSignatureAlgorithm, swarmId) => {\n  const byteLength = swarmId.getLiveSignatureByteLength();\n\n  class LiveSignatureField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = liveSignatureAlgorithm;\n    }\n  }\n\n  return LiveSignatureField;\n};\n\nexport const createIntegrityHashFieldType = merkleHashTreeFunction => {\n  const byteLength = MerkleHashTreeFunctionByteLengths[merkleHashTreeFunction];\n\n  class IntegrityHashField extends createBufferFieldType(byteLength) {\n    constructor(value) {\n      super(value);\n      this.type = merkleHashTreeFunction;\n    }\n  }\n\n  return IntegrityHashField;\n};\n\nexport const createEncoding = (ChunkAddress, IntegrityHash, LiveSignature) => {\n  class Uint8ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt8(offset);\n      return 1;\n    }\n\n    byteLength() {\n      return 1;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt8(this.value, offset);\n    }\n  }\n\n  class Uint32ProtocolOption {\n    constructor(value = 0) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      this.value = buffer.readUInt32BE(offset);\n      return 4;\n    }\n\n    byteLength() {\n      return 4;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt32BE(this.value, offset);\n    }\n  }\n\n  class VersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.Version;\n    }\n  }\n\n  class MinimumVersionProtocolOption extends Uint8ProtocolOption {\n    constructor(version = Version.RFC7574) {\n      super(version);\n      this.type = ProtocolOptions.MinimumVersion;\n    }\n  }\n\n  class SwarmIdentifierProtocolOption {\n    constructor(value = []) {\n      this.type = ProtocolOptions.SwarmIdentifier;\n      this.value = Buffer.from(value);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt16BE(offset);\n      offset += 2;\n\n      this.value = buffer.slice(offset, offset + length);\n\n      return length + 2;\n    }\n\n    byteLength() {\n      return this.value.length + 2;\n    }\n\n    write(buffer, offset) {\n      buffer.writeUInt16BE(this.value.length, offset);\n      this.value.copy(buffer, offset + 2);\n    }\n  }\n\n  class ContentIntegrityProtectionMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ContentIntegrityProtectionMethod.MerkleHashTree) {\n      super(method);\n      this.type = ProtocolOptions.ContentIntegrityProtectionMethod;\n    }\n  }\n\n  class MerkleHashTreeFunctionProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = MerkleHashTreeFunction.SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.MerkleHashTreeFunction;\n    }\n  }\n\n  class LiveSignatureAlgorithmProtocolOption extends Uint8ProtocolOption {\n    constructor(algorithm = LiveSignatureAlgorithm.ECDSAP256SHA256) {\n      super(algorithm);\n      this.type = ProtocolOptions.LiveSignatureAlgorithm;\n    }\n  }\n\n  class ChunkAddressingMethodProtocolOption extends Uint8ProtocolOption {\n    constructor(method = ChunkAddressingMethod.ChunkRange32) {\n      super(method);\n      this.type = ProtocolOptions.ChunkAddressingMethod;\n    }\n  }\n\n  class LiveDiscardWindowProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.LiveDiscardWindow;\n    }\n  }\n\n  class SupportedMessagesProtocolOption {\n    constructor(messageTypes = Object.values(MessageTypes).filter(v => !isNaN(v))) {\n      this.type = ProtocolOptions.SupportedMessages;\n      this.value = {};\n      messageTypes.forEach(type => this.value[type] = true);\n    }\n\n    read(buffer, offset) {\n      const length = buffer.readUInt8(offset);\n      offset += 1;\n\n      for (let i = 0; i < length; i ++) {\n        const byte = buffer[offset + i];\n        for (let j = 0; j < 8; j ++) {\n          this.value[i * 8 + j] = Boolean(byte & (1 << 7 - j));\n        }\n      }\n\n      return length + 1;\n    }\n\n    bitmapByteLength() {\n      return Math.ceil(Math.max(...Object.keys(this.value)) / 8) + 1;\n    }\n\n    toBitmap() {\n      const length = this.bitmapByteLength();\n      const buffer = Buffer.alloc(length);\n\n      for (let i = 0; i < length; i ++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j ++) {\n          byte = (byte << 1) | (this.value[i * 8 + j] ? 1 : 0);\n        }\n        buffer.writeUInt8(byte, i);\n      }\n      return buffer;\n    }\n\n    byteLength() {\n      return this.bitmapByteLength() + 1;\n    }\n\n    write(buffer, offset) {\n      const bitmap = this.toBitmap();\n      buffer.writeUInt8(bitmap.length, offset);\n      bitmap.copy(buffer, offset + 1);\n    }\n  }\n\n  class ChunkSizeProtocolOption extends Uint32ProtocolOption {\n    constructor(value = 0) {\n      super(value);\n      this.type = ProtocolOptions.ChunkSize;\n    }\n  }\n\n  const protocolOptionRecordTypes = {\n    [ProtocolOptions.Version]: VersionProtocolOption,\n    [ProtocolOptions.MinimumVersion]: MinimumVersionProtocolOption,\n    [ProtocolOptions.SwarmIdentifier]: SwarmIdentifierProtocolOption,\n    [ProtocolOptions.ContentIntegrityProtectionMethod]: ContentIntegrityProtectionMethodProtocolOption,\n    [ProtocolOptions.MerkleHashTreeFunction]: MerkleHashTreeFunctionProtocolOption,\n    [ProtocolOptions.LiveSignatureAlgorithm]: LiveSignatureAlgorithmProtocolOption,\n    [ProtocolOptions.ChunkAddressingMethod]: ChunkAddressingMethodProtocolOption,\n    [ProtocolOptions.LiveDiscardWindow]: LiveDiscardWindowProtocolOption,\n    [ProtocolOptions.SupportedMessages]: SupportedMessagesProtocolOption,\n    [ProtocolOptions.ChunkSize]: ChunkSizeProtocolOption,\n  };\n\n  class HandshakeMessage {\n    constructor(channelId = 0, options = []) {\n      this.type = MessageTypes.HANDSHAKE;\n      this.channelId = channelId;\n      this.options = options;\n    }\n\n    read(buffer, offset) {\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(offset);\n      length += 4;\n\n      while (offset + length < buffer.length) {\n        const code = buffer.readUInt8(offset + length);\n        length += 1;\n\n        if (code === ProtocolOptions.EndOption) {\n          break;\n        }\n\n        const RecordType = protocolOptionRecordTypes[code];\n        const option = new RecordType();\n\n        length += option.read(buffer, offset + length);\n        this.options.push(option);\n      }\n\n      return length;\n    }\n\n    byteLength() {\n      return this.options.reduce((length, option) => length + option.byteLength() + 1, 0) + 5;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, offset);\n      length += 4;\n\n      this.options.forEach(option => {\n        buffer.writeUInt8(option.type, offset + length);\n        length += 1;\n\n        option.write(buffer, offset + length);\n        length += option.byteLength();\n      });\n\n      buffer.writeUInt8(ProtocolOptions.EndOption, offset + length);\n      length += 1;\n\n      return length;\n    }\n  }\n\n  class Timestamp {\n    constructor(value = Date.now()) {\n      this.value = value;\n    }\n\n    read(buffer, offset) {\n      const seconds = buffer.readInt32BE(offset);\n      const nanoseconds = buffer.readInt32BE(offset + 4);\n      this.value = seconds * 1e3 + nanoseconds / 1e6;\n      return 8;\n    }\n\n    byteLength() {\n      return 8;\n    }\n\n    write(buffer, offset) {\n      buffer.writeInt32BE(Math.floor(this.value / 1e3), offset);\n      buffer.writeInt32BE((this.value % 1e3) * 1e6, offset + 4);\n    }\n  }\n\n  class DataMessage {\n    constructor(address = new ChunkAddress(), data = [], timestamp = new Timestamp()) {\n      this.type = MessageTypes.DATA;\n      this.address = address;\n      this.data = Buffer.from(data);\n      this.timestamp = timestamp;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n\n      offset += length;\n      const dataLength = Math.min(this.address.rangeByteLength(), buffer.length - offset);\n      this.data = buffer.slice(offset, offset + dataLength);\n\n      return length + dataLength;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.timestamp.byteLength() + this.data.length;\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.data.copy(buffer, offset + length);\n    }\n  }\n\n  class AddressMessage {\n    constructor(address = new ChunkAddress()) {\n      this.address = address;\n    }\n\n    read(buffer, offset) {\n      return this.address.read(buffer, offset);\n    }\n\n    byteLength() {\n      return this.address.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n    }\n  }\n\n  class AckMessage {\n    constructor(address = new ChunkAddress(), delaySample = new Timestamp()) {\n      this.type = MessageTypes.ACK;\n      this.address = address;\n      this.delaySample = delaySample;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.delaySample.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.delaySample.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.delaySample.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class HaveMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.HAVE;\n    }\n  }\n\n  class IntegrityMessage {\n    constructor(address = new ChunkAddress(), hash = new IntegrityHash()) {\n      this.type = MessageTypes.INTEGRITY;\n      this.address = address;\n      this.hash = hash;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.hash.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.hash.byteLength();\n    }\n\n    write(buffer, offset) {\n      this.address.write(buffer, offset);\n      this.hash.write(buffer, offset + this.address.byteLength());\n    }\n  }\n\n  class SignedIntegrityMessage {\n    constructor(\n      address = new ChunkAddress(),\n      timestamp = new Timestamp(),\n      signature = new LiveSignature(),\n    ) {\n      this.type = MessageTypes.SIGNED_INTEGRITY;\n      this.address = address;\n      this.timestamp = timestamp;\n      this.signature = signature;\n    }\n\n    read(buffer, offset) {\n      let length = this.address.read(buffer, offset);\n      length += this.timestamp.read(buffer, offset + length);\n      length += this.signature.read(buffer, offset + length);\n      return length;\n    }\n\n    byteLength() {\n      return this.address.byteLength() + this.timestamp.byteLength() + this.signature.byteLength();\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.address.write(buffer, offset);\n      length += this.address.byteLength();\n\n      this.timestamp.write(buffer, offset + length);\n      length += this.timestamp.byteLength();\n\n      this.signature.write(buffer, offset + length);\n    }\n  }\n\n  class RequestMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.REQUEST;\n    }\n  }\n\n  class CancelMessage extends AddressMessage {\n    constructor(address) {\n      super(address);\n      this.type = MessageTypes.CANCEL;\n    }\n  }\n\n  class EmptyMessage {\n    read() {\n      return 0;\n    }\n\n    byteLength() {\n      return 0;\n    }\n\n    write() {}\n  }\n\n  class ChokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.CHOKE;\n    }\n  }\n\n  class UnchokeMessage extends EmptyMessage{\n    constructor() {\n      super();\n      this.type = MessageTypes.UNCHOKE;\n    }\n  }\n\n  const messageRecordTypes = {\n    [MessageTypes.HANDSHAKE]: HandshakeMessage,\n    [MessageTypes.DATA]: DataMessage,\n    [MessageTypes.ACK]: AckMessage,\n    [MessageTypes.HAVE]: HaveMessage,\n    [MessageTypes.INTEGRITY]: IntegrityMessage,\n    [MessageTypes.SIGNED_INTEGRITY]: SignedIntegrityMessage,\n    [MessageTypes.REQUEST]: RequestMessage,\n    [MessageTypes.CANCEL]: CancelMessage,\n    [MessageTypes.CHOKE]: ChokeMessage,\n    [MessageTypes.UNCHOKE]: UnchokeMessage,\n  };\n\n  class Messages {\n    constructor(values = []) {\n      this.values = values;\n      this.buffer = null;\n      this.offset = 0;\n    }\n\n    static from(values) {\n      if (values instanceof Messages) {\n        return values;\n      }\n      if (Array.isArray(values)) {\n        return new Messages(values);\n      }\n      throw new Error('unable to create Messages from unsupported type');\n    }\n\n    next() {\n      if (this.offset >= this.buffer.length) {\n        return;\n      }\n\n      const messageType = this.buffer.readUInt8(this.offset);\n      this.offset += 1;\n\n      const RecordType = messageRecordTypes[messageType];\n      const message = new RecordType();\n      this.values.push(message);\n\n      this.offset += message.read(this.buffer, this.offset);\n\n      return message;\n    }\n\n    toArray() {\n      // eslint-disable-next-line no-empty\n      while (this.next()) {}\n      return this.values;\n    }\n\n    read(buffer, offset) {\n      this.buffer = buffer;\n      this.offset = offset;\n      return 0;\n    }\n\n    byteLength() {\n      return this.values.reduce((length, message) => length + message.byteLength() + 1, 0);\n    }\n\n    write(buffer, offset) {\n      let length = 0;\n\n      this.values.forEach(message => {\n        buffer.writeUInt8(message.type, offset + length);\n        length += 1;\n\n        message.write(buffer, offset + length);\n        length += message.byteLength();\n      });\n\n      return length;\n    }\n  }\n\n  class Datagram {\n    constructor(channelId = 0, messages = []) {\n      this.channelId = channelId;\n      this.messages = Messages.from(messages);\n    }\n\n    read(data) {\n      const buffer = Buffer.from(data);\n\n      let length = 0;\n\n      this.channelId = buffer.readUInt32BE(0);\n      length += 4;\n\n      length += this.messages.read(buffer, length);\n\n      return length;\n    }\n\n    byteLength() {\n      return this.messages.byteLength() + 4;\n    }\n\n    write(buffer) {\n      let length = 0;\n\n      buffer.writeUInt32BE(this.channelId, 0);\n      length += 4;\n\n      length += this.messages.write(buffer, length);\n\n      return length;\n    }\n\n    toBuffer() {\n      const buffer = Buffer.alloc(this.byteLength());\n      this.write(buffer);\n      return buffer;\n    }\n\n    static from(buffer) {\n      const datagram = new Datagram();\n      datagram.read(buffer);\n      return datagram;\n    }\n  }\n\n  return {\n    VersionProtocolOption,\n    MinimumVersionProtocolOption,\n    SwarmIdentifierProtocolOption,\n    ContentIntegrityProtectionMethodProtocolOption,\n    MerkleHashTreeFunctionProtocolOption,\n    LiveSignatureAlgorithmProtocolOption,\n    ChunkAddressingMethodProtocolOption,\n    LiveDiscardWindowProtocolOption,\n    SupportedMessagesProtocolOption,\n    ChunkSizeProtocolOption,\n    HandshakeMessage,\n    Timestamp,\n    DataMessage,\n    AckMessage,\n    HaveMessage,\n    IntegrityMessage,\n    SignedIntegrityMessage,\n    RequestMessage,\n    CancelMessage,\n    ChokeMessage,\n    UnchokeMessage,\n    Datagram,\n    LiveSignature,\n    IntegrityHash,\n    ChunkAddress,\n  };\n};\n","function createMask(bits) {\n  let mask = 0;\n  for (let i = 0; i < bits; i ++) {\n    mask = (mask << 1) | 1;\n  }\n  return mask;\n}\n\nfunction applyMask(byte, mask, value) {\n  if (value) {\n    return byte | mask;\n  }\n  return byte & (255 ^ mask);\n}\n\nexport default class BitArray {\n  constructor(capacity = 0) {\n    this.offset = 0;\n    this.resize(capacity);\n  }\n\n  // TODO: copy old values..?\n  resize(capacity) {\n    this.capacity = capacity;\n    this.values = new Uint8Array(Math.ceil(capacity / 8));\n  }\n\n  adjustOffset(index) {\n    const {offset} = this;\n    const distance = (index - offset) - this.capacity;\n    if (distance <= 0) {\n      return;\n    }\n\n    this.offset += distance;\n    this.unsafelySetRange(offset + 1, offset + distance + 1, false);\n  }\n\n  getByteIndex(index) {\n    return Math.floor(index / 8) % this.values.length;\n  }\n\n  getBitIndex(index) {\n    return index % 8;\n  }\n\n  getIndexValue(byteIndex, bitIndex) {\n    const byteOffset = this.offset % (this.values.length * 8);\n    const offset = byteIndex < byteOffset\n      ? this.offset + (this.values.length * 8) - byteOffset\n      : this.offset;\n    return offset + (byteIndex * 8 + bitIndex);\n  }\n\n  setRange(start, end, value = true) {\n    if (end - start === 1) {\n      this.set(start, value);\n      return;\n    }\n\n    if (end <= this.offset) {\n      return;\n    }\n    start = Math.max(start, this.offset);\n\n    this.adjustOffset(end);\n    this.unsafelySetRange(start, end, value);\n  }\n\n  unsafelySetRange(start, end, value = true, fillEndByte = false) {\n    if (end - start >= this.capacity) {\n      this.values.fill(value ? 255 : 0);\n      return;\n    }\n\n    const startByteIndex = this.getByteIndex(start);\n    const endByteIndex = this.getByteIndex(end);\n    const startBitIndex = this.getBitIndex(start);\n    const endBitIndex = this.getBitIndex(end);\n\n    if (startByteIndex > endByteIndex) {\n      this.unsafelySetIndexRange(startByteIndex, startBitIndex, this.capacity, 0, value);\n      this.unsafelySetIndexRange(0, 0, endByteIndex, endBitIndex, value);\n      return;\n    }\n\n    this.unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value);\n  }\n\n  unsafelySetIndexRange(startByteIndex, startBitIndex, endByteIndex, endBitIndex, value) {\n    let startMask = createMask(8 - startBitIndex);\n    let endMask = 255 ^ createMask(8 - endBitIndex);\n\n    if (startByteIndex === endByteIndex) {\n      const mask = startMask & endMask;\n      this.values[startByteIndex] = applyMask(this.values[startByteIndex], mask, value);\n      return;\n    }\n\n    this.values[startByteIndex] = applyMask(this.values[startByteIndex], startMask, value);\n    this.values[endByteIndex] = applyMask(this.values[endByteIndex], endMask, value);\n\n    if (endByteIndex - startByteIndex > 1) {\n      this.values.fill(value ? 255 : 0, startByteIndex + 1, endByteIndex);\n    }\n  }\n\n  unsetRange(start, end) {\n    this.setRange(start, end, false);\n  }\n\n  set(index, value = true) {\n    if (index < this.offset) {\n      return;\n    }\n\n    this.adjustOffset(index);\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    this.values[byteIndex] = applyMask(this.values[byteIndex], mask, value);\n  }\n\n  unset(index) {\n    this.set(index, false);\n  }\n\n  get(index) {\n    if (index <= this.offset || index > this.offset + this.capacity) {\n      return false;\n    }\n\n    const byteIndex = this.getByteIndex(index);\n    const mask = 1 << (7 - this.getBitIndex(index));\n    return (this.values[byteIndex] & mask) !== 0;\n  }\n\n  toValueArray() {\n    const values = [];\n    for (let i = 1; i <= this.capacity; i ++) {\n      if (this.get(this.offset + i)) {\n        values.push(this.offset + i);\n      }\n    }\n    return values;\n  }\n\n  min() {\n    for (let i = this.offset; i <= this.offset + this.values.length * 8; i += 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const firstBit = Math.floor(i / 8) * 8;\n        for (let j = firstBit; j < firstBit + 8; j ++) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return Infinity;\n  }\n\n  max() {\n    for (let i = this.values.length * 8 + this.offset; i >= this.offset; i -= 8) {\n      if (this.values[this.getByteIndex(i)] !== 0) {\n        const lastBit = Math.ceil((i + 1) / 8) * 8;\n        for (let j = lastBit; j > lastBit - 8; j --) {\n          if (this.get(j)) {\n            return j;\n          }\n        }\n      }\n    }\n    return -Infinity;\n  }\n}\n","export class Flow {\n  constructor() {\n    this.lastVirtualFinish = 0;\n    this.nextVirtualFinish = Infinity;\n    this.queue = [];\n  }\n\n  computeWeight() {\n    return 1;\n  }\n}\n\nexport class Queue {\n  constructor(rate) {\n    this.rate = rate;\n    this.totalQueueSize = 0;\n    this.flows = [];\n  }\n\n  addFlow(flow) {\n    return this.flows.push(flow);\n  }\n\n  removeFlow(flow) {\n    const index = this.flows.indexOf(flow);\n    if (index !== -1) {\n      this.flows.splice(index, 1);\n    }\n  }\n\n  enqueue(flow, size, value) {\n    const weight = flow.computeWeight(this);\n    const rate = this.rate / weight;\n    const virtualFinish = Math.max(Date.now(), flow.lastVirtualFinish) + size / rate;\n\n    flow.queue.push({\n      virtualFinish,\n      size,\n      value,\n    });\n    flow.lastVirtualFinish = virtualFinish;\n    if (flow.queue.length === 1) {\n      flow.nextVirtualFinish = virtualFinish;\n    }\n  }\n\n  getNextScheduledFlow() {\n    let minVirtualFinish = Infinity;\n    let flow = null;\n    for (let i = 0; i < this.flows.length; i ++) {\n      if (this.flows[i].nextVirtualFinish < minVirtualFinish) {\n        flow = this.flows[i];\n        minVirtualFinish = flow.nextVirtualFinish;\n      }\n    }\n\n    return flow;\n  }\n\n  peek() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    return {\n      flow,\n      task: flow.queue[0],\n    };\n  }\n\n  dequeue() {\n    const flow = this.getNextScheduledFlow();\n\n    if (flow === null) {\n      return null;\n    }\n\n    const task = flow.queue.shift();\n\n    flow.nextVirtualFinish = flow.queue.length !== 0\n      ? flow.queue[0].virtualFinish\n      : Infinity;\n\n    return {flow, task};\n  }\n}\n\nexport default {\n  Queue,\n  Flow,\n};\n","import BitArray from '../bitarray';\nimport Address from './address';\nimport wfq from '../wfq';\nimport EMA from '../ema';\nimport LEDBAT from '../ledbat';\nimport RingBuffer from '../RingBuffer';\nimport fenwick from 'fenwick-tree';\nimport binSearch from '../binSearch';\n// import TinyQeueue from 'tinyqueue';\n\nexport class AvailabilityMap {\n  constructor(capacity) {\n    this.values = new BitArray(capacity);\n  }\n\n  // TODO: ignore very large discard windows from remote peers...\n  setCapacity(capacity) {\n    this.values.resize(capacity);\n  }\n\n  set(address, value) {\n    this.values.setRange(address.start / 2, address.end / 2 + 1, value);\n  }\n\n  get({start, end = start}) {\n    for (let i = start; i <= end; i += 2) {\n      if (!this.values.get(i / 2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  min() {\n    return this.values.min() * 2;\n  }\n\n  max() {\n    return this.values.max() * 2;\n  }\n}\n\nexport class BinRingBuffer extends RingBuffer {\n  advanceLastBin(bin) {\n    super.advanceLastIndex(bin / 2);\n  }\n\n  setRange({start}, values) {\n    for (let i = 0; i < values.length; i ++) {\n      super.set(start / 2 + i, values[i]);\n    }\n  }\n\n  set({bin}, value) {\n    super.set(bin / 2, value);\n  }\n\n  get({bin}) {\n    return super.get(bin / 2);\n  }\n\n  forEach(callback) {\n    for (let i = this.lastIndex - this.capacity; i < this.lastIndex; i ++) {\n      if (callback(this.get(i), i * 2) === false) {\n        break;\n      }\n    }\n  }\n}\n\nexport class ScarcityMap {\n  constructor(capacity) {\n    this.capacity = Math.pow(2, Math.ceil(Math.log2(capacity)));\n    this.left = new Uint32Array(this.capacity).fill(0);\n    this.right = new Uint32Array(this.capacity).fill(0);\n    this.leftOffset = 0;\n    this.leftTotal = 0;\n    this.rightTotal = 0;\n  }\n\n  get rightOffset() {\n    return this.leftOffset + this.capacity;\n  }\n\n  get rolloverThreshold() {\n    return this.leftOffset + this.capacity * 2;\n  }\n\n  get purgeThreshold() {\n    return this.leftOffset + this.capacity * 3;\n  }\n\n  update(index, value) {\n    if (index > this.purgeThreshold) {\n      this.leftOffset = index;\n      this.left.fill(0);\n      this.right.fill(0);\n      this.leftTotal = this.rightTotal = 0;\n    }\n\n    if (index > this.rolloverThreshold) {\n      this.leftOffset += this.capacity;\n      [this.left, this.right] = [this.left, this.right];\n      this.right.fill(0);\n      this.leftTotal = this.rightTotal;\n      this.rightTotal = 0;\n    }\n\n    if (index >= this.rightOffset) {\n      fenwick.update(this.right, index - this.rightOffset, value);\n      this.rightTotal += value;\n    } else if (index >= this.leftOffset) {\n      fenwick.update(this.left, index - this.leftOffset, value);\n      this.leftTotal += value;\n    }\n  }\n\n  query(index) {\n    if (index >= this.rolloverThreshold) {\n      return this.leftTotal + this.rightTotal;\n    } else if (index >= this.rightOffset) {\n      return this.leftTotal + fenwick.query(this.right, index - this.rightOffset);\n    } else if (index >= this.leftOffset) {\n      return fenwick.query(this.left, index - this.leftOffset);\n    }\n    return 0;\n  }\n\n  queryRange(start, end) {\n    return this.query(end) - this.query(start - 1);\n  }\n\n  findSmallValue(fuzz = 0) {\n    const index = binSearch(\n      this.rolloverThreshold - this.leftOffset,\n      (mid, left, right) => {\n        const leftSum = this.queryRange(left, mid - 1);\n        const rightSum = this.queryRange(mid, right);\n\n        if (leftSum === rightSum) return 0;\n        if (leftSum === 0) return 1;\n        if (rightSum === 0) return -1;\n        return (rightSum - leftSum) * (Math.random() < fuzz ? -1 : 1);\n      },\n    );\n\n    return index * 2;\n  }\n}\n\nexport class BinScarcityMap {\n  constructor(capacity) {\n    this.map = new ScarcityMap(capacity);\n  }\n\n  update({bin}, value) {\n    this.map.update(bin / 2, value);\n  }\n\n  findBin() {\n    return this.map.findSmallValue(0.02) * 2;\n  }\n}\n\nexport class RateMeter {\n  constructor(windowMs, sampleWindowMs = 100) {\n    this.firstSampleWindow = Math.floor(Date.now() / sampleWindowMs);\n    this.lastSampleWindow = this.firstSampleWindow;\n    this.windowMs = windowMs;\n    this.sampleWindowMs = sampleWindowMs;\n    this.sum = 0;\n    this.values = new Array(Math.ceil(windowMs / sampleWindowMs));\n\n    this.values.fill(0);\n  }\n\n  adjustSampleWindow() {\n    const sampleWindow = Math.floor(Date.now() / this.sampleWindowMs);\n\n    for (let i = this.lastSampleWindow + 1; i <= sampleWindow; i ++) {\n      const index = i % this.values.length;\n      this.sum -= this.values[index];\n      this.values[index] = 0;\n    }\n    this.lastSampleWindow = sampleWindow;\n  }\n\n  update(value) {\n    this.adjustSampleWindow();\n    this.sum += value;\n    this.values[this.lastSampleWindow % this.values.length] += value;\n  }\n\n  value() {\n    this.adjustSampleWindow();\n    const accumulatedMs = Math.min(\n      (this.lastSampleWindow - this.firstSampleWindow) * this.sampleWindowMs,\n      this.windowMs,\n    );\n    return this.sum / accumulatedMs;\n  }\n}\n\nexport class ChunkRateMeter extends RateMeter {\n  constructor(windowMs = 15000) {\n    super(windowMs);\n    this.lastEndBin = 0;\n  }\n\n  update({start, end}) {\n    if (this.lastHeadBin === 0) {\n      super.update((end - start) / 2);\n    } else if (end > this.lastEndBin) {\n      super.update((end - this.lastEndBin) / 2);\n      this.lastEndBin = end;\n    }\n  }\n}\n\nexport class RequestFlow extends wfq.Flow {\n  constructor(id) {\n    super();\n    this.id = id;\n    this.queueSize = 0;\n  }\n\n  computeWeight(queue) {\n    return this.queueSize / queue.totalQueueSize;\n  }\n}\n\nexport class RequestQueue extends wfq.Queue {\n  constructor(rate) {\n    super(rate);\n    this.totalQueueSize = 0;\n  }\n\n  enqueue(flow, size, value) {\n    this.totalQueueSize += size;\n    flow.queueSize += size;\n    super.enqueue(flow, size, value);\n  }\n\n  cancel(flow, filter) {\n    flow.queue = flow.queue.filter(task => {\n      const remove = filter(task.value);\n\n      if (remove) {\n        this.totalQueueSize -= task.size;\n        flow.queueSize -= task.size;\n      }\n\n      return !remove;\n    });\n  }\n\n  dequeue() {\n    const result = super.dequeue();\n    if (result === null) {\n      return null;\n    }\n\n    this.totalQueueSize -= result.task.size;\n    result.flow.queueSize -= result.task.size;\n\n    return result;\n  }\n}\n\nexport class SchedulerChunkState {\n  constructor(bin) {\n    this.bin = bin;\n    this.reset();\n  }\n\n  reset() {\n    this.availableCopies = 0;\n    this.requestTime = [0, 0];\n    this.requestPeerId = 0;\n\n    this.requested = false;\n    this.received = false;\n    this.verified = false;\n  }\n}\n\nexport class SchedulerChunkRequestMap {\n  constructor() {\n    this.valueByBin = {};\n    this.head = undefined;\n    this.tail = undefined;\n    this.length = 0;\n  }\n\n  insert(address) {\n    const now = Date.now();\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      const value = {\n        address: Address.fromBase(i),\n        createdAt: now,\n        next: undefined,\n        prev: undefined,\n      };\n      this.valueByBin[i] = value;\n\n      if (this.head === undefined) {\n        this.head = value;\n      } else {\n        this.tail.next = value;\n      }\n      value.prev = this.tail;\n      this.tail = value;\n\n      this.length ++;\n    }\n  }\n\n  get({bin}) {\n    return this.valueByBin[bin];\n  }\n\n  remove({bin}) {\n    const value = this.valueByBin[bin];\n    if (value === undefined) {\n      return;\n    }\n    delete this.valueByBin[bin];\n\n    if (this.head === value) {\n      this.head = value.next;\n    }\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.prev !== undefined) {\n      value.prev.next = value.next;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = value.prev;\n    }\n\n    this.length --;\n  }\n\n  peek() {\n    return this.head;\n  }\n\n  pop() {\n    if (this.head === undefined) {\n      return;\n    }\n    const value = this.head;\n\n    this.head = value.next;\n    if (this.tail === value) {\n      this.tail = value.prev;\n    }\n    if (value.next !== undefined) {\n      value.next.prev = undefined;\n    }\n\n    delete this.valueByBin[value.address.bin];\n\n    this.length --;\n\n    return value;\n  }\n}\n\nexport class SchedulerChunkMap extends BinRingBuffer {\n  createEmptyValue(bin, value) {\n    if (value === undefined) {\n      return new SchedulerChunkState(bin);\n    }\n\n    // put the peer map here and when we advance the bin meme update\n    // the availability map here\n\n    value.reset();\n    return value;\n  }\n}\n\nexport class SchedulerPeerState {\n  constructor(peer, requestFlow) {\n    this.peer = peer;\n    this.requestFlow = requestFlow;\n    this.availableChunks = new AvailabilityMap();\n\n    this.ledbat = new LEDBAT();\n\n    // this.rttMean = new EMA(0.125);\n    // this.rttVar = new EMA(0.25);\n\n    this.rttMean = new EMA(0.05);\n    this.rttVar = new EMA(0.05);\n\n    this.chunkIntervalMean = new EMA(0.25);\n    this.chunkRate = new RateMeter(15000);\n    this.wasteRate = new RateMeter(15000);\n    this.lastChunkTime = null;\n\n    this.requestTimes = new BinRingBuffer();\n\n    this.requestedChunks = new SchedulerChunkRequestMap();\n    this.sentRequests = new SchedulerChunkRequestMap();\n\n    this.timeouts = 0;\n    this.validChunks = 0;\n    this.invalidChunks = 0;\n\n    this.requestQueue = [];\n\n    this.sentChunks = new AvailabilityMap();\n    this.receivedChunks = new AvailabilityMap();\n  }\n}\n\nexport class Scheduler {\n  constructor(chunkSize, clientOptions) {\n    const {\n      liveDiscardWindow,\n      uploadRateLimit,\n    } = clientOptions;\n\n    this.chunkSize = chunkSize;\n    this.liveDiscardWindow = liveDiscardWindow;\n\n    this.peerStates = {};\n    // this.chunkStates = new SchedulerChunkMap(liveDiscardWindow);\n    this.loadedChunks = new AvailabilityMap(liveDiscardWindow);\n    this.peerCount = 0;\n\n    this.chunkRate = new ChunkRateMeter();\n\n    this.requestQueue = new RequestQueue(uploadRateLimit / 1000);\n\n    this.timers = {};\n\n    this.lastExportedBin = -Infinity;\n    this.lastCompletedBin = -Infinity;\n    this.requestedChunks = new AvailabilityMap(liveDiscardWindow);\n\n    // this.scarcityMap = new BinScarcityMap(liveDiscardWindow);\n    // this.binQueue = new TinyQeueue([], (a, b) => {\n    //   return a.bin - b.bin;\n    // });\n\n    // TODO: up/down regulate when we're downloading slower or faster than the\n    // stream's average bit rate?\n    this.priorityBinThreshold = 4;\n    // window.setUrgencyThreshold = v => this.priorityBinThreshold = v;\n\n    this.totalSends = 0;\n    this.totalRequests = 0;\n    this.totalRequestsReceived = 0;\n    this.totalReceived = 0;\n    this.totalAdded = 0;\n    this.totalCancelled = 0;\n    this.ackUnknownSend = 0;\n    this.totalDroppedRequests = 0;\n    this.sendDelay = new EMA(0.05);\n    // setInterval(this.debug.bind(this), 1000);\n\n    this.nextSendTime = 0;\n    this.nextSendTimeout = 0;\n  }\n\n  debug() {\n    console.log('---');\n    Object.values(this.peerStates).forEach((peerState) => {\n      if (!peerState.peer.isReady()) {\n        return;\n      }\n\n      let cto = peerState.ledbat.cto / (peerState.ledbat.cwnd / this.chunkSize);\n      const timeout = Math.min(cto, 1000);\n\n      const availableChunks = peerState.availableChunks;\n\n      const firstLoadedChunk = this.loadedChunks.min();\n      const firstRequestedChunk = this.requestedChunks.min();\n      const startBin = Math.max(\n        availableChunks.min(),\n        isFinite(firstLoadedChunk) ? firstLoadedChunk : -Infinity,\n        isFinite(firstRequestedChunk) ? firstLoadedChunk : -Infinity,\n        this.lastCompletedBin,\n      );\n      const lastAvailableBin = Math.min(availableChunks.max(), startBin + this.liveDiscardWindow * 2);\n\n      const planFor = Math.min(1000, peerState.ledbat.rttMean.value() * 4);\n\n      const dip = peerState.chunkIntervalMean.value() || 0;\n      const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n      const cwnd = firstPlanPick - peerState.sentRequests.length;\n\n      console.log(JSON.stringify({\n        peer_remoteId: peerState.peer.remoteId,\n        peer_localId: peerState.peer.localId,\n        sentRequests: peerState.sentRequests.length,\n        swift_rtt: peerState.rttMean.value(),\n        swift_rttvar: peerState.rttVar.value(),\n        swift_chunkIntervalMean: peerState.chunkIntervalMean.value(),\n        chunkRate: peerState.chunkRate.value(),\n        wasteRate: peerState.wasteRate.value(),\n        swift_cwnd: cwnd,\n        ledbat_cwnd: peerState.ledbat.cwnd,\n        ledbat_cto: peerState.ledbat.cto,\n        ledbat_currentDelay: peerState.ledbat.currentDelay.getMin(),\n        ledbat_baseDelay: peerState.ledbat.baseDelay.getMin(),\n        ledbat_rttMean: peerState.ledbat.rttMean.value(),\n        ledbat_rttVar: peerState.ledbat.rttVar.value(),\n        ledbat_rtt: peerState.ledbat.rtt,\n        ledbat_flightSize: peerState.ledbat.flightSize,\n        // requestedChunks: peerState.requestedChunks,\n        timeouts: peerState.timeouts,\n        validChunks: peerState.validChunks,\n        invalidChunks: peerState.invalidChunks,\n        timeout: timeout,\n        picker_startBin: startBin,\n        picker_lastAvailableBin: lastAvailableBin,\n      }, true, 2));\n    });\n\n    console.log(JSON.stringify({\n      totalSends: this.totalSends,\n      totalRequests: this.totalRequests,\n      totalRequestsReceived: this.totalRequestsReceived,\n      totalDroppedRequests: this.totalDroppedRequests,\n      totalReceived: this.totalReceived,\n      totalAdded: this.totalAdded,\n      totalCancelled: this.totalCancelled,\n      ackUnknownSend: this.ackUnknownSend,\n      minIncompleteBin: this.lastCompletedBin,\n      sendDelay: this.sendDelay.value(),\n      picker_firstLoadedChunk: this.loadedChunks.min(),\n      picker_firstRequestedChunk: this.requestedChunks.min(),\n      chunkRate: this.chunkRate.value(),\n    }, true, 2));\n    // this.totalSends = 0;\n    // this.totalRequests = 0;\n    // this.totalRequestsReceived = 0;\n    // this.totalReceived = 0;\n    // // this.ackUnknownSend = 0;\n    // this.totalAdded = 0;\n    // this.totalCancelled = 0;\n    // this.totalDroppedRequests = 0;\n  }\n\n  update(peerState, update) {\n    if (!peerState.peer.isReady()) {\n      this.timers[peerState.localId] = setTimeout(update, 1000);\n      return;\n    }\n\n    const {\n      availableChunks,\n      ledbat,\n      sentRequests,\n    } = peerState;\n\n    const now = Date.now();\n    // const planFor = ledbat.rttMean.value();\n    // const planFor = ledbat.rttMean.value() * 2 + ledbat.rttVar.value() * 4;\n    const planFor = Math.max(1000, ledbat.rttMean.value() * 4);\n    const timeoutThreshold = now - Math.min(1000, ledbat.cto) * 2;\n\n    const dip = peerState.chunkIntervalMean.value() || 0;\n    const firstPlanPick = dip === 0 ? 1 : Math.max(1, planFor / dip);\n    const cwnd = firstPlanPick - sentRequests.length;\n\n    const cancelledRequests = [];\n    while (sentRequests.peek() !== undefined\n      && sentRequests.peek().createdAt < timeoutThreshold) {\n      cancelledRequests.push(sentRequests.pop());\n    }\n\n    if (cancelledRequests.length !== 0) {\n      this.totalCancelled += cancelledRequests.length;\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        sentRequests.remove(address);\n      });\n\n      ledbat.onDataLoss(cancelledRequests.length * this.chunkSize);\n      // console.log(cancelledRequests);\n    }\n\n    ledbat.digestDelaySamples();\n\n    const requestAddresses = [];\n\n    const startBin = Math.max(\n      this.loadedChunks.values.offset * 2 + 2,\n      this.requestedChunks.values.offset * 2 + 2,\n      availableChunks.min(),\n      this.lastCompletedBin,\n    );\n    const endBin = Math.min(\n      startBin + this.liveDiscardWindow * 2,\n      availableChunks.max(),\n    );\n    const priorityBinThreshold = this.lastCompletedBin + this.priorityBinThreshold;\n\n    for (let i = startBin; i < endBin && requestAddresses.length < cwnd; i += 2) {\n      const address = Address.fromBase(i);\n      if (!this.loadedChunks.get(address)\n        && !this.requestedChunks.get(address)\n        && availableChunks.get(address)) {\n\n        if (address.bin < priorityBinThreshold || Math.random() < 0.1) {\n          requestAddresses.push(address);\n          sentRequests.insert(address);\n          this.requestedChunks.set(address);\n        }\n      }\n    }\n\n    if (this.lastCompletedBin === -Infinity && requestAddresses.length !== 0) {\n      const firstRequestedBin = requestAddresses[0].bin;\n      this.lastCompletedBin = firstRequestedBin;\n      this.lastExportedBin = firstRequestedBin - 2;\n    }\n\n    if (cancelledRequests.length !== 0) {\n      cancelledRequests.forEach(({address}) => {\n        this.requestedChunks.set(address, false);\n        peerState.peer.sendCancel(address);\n      });\n    }\n\n    if (requestAddresses.length !== 0) {\n      this.totalRequests += requestAddresses.length;\n      peerState.peer.sendRequest(...requestAddresses);\n\n      requestAddresses.forEach(address => {\n        if (peerState.requestTimes.get(address) === undefined) {\n          peerState.requestTimes.set(address, now);\n        }\n      });\n    }\n\n    while (ledbat.flightSize < ledbat.cwnd && peerState.requestQueue.length) {\n      const requestedAddress = peerState.requestQueue.shift();\n      if (requestedAddress !== undefined) {\n        const requestedChunk = peerState.requestedChunks.get(requestedAddress);\n        if (requestedChunk !== undefined) {\n          requestedChunk.sentAt = now;\n          peerState.ledbat.addSent(this.chunkSize);\n          peerState.peer.sendChunk(requestedAddress);\n          this.totalSends ++;\n        }\n      }\n\n      peerState.sentChunks.set(requestedAddress);\n\n      // TODO: volunteer bin we have and they don't?\n    }\n\n    peerState.peer.flush();\n    let sendInterval = Math.min(1000, (ledbat.rttMean.value() || 0) / (ledbat.cwnd / this.chunkSize));\n    this.timers[peerState.localId] = setTimeout(update, sendInterval);\n  }\n\n  addPeer(peer) {\n    const {localId} = peer;\n\n    const requestFlow = new RequestFlow(localId);\n    this.requestQueue.addFlow(requestFlow);\n\n    const peerState = new SchedulerPeerState(peer, requestFlow);\n    this.peerStates[localId] = peerState;\n\n    const update = () => this.update(peerState, update);\n    this.timers[localId] = setTimeout(update, 1000);\n  }\n\n  removePeer({localId}) {\n    const peerState = this.peerStates[localId];\n    if (peerState === undefined) {\n      return;\n    }\n\n    const {\n      requestFlow,\n      sentRequests,\n    } = peerState;\n\n    this.requestQueue.removeFlow(requestFlow);\n\n    this.totalCancelled += sentRequests.length;\n    while (sentRequests.length) {\n      const {address} = sentRequests.pop();\n      this.requestedChunks.set(address, false);\n    }\n\n    delete this.peerStates[localId];\n\n    clearTimeout(this.timers[localId]);\n  }\n\n  getPeerState({localId}) {\n    return this.peerStates[localId];\n  }\n\n  getRecentChunks() {\n    // TODO: how to pick this... maybe remote discard window size?\n    // const startBin = this.loadedChunks.max();\n    // const startBin = this.loadedChunks.max() - 32;\n    const startBin = this.lastCompletedBin - 32;\n\n    // bail if no chunks have been loaded yet\n    if (!isFinite(startBin)) {\n      return [];\n    }\n\n    const bins = [];\n\n    const endBin = this.loadedChunks.max();\n    for (let i = startBin; i <= endBin; i += 2) {\n      const address = new Address(i);\n      if (this.loadedChunks.get(address)) {\n        bins.push(address);\n      }\n    }\n\n    return bins;\n  }\n\n  setLiveDiscardWindow(peer, liveDiscardWindow) {\n    this.getPeerState(peer).availableChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).requestTimes.setCapacity(liveDiscardWindow);\n\n    this.getPeerState(peer).sentChunks.setCapacity(liveDiscardWindow);\n    this.getPeerState(peer).receivedChunks.setCapacity(liveDiscardWindow);\n  }\n\n  markChunkReceived(peer, address, delaySample) {\n    const now = Date.now();\n\n    this.totalReceived ++;\n\n    const peerState = this.getPeerState(peer);\n    if (peerState === undefined) {\n      return;\n    }\n\n    if (this.loadedChunks.get(address)) {\n      peerState.wasteRate.update(1);\n    }\n\n    const request = peerState.sentRequests.get(address);\n    if (request === undefined) {\n      return;\n    }\n\n    if (peerState.lastChunkTime !== null) {\n      const chunkInterval = now - peerState.lastChunkTime;\n      peerState.chunkIntervalMean.update(chunkInterval);\n    }\n    peerState.lastChunkTime = now;\n    if (!this.loadedChunks.get(address)) {\n      peerState.chunkRate.update(1);\n    }\n\n    const requestTime = peerState.requestTimes.get(address);\n    if (requestTime !== undefined) {\n      peerState.ledbat.addRttSample(now - requestTime);\n    }\n\n    // peerState.rttMean.update(rtt);\n    // peerState.rttVar.update(Math.abs(rtt - peerState.rttMean.value()));\n\n    // TODO: double check LEDBAT to make sure we shouldn't be doing\n    // something here\n\n    peerState.sentRequests.remove(address);\n  }\n\n  markChunkVerified(peer, address) {\n    // this.chunkStates.get(address).verified = true;\n    this.getPeerState(peer).validChunks ++;\n    this.getPeerState(peer).receivedChunks.set(address);\n\n    // this.chunkStates.advanceLastBin(address.end);\n\n    this.chunkRate.update(address);\n    this.loadedChunks.set(address);\n\n    for (let i = this.lastCompletedBin; this.loadedChunks.get(Address.fromBase(i)); i += 2) {\n      this.lastCompletedBin = i;\n    }\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  getNewCompleteBins() {\n    const nextExportedBin = this.lastExportedBin + 2;\n    if (nextExportedBin <= this.lastCompletedBin) {\n      this.lastExportedBin = this.lastCompletedBin;\n      return [nextExportedBin, this.lastCompletedBin];\n    }\n  }\n\n  markChunkRejected(peer, address) {\n    this.requestedChunks.set(address, false);\n    this.getPeerState(peer).invalidChunks ++;\n  }\n\n  // mark an address available from a peer (HAVE)\n  markChunkAvailable(peer, address) {\n    for (let i = address.start; i <= address.end; i += 2) {\n      const address = Address.fromBase(i);\n\n      // this.binQueue.push(address);\n      // this.scarcityMap.update(address, 1);\n\n      if (!this.getPeerState(peer).availableChunks.get(address)) {\n        this.totalAdded ++;\n      }\n    }\n\n    this.getPeerState(peer).availableChunks.set(address);\n  }\n\n  // mark an address where chunks have been manually added ie. by an injector\n  markChunksLoaded(address) {\n    if (this.lastExportedBin === -Infinity) {\n      this.lastExportedBin = address.start - 2;\n    }\n\n    this.loadedChunks.set(address);\n    this.lastCompletedBin = address.start;\n\n    Object.values(this.peerStates).forEach(({availableChunks, peer}) => {\n      if (!availableChunks.get(address) && peer.isReady()) {\n        peer.sendHave(address);\n      }\n    });\n  }\n\n  markSendAcked(peer, address, delaySample) {\n    const peerState = this.getPeerState(peer);\n\n    peerState.ledbat.addDelaySample(delaySample, this.chunkSize);\n\n    const sentChunk = peerState.requestedChunks.get(address);\n    if (sentChunk === undefined) {\n      this.ackUnknownSend ++;\n      return;\n    }\n\n    // TODO: is this necessary?\n    if (sentChunk.sentAt) {\n      peerState.ledbat.addRttSample(Date.now() - sentChunk.sentAt);\n    }\n\n    peerState.requestedChunks.remove(address);\n  }\n\n  enqueueRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n\n    for (let i = address.start; i <= address.end; i += 2) {\n      this.totalRequestsReceived ++;\n      peerState.requestQueue.push(Address.fromBase(i));\n    }\n\n    peerState.requestedChunks.insert(address);\n  }\n\n  cancelRequest(peer, address) {\n    const peerState = this.getPeerState(peer);\n    const requestedChunk = peerState.requestedChunks.get(address);\n    if (requestedChunk && requestedChunk.sentAt) {\n      peerState.ledbat.onDataLoss(this.chunkSize);\n    }\n    peerState.requestedChunks.remove(address);\n\n    // this.requestQueue.cancel(\n    //   this.getPeerState(peer).requestFlow,\n    //   ({bin}) => address.containsBin(bin),\n    // );\n  }\n}\n","import {EventEmitter} from 'events';\nimport once from 'lodash.once';\nimport Address from './address';\nimport SwarmId from './swarmid';\nimport LEDBAT from '../ledbat';\nimport {\n  createChunkAddressFieldType,\n  createLiveSignatureFieldType,\n  createIntegrityHashFieldType,\n  createEncoding,\n} from './encoding';\nimport {\n  MaxChannelId,\n  ProtocolOptions,\n  MessageTypes,\n} from './constants';\nimport {\n  createMerkleHashTreeFunction,\n  createLiveSignatureVerifyFunction,\n  createLiveSignatureSignFunction,\n  createContentIntegrityVerifierFactory,\n} from './integrity';\nimport {\n  BinRingBuffer,\n  Scheduler,\n} from './scheduler';\n\nconst genericEncoding = createEncoding();\n\nconst BUFFER_SIZE = 3e7;\nconst MAX_UPLOAD_RATE = 1e6;\nconst HANDSHAKE_TIMEOUT = 5000;\n\nexport class Swarm extends EventEmitter {\n  constructor(uri, clientOptions) {\n    super();\n\n    const {swarmId} = uri;\n    const {\n      [ProtocolOptions.ContentIntegrityProtectionMethod]: contentIntegrityProtectionMethod,\n      [ProtocolOptions.MerkleHashTreeFunction]: merkleHashTreeFunction,\n      [ProtocolOptions.LiveSignatureAlgorithm]: liveSignatureAlgorithm,\n      [ProtocolOptions.ChunkAddressingMethod]: chunkAddressingMethod,\n      [ProtocolOptions.ChunkSize]: chunkSize,\n    } = uri.protocolOptions;\n    const {\n      liveDiscardWindow,\n      privateKey,\n    } = clientOptions;\n\n    this.uri = uri;\n\n    this.encoding = createEncoding(\n      createChunkAddressFieldType(chunkAddressingMethod, chunkSize),\n      createIntegrityHashFieldType(merkleHashTreeFunction),\n      createLiveSignatureFieldType(liveSignatureAlgorithm, swarmId),\n    );\n\n    const liveSignatureSignFunction = privateKey !== undefined\n      ? createLiveSignatureSignFunction(liveSignatureAlgorithm, privateKey)\n      : undefined;\n    this.contentIntegrity = createContentIntegrityVerifierFactory(\n      contentIntegrityProtectionMethod,\n      createMerkleHashTreeFunction(merkleHashTreeFunction),\n      createLiveSignatureVerifyFunction(liveSignatureAlgorithm, swarmId),\n      liveSignatureSignFunction,\n      liveDiscardWindow,\n    );\n\n    this.chunkBuffer = new BinRingBuffer(liveDiscardWindow);\n    this.scheduler = new Scheduler(chunkSize, clientOptions);\n\n    this.protocolOptions = [\n      new this.encoding.VersionProtocolOption(),\n      new this.encoding.MinimumVersionProtocolOption(),\n      new this.encoding.SwarmIdentifierProtocolOption(swarmId.toBuffer()),\n      new this.encoding.ContentIntegrityProtectionMethodProtocolOption(contentIntegrityProtectionMethod),\n      new this.encoding.MerkleHashTreeFunctionProtocolOption(merkleHashTreeFunction),\n      new this.encoding.LiveSignatureAlgorithmProtocolOption(liveSignatureAlgorithm),\n      new this.encoding.ChunkAddressingMethodProtocolOption(chunkAddressingMethod),\n      new this.encoding.ChunkSizeProtocolOption(chunkSize),\n      new this.encoding.LiveDiscardWindowProtocolOption(liveDiscardWindow),\n    ];\n  }\n\n  verifyProtocolOptions(protocolOptions) {\n    Object.entries(this.uri.protocolOptions)\n      .forEach(([protocolOption, value]) => {\n        if (protocolOptions[protocolOption] !== value) {\n          const protocolOptionName = ProtocolOptions.name(protocolOption);\n          throw new Error(`invalid peer options: ${protocolOptionName} mismatch`);\n        }\n      });\n  }\n\n  emitNewData() {\n    const newBins = this.scheduler.getNewCompleteBins();\n    if (newBins !== undefined) {\n      const [minNewBin, maxNewBin] = newBins;\n      const chunks = [];\n      for (let i = minNewBin; i <= maxNewBin; i += 2) {\n        const chunk = this.chunkBuffer.get(new Address(i));\n\n        if (chunk === undefined) {\n          // debugger;\n          continue;\n        }\n        chunks.push(chunk);\n      }\n      this.emit('data', chunks);\n    }\n  }\n}\n\nconst PeerState = {\n  CONNECTING: 1,\n  AWAITING_HANDSHAKE: 2,\n  READY: 3,\n  CHOKED: 4,\n  DISCONNECTING: 5,\n  CLOSED: 6,\n};\n\nclass PeerDataHandlerContext {\n  constructor(swarm) {\n    this.swarm = swarm;\n    this.integrityVerifier = null;\n  }\n\n  getContentIntegrityVerifier(address) {\n    if (this.integrityVerifier === null) {\n      this.integrityVerifier = this.swarm.contentIntegrity.createVerifier(address);\n    }\n    return this.integrityVerifier;\n  }\n}\n\n// TODO: disconnect inactive peers\nclass Peer {\n  constructor(swarm, channel, remoteId = 0, localId = Peer.createChannelId()) {\n    this.swarm = swarm;\n    this.channel = channel;\n    this.remoteId = remoteId;\n    this.localId = localId;\n    this.state = PeerState.CONNECTING;\n\n    this.handlers = {\n      [MessageTypes.HANDSHAKE]: this.handleHandshakeMessage.bind(this),\n      [MessageTypes.DATA]: this.handleDataMessage.bind(this),\n      [MessageTypes.HAVE]: this.handleHaveMessage.bind(this),\n      [MessageTypes.ACK]: this.handleAckMessage.bind(this),\n      [MessageTypes.INTEGRITY]: this.handleIntegrityMessage.bind(this),\n      [MessageTypes.SIGNED_INTEGRITY]: this.handleSignedIntegrityMessage.bind(this),\n      [MessageTypes.REQUEST]: this.handleRequestMessage.bind(this),\n      [MessageTypes.CANCEL]: this.handleCancelMessage.bind(this),\n      [MessageTypes.CHOKE]: this.handleChokeMessage.bind(this),\n      [MessageTypes.UNCHOKE]: this.handleUnchokeMessage.bind(this),\n    };\n\n    this.sendBuffer = [];\n\n    this.swarm.scheduler.addPeer(this);\n  }\n\n  static createChannelId() {\n    return Math.round(Math.random() * MaxChannelId);\n  }\n\n  init() {\n    this.sendHandshake();\n    this.flush();\n\n    this.state = PeerState.AWAITING_HANDSHAKE;\n  }\n\n  close() {\n    this.state = PeerState.CLOSED;\n    this.swarm.scheduler.removePeer(this);\n  }\n\n  handleData(data) {\n    const context = new PeerDataHandlerContext(this.swarm);\n    data.messages.toArray().forEach(message => this.handleMessage(message, context));\n  }\n\n  handleMessage(message, context) {\n    const handler = this.handlers[message.type];\n    if (handler === undefined) {\n      throw new Error('unsupported message type');\n    }\n\n    // console.log(MessageTypes.name(message.type), this.remoteId, message);\n    handler(message, context);\n  }\n\n  handleHandshakeMessage(handshake) {\n    const options = handshake.options.reduce((options, {type, value}) => ({...options, [type]: value}), {});\n\n    const liveDiscardWindow = options[ProtocolOptions.LiveDiscardWindow];\n    if (liveDiscardWindow !== undefined) {\n      this.swarm.scheduler.setLiveDiscardWindow(this, liveDiscardWindow);\n    }\n\n    this.swarm.verifyProtocolOptions(options);\n\n    this.remoteId = handshake.channelId;\n\n    // console.log('received handshake message while in state', this.state);\n    if (this.state !== PeerState.READY) {\n      this.sendHandshake();\n      this.swarm.scheduler.getRecentChunks().forEach(address => this.sendHave(address));\n      this.flush();\n    }\n\n    this.state = PeerState.READY;\n  }\n\n  handleDataMessage(message, context) {\n    const address = Address.from(message.address);\n    const delaySample = LEDBAT.computeOneWayDelay(message.timestamp.value);\n\n    this.swarm.scheduler.markChunkReceived(this, address, delaySample);\n\n    const {encoding} = this.swarm;\n    this.channel.send(new encoding.Datagram(\n      this.remoteId,\n      [new encoding.AckMessage(message.address, new encoding.Timestamp(delaySample))],\n    ));\n\n    context.getContentIntegrityVerifier(address).verifyChunk(address, message.data)\n      .then(() => {\n        this.swarm.chunkBuffer.set(address, message.data);\n        this.swarm.scheduler.markChunkVerified(this, address);\n        this.swarm.emitNewData();\n      })\n      .catch((err) => {\n        console.log('error validating chunk', err);\n        this.swarm.scheduler.markChunkRejected(this, address);\n      });\n  }\n\n  handleHaveMessage(message) {\n    this.swarm.scheduler.markChunkAvailable(this, Address.from(message.address));\n  }\n\n  handleAckMessage(message) {\n    const address = Address.from(message.address);\n    this.swarm.scheduler.markChunkAvailable(this, address);\n    this.swarm.scheduler.markSendAcked(this, address, message.delaySample.value);\n  }\n\n  handleIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHash(address, message.hash.value);\n  }\n\n  handleSignedIntegrityMessage(message, context) {\n    const address = Address.from(message.address);\n    context.getContentIntegrityVerifier(address).setHashSignature(address, message.signature.value);\n  }\n\n  handleRequestMessage(message) {\n    this.swarm.scheduler.enqueueRequest(this, Address.from(message.address));\n  }\n\n  handleCancelMessage(message) {\n    this.swarm.scheduler.cancelRequest(this, Address.from(message.address));\n  }\n\n  handleChokeMessage() {\n    this.state = PeerState.CHOKED;\n  }\n\n  handleUnchokeMessage() {\n    this.state = PeerState.READY;\n  }\n\n  isReady() {\n    return this.state === PeerState.READY;\n  }\n\n  isInitialized() {\n    return this.state !== PeerState.CONNECTING && this.state !== PeerState.AWAITING_HANDSHAKE;\n  }\n\n  sendHandshake() {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HandshakeMessage(\n      this.localId,\n      [\n        ...this.swarm.protocolOptions,\n        new encoding.SupportedMessagesProtocolOption(Object.keys(this.handlers)),\n      ],\n    ));\n  }\n\n  sendHave(address) {\n    const {encoding} = this.swarm;\n    this.sendBuffer.push(new encoding.HaveMessage(encoding.ChunkAddress.from(address)));\n  }\n\n  sendRequest(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.RequestMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendCancel(...addresses) {\n    const {encoding} = this.swarm;\n    addresses.forEach(address => {\n      this.sendBuffer.push(new encoding.CancelMessage(encoding.ChunkAddress.from(address)));\n    });\n  }\n\n  sendChunk(address, timestamp) {\n    const chunk = this.swarm.chunkBuffer.get(address);\n    if (chunk === undefined) {\n      return;\n    }\n\n    // TODO: omit signatures for bins the peer has already acked\n    const constituentSignatures = this.swarm.contentIntegrity.getConstituentSignatures(address);\n    if (constituentSignatures === undefined) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n\n    constituentSignatures\n      .reverse()\n      .forEach(({bin, signature}, i) => {\n        const address = encoding.ChunkAddress.from(new Address(bin));\n\n        this.sendBuffer.push(new encoding.IntegrityMessage(\n          address,\n          new encoding.IntegrityHash(signature.getHash()),\n        ));\n\n        if (i === 0) {\n          this.sendBuffer.push(new encoding.SignedIntegrityMessage(\n            address,\n            new encoding.Timestamp(timestamp),\n            new encoding.LiveSignature(signature.getSignatureHash()),\n          ));\n        }\n      });\n\n    this.sendBuffer.push(new encoding.DataMessage(encoding.ChunkAddress.from(address), chunk));\n\n    this.flush();\n  }\n\n  flush() {\n    if (this.sendBuffer.length === 0) {\n      return;\n    }\n\n    const {encoding} = this.swarm;\n    try {\n      this.channel.send(new encoding.Datagram(this.remoteId, this.sendBuffer));\n    } catch (e) {\n      console.log('error sending');\n      console.log(this.channel);\n      throw e;\n    }\n    this.sendBuffer = [];\n  }\n}\n\nclass SwarmSet extends EventEmitter {\n  constructor() {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.swarms = {};\n  }\n\n  insert(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] === undefined) {\n      this.swarms[key] = swarm;\n      this.emit('insert', swarm);\n    }\n  }\n\n  remove(swarm) {\n    const key = SwarmSet.swarmIdToKey(swarm.uri.swarmId);\n    if (this.swarms[key] !== undefined) {\n      delete this.swarms[key];\n      this.emit('remove', swarm);\n    }\n  }\n\n  get(swarmId) {\n    return this.swarms[SwarmSet.swarmIdToKey(swarmId)];\n  }\n\n  toArray() {\n    return Object.values(this.swarms);\n  }\n\n  static swarmIdToKey(swarmId) {\n    return swarmId.toBuffer().toString('base64');\n  }\n}\n\nexport class Client {\n  constructor() {\n    this.channels = [];\n\n    this.swarms = new SwarmSet();\n  }\n\n  publishSwarm(swarm) {\n    this.swarms.insert(swarm);\n  }\n\n  unpublishSwarm(swarm) {\n    this.swarms.remove(swarm);\n  }\n\n  joinSwarm(uri) {\n    const chunkSize = uri.protocolOptions[ProtocolOptions.ChunkSize];\n    const clientOptions = {\n      liveDiscardWindow: Math.ceil(BUFFER_SIZE / chunkSize),\n      uploadRateLimit: MAX_UPLOAD_RATE,\n    };\n\n    const swarm = new Swarm(uri, clientOptions);\n    this.swarms.insert(swarm);\n\n    return swarm;\n  }\n\n  leaveSwarm({id}) {\n    const swarm = this.swarms.get(id);\n    this.swarms.remove(swarm);\n  }\n\n  createChannel(conn) {\n    const channel = new Channel(conn, this.swarms);\n    this.channels.push(channel);\n\n    channel.once('close', () => {\n      const index = this.channels.indexOf(channel);\n      this.channels.splice(index, 1);\n    });\n  }\n}\n\nexport class Channel extends EventEmitter {\n  constructor(conn, swarms) {\n    super();\n\n    this.conn = conn;\n    this.swarms = swarms;\n    this.peers = {};\n\n    this.handleSwarmInsert = this.getOrCreatePeer.bind(this);\n    this.swarms.on('insert', this.handleSwarmInsert);\n\n    const liveSwarms = swarms.toArray();\n    this.conn.addEventListener('open', () => liveSwarms.forEach(this.handleSwarmInsert));\n    this.conn.addEventListener('message', this.handleMessage.bind(this));\n    this.conn.addEventListener('error', err => console.log('connection error:', err));\n    this.conn.addEventListener('close', this.handleClose.bind(this));\n  }\n\n  handleMessage(event) {\n    let data = new genericEncoding.Datagram();\n    try {\n      data.read(event.data);\n    } catch (e) {\n      console.log(event.data);\n      throw e;\n    }\n\n    let peer = this.peers[data.channelId];\n    if (peer === undefined) {\n      if (data.channelId !== 0) {\n        return;\n      }\n\n      let handshake;\n      try {\n        handshake = data.messages.next();\n      } catch (error) {\n        console.log('error decoding mesasge', error);\n        return;\n      }\n      if (handshake === undefined || handshake.type !== MessageTypes.HANDSHAKE) {\n        console.log('rejected new peer without handshake');\n        return;\n      }\n      const swarmId = handshake.options.find(({type}) => type === ProtocolOptions.SwarmIdentifier);\n      if (swarmId === undefined) {\n        // console.log('rejecting new peer with invalid swarm id');\n        return;\n      }\n      const swarm = this.swarms.get(SwarmId.from(swarmId.value));\n      if (swarm === undefined) {\n        // console.log('rejecting new peer requesting unknown swarm');\n        return;\n      }\n\n      peer = this.getOrCreatePeer(swarm);\n    }\n\n    data = new peer.swarm.encoding.Datagram();\n    data.read(event.data);\n    // console.log('RECEIVED', data.messages.toArray());\n    peer.handleData(data);\n  }\n\n  send(data) {\n    if (this.conn.readyState !== 'open') {\n      this.conn.addEventListener('open', () => this.conn.send(data.toBuffer()));\n      return;\n    }\n\n    try {\n      this.conn.send(data.toBuffer());\n    } catch (e) {\n      this.conn.close();\n    }\n  }\n\n  handleClose() {\n    this.swarms.removeListener('insert', this.handleSwarmInsert);\n    Object.values(this.peers).forEach(peer => peer.close());\n    this.emit('close');\n  }\n\n  getOrCreatePeer(swarm) {\n    let peer = Object.values(this.peers).find(p => p.swarm === swarm);\n    return peer || this.createPeer(swarm);\n  }\n\n  createPeer(swarm) {\n    const {peers, swarms} = this;\n\n    const peer = new Peer(swarm, this);\n    peers[peer.localId] = peer;\n    peer.init();\n\n    const destroyPeer = once(() => {\n      delete peers[peer.localId];\n      peer.close();\n\n      swarms.removeListener('remove', handleRemove);\n    });\n    setTimeout(() => {\n      if (!peer.isInitialized()) {\n        destroyPeer();\n      }\n    }, HANDSHAKE_TIMEOUT);\n\n    const handleRemove = removedSwarm => {\n      if (removedSwarm === swarm) {\n        destroyPeer();\n      }\n    };\n    swarms.on('remove', handleRemove);\n\n    return peer;\n  }\n}\n","import KBucket from 'k-bucket';\nimport {EventEmitter} from 'events';\nimport arrayBufferToHex from 'array-buffer-to-hex';\nimport arrayEqual from 'array-equal';\nimport randomBytes from 'randombytes';\nimport LRU from 'lru-cache';\nimport hexToUint8Array from './hexToUint8Array';\nimport idx from 'idx';\n\nconst SEND_REPLICAS = 2;\nconst MAX_HOPS = 10;\nconst DEFAULT_PEER_REQUEST_COUNT = 10;\nconst NUMBER_OF_NODES_PER_BUCKET = 2;\n\n// TODO: implement get/set\n// TODO: implement connection dump rpc for network debugging\n\nexport class Client extends EventEmitter {\n  constructor(id) {\n    super();\n    this.setMaxListeners(Infinity);\n\n    this.id = id;\n\n    // managed/unmanaged?\n    this.channels = new KBucket({\n      numberOfNodesPerKBucket: NUMBER_OF_NODES_PER_BUCKET,\n      localNodeId: this.id,\n    });\n    this.allChannels = new KBucket({\n      numberOfNodesPerKBucket: 100,\n      localNodeId: this.id,\n    });\n\n    this.channels.on('ping', this.handlePing.bind(this));\n    this.channels.on('removed', this.handleRemoved.bind(this));\n    this.channels.on('updated', this.handleUpdated.bind(this));\n    this.channels.on('added', this.handleAdded.bind(this));\n\n    this.knownPeerIds = {};\n    this.channelMap = {};\n\n    this.seenIds = new LRU({max: 1024});\n    this.knownRoutes = new LRU({\n      max: 1024,\n      maxAge: 1000 * 60,\n    });\n    this.callbacks = new LRU({max: 1024});\n\n    this.on('receive.peers.request', this.handlePeersRequest.bind(this));\n    this.on('receive.ping.request', this.handlePingRequest.bind(this));\n    this.on('receive.trace.request', this.handleTraceRequest.bind(this));\n    this.on('receive.callback.response', this.handleCallbackResponse.bind(this));\n\n    this.startPeerRequests();\n  }\n\n  // TODO: this is leaking connections\n  close() {\n    this.stopPeerRequests();\n    this.allChannels.toArray().forEach(({conn}) => conn && conn.close());\n    this.emit('close');\n    this.removeAllListeners();\n  }\n\n  startPeerRequests() {\n    let index = 0;\n\n    const next = () => {\n      let ids = Object.keys(this.knownPeerIds);\n\n      for (let retry = 0; retry <= ids.length; retry ++) {\n        if (index >= ids.length) {\n          index = 0;\n        }\n\n        const id = ids[index];\n        index ++;\n\n        if (id) {\n          return id;\n        }\n      }\n    };\n\n    this.peerRequestIvl = setInterval(() => {\n      const id = next();\n      if (id) {\n        this.sendPeerRequest(hexToUint8Array(id));\n      }\n    }, 5000);\n  }\n\n  stopPeerRequests() {\n    clearInterval(this.peerRequestIvl);\n  }\n\n  handlePing(channels, newChannel) {\n    // console.log('ping', channels, newChannel);\n    const PING_TIMEOUT = 10000;\n\n    channels.forEach(channel => {\n      const {id} = channel;\n\n      if (channel.isOpen()) {\n        this.addChannel(channel);\n        return;\n      }\n\n      setTimeout(() => {\n        const channel = this.getChannel(id);\n        if (channel && channel.isOpen()) {\n          this.addChannel(channel);\n          return;\n        }\n\n        this.removeChannel(id);\n        this.addChannel(newChannel);\n      }, PING_TIMEOUT);\n    });\n  }\n\n  addChannel(channel) {\n    this.channels.add(channel);\n    this.allChannels.add(channel);\n  }\n\n  removeChannel(id) {\n    this.channels.remove(id);\n    this.allChannels.remove(id);\n    // delete this.channelMap[arrayBufferToHex(id)];\n  }\n\n  getChannel(id) {\n    return this.channelMap[arrayBufferToHex(id)];\n  }\n\n  handleRemoved(channel) {\n    // console.log('remove', arrayBufferToHex(channel.id));\n    // console.trace();\n    if (channel.conn) {\n      channel.conn.close();\n    }\n    // console.log('handleRemoved', arrayBufferToHex(channel.id));\n  }\n\n  handleUpdated(oldChannel, newChannel) {\n    // console.log('update', {oldChannel, newChannel});\n    // console.log('handleUpdated', arrayBufferToHex(channel.id));\n  }\n\n  handleAdded(channel) {\n    if (channel.conn === undefined) {\n      // console.log('peers.discover', arrayBufferToHex(this.id), arrayBufferToHex(channel.id), this.channels.count());\n      this.emit('peers.discover', channel.id);\n    }\n    // console.log('add');\n    // emit event?\n    // console.log('handleAdded', arrayBufferToHex(channel.id));\n  }\n\n  createChannel(id, conn) {\n    const idHex = arrayBufferToHex(id);\n    const channel = new Channel(id, conn);\n\n    const oldChannel = this.channelMap[idHex];\n    if (oldChannel && oldChannel.conn) {\n      // console.warn('replacing open channel...');\n      oldChannel.conn.close();\n    }\n    this.channelMap[idHex] = channel;\n\n    const messages = [];\n    const bufferMessages = event => messages.push(event);\n    const handleMessage = this.handleMessage.bind(this, channel);\n\n    const handleOpen = () => {\n      // console.log('saw open', idHex);\n      this.addChannel(channel);\n\n      conn.removeEventListener('message', bufferMessages);\n      conn.addEventListener('message', handleMessage);\n      messages.forEach(handleMessage);\n\n      this.sendPeerRequest(id);\n    };\n\n    const handleClose = () => {\n      // console.log('saw close', idHex);\n      conn.removeEventListener('message', bufferMessages);\n      conn.removeEventListener('message', handleMessage);\n      conn.removeEventListener('open', handleOpen);\n\n      if (this.channelMap[idHex] === channel) {\n        this.removeChannel(id);\n        delete this.channelMap[idHex];\n      }\n    };\n\n    conn.addEventListener('message', bufferMessages);\n    conn.addEventListener('open', handleOpen, {once: true});\n    conn.addEventListener('close', handleClose, {once: true});\n  }\n\n  handleMessage(channel, event) {\n    // console.log('handleMessage', event.data);\n\n    channel.lastActive = Date.now();\n\n    let req;\n    try {\n      req = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n    const {type, id} = req;\n\n    if (req.trace) {\n      req.trace.push(arrayBufferToHex(this.id));\n      // console.log('TRACE', req);\n    }\n\n    if (this.seenIds.get(id)) {\n      // console.log('discarding seen message', id);\n      // if (req.trace) {\n      //   console.log('DROPPED', req);\n      // }\n      return;\n    }\n    this.seenIds.set(id, true);\n\n    if (!this.getChannel(channel.id)) {\n      console.warn('receiving channel is not known to dht', arrayBufferToHex(channel.id));\n    }\n\n    this.knownRoutes.set(req.from, channel.id);\n    // this.knownRoutes.set(req.from, arrayBufferToHex(channel.id));\n\n    const to = hexToUint8Array(req.to);\n    if (!arrayEqual(to, this.id)) {\n      this.forwardMessage(to, req);\n      return;\n    }\n\n    // if (req.trace) {\n    //   console.log('DELIVERED', req);\n    // }\n\n    const resCallback = (res={}, callback=null) => {\n      const from = hexToUint8Array(req.from);\n      const data = {re: id, ...res};\n      this.send(from, 'callback.response', data, callback);\n    };\n\n    // console.log(`emit receive.${type}`, req);\n    this.emit(`receive.${type}`, {data: req, callback: resCallback});\n  }\n\n  forwardMessage(to, data) {\n    // console.log('forwarding message', arrayBufferToHex(to), data);\n\n    if (data.hops >= MAX_HOPS) {\n      // console.log('discarding message with too many hops', data.id);\n      return;\n    }\n    data.hops ++;\n\n    this.sendRaw(to, JSON.stringify(data), data.trace);\n  }\n\n  sendPing(to, callback=()=>{}) {\n    this.send(to, 'ping.request', {}, callback);\n  }\n\n  handlePingRequest({data, callback}) {\n    // console.log('PING', data);\n    callback({});\n  }\n\n  handleTraceRequest({data, callback}) {\n    callback(data);\n  }\n\n  handleCallbackResponse({data, callback}) {\n    const reqCallback = this.callbacks.get(data.re);\n    if (reqCallback) {\n      reqCallback(data, callback);\n    } else {\n      // console.warn('<<< callback for %s expired', data.re);\n    }\n  }\n\n  sendPeerRequest(to, count=DEFAULT_PEER_REQUEST_COUNT) {\n    const timeout = setTimeout(() => {\n      delete this.knownPeerIds[arrayBufferToHex(to)];\n    }, 5000);\n    this.send(to, 'peers.request', {count}, res => {\n      clearTimeout(timeout);\n      this.handlePeersResponse(res);\n    });\n  }\n\n  handlePeersRequest({data: {count=DEFAULT_PEER_REQUEST_COUNT, from}, callback}) {\n    // console.log('handlePeersRequest');\n\n    const fromId = hexToUint8Array(from);\n\n    const ids = this.allChannels.closest(fromId)\n      .filter(({conn}) => conn != null)\n      .filter(({id}) => !arrayEqual(id, this.id) && !arrayEqual(id, fromId))\n      .map(({id}) => arrayBufferToHex(id))\n      .slice(0, count);\n    callback({ids});\n  }\n\n  handlePeersResponse(res) {\n    // console.log('handlePeersResponse', res.ids);\n\n    res.ids\n      .map(id => hexToUint8Array(id))\n      .filter(id => !arrayEqual(id, this.id))\n      .filter(id => {\n        const channel = this.getChannel(id);\n        return channel == null || channel.conn == null;\n      })\n      .forEach(id => {\n        // TODO: store peer provenance so we can ignore bad actors?\n        this.knownPeerIds[arrayBufferToHex(id)] = true;\n        this.addChannel(new Channel(id));\n      });\n  }\n\n  send(to, type, data={}, callback=null) {\n    if (typeof data === 'function') {\n      callback = data;\n      data = {};\n    }\n\n    const id = arrayBufferToHex(randomBytes(16));\n    this.seenIds.set(id, true);\n\n    if (callback != null) {\n      this.callbacks.set(id, callback);\n    }\n\n    const message = JSON.stringify({\n      id,\n      type,\n      from: arrayBufferToHex(this.id),\n      to: arrayBufferToHex(to),\n      trace: [arrayBufferToHex(this.id)],\n      hops: 0,\n      ...data,\n    });\n\n    // console.log('formatMessage', message);\n\n    this.sendRaw(to, message);\n  }\n\n  sendRaw(to, message, trace=[]) {\n    let closest = this.allChannels.closest(to)\n      .filter(channel => channel.isOpen())\n      .filter(({idHex}) => trace.indexOf(idHex) === -1)\n      .slice(0, SEND_REPLICAS);\n\n    const knownRoute = this.knownRoutes.get(arrayBufferToHex(to));\n    if (knownRoute) {\n      const channel = this.getChannel(knownRoute);\n      // const channel = this.allChannels.get(knownRoute);\n      if (channel != null && channel.isOpen()) {\n        closest.push(channel);\n      }\n    }\n\n    if (closest.length === 0) {\n      // console.warn(`closest value to ${arrayBufferToHex(to)} does not exist, dropping`, message);\n      return;\n    }\n\n    if (arrayEqual(closest[0].id, to)) {\n      closest = closest.slice(0, 1);\n    }\n    // console.log('send', closest.map(({id}) => arrayBufferToHex(id)), message);\n    // console.log(closest.length, closest.filter(({conn}) => !!conn).length, message);\n    closest.forEach(({id, conn}) => {\n      try {\n        // console.log('buffered amount before send', conn.bufferedAmount);\n        // console.log(message);\n        conn.send(message);\n      } catch (e) {\n        console.log('error sending to peer, closing', arrayBufferToHex(id), e);\n        conn.close();\n      }\n    });\n  }\n}\n\nexport class Channel {\n  constructor(id, conn) {\n    this.id = id;\n    this.idHex = arrayBufferToHex(id);\n    this.vectorClock = Date.now();\n    this.lastPing = Date.now();\n    this.conn = conn;\n\n    // console.log('channel', this);\n  }\n\n  isOpen() {\n    const readyState = idx(this, _ => _.conn.readyState);\n    return readyState === 1 || readyState === 'open';\n  }\n}\n\nexport class SubChannel {\n  constructor(client, peerId, id=arrayBufferToHex(randomBytes(16))) {\n    // console.log('subchannel created', id);\n    this.client = client;\n    this.peerId = peerId;\n    this.id = id;\n    this.readyState = SubChannel.ReadyStates.OPEN;\n    this.onmessage = () => {};\n\n    this.handleMessage = this.handleMessage.bind(this);\n    this.client.on('receive.subchannel.message', this.handleMessage);\n  }\n\n  handleMessage({data: {channelId, data}}) {\n    // console.log('receive.subchannel.message', channelId, this.id, data);\n\n    if (channelId === this.id) {\n      this.onmessage({data});\n    }\n  }\n\n  send(data) {\n    this.client.send(\n      this.peerId,\n      'subchannel.message',\n      {\n        channelId: this.id,\n        data: data,\n      },\n    );\n  }\n\n  close() {\n    this.readyState = SubChannel.ReadyStates.CLOSED;\n    this.client.removeListener('receive.subchannel.message', this.handleMessage);\n  }\n}\n\nSubChannel.ReadyStates = {\n  OPEN: 1,\n  CLOSED: 3,\n};\n","import URLSafeBase64 from 'urlsafe-base64';\nimport SwarmId from './swarmid';\nimport {ProtocolOptions} from './constants';\n\nconst protocolOptionToKey = {\n  [ProtocolOptions.ContentIntegrityProtectionMethod]: 'x.im',\n  [ProtocolOptions.MerkleHashTreeFunction]: 'x.hf',\n  [ProtocolOptions.LiveSignatureAlgorithm]: 'x.sa',\n  [ProtocolOptions.ChunkAddressingMethod]: 'x.am',\n  [ProtocolOptions.ChunkSize]: 'x.cs',\n};\n\n// TODO: dn with stream name\n// TODO: as to m3u8 url?\nexport default class URI {\n  constructor(swarmId, protocolOptions) {\n    this.swarmId = swarmId;\n    this.protocolOptions = protocolOptions;\n  }\n\n  toString() {\n    const swarmId = URLSafeBase64.encode(this.swarmId.toBuffer());\n    const protocolOptions = Object.entries(this.protocolOptions)\n      .map(([protocolOption, value]) => `${protocolOptionToKey[protocolOption]}=${value}`)\n      .join('&');\n    return `magnet:?xt=urn:ppspp:${swarmId}&${protocolOptions}`;\n  }\n\n  static parse(uriString) {\n    if (!uriString.startsWith('magnet:')) {\n      throw new Error('invalid uri: expected magnet');\n    }\n\n    const args = uriString.substring(8)\n      .split('&')\n      .map(query => {\n        const [key, value] = query.split('=');\n        return [key, decodeURIComponent(value)];\n      });\n\n    const protocolOptions = Object.entries(protocolOptionToKey)\n      .reduce((protocolOptions, [protocolOption, key]) => {\n        const arg = args.find(([argKey]) => argKey === key);\n        if (arg === undefined) {\n          throw new Error(`invalid uri: missing ${key}`);\n        }\n        return {...protocolOptions, [protocolOption]: parseFloat(arg[1])};\n      }, {});\n\n    const xt = args.find(([key, value]) => key === 'xt' && value.startsWith('urn:ppspp:'));\n    if (xt === undefined) {\n      throw new Error('invalid uri: missing suitable xt');\n    }\n    const swarmId = SwarmId.from(URLSafeBase64.decode(xt[1].substring(10)));\n\n    return new URI(swarmId, protocolOptions);\n  }\n}\n","export default function binSearch(max, comparator) {\n  let left = 0;\n  let right = max;\n\n  while (left <= right) {\n    const mid = left + Math.floor((right - left) / 2);\n    const order = comparator(mid, left, right);\n\n    if (order < 0) {\n      left = mid + 1;\n    } else if (order > 0) {\n      right = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(left + 1);\n}\n","module.exports = require('detect-node')\n  ? require('./node')\n  : require('./browser');\n"],"sourceRoot":""}